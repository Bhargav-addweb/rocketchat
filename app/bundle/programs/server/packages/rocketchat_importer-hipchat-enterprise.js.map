{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:importer-hipchat-enterprise/info.js","meteor://ðŸ’»app/packages/rocketchat:importer-hipchat-enterprise/server/importer.js","meteor://ðŸ’»app/packages/rocketchat:importer-hipchat-enterprise/server/adder.js"],"names":["module","export","HipChatEnterpriseImporterInfo","ImporterInfo","watch","require","v","constructor","text","href","HipChatEnterpriseImporter","Base","ProgressStep","Selection","SelectionChannel","SelectionUser","Readable","path","default","s","TurndownService","turndownService","strongDelimiter","hr","br","addRule","filter","replacement","content","node","src","getAttribute","alt","title","info","zlib","tarStream","extract","messages","Map","directMessages","prepare","dataURI","sentContentType","fileName","tempUsers","tempRooms","tempMessages","tempDirectMessages","promise","Promise","resolve","reject","on","Meteor","bindEnvironment","header","stream","next","name","endsWith","resume","parse","data","chunk","push","logger","debug","dataString","Buffer","concat","toString","file","JSON","base","updateProgress","PREPARING_USERS","u","id","User","email","username","mention_name","avatar","replace","timezone","isDeleted","is_deleted","PREPARING_CHANNELS","r","Room","creator","owner","created","Date","slugify","isPrivate","privacy","isArchived","is_archived","topic","type","dir","split","roomIdentifier","msgs","m","PrivateUserMessage","senderId","sender","receiverId","receiver","message","indexOf","ts","timestamp","attachment","attachment_path","set","roomMsgs","UserMessage","userId","NotificationMessage","alias","message_format","turndown","TopicRoomMessage","warn","err","usersId","collection","insert","import","importRecord","_id","importer","users","findOne","updateRecord","length","addCountToTotal","channelsId","channels","PREPARING_MESSAGES","messagesCount","channel","entries","get","messagesstatus","getBSONSize","getMaxBSONSize","getBSONSafeArraysFromAnArray","forEach","splitMsg","i","messagesId","directMsgUser","ERROR","selectionUsers","map","selectionChannels","selectionMessages","count","USER_SELECTION","read","pipe","createGunzip","startImport","importSelection","started","now","user","user_id","do_import","update","$set","c","channel_id","startedByUserId","defer","IMPORTING_USERS","runAsUser","existantUser","RocketChat","models","Users","findOneByEmailAddress","findOneByUsername","rocketId","$addToSet","importIds","password","Random","Accounts","createUser","call","joinDefaultChannelsSilenced","setName","deleted","addCountCompleted","IMPORTING_CHANNELS","existantRoom","Rooms","findOneByName","toUpperCase","creatorId","roomInfo","rid","IMPORTING_MESSAGES","ch","messagesMap","hipChannel","getChannelFromRoomIdentifier","room","findOneById","fields","usernames","t","msgGroupData","msg","isNaN","getRocketUserFromUserId","sendMessage","Messages","createRoomSettingsChangedWithTypeRoomIdMessageAndUser","directMsgRoom","directMessagesMap","hipUser","getUserFromDirectMessageIdentifier","sort","join","details","message_id","size","uploadFile","url","FINISHING","DONE","e","error","timeTook","log","getProgress","getSelection","directIdentifier","Importers","add"],"mappings":"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","file":"/packages/rocketchat_importer-hipchat-enterprise.js","sourcesContent":["import { ImporterInfo } from 'meteor/rocketchat:importer';\n\nexport class HipChatEnterpriseImporterInfo extends ImporterInfo {\n\tconstructor() {\n\t\tsuper('hipchatenterprise', 'HipChat (tar.gz)', 'application/gzip', [\n\t\t\t{\n\t\t\t\ttext: 'Importer_HipChatEnterprise_Information',\n\t\t\t\thref: 'https://rocket.chat/docs/administrator-guides/import/hipchat/enterprise/',\n\t\t\t},\n\t\t]);\n\t}\n}\n","import {\n\tBase,\n\tProgressStep,\n\tSelection,\n\tSelectionChannel,\n\tSelectionUser,\n} from 'meteor/rocketchat:importer';\nimport { Readable } from 'stream';\nimport path from 'path';\nimport s from 'underscore.string';\nimport TurndownService from 'turndown';\n\nconst turndownService = new TurndownService({\n\tstrongDelimiter: '*',\n\thr: '',\n\tbr: '\\n',\n});\n\nturndownService.addRule('strikethrough', {\n\tfilter: 'img',\n\n\treplacement(content, node) {\n\t\tconst src = node.getAttribute('src') || '';\n\t\tconst alt = node.alt || node.title || src;\n\t\treturn src ? `[${ alt }](${ src })` : '';\n\t},\n});\n\nexport class HipChatEnterpriseImporter extends Base {\n\tconstructor(info) {\n\t\tsuper(info);\n\n\t\tthis.Readable = Readable;\n\t\tthis.zlib = require('zlib');\n\t\tthis.tarStream = require('tar-stream');\n\t\tthis.extract = this.tarStream.extract();\n\t\tthis.path = path;\n\t\tthis.messages = new Map();\n\t\tthis.directMessages = new Map();\n\t}\n\n\tprepare(dataURI, sentContentType, fileName) {\n\t\tsuper.prepare(dataURI, sentContentType, fileName);\n\n\t\tconst tempUsers = [];\n\t\tconst tempRooms = [];\n\t\tconst tempMessages = new Map();\n\t\tconst tempDirectMessages = new Map();\n\t\tconst promise = new Promise((resolve, reject) => {\n\t\t\tthis.extract.on('entry', Meteor.bindEnvironment((header, stream, next) => {\n\t\t\t\tif (!header.name.endsWith('.json')) {\n\t\t\t\t\tstream.resume();\n\t\t\t\t\treturn next();\n\t\t\t\t}\n\n\t\t\t\tconst info = this.path.parse(header.name);\n\t\t\t\tconst data = [];\n\n\t\t\t\tstream.on('data', Meteor.bindEnvironment((chunk) => {\n\t\t\t\t\tdata.push(chunk);\n\t\t\t\t}));\n\n\t\t\t\tstream.on('end', Meteor.bindEnvironment(() => {\n\t\t\t\t\tthis.logger.debug(`Processing the file: ${ header.name }`);\n\t\t\t\t\tconst dataString = Buffer.concat(data).toString();\n\t\t\t\t\tconst file = JSON.parse(dataString);\n\n\t\t\t\t\tif (info.base === 'users.json') {\n\t\t\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_USERS);\n\t\t\t\t\t\tfor (const u of file) {\n\t\t\t\t\t\t\t// if (!u.User.email) {\n\t\t\t\t\t\t\t// \t// continue;\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\ttempUsers.push({\n\t\t\t\t\t\t\t\tid: u.User.id,\n\t\t\t\t\t\t\t\temail: u.User.email,\n\t\t\t\t\t\t\t\tname: u.User.name,\n\t\t\t\t\t\t\t\tusername: u.User.mention_name,\n\t\t\t\t\t\t\t\tavatar: u.User.avatar && u.User.avatar.replace(/\\n/g, ''),\n\t\t\t\t\t\t\t\ttimezone: u.User.timezone,\n\t\t\t\t\t\t\t\tisDeleted: u.User.is_deleted,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (info.base === 'rooms.json') {\n\t\t\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_CHANNELS);\n\t\t\t\t\t\tfor (const r of file) {\n\t\t\t\t\t\t\ttempRooms.push({\n\t\t\t\t\t\t\t\tid: r.Room.id,\n\t\t\t\t\t\t\t\tcreator: r.Room.owner,\n\t\t\t\t\t\t\t\tcreated: new Date(r.Room.created),\n\t\t\t\t\t\t\t\tname: s.slugify(r.Room.name),\n\t\t\t\t\t\t\t\tisPrivate: r.Room.privacy === 'private',\n\t\t\t\t\t\t\t\tisArchived: r.Room.is_archived,\n\t\t\t\t\t\t\t\ttopic: r.Room.topic,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (info.base === 'history.json') {\n\t\t\t\t\t\tconst [type, id] = info.dir.split('/'); // ['users', '1']\n\t\t\t\t\t\tconst roomIdentifier = `${ type }/${ id }`;\n\t\t\t\t\t\tif (type === 'users') {\n\t\t\t\t\t\t\tconst msgs = [];\n\t\t\t\t\t\t\tfor (const m of file) {\n\t\t\t\t\t\t\t\tif (m.PrivateUserMessage) {\n\t\t\t\t\t\t\t\t\tmsgs.push({\n\t\t\t\t\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ m.PrivateUserMessage.id }`,\n\t\t\t\t\t\t\t\t\t\tsenderId: m.PrivateUserMessage.sender.id,\n\t\t\t\t\t\t\t\t\t\treceiverId: m.PrivateUserMessage.receiver.id,\n\t\t\t\t\t\t\t\t\t\ttext: m.PrivateUserMessage.message.indexOf('/me ') === -1 ? m.PrivateUserMessage.message : `${ m.PrivateUserMessage.message.replace(/\\/me /, '_') }_`,\n\t\t\t\t\t\t\t\t\t\tts: new Date(m.PrivateUserMessage.timestamp.split(' ')[0]),\n\t\t\t\t\t\t\t\t\t\tattachment: m.PrivateUserMessage.attachment,\n\t\t\t\t\t\t\t\t\t\tattachment_path: m.PrivateUserMessage.attachment_path,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttempDirectMessages.set(roomIdentifier, msgs);\n\t\t\t\t\t\t} else if (type === 'rooms') {\n\t\t\t\t\t\t\tconst roomMsgs = [];\n\n\t\t\t\t\t\t\tfor (const m of file) {\n\t\t\t\t\t\t\t\tif (m.UserMessage) {\n\t\t\t\t\t\t\t\t\troomMsgs.push({\n\t\t\t\t\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ id }-${ m.UserMessage.id }`,\n\t\t\t\t\t\t\t\t\t\tuserId: m.UserMessage.sender.id,\n\t\t\t\t\t\t\t\t\t\ttext: m.UserMessage.message.indexOf('/me ') === -1 ? m.UserMessage.message : `${ m.UserMessage.message.replace(/\\/me /, '_') }_`,\n\t\t\t\t\t\t\t\t\t\tts: new Date(m.UserMessage.timestamp.split(' ')[0]),\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else if (m.NotificationMessage) {\n\t\t\t\t\t\t\t\t\tconst text = m.NotificationMessage.message.indexOf('/me ') === -1 ? m.NotificationMessage.message : `${ m.NotificationMessage.message.replace(/\\/me /, '_') }_`;\n\n\t\t\t\t\t\t\t\t\troomMsgs.push({\n\t\t\t\t\t\t\t\t\t\ttype: 'user',\n\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ id }-${ m.NotificationMessage.id }`,\n\t\t\t\t\t\t\t\t\t\tuserId: 'rocket.cat',\n\t\t\t\t\t\t\t\t\t\talias: m.NotificationMessage.sender,\n\t\t\t\t\t\t\t\t\t\ttext: m.NotificationMessage.message_format === 'html' ? turndownService.turndown(text) : text,\n\t\t\t\t\t\t\t\t\t\tts: new Date(m.NotificationMessage.timestamp.split(' ')[0]),\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else if (m.TopicRoomMessage) {\n\t\t\t\t\t\t\t\t\troomMsgs.push({\n\t\t\t\t\t\t\t\t\t\ttype: 'topic',\n\t\t\t\t\t\t\t\t\t\tid: `hipchatenterprise-${ id }-${ m.TopicRoomMessage.id }`,\n\t\t\t\t\t\t\t\t\t\tuserId: m.TopicRoomMessage.sender.id,\n\t\t\t\t\t\t\t\t\t\tts: new Date(m.TopicRoomMessage.timestamp.split(' ')[0]),\n\t\t\t\t\t\t\t\t\t\ttext: m.TopicRoomMessage.message,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthis.logger.warn('HipChat Enterprise importer isn\\'t configured to handle this message:', m);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttempMessages.set(roomIdentifier, roomMsgs);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.logger.warn(`HipChat Enterprise importer isn't configured to handle \"${ type }\" files.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// What are these files!?\n\t\t\t\t\t\tthis.logger.warn(`HipChat Enterprise importer doesn't know what to do with the file \"${ header.name }\" :o`, info);\n\t\t\t\t\t}\n\t\t\t\t\tnext();\n\t\t\t\t}));\n\t\t\t\tstream.on('error', () => next());\n\n\t\t\t\tstream.resume();\n\t\t\t}));\n\n\t\t\tthis.extract.on('error', (err) => {\n\t\t\t\tthis.logger.warn('extract error:', err);\n\t\t\t\treject();\n\t\t\t});\n\n\t\t\tthis.extract.on('finish', Meteor.bindEnvironment(() => {\n\t\t\t\t// Insert the users record, eventually this might have to be split into several ones as well\n\t\t\t\t// if someone tries to import a several thousands users instance\n\t\t\t\tconst usersId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'users', users: tempUsers });\n\t\t\t\tthis.users = this.collection.findOne(usersId);\n\t\t\t\tsuper.updateRecord({ 'count.users': tempUsers.length });\n\t\t\t\tsuper.addCountToTotal(tempUsers.length);\n\n\t\t\t\t// Insert the channels records.\n\t\t\t\tconst channelsId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'channels', channels: tempRooms });\n\t\t\t\tthis.channels = this.collection.findOne(channelsId);\n\t\t\t\tsuper.updateRecord({ 'count.channels': tempRooms.length });\n\t\t\t\tsuper.addCountToTotal(tempRooms.length);\n\n\t\t\t\t// Save the messages records to the import record for `startImport` usage\n\t\t\t\tsuper.updateProgress(ProgressStep.PREPARING_MESSAGES);\n\t\t\t\tlet messagesCount = 0;\n\t\t\t\tfor (const [channel, msgs] of tempMessages.entries()) {\n\t\t\t\t\tif (!this.messages.get(channel)) {\n\t\t\t\t\t\tthis.messages.set(channel, new Map());\n\t\t\t\t\t}\n\n\t\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\t\tsuper.updateRecord({ messagesstatus: channel });\n\n\t\t\t\t\tif (Base.getBSONSize(msgs) > Base.getMaxBSONSize()) {\n\t\t\t\t\t\tBase.getBSONSafeArraysFromAnArray(msgs).forEach((splitMsg, i) => {\n\t\t\t\t\t\t\tconst messagesId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'messages', name: `${ channel }/${ i }`, messages: splitMsg });\n\t\t\t\t\t\t\tthis.messages.get(channel).set(`${ channel }.${ i }`, this.collection.findOne(messagesId));\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'messages', name: `${ channel }`, messages: msgs });\n\t\t\t\t\t\tthis.messages.get(channel).set(channel, this.collection.findOne(messagesId));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (const [directMsgUser, msgs] of tempDirectMessages.entries()) {\n\t\t\t\t\tthis.logger.debug(`Preparing the direct messages for: ${ directMsgUser }`);\n\t\t\t\t\tif (!this.directMessages.get(directMsgUser)) {\n\t\t\t\t\t\tthis.directMessages.set(directMsgUser, new Map());\n\t\t\t\t\t}\n\n\t\t\t\t\tmessagesCount += msgs.length;\n\t\t\t\t\tsuper.updateRecord({ messagesstatus: directMsgUser });\n\n\t\t\t\t\tif (Base.getBSONSize(msgs) > Base.getMaxBSONSize()) {\n\t\t\t\t\t\tBase.getBSONSafeArraysFromAnArray(msgs).forEach((splitMsg, i) => {\n\t\t\t\t\t\t\tconst messagesId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'directMessages', name: `${ directMsgUser }/${ i }`, messages: splitMsg });\n\t\t\t\t\t\t\tthis.directMessages.get(directMsgUser).set(`${ directMsgUser }.${ i }`, this.collection.findOne(messagesId));\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst messagesId = this.collection.insert({ import: this.importRecord._id, importer: this.name, type: 'directMessages', name: `${ directMsgUser }`, messages: msgs });\n\t\t\t\t\t\tthis.directMessages.get(directMsgUser).set(directMsgUser, this.collection.findOne(messagesId));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsuper.updateRecord({ 'count.messages': messagesCount, messagesstatus: null });\n\t\t\t\tsuper.addCountToTotal(messagesCount);\n\n\t\t\t\t// Ensure we have some users, channels, and messages\n\t\t\t\tif (tempUsers.length === 0 || tempRooms.length === 0 || messagesCount === 0) {\n\t\t\t\t\tthis.logger.warn(`The loaded users count ${ tempUsers.length }, the loaded rooms ${ tempRooms.length }, and the loaded messages ${ messagesCount }`);\n\t\t\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\t\t\treject();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst selectionUsers = tempUsers.map((u) => new SelectionUser(u.id, u.username, u.email, u.isDeleted, false, true));\n\t\t\t\tconst selectionChannels = tempRooms.map((r) => new SelectionChannel(r.id, r.name, r.isArchived, true, r.isPrivate));\n\t\t\t\tconst selectionMessages = this.importRecord.count.messages;\n\n\t\t\t\tsuper.updateProgress(ProgressStep.USER_SELECTION);\n\n\t\t\t\tresolve(new Selection(this.name, selectionUsers, selectionChannels, selectionMessages));\n\t\t\t}));\n\n\t\t\t// Wish I could make this cleaner :(\n\t\t\tconst split = dataURI.split(',');\n\t\t\tconst read = new this.Readable;\n\t\t\tread.push(new Buffer(split[split.length - 1], 'base64'));\n\t\t\tread.push(null);\n\t\t\tread.pipe(this.zlib.createGunzip()).pipe(this.extract);\n\t\t});\n\n\t\treturn promise;\n\t}\n\n\tstartImport(importSelection) {\n\t\tsuper.startImport(importSelection);\n\t\tconst started = Date.now();\n\n\t\t// Ensure we're only going to import the users that the user has selected\n\t\tfor (const user of importSelection.users) {\n\t\t\tfor (const u of this.users.users) {\n\t\t\t\tif (u.id === user.user_id) {\n\t\t\t\t\tu.do_import = user.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.users._id }, { $set: { users: this.users.users } });\n\n\t\t// Ensure we're only importing the channels the user has selected.\n\t\tfor (const channel of importSelection.channels) {\n\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\tif (c.id === channel.channel_id) {\n\t\t\t\t\tc.do_import = channel.do_import;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.collection.update({ _id: this.channels._id }, { $set: { channels: this.channels.channels } });\n\n\t\tconst startedByUserId = Meteor.userId();\n\t\tMeteor.defer(() => {\n\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_USERS);\n\n\t\t\ttry {\n\t\t\t\t// Import the users\n\t\t\t\tfor (const u of this.users.users) {\n\t\t\t\t\tthis.logger.debug(`Starting the user import: ${ u.username } and are we importing them? ${ u.do_import }`);\n\t\t\t\t\tif (!u.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tlet existantUser;\n\n\t\t\t\t\t\tif (u.email) {\n\t\t\t\t\t\t\tRocketChat.models.Users.findOneByEmailAddress(u.email);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If we couldn't find one by their email address, try to find an existing user by their username\n\t\t\t\t\t\tif (!existantUser) {\n\t\t\t\t\t\t\texistantUser = RocketChat.models.Users.findOneByUsername(u.username);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (existantUser) {\n\t\t\t\t\t\t\t// since we have an existing user, let's try a few things\n\t\t\t\t\t\t\tu.rocketId = existantUser._id;\n\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: u.rocketId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst user = { email: u.email, password: Random.id() };\n\t\t\t\t\t\t\tif (!user.email) {\n\t\t\t\t\t\t\t\tdelete user.email;\n\t\t\t\t\t\t\t\tuser.username = u.username;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst userId = Accounts.createUser(user);\n\t\t\t\t\t\t\tMeteor.runAsUser(userId, () => {\n\t\t\t\t\t\t\t\tMeteor.call('setUsername', u.username, { joinDefaultChannelsSilenced: true });\n\t\t\t\t\t\t\t\t// TODO: Use moment timezone to calc the time offset - Meteor.call 'userSetUtcOffset', user.tz_offset / 3600\n\t\t\t\t\t\t\t\tRocketChat.models.Users.setName(userId, u.name);\n\t\t\t\t\t\t\t\t// TODO: Think about using a custom field for the users \"title\" field\n\n\t\t\t\t\t\t\t\tif (u.avatar) {\n\t\t\t\t\t\t\t\t\tMeteor.call('setAvatarFromService', `data:image/png;base64,${ u.avatar }`);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Deleted users are 'inactive' users in Rocket.Chat\n\t\t\t\t\t\t\t\tif (u.deleted) {\n\t\t\t\t\t\t\t\t\tMeteor.call('setUserActiveStatus', userId, false);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tRocketChat.models.Users.update({ _id: userId }, { $addToSet: { importIds: u.id } });\n\t\t\t\t\t\t\t\tu.rocketId = userId;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.collection.update({ _id: this.users._id }, { $set: { users: this.users.users } });\n\n\t\t\t\t// Import the channels\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_CHANNELS);\n\t\t\t\tfor (const c of this.channels.channels) {\n\t\t\t\t\tif (!c.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tconst existantRoom = RocketChat.models.Rooms.findOneByName(c.name);\n\t\t\t\t\t\t// If the room exists or the name of it is 'general', then we don't need to create it again\n\t\t\t\t\t\tif (existantRoom || c.name.toUpperCase() === 'GENERAL') {\n\t\t\t\t\t\t\tc.rocketId = c.name.toUpperCase() === 'GENERAL' ? 'GENERAL' : existantRoom._id;\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $addToSet: { importIds: c.id } });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Find the rocketchatId of the user who created this channel\n\t\t\t\t\t\t\tlet creatorId = startedByUserId;\n\t\t\t\t\t\t\tfor (const u of this.users.users) {\n\t\t\t\t\t\t\t\tif (u.id === c.creator && u.do_import) {\n\t\t\t\t\t\t\t\t\tcreatorId = u.rocketId;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Create the channel\n\t\t\t\t\t\t\tMeteor.runAsUser(creatorId, () => {\n\t\t\t\t\t\t\t\tconst roomInfo = Meteor.call(c.isPrivate ? 'createPrivateGroup' : 'createChannel', c.name, []);\n\t\t\t\t\t\t\t\tc.rocketId = roomInfo.rid;\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tRocketChat.models.Rooms.update({ _id: c.rocketId }, { $set: { ts: c.created, topic: c.topic }, $addToSet: { importIds: c.id } });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.collection.update({ _id: this.channels._id }, { $set: { channels: this.channels.channels } });\n\n\t\t\t\t// Import the Messages\n\t\t\t\tsuper.updateProgress(ProgressStep.IMPORTING_MESSAGES);\n\t\t\t\tfor (const [ch, messagesMap] of this.messages.entries()) {\n\t\t\t\t\tconst hipChannel = this.getChannelFromRoomIdentifier(ch);\n\t\t\t\t\tif (!hipChannel.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst room = RocketChat.models.Rooms.findOneById(hipChannel.rocketId, { fields: { usernames: 1, t: 1, name: 1 } });\n\t\t\t\t\tMeteor.runAsUser(startedByUserId, () => {\n\t\t\t\t\t\tfor (const [msgGroupData, msgs] of messagesMap.entries()) {\n\t\t\t\t\t\t\tsuper.updateRecord({ messagesstatus: `${ ch }/${ msgGroupData }.${ msgs.messages.length }` });\n\t\t\t\t\t\t\tfor (const msg of msgs.messages) {\n\t\t\t\t\t\t\t\tif (isNaN(msg.ts)) {\n\t\t\t\t\t\t\t\t\tthis.logger.warn(`Timestamp on a message in ${ ch }/${ msgGroupData } is invalid`);\n\t\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst creator = this.getRocketUserFromUserId(msg.userId);\n\t\t\t\t\t\t\t\tif (creator) {\n\t\t\t\t\t\t\t\t\tswitch (msg.type) {\n\t\t\t\t\t\t\t\t\t\tcase 'user':\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(creator, {\n\t\t\t\t\t\t\t\t\t\t\t\t_id: msg.id,\n\t\t\t\t\t\t\t\t\t\t\t\tts: msg.ts,\n\t\t\t\t\t\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\t\t\talias: msg.alias,\n\t\t\t\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t_id: creator._id,\n\t\t\t\t\t\t\t\t\t\t\t\t\tusername: creator.username,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t}, room, true);\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\tcase 'topic':\n\t\t\t\t\t\t\t\t\t\t\tRocketChat.models.Messages.createRoomSettingsChangedWithTypeRoomIdMessageAndUser('room_changed_topic', room._id, msg.text, creator, { _id: msg.id, ts: msg.ts });\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// Import the Direct Messages\n\t\t\t\tfor (const [directMsgRoom, directMessagesMap] of this.directMessages.entries()) {\n\t\t\t\t\tconst hipUser = this.getUserFromDirectMessageIdentifier(directMsgRoom);\n\t\t\t\t\tif (!hipUser || !hipUser.do_import) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Verify this direct message user's room is valid (confusing but idk how else to explain it)\n\t\t\t\t\tif (!this.getRocketUserFromUserId(hipUser.id)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (const [msgGroupData, msgs] of directMessagesMap.entries()) {\n\t\t\t\t\t\tsuper.updateRecord({ messagesstatus: `${ directMsgRoom }/${ msgGroupData }.${ msgs.messages.length }` });\n\t\t\t\t\t\tfor (const msg of msgs.messages) {\n\t\t\t\t\t\t\tif (isNaN(msg.ts)) {\n\t\t\t\t\t\t\t\tthis.logger.warn(`Timestamp on a message in ${ directMsgRoom }/${ msgGroupData } is invalid`);\n\t\t\t\t\t\t\t\tsuper.addCountCompleted(1);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// make sure the message sender is a valid user inside rocket.chat\n\t\t\t\t\t\t\tconst sender = this.getRocketUserFromUserId(msg.senderId);\n\t\t\t\t\t\t\tif (!sender) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// make sure the receiver of the message is a valid rocket.chat user\n\t\t\t\t\t\t\tconst receiver = this.getRocketUserFromUserId(msg.receiverId);\n\t\t\t\t\t\t\tif (!receiver) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet room = RocketChat.models.Rooms.findOneById([receiver._id, sender._id].sort().join(''));\n\t\t\t\t\t\t\tif (!room) {\n\t\t\t\t\t\t\t\tMeteor.runAsUser(sender._id, () => {\n\t\t\t\t\t\t\t\t\tconst roomInfo = Meteor.call('createDirectMessage', receiver.username);\n\t\t\t\t\t\t\t\t\troom = RocketChat.models.Rooms.findOneById(roomInfo.rid);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tMeteor.runAsUser(sender._id, () => {\n\t\t\t\t\t\t\t\tif (msg.attachment_path) {\n\t\t\t\t\t\t\t\t\tconst details = {\n\t\t\t\t\t\t\t\t\t\tmessage_id: msg.id,\n\t\t\t\t\t\t\t\t\t\tname: msg.attachment.name,\n\t\t\t\t\t\t\t\t\t\tsize: msg.attachment.size,\n\t\t\t\t\t\t\t\t\t\tuserId: sender._id,\n\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tthis.uploadFile(details, msg.attachment.url, sender, room, msg.ts);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tRocketChat.sendMessage(sender, {\n\t\t\t\t\t\t\t\t\t\t_id: msg.id,\n\t\t\t\t\t\t\t\t\t\tts: msg.ts,\n\t\t\t\t\t\t\t\t\t\tmsg: msg.text,\n\t\t\t\t\t\t\t\t\t\trid: room._id,\n\t\t\t\t\t\t\t\t\t\tu: {\n\t\t\t\t\t\t\t\t\t\t\t_id: sender._id,\n\t\t\t\t\t\t\t\t\t\t\tusername: sender.username,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}, room, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsuper.updateProgress(ProgressStep.FINISHING);\n\t\t\t\tsuper.updateProgress(ProgressStep.DONE);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logger.error(e);\n\t\t\t\tsuper.updateProgress(ProgressStep.ERROR);\n\t\t\t}\n\n\t\t\tconst timeTook = Date.now() - started;\n\t\t\tthis.logger.log(`HipChat Enterprise Import took ${ timeTook } milliseconds.`);\n\t\t});\n\n\t\treturn super.getProgress();\n\t}\n\n\tgetSelection() {\n\t\tconst selectionUsers = this.users.users.map((u) => new SelectionUser(u.id, u.username, u.email, false, false, true));\n\t\tconst selectionChannels = this.channels.channels.map((c) => new SelectionChannel(c.id, c.name, false, true, c.isPrivate));\n\t\tconst selectionMessages = this.importRecord.count.messages;\n\n\t\treturn new Selection(this.name, selectionUsers, selectionChannels, selectionMessages);\n\t}\n\n\tgetChannelFromRoomIdentifier(roomIdentifier) {\n\t\tfor (const ch of this.channels.channels) {\n\t\t\tif (`rooms/${ ch.id }` === roomIdentifier) {\n\t\t\t\treturn ch;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetUserFromDirectMessageIdentifier(directIdentifier) {\n\t\tfor (const u of this.users.users) {\n\t\t\tif (`users/${ u.id }` === directIdentifier) {\n\t\t\t\treturn u;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetRocketUserFromUserId(userId) {\n\t\tif (userId === 'rocket.cat') {\n\t\t\treturn RocketChat.models.Users.findOneById(userId, { fields: { username: 1 } });\n\t\t}\n\n\t\tfor (const u of this.users.users) {\n\t\t\tif (u.id === userId) {\n\t\t\t\treturn RocketChat.models.Users.findOneById(u.rocketId, { fields: { username: 1 } });\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Importers } from 'meteor/rocketchat:importer';\nimport { HipChatEnterpriseImporterInfo } from '../info';\nimport { HipChatEnterpriseImporter } from './importer';\n\nImporters.add(new HipChatEnterpriseImporterInfo(), HipChatEnterpriseImporter);\n"]}