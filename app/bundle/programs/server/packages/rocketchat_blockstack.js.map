{"version":3,"sources":["meteor://ðŸ’»app/packages/rocketchat:blockstack/server/main.js","meteor://ðŸ’»app/packages/rocketchat:blockstack/server/logger.js","meteor://ðŸ’»app/packages/rocketchat:blockstack/server/loginHandler.js","meteor://ðŸ’»app/packages/rocketchat:blockstack/server/routes.js","meteor://ðŸ’»app/packages/rocketchat:blockstack/server/settings.js","meteor://ðŸ’»app/packages/rocketchat:blockstack/server/tokenHandler.js","meteor://ðŸ’»app/packages/rocketchat:blockstack/server/userHandler.js"],"names":["module","watch","require","export","logger","Logger","v","Meteor","Accounts","RocketChat","updateOrCreateUser","handleAccessToken","registerLoginHandler","loginRequest","blockstack","authResponse","settings","get","debug","auth","result","serviceData","options","undefined","userId","type","error","Error","LoginCancelledError","numericError","isNew","user","models","Users","findOneById","fields","username","services","image","runAsUser","_id","setUserAvatar","e","console","WebApp","connectHandlers","use","bindEnvironment","req","res","name","startUrl","absoluteUrl","description","iconUrl","Assets","getURL","writeHead","end","_","default","ServiceConfiguration","defaults","enable","loginStyle","generateUsername","manifestURI","redirectURI","authDescription","buttonLabelText","buttonColor","buttonLabelColor","startup","addGroup","add","i18nLabel","getSettings","Object","assign","configureService","debounce","serviceConfig","configurations","remove","service","upsert","$set","decodeToken","Match","check","ObjectIncluding","String","userData","profile","decodedToken","payload","iss","iat","exp","id","did","split","pop","issuedAt","Date","expiresAt","Array","isArray","length","contentUrl","findOne","users","info","emails","push","address","verified","map","newUser","active","generateUsernameSuggestion","insertUserDoc","token","_generateStampedLoginToken","tokenExpires"],"mappings":";;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb;AAAqCF,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb;AAAuCF,OAAOC,KAAP,CAAaC,QAAQ,mBAAR,CAAb,E;;;;;;;;;;;ACA5EF,OAAOG,MAAP,CAAc;AAACC,UAAO,MAAIA;AAAZ,CAAd;AAAmC,IAAIC,MAAJ;AAAWL,OAAOC,KAAP,CAAaC,QAAQ,0BAAR,CAAb,EAAiD;AAACG,SAAOC,CAAP,EAAS;AAACD,aAAOC,CAAP;AAAS;;AAApB,CAAjD,EAAuE,CAAvE;AAEvC,MAAMF,SAAS,IAAIC,MAAJ,CAAW,YAAX,CAAf,C;;;;;;;;;;;ACFP,IAAIE,MAAJ;AAAWP,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACK,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIE,QAAJ;AAAaR,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACM,WAASF,CAAT,EAAW;AAACE,eAASF,CAAT;AAAW;;AAAxB,CAA7C,EAAuE,CAAvE;AAA0E,IAAIG,UAAJ;AAAeT,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACO,aAAWH,CAAX,EAAa;AAACG,iBAAWH,CAAX;AAAa;;AAA5B,CAA9C,EAA4E,CAA5E;AAA+E,IAAII,kBAAJ;AAAuBV,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACQ,qBAAmBJ,CAAnB,EAAqB;AAACI,yBAAmBJ,CAAnB;AAAqB;;AAA5C,CAAtC,EAAoF,CAApF;AAAuF,IAAIK,iBAAJ;AAAsBX,OAAOC,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAACS,oBAAkBL,CAAlB,EAAoB;AAACK,wBAAkBL,CAAlB;AAAoB;;AAA1C,CAAvC,EAAmF,CAAnF;AAAsF,IAAIF,MAAJ;AAAWJ,OAAOC,KAAP,CAAaC,QAAQ,UAAR,CAAb,EAAiC;AAACE,SAAOE,CAAP,EAAS;AAACF,aAAOE,CAAP;AAAS;;AAApB,CAAjC,EAAuD,CAAvD;AAQpe;AACAE,SAASI,oBAAT,CAA8B,YAA9B,EAA6CC,YAAD,IAAkB;AAC7D,MAAI,CAACA,aAAaC,UAAd,IAA4B,CAACD,aAAaE,YAA9C,EAA4D;AAC3D;AACA;;AAED,MAAI,CAACN,WAAWO,QAAX,CAAoBC,GAApB,CAAwB,mBAAxB,CAAL,EAAmD;AAClD;AACA;;AAEDb,SAAOc,KAAP,CAAa,0BAAb,EAAyCL,YAAzC;AAEA,QAAMM,OAAOR,kBAAkBE,YAAlB,CAAb,CAX6D,CAa7D;AACA;;AACA,QAAMO,SAASV,mBAAmBS,KAAKE,WAAxB,EAAqCF,KAAKG,OAA1C,CAAf;AACAlB,SAAOc,KAAP,CAAa,2BAAb,EAA0CE,MAA1C,EAhB6D,CAkB7D;;AACA,MAAIA,WAAWG,SAAX,IAAwBH,OAAOI,MAAP,KAAkBD,SAA9C,EAAyD;AACxD,WAAO;AACNE,YAAM,YADA;AAENC,aAAO,IAAInB,OAAOoB,KAAX,CAAiBnB,SAASoB,mBAAT,CAA6BC,YAA9C,EAA4D,qDAA5D;AAFD,KAAP;AAIA;;AAED,MAAIT,OAAOU,KAAX,EAAkB;AACjB,QAAI;AACH,YAAMC,OAAOtB,WAAWuB,MAAX,CAAkBC,KAAlB,CAAwBC,WAAxB,CAAoCd,OAAOI,MAA3C,EAAmD;AAAEW,gBAAQ;AAAE,uCAA6B,CAA/B;AAAkCC,oBAAU;AAA5C;AAAV,OAAnD,CAAb;;AACA,UAAIL,QAAQA,KAAKM,QAAb,IAAyBN,KAAKM,QAAL,CAAcvB,UAAvC,IAAqDiB,KAAKM,QAAL,CAAcvB,UAAd,CAAyBwB,KAAlF,EAAyF;AACxF/B,eAAOgC,SAAP,CAAiBR,KAAKS,GAAtB,EAA2B,MAAM;AAChC/B,qBAAWgC,aAAX,CAAyBV,IAAzB,EAA+BA,KAAKM,QAAL,CAAcvB,UAAd,CAAyBwB,KAAxD,EAA+Df,SAA/D,EAA0E,KAA1E;AACA,SAFD;AAGA;AACD,KAPD,CAOE,OAAOmB,CAAP,EAAU;AACXC,cAAQjB,KAAR,CAAcgB,CAAd;AACA;AACD;;AAED,SAAOtB,OAAOU,KAAd;AAEA,SAAOV,MAAP;AACA,CA1CD,E;;;;;;;;;;;ACTA,IAAIb,MAAJ;AAAWP,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACK,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIsC,MAAJ;AAAW5C,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAAC0C,SAAOtC,CAAP,EAAS;AAACsC,aAAOtC,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIG,UAAJ;AAAeT,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACO,aAAWH,CAAX,EAAa;AAACG,iBAAWH,CAAX;AAAa;;AAA5B,CAA9C,EAA4E,CAA5E;AAInKsC,OAAOC,eAAP,CAAuBC,GAAvB,CAA2B,uBAA3B,EAAoDvC,OAAOwC,eAAP,CAAuB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAC7F,QAAMC,OAAOzC,WAAWO,QAAX,CAAoBC,GAApB,CAAwB,WAAxB,CAAb;AACA,QAAMkC,WAAW5C,OAAO6C,WAAP,EAAjB;AACA,QAAMC,cAAc5C,WAAWO,QAAX,CAAoBC,GAApB,CAAwB,6BAAxB,CAApB;AACA,QAAMqC,UAAU7C,WAAW8C,MAAX,CAAkBC,MAAlB,CAAyB,oBAAzB,CAAhB;AAEAP,MAAIQ,SAAJ,CAAc,GAAd,EAAmB;AAClB,oBAAgB,kBADE;AAElB,mCAA+B;AAFb,GAAnB;AAKAR,MAAIS,GAAJ,CAAS;eACMR,IAAM;oBACDC,QAAU;sBACRE,WAAa;;gBAEnBC,OAAS;;;;IALzB;AAUA,CArBmD,CAApD,E;;;;;;;;;;;ACJA,IAAIK,CAAJ;;AAAM3D,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAAC0D,UAAQtD,CAAR,EAAU;AAACqD,QAAErD,CAAF;AAAI;;AAAhB,CAAnC,EAAqD,CAArD;AAAwD,IAAIC,MAAJ;AAAWP,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACK,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIG,UAAJ;AAAeT,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACO,aAAWH,CAAX,EAAa;AAACG,iBAAWH,CAAX;AAAa;;AAA5B,CAA9C,EAA4E,CAA5E;AAA+E,IAAIuD,oBAAJ;AAAyB7D,OAAOC,KAAP,CAAaC,QAAQ,8BAAR,CAAb,EAAqD;AAAC2D,uBAAqBvD,CAArB,EAAuB;AAACuD,2BAAqBvD,CAArB;AAAuB;;AAAhD,CAArD,EAAuG,CAAvG;AAA0G,IAAIF,MAAJ;AAAWJ,OAAOC,KAAP,CAAaC,QAAQ,UAAR,CAAb,EAAiC;AAACE,SAAOE,CAAP,EAAS;AAACF,aAAOE,CAAP;AAAS;;AAApB,CAAjC,EAAuD,CAAvD;AAOpX,MAAMwD,WAAW;AAChBC,UAAQ,KADQ;AAEhBC,cAAY,UAFI;AAGhBC,oBAAkB,KAHF;AAIhBC,eAAa3D,OAAO6C,WAAP,CAAmB,sBAAnB,CAJG;AAKhBe,eAAa5D,OAAO6C,WAAP,CAAmB,sBAAnB,CALG;AAMhBgB,mBAAiB,mBAND;AAOhBC,mBAAiB,YAPD;AAQhBC,eAAa,SARG;AAShBC,oBAAkB;AATF,CAAjB;AAYAhE,OAAOiE,OAAP,CAAe,MAAM;AACpB/D,aAAWO,QAAX,CAAoByD,QAApB,CAA6B,YAA7B,EAA2C,YAAW;AACrD,SAAKC,GAAL,CAAS,mBAAT,EAA8BZ,SAASC,MAAvC,EAA+C;AAC9CtC,YAAM,SADwC;AAE9CkD,iBAAW;AAFmC,KAA/C;AAIA,SAAKD,GAAL,CAAS,6BAAT,EAAwCZ,SAASM,eAAjD,EAAkE;AACjE3C,YAAM;AAD2D,KAAlE;AAGA,SAAKiD,GAAL,CAAS,4BAAT,EAAuCZ,SAASO,eAAhD,EAAiE;AAChE5C,YAAM;AAD0D,KAAjE;AAGA,SAAKiD,GAAL,CAAS,8BAAT,EAAyCZ,SAASG,gBAAlD,EAAoE;AACnExC,YAAM;AAD6D,KAApE;AAGA,GAdD;AAeA,CAhBD,E,CAkBA;;AACA,MAAMmD,cAAc,MAAMC,OAAOC,MAAP,CAAc,EAAd,EAAkBhB,QAAlB,EAA4B;AACrDC,UAAQtD,WAAWO,QAAX,CAAoBC,GAApB,CAAwB,mBAAxB,CAD6C;AAErDmD,mBAAiB3D,WAAWO,QAAX,CAAoBC,GAApB,CAAwB,6BAAxB,CAFoC;AAGrDoD,mBAAiB5D,WAAWO,QAAX,CAAoBC,GAApB,CAAwB,4BAAxB,CAHoC;AAIrDgD,oBAAkBxD,WAAWO,QAAX,CAAoBC,GAApB,CAAwB,8BAAxB;AAJmC,CAA5B,CAA1B;;AAOA,MAAM8D,mBAAmBpB,EAAEqB,QAAF,CAAWzE,OAAOwC,eAAP,CAAuB,MAAM;AAChE,QAAMkC,gBAAgBL,aAAtB;;AAEA,MAAI,CAACK,cAAclB,MAAnB,EAA2B;AAC1B3D,WAAOc,KAAP,CAAa,wBAAb,EAAuC+D,aAAvC;AACA,WAAOpB,qBAAqBqB,cAArB,CAAoCC,MAApC,CAA2C;AACjDC,eAAS;AADwC,KAA3C,CAAP;AAGA;;AAEDvB,uBAAqBqB,cAArB,CAAoCG,MAApC,CAA2C;AAC1CD,aAAS;AADiC,GAA3C,EAEG;AACFE,UAAML;AADJ,GAFH;AAMA7E,SAAOc,KAAP,CAAa,sBAAb,EAAqC+D,aAArC;AACA,CAjBmC,CAAX,EAiBrB,IAjBqB,CAAzB,C,CAmBA;;;AACA1E,OAAOiE,OAAP,CAAe,MAAM;AACpB/D,aAAWO,QAAX,CAAoBC,GAApB,CAAwB,gBAAxB,EAA0C,MAAM;AAC/C8D;AACA,GAFD;AAGA,CAJD,E;;;;;;;;;;;ACjEA/E,OAAOG,MAAP,CAAc;AAACQ,qBAAkB,MAAIA;AAAvB,CAAd;AAAyD,IAAI4E,WAAJ;AAAgBvF,OAAOC,KAAP,CAAaC,QAAQ,YAAR,CAAb,EAAmC;AAACqF,cAAYjF,CAAZ,EAAc;AAACiF,kBAAYjF,CAAZ;AAAc;;AAA9B,CAAnC,EAAmE,CAAnE;AAAsE,IAAIC,MAAJ;AAAWP,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACK,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIE,QAAJ;AAAaR,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACM,WAASF,CAAT,EAAW;AAACE,eAASF,CAAT;AAAW;;AAAxB,CAA7C,EAAuE,CAAvE;AAA0E,IAAIkF,KAAJ,EAAUC,KAAV;AAAgBzF,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACsF,QAAMlF,CAAN,EAAQ;AAACkF,YAAMlF,CAAN;AAAQ,GAAlB;;AAAmBmF,QAAMnF,CAAN,EAAQ;AAACmF,YAAMnF,CAAN;AAAQ;;AAApC,CAArC,EAA2E,CAA3E;AAA8E,IAAIF,MAAJ;AAAWJ,OAAOC,KAAP,CAAaC,QAAQ,UAAR,CAAb,EAAiC;AAACE,SAAOE,CAAP,EAAS;AAACF,aAAOE,CAAP;AAAS;;AAApB,CAAjC,EAAuD,CAAvD;;AAclZ,MAAMK,oBAAqBE,YAAD,IAAkB;AAClDT,SAAOc,KAAP,CAAa,wBAAb,EAAuCL,YAAvC;AAEA4E,QAAM5E,YAAN,EAAoB2E,MAAME,eAAN,CAAsB;AACzC3E,kBAAc4E,MAD2B;AAEzCC,cAAUf;AAF+B,GAAtB,CAApB,EAHkD,CAQlD;;AACA,QAAM;AAAEzC,YAAF;AAAYyD;AAAZ,MAAwBhF,aAAa+E,QAA3C;AACA,QAAME,eAAeP,YAAY1E,aAAaE,YAAzB,EAAuCgF,OAA5D;AAEAF,UAAQzD,QAAR,GAAmBA,QAAnB;AAEAhC,SAAOc,KAAP,CAAa,WAAb,EAA0BL,aAAa+E,QAAvC;AACAxF,SAAOc,KAAP,CAAa,eAAb,EAA8B4E,YAA9B;AAEA,QAAM;AAAEE,OAAF;AAAOC,OAAP;AAAYC;AAAZ,MAAoBJ,YAA1B;;AAEA,MAAI,CAACE,GAAL,EAAU;AACT,WAAO;AACNvE,YAAM,YADA;AAENC,aAAO,IAAInB,OAAOoB,KAAX,CAAiBnB,SAASoB,mBAAT,CAA6BC,YAA9C,EAA4D,0CAA5D;AAFD,KAAP;AAIA,GAxBiD,CA0BlD;;;AACA,QAAMR,cAAc;AACnB8E,QAAIH,GADe;AAEnBI,SAAKJ,IAAIK,KAAJ,CAAU,GAAV,EAAeC,GAAf,EAFc;AAGnBC,cAAU,IAAIC,IAAJ,CAASP,MAAM,IAAf,CAHS;AAInBQ,eAAW,IAAID,IAAJ,CAASN,MAAM,IAAf;AAJQ,GAApB,CA3BkD,CAkClD;;AACA,MAAIQ,MAAMC,OAAN,CAAcd,QAAQvD,KAAtB,KAAgCuD,QAAQvD,KAAR,CAAcsE,MAAlD,EAA0D;AACzDvF,gBAAYiB,KAAZ,GAAoBuD,QAAQvD,KAAR,CAAc,CAAd,EAAiBuE,UAArC;AACA;;AAEDzG,SAAOc,KAAP,CAAa,YAAb,EAA2BG,WAA3B,EAAwCwE,OAAxC;AAEA,SAAO;AACNxE,eADM;AAENC,aAAS;AAAEuE;AAAF;AAFH,GAAP;AAIA,CA7CM,C;;;;;;;;;;;ACdP7F,OAAOG,MAAP,CAAc;AAACO,sBAAmB,MAAIA;AAAxB,CAAd;AAA2D,IAAIH,MAAJ;AAAWP,OAAOC,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACK,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIE,QAAJ;AAAaR,OAAOC,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACM,WAASF,CAAT,EAAW;AAACE,eAASF,CAAT;AAAW;;AAAxB,CAA7C,EAAuE,CAAvE;AAA0E,IAAIuD,oBAAJ;AAAyB7D,OAAOC,KAAP,CAAaC,QAAQ,8BAAR,CAAb,EAAqD;AAAC2D,uBAAqBvD,CAArB,EAAuB;AAACuD,2BAAqBvD,CAArB;AAAuB;;AAAhD,CAArD,EAAuG,CAAvG;AAA0G,IAAIG,UAAJ;AAAeT,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACO,aAAWH,CAAX,EAAa;AAACG,iBAAWH,CAAX;AAAa;;AAA5B,CAA9C,EAA4E,CAA5E;AAA+E,IAAIF,MAAJ;AAAWJ,OAAOC,KAAP,CAAaC,QAAQ,UAAR,CAAb,EAAiC;AAACE,SAAOE,CAAP,EAAS;AAACF,aAAOE,CAAP;AAAS;;AAApB,CAAjC,EAAuD,CAAvD;;AAQjc,MAAMI,qBAAqB,CAACW,WAAD,EAAcC,OAAd,KAA0B;AAC3D,QAAM2D,gBAAgBpB,qBAAqBqB,cAArB,CAAoC4B,OAApC,CAA4C;AAAE1B,aAAS;AAAX,GAA5C,CAAtB;AACAhF,SAAOc,KAAP,CAAa,aAAb,EAA4B+D,aAA5B,EAF2D,CAI3D;;AACA,QAAM;AAAEkB,MAAF;AAAMC;AAAN,MAAc/E,WAApB;AACA,QAAM;AAAEwE;AAAF,MAAcvE,OAApB,CAN2D,CAQ3D;;AACA,QAAMS,OAAOxB,OAAOwG,KAAP,CAAaD,OAAb,CAAqB;AAAE,8BAA0BX;AAA5B,GAArB,CAAb;AACA,MAAI3E,MAAJ;AACA,MAAIM,QAAQ,KAAZ,CAX2D,CAa3D;;AACA,MAAIC,IAAJ,EAAU;AACT3B,WAAO4G,IAAP,CAAa,iCAAiCb,EAAI,EAAlD;AACA3E,aAASO,KAAKS,GAAd;AACA,GAHD,MAGO;AACNV,YAAQ,IAAR;AACA,QAAImF,SAAS,EAAb;;AACA,QAAI,CAACP,MAAMC,OAAN,CAAcd,QAAQoB,MAAtB,CAAL,EAAoC;AACnC;AACA;AACA;AACA;AACAA,aAAOC,IAAP,CAAY;AAAEC,iBAAU,GAAGf,GAAK,mBAApB;AAAwCgB,kBAAU;AAAlD,OAAZ;AACA,KAND,MAMO;AACN;AACAH,eAASpB,QAAQoB,MAAR,CAAeI,GAAf,CAAoBF,OAAD,KAAc;AAAEA,eAAF;AAAWC,kBAAU;AAArB,OAAd,CAAnB,CAAT;AACA;;AAED,UAAME,UAAU;AACfpE,YAAM2C,QAAQ3C,IADC;AAEfqE,cAAQ,IAFO;AAGfN,YAHe;AAIf5E,gBAAU;AAAEvB,oBAAYO;AAAd;AAJK,KAAhB,CAdM,CAqBN;;AACA,QAAIwE,QAAQ3C,IAAZ,EAAkB;AACjBoE,cAAQpE,IAAR,GAAe2C,QAAQ3C,IAAvB;AACA,KAxBK,CA0BN;;;AACA,QAAI2C,QAAQzD,QAAR,IAAoByD,QAAQzD,QAAR,KAAqB,EAA7C,EAAiD;AAChDkF,cAAQlF,QAAR,GAAmByD,QAAQzD,QAA3B;AACA,KAFD,MAEO,IAAI6C,cAAchB,gBAAd,KAAmC,IAAvC,EAA6C;AACnDqD,cAAQlF,QAAR,GAAmB3B,WAAW+G,0BAAX,CAAsCF,OAAtC,CAAnB;AACA,KA/BK,CAgCN;AAEA;;;AACAlH,WAAO4G,IAAP,CAAa,mCAAmCb,EAAI,EAApD;AACA3E,aAAShB,SAASiH,aAAT,CAAuB,EAAvB,EAA2BH,OAA3B,CAAT;AACAlH,WAAOc,KAAP,CAAa,sBAAb,EAAqCoG,OAArC;AACA,GAvD0D,CAyD3D;AACA;;;AACA,QAAM;AAAEI;AAAF,MAAYlH,SAASmH,0BAAT,EAAlB;;AACA,QAAMC,eAAevG,YAAYoF,SAAjC;AAEA,SAAO;AACNhF,UAAM,YADA;AAEND,UAFM;AAGNkG,SAHM;AAINE,gBAJM;AAKN9F;AALM,GAAP;AAOA,CArEM,C","file":"/packages/rocketchat_blockstack.js","sourcesContent":["import './routes.js';\nimport './settings.js';\nimport './loginHandler.js';\n","import { Logger } from 'meteor/rocketchat:logger';\n\nexport const logger = new Logger('Blockstack');\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { RocketChat } from 'meteor/rocketchat:lib';\n\nimport { updateOrCreateUser } from './userHandler';\nimport { handleAccessToken } from './tokenHandler';\nimport { logger } from './logger';\n\n// Blockstack login handler, triggered by a blockstack authResponse in route\nAccounts.registerLoginHandler('blockstack', (loginRequest) => {\n\tif (!loginRequest.blockstack || !loginRequest.authResponse) {\n\t\treturn;\n\t}\n\n\tif (!RocketChat.settings.get('Blockstack_Enable')) {\n\t\treturn;\n\t}\n\n\tlogger.debug('Processing login request', loginRequest);\n\n\tconst auth = handleAccessToken(loginRequest);\n\n\t// TODO: Fix #9484 and re-instate usage of accounts helper\n\t// const result = Accounts.updateOrCreateUserFromExternalService('blockstack', auth.serviceData, auth.options)\n\tconst result = updateOrCreateUser(auth.serviceData, auth.options);\n\tlogger.debug('User create/update result', result);\n\n\t// Ensure processing succeeded\n\tif (result === undefined || result.userId === undefined) {\n\t\treturn {\n\t\t\ttype: 'blockstack',\n\t\t\terror: new Meteor.Error(Accounts.LoginCancelledError.numericError, 'User creation failed from Blockstack response token'),\n\t\t};\n\t}\n\n\tif (result.isNew) {\n\t\ttry {\n\t\t\tconst user = RocketChat.models.Users.findOneById(result.userId, { fields: { 'services.blockstack.image': 1, username: 1 } });\n\t\t\tif (user && user.services && user.services.blockstack && user.services.blockstack.image) {\n\t\t\t\tMeteor.runAsUser(user._id, () => {\n\t\t\t\t\tRocketChat.setUserAvatar(user, user.services.blockstack.image, undefined, 'url');\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t}\n\n\tdelete result.isNew;\n\n\treturn result;\n});\n","import { Meteor } from 'meteor/meteor';\nimport { WebApp } from 'meteor/webapp';\nimport { RocketChat } from 'meteor/rocketchat:lib';\n\nWebApp.connectHandlers.use('/_blockstack/manifest', Meteor.bindEnvironment(function(req, res) {\n\tconst name = RocketChat.settings.get('Site_Name');\n\tconst startUrl = Meteor.absoluteUrl();\n\tconst description = RocketChat.settings.get('Blockstack_Auth_Description');\n\tconst iconUrl = RocketChat.Assets.getURL('Assets_favicon_192');\n\n\tres.writeHead(200, {\n\t\t'Content-Type': 'application/json',\n\t\t'Access-Control-Allow-Origin': '*',\n\t});\n\n\tres.end(`{\n    \"name\": \"${ name }\",\n    \"start_url\": \"${ startUrl }\",\n    \"description\": \"${ description }\",\n    \"icons\": [{\n      \"src\": \"${ iconUrl }\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\"\n    }]\n  }`);\n}));\n","import _ from 'underscore';\nimport { Meteor } from 'meteor/meteor';\nimport { RocketChat } from 'meteor/rocketchat:lib';\n\nimport { ServiceConfiguration } from 'meteor/service-configuration';\nimport { logger } from './logger';\n\nconst defaults = {\n\tenable: false,\n\tloginStyle: 'redirect',\n\tgenerateUsername: false,\n\tmanifestURI: Meteor.absoluteUrl('_blockstack/manifest'),\n\tredirectURI: Meteor.absoluteUrl('_blockstack/validate'),\n\tauthDescription: 'Rocket.Chat login',\n\tbuttonLabelText: 'Blockstack',\n\tbuttonColor: '#271132',\n\tbuttonLabelColor: '#ffffff',\n};\n\nMeteor.startup(() => {\n\tRocketChat.settings.addGroup('Blockstack', function() {\n\t\tthis.add('Blockstack_Enable', defaults.enable, {\n\t\t\ttype: 'boolean',\n\t\t\ti18nLabel: 'Enable',\n\t\t});\n\t\tthis.add('Blockstack_Auth_Description', defaults.authDescription, {\n\t\t\ttype: 'string',\n\t\t});\n\t\tthis.add('Blockstack_ButtonLabelText', defaults.buttonLabelText, {\n\t\t\ttype: 'string',\n\t\t});\n\t\tthis.add('Blockstack_Generate_Username', defaults.generateUsername, {\n\t\t\ttype: 'boolean',\n\t\t});\n\t});\n});\n\n// Helper to return all Blockstack settings\nconst getSettings = () => Object.assign({}, defaults, {\n\tenable: RocketChat.settings.get('Blockstack_Enable'),\n\tauthDescription: RocketChat.settings.get('Blockstack_Auth_Description'),\n\tbuttonLabelText: RocketChat.settings.get('Blockstack_ButtonLabelText'),\n\tgenerateUsername: RocketChat.settings.get('Blockstack_Generate_Username'),\n});\n\nconst configureService = _.debounce(Meteor.bindEnvironment(() => {\n\tconst serviceConfig = getSettings();\n\n\tif (!serviceConfig.enable) {\n\t\tlogger.debug('Blockstack not enabled', serviceConfig);\n\t\treturn ServiceConfiguration.configurations.remove({\n\t\t\tservice: 'blockstack',\n\t\t});\n\t}\n\n\tServiceConfiguration.configurations.upsert({\n\t\tservice: 'blockstack',\n\t}, {\n\t\t$set: serviceConfig,\n\t});\n\n\tlogger.debug('Init Blockstack auth', serviceConfig);\n}), 1000);\n\n// Add settings to auth provider configs on startup\nMeteor.startup(() => {\n\tRocketChat.settings.get(/^Blockstack_.+/, () => {\n\t\tconfigureService();\n\t});\n});\n","import { decodeToken } from 'blockstack';\n\nimport { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { Match, check } from 'meteor/check';\nimport { logger } from './logger';\n\n// Handler extracts data from JSON and tokenised reponse.\n// Reflects OAuth token service, with some slight modifications for Blockstack.\n//\n// Uses 'iss' (issuer) as unique key (decentralised ID) for user.\n// The 'did' final portion of the blockstack decentralised ID, is displayed as\n// your profile ID in the service. This isn't used yet, but could be useful\n// to link accounts if identity providers other than btc address are added.\nexport const handleAccessToken = (loginRequest) => {\n\tlogger.debug('Login request received', loginRequest);\n\n\tcheck(loginRequest, Match.ObjectIncluding({\n\t\tauthResponse: String,\n\t\tuserData: Object,\n\t}));\n\n\t// Decode auth response for user attributes\n\tconst { username, profile } = loginRequest.userData;\n\tconst decodedToken = decodeToken(loginRequest.authResponse).payload;\n\n\tprofile.username = username;\n\n\tlogger.debug('User data', loginRequest.userData);\n\tlogger.debug('Login decoded', decodedToken);\n\n\tconst { iss, iat, exp } = decodedToken;\n\n\tif (!iss) {\n\t\treturn {\n\t\t\ttype: 'blockstack',\n\t\t\terror: new Meteor.Error(Accounts.LoginCancelledError.numericError, 'Insufficient data in auth response token'),\n\t\t};\n\t}\n\n\t// Collect basic auth provider details\n\tconst serviceData = {\n\t\tid: iss,\n\t\tdid: iss.split(':').pop(),\n\t\tissuedAt: new Date(iat * 1000),\n\t\texpiresAt: new Date(exp * 1000),\n\t};\n\n\t// Add Avatar image source to use for auth service suggestions\n\tif (Array.isArray(profile.image) && profile.image.length) {\n\t\tserviceData.image = profile.image[0].contentUrl;\n\t}\n\n\tlogger.debug('Login data', serviceData, profile);\n\n\treturn {\n\t\tserviceData,\n\t\toptions: { profile },\n\t};\n};\n","import { Meteor } from 'meteor/meteor';\nimport { Accounts } from 'meteor/accounts-base';\nimport { ServiceConfiguration } from 'meteor/service-configuration';\nimport { RocketChat } from 'meteor/rocketchat:lib';\nimport { logger } from './logger';\n\n// Updates or creates a user after we authenticate with Blockstack\n// Clones Accounts.updateOrCreateUserFromExternalService with some modifications\nexport const updateOrCreateUser = (serviceData, options) => {\n\tconst serviceConfig = ServiceConfiguration.configurations.findOne({ service: 'blockstack' });\n\tlogger.debug('Auth config', serviceConfig);\n\n\t// Extract user data from service / token\n\tconst { id, did } = serviceData;\n\tconst { profile } = options;\n\n\t// Look for existing Blockstack user\n\tconst user = Meteor.users.findOne({ 'services.blockstack.id': id });\n\tlet userId;\n\tlet isNew = false;\n\n\t// Use found or create a user\n\tif (user) {\n\t\tlogger.info(`User login with Blockstack ID ${ id }`);\n\t\tuserId = user._id;\n\t} else {\n\t\tisNew = true;\n\t\tlet emails = [];\n\t\tif (!Array.isArray(profile.emails)) {\n\t\t\t// Fix absense of emails by adding placeholder address using decentralised\n\t\t\t// ID at blockstack.email - a holding domain only, no MX record, does not\n\t\t\t// process email, may be used in future to provide decentralised email via\n\t\t\t// gaia, encrypting mail for DID user only. @TODO: document this approach.\n\t\t\temails.push({ address: `${ did }@blockstack.email`, verified: false });\n\t\t} else {\n\t\t\t// Reformat array of emails into expected format if they exist\n\t\t\temails = profile.emails.map((address) => ({ address, verified: true }));\n\t\t}\n\n\t\tconst newUser = {\n\t\t\tname: profile.name,\n\t\t\tactive: true,\n\t\t\temails,\n\t\t\tservices: { blockstack: serviceData },\n\t\t};\n\n\t\t// Set username same as in blockstack, or suggest if none\n\t\tif (profile.name) {\n\t\t\tnewUser.name = profile.name;\n\t\t}\n\n\t\t// Take profile username if exists, or generate one if enabled\n\t\tif (profile.username && profile.username !== '') {\n\t\t\tnewUser.username = profile.username;\n\t\t} else if (serviceConfig.generateUsername === true) {\n\t\t\tnewUser.username = RocketChat.generateUsernameSuggestion(newUser);\n\t\t}\n\t\t// If no username at this point it will suggest one from the name\n\n\t\t// Create and get created user to make a couple more mods before returning\n\t\tlogger.info(`Creating user for Blockstack ID ${ id }`);\n\t\tuserId = Accounts.insertUserDoc({}, newUser);\n\t\tlogger.debug('New user ${ userId }', newUser);\n\t}\n\n\t// Add login token for blockstack auth session (take expiration from response)\n\t// TODO: Regquired method result format ignores `.when`\n\tconst { token } = Accounts._generateStampedLoginToken();\n\tconst tokenExpires = serviceData.expiresAt;\n\n\treturn {\n\t\ttype: 'blockstack',\n\t\tuserId,\n\t\ttoken,\n\t\ttokenExpires,\n\t\tisNew,\n\t};\n};\n"]}