(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var RateLimiter = Package['rate-limit'].RateLimiter;
var WebApp = Package.webapp.WebApp;
var WebAppInternals = Package.webapp.WebAppInternals;
var main = Package.webapp.main;
var ReactiveVar = Package['reactive-var'].ReactiveVar;
var ReactiveDict = Package['reactive-dict'].ReactiveDict;
var Accounts = Package['accounts-base'].Accounts;
var ECMAScript = Package.ecmascript.ECMAScript;
var Random = Package.random.Random;
var check = Package.check.check;
var Match = Package.check.Match;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;
var MongoInternals = Package.mongo.MongoInternals;
var Mongo = Package.mongo.Mongo;
var OAuth = Package.oauth.OAuth;
var Oauth = Package.oauth.Oauth;
var CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;
var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;
var meteorInstall = Package.modules.meteorInstall;
var Streamer = Package['rocketchat:streamer'].Streamer;
var Logger = Package['rocketchat:logger'].Logger;
var SystemLogger = Package['rocketchat:logger'].SystemLogger;
var LoggerManager = Package['rocketchat:logger'].LoggerManager;
var CustomOAuth = Package['rocketchat:custom-oauth'].CustomOAuth;
var FlowRouter = Package['kadira:flow-router'].FlowRouter;
var meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;
var Promise = Package.promise.Promise;

/* Package-scope variables */
var RocketChat, name, language, message, result, options, hidden, pinned, pinnedAt, snippeted, snippetedAt, importIds, inc, value, _id, roles, favorite, file, username, exceptions, active, latest, query;

var require = meteorInstall({"node_modules":{"meteor":{"rocketchat:lib":{"lib":{"core.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/core.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let EventEmitter;
module.watch(require("wolfy87-eventemitter"), {
  default(v) {
    EventEmitter = v;
  }

}, 0);
RocketChat = new EventEmitter();
/*
* Kick off the global namespace for RocketChat.
* @namespace RocketChat
*/

RocketChat.models = {};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settings.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/settings.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);

/*
* RocketChat.settings holds all packages settings
* @namespace RocketChat.settings
*/
RocketChat.settings = {
  callbacks: {},
  regexCallbacks: {},
  ts: new Date(),

  get(_id, callback) {
    if (callback != null) {
      RocketChat.settings.onload(_id, callback);

      if (!Meteor.settings) {
        return;
      }

      if (_id === '*') {
        return Object.keys(Meteor.settings).forEach(key => {
          const value = Meteor.settings[key];
          callback(key, value);
        });
      }

      if (_.isRegExp(_id) && Meteor.settings) {
        return Object.keys(Meteor.settings).forEach(key => {
          if (!_id.test(key)) {
            return;
          }

          const value = Meteor.settings[key];
          callback(key, value);
        });
      }

      return Meteor.settings[_id] != null && callback(_id, Meteor.settings[_id]);
    } else {
      if (!Meteor.settings) {
        return;
      }

      if (_.isRegExp(_id)) {
        return Object.keys(Meteor.settings).reduce((items, key) => {
          const value = Meteor.settings[key];

          if (_id.test(key)) {
            items.push({
              key,
              value
            });
          }

          return items;
        }, []);
      }

      return Meteor.settings && Meteor.settings[_id];
    }
  },

  set(_id, value, callback) {
    return Meteor.call('saveSetting', _id, value, callback);
  },

  batchSet(settings, callback) {
    // async -> sync
    // http://daemon.co.za/2012/04/simple-async-with-only-underscore/
    const save = function (setting) {
      return function (callback) {
        return Meteor.call('saveSetting', setting._id, setting.value, setting.editor, callback);
      };
    };

    const actions = _.map(settings, setting => save(setting));

    return _(actions).reduceRight(_.wrap, (err, success) => callback(err, success))();
  },

  load(key, value, initialLoad) {
    ['*', key].forEach(item => {
      if (RocketChat.settings.callbacks[item]) {
        RocketChat.settings.callbacks[item].forEach(callback => callback(key, value, initialLoad));
      }
    });
    Object.keys(RocketChat.settings.regexCallbacks).forEach(cbKey => {
      const cbValue = RocketChat.settings.regexCallbacks[cbKey];

      if (!cbValue.regex.test(key)) {
        return;
      }

      cbValue.callbacks.forEach(callback => callback(key, value, initialLoad));
    });
  },

  onload(key, callback) {
    // if key is '*'
    // 	for key, value in Meteor.settings
    // 		callback key, value, false
    // else if Meteor.settings?[_id]?
    // 	callback key, Meteor.settings[_id], false
    const keys = [].concat(key);
    keys.forEach(k => {
      if (_.isRegExp(k)) {
        RocketChat.settings.regexCallbacks[name = k.source] = RocketChat.settings.regexCallbacks[name = k.source] || {
          regex: k,
          callbacks: []
        };
        RocketChat.settings.regexCallbacks[k.source].callbacks.push(callback);
      } else {
        RocketChat.settings.callbacks[k] = RocketChat.settings.callbacks[k] || [];
        RocketChat.settings.callbacks[k].push(callback);
      }
    });
  }

};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"RoomTypeConfig.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/RoomTypeConfig.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  RoomSettingsEnum: () => RoomSettingsEnum,
  UiTextContext: () => UiTextContext,
  RoomTypeRouteConfig: () => RoomTypeRouteConfig,
  RoomTypeConfig: () => RoomTypeConfig
});
const RoomSettingsEnum = {
  NAME: 'roomName',
  TOPIC: 'roomTopic',
  ANNOUNCEMENT: 'roomAnnouncement',
  DESCRIPTION: 'roomDescription',
  READ_ONLY: 'readOnly',
  REACT_WHEN_READ_ONLY: 'reactWhenReadOnly',
  ARCHIVE_OR_UNARCHIVE: 'archiveOrUnarchive',
  JOIN_CODE: 'joinCode',
  BROADCAST: 'broadcast',
  SYSTEM_MESSAGES: 'systemMessages',
  E2E: 'encrypted'
};
const UiTextContext = {
  CLOSE_WARNING: 'closeWarning',
  HIDE_WARNING: 'hideWarning',
  LEAVE_WARNING: 'leaveWarning',
  NO_ROOMS_SUBSCRIBED: 'noRoomsSubscribed'
};

class RoomTypeRouteConfig {
  constructor({
    name,
    path
  }) {
    if (typeof name !== 'undefined' && (typeof name !== 'string' || name.length === 0)) {
      throw new Error('The name must be a string.');
    }

    if (typeof path !== 'undefined' && (typeof path !== 'string' || path.length === 0)) {
      throw new Error('The path must be a string.');
    }

    this._name = name;
    this._path = path;
  }

  get name() {
    return this._name;
  }

  get path() {
    return this._path;
  }

}

class RoomTypeConfig {
  constructor({
    identifier = Random.id(),
    order,
    icon,
    header,
    label,
    route
  }) {
    if (typeof identifier !== 'string' || identifier.length === 0) {
      throw new Error('The identifier must be a string.');
    }

    if (typeof order !== 'number') {
      throw new Error('The order must be a number.');
    }

    if (typeof icon !== 'undefined' && (typeof icon !== 'string' || icon.length === 0)) {
      throw new Error('The icon must be a string.');
    }

    if (typeof header !== 'undefined' && (typeof header !== 'string' || header.length === 0)) {
      throw new Error('The header must be a string.');
    }

    if (typeof label !== 'undefined' && (typeof label !== 'string' || label.length === 0)) {
      throw new Error('The label must be a string.');
    }

    if (typeof route !== 'undefined' && !(route instanceof RoomTypeRouteConfig)) {
      throw new Error('Room\'s route is not a valid route configuration. Must be an instance of "RoomTypeRouteConfig".');
    }

    this._identifier = identifier;
    this._order = order;
    this._icon = icon;
    this._header = header;
    this._label = label;
    this._route = route;
  }
  /**
   * The room type's internal identifier.
   */


  get identifier() {
    return this._identifier;
  }
  /**
   * The order of this room type for the display.
   */


  get order() {
    return this._order;
  }
  /**
   * Sets the order of this room type for the display.
   *
   * @param {number} order the number value for the order
   */


  set order(order) {
    if (typeof order !== 'number') {
      throw new Error('The order must be a number.');
    }

    this._order = order;
  }
  /**
   * The icon class, css, to use as the visual aid.
   */


  get icon() {
    return this._icon;
  }
  /**
   * The header name of this type.
   */


  get header() {
    return this._header;
  }
  /**
   * The i18n label for this room type.
   */


  get label() {
    return this._label;
  }
  /**
   * The route config for this room type.
   */


  get route() {
    return this._route;
  }
  /**
   * Gets the room's name to display in the UI.
   *
   * @param {object} room
   */


  getDisplayName(room) {
    return room.name;
  }

  allowRoomSettingChange()
  /* room, setting */
  {
    return true;
  }
  /**
   * Return a room's name
   *
   * @abstract
   * @return {string} Room's name according to it's type
   */


  roomName()
  /* room */
  {
    return '';
  }

  canBeCreated() {
    return Meteor.isServer ? RocketChat.authz.hasAtLeastOnePermission(Meteor.userId(), [`create-${this._identifier}`]) : RocketChat.authz.hasAtLeastOnePermission([`create-${this._identifier}`]);
  }

  canBeDeleted(room) {
    return Meteor.isServer ? RocketChat.authz.hasAtLeastOnePermission(Meteor.userId(), [`delete-${room.t}`], room._id) : RocketChat.authz.hasAtLeastOnePermission([`delete-${room.t}`], room._id);
  }

  supportMembersList()
  /* room */
  {
    return true;
  }

  isGroupChat() {
    return false;
  }

  canAddUser()
  /* userId, room */
  {
    return false;
  }

  userDetailShowAll()
  /* room */
  {
    return true;
  }

  userDetailShowAdmin()
  /* room */
  {
    return true;
  }

  preventRenaming()
  /* room */
  {
    return false;
  }

  includeInRoomSearch() {
    return false;
  }

  enableMembersListProfile() {
    return false;
  }
  /**
   * Returns a text which can be used in generic UIs.
   * @param context The role of the text in the UI-Element
   * @return {string} A text or a translation key - the consumers of this method will pass the
   * returned value to an internationalization library
   */


  getUiText()
  /* context */
  {
    return '';
  }
  /**
   * Returns the full object of message sender
   * @param {string} senderId Sender's _id
   * @return {object} Sender's object from db
   */


  getMsgSender(senderId) {
    return Meteor.isServer ? RocketChat.models.Users.findOneById(senderId) : {};
  }
  /**
   * Returns details to use on notifications
   *
   * @param {object} room
   * @param {object} user
   * @param {string} notificationMessage
   * @return {object} Notification details
   */


  getNotificationDetails(room, user, notificationMessage) {
    if (!Meteor.isServer) {
      return {};
    }

    const title = `#${this.roomName(room)}`;
    const text = `${RocketChat.settings.get('UI_Use_Real_Name') ? user.name : user.username}: ${notificationMessage}`;
    return {
      title,
      text
    };
  }
  /**
   * Check if there is an user with the same id and loginToken
   * @param {object} allowData
   * @return {object} User's object from db
   */


  canAccessUploadedFile()
  /* accessData */
  {
    return false;
  }

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"roomTypes":{"conversation.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/conversation.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  ConversationRoomType: () => ConversationRoomType
});
let RoomTypeConfig;
module.watch(require("../RoomTypeConfig"), {
  RoomTypeConfig(v) {
    RoomTypeConfig = v;
  }

}, 0);

class ConversationRoomType extends RoomTypeConfig {
  constructor() {
    super({
      identifier: 'merged',
      order: 30,
      label: 'Conversations'
    });
  }

  condition() {
    // returns true only if sidebarGroupByType is not set
    return !RocketChat.getUserPreference(Meteor.userId(), 'sidebarGroupByType');
  }

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"direct.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/direct.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  DirectMessageRoomRoute: () => DirectMessageRoomRoute,
  DirectMessageRoomType: () => DirectMessageRoomType
});
let RoomTypeConfig, RoomTypeRouteConfig, RoomSettingsEnum, UiTextContext;
module.watch(require("../RoomTypeConfig"), {
  RoomTypeConfig(v) {
    RoomTypeConfig = v;
  },

  RoomTypeRouteConfig(v) {
    RoomTypeRouteConfig = v;
  },

  RoomSettingsEnum(v) {
    RoomSettingsEnum = v;
  },

  UiTextContext(v) {
    UiTextContext = v;
  }

}, 0);

class DirectMessageRoomRoute extends RoomTypeRouteConfig {
  constructor() {
    super({
      name: 'direct',
      path: '/direct/:username'
    });
  }

  action(params) {
    return openRoom('d', params.username);
  }

  link(sub) {
    return {
      username: sub.name
    };
  }

}

class DirectMessageRoomType extends RoomTypeConfig {
  constructor() {
    super({
      identifier: 'd',
      order: 50,
      label: 'Direct_Messages',
      route: new DirectMessageRoomRoute()
    });
  }

  findRoom(identifier) {
    if (!RocketChat.authz.hasAtLeastOnePermission('view-d-room')) {
      return null;
    }

    const query = {
      t: 'd',
      name: identifier
    };
    const subscription = RocketChat.models.Subscriptions.findOne(query);

    if (subscription && subscription.rid) {
      return ChatRoom.findOne(subscription.rid);
    }
  }

  roomName(roomData) {
    const subscription = RocketChat.models.Subscriptions.findOne({
      rid: roomData._id
    }, {
      fields: {
        name: 1,
        fname: 1
      }
    });

    if (!subscription) {
      return '';
    }

    if (RocketChat.settings.get('UI_Use_Real_Name') && subscription.fname) {
      return subscription.fname;
    }

    return subscription.name;
  }

  secondaryRoomName(roomData) {
    if (RocketChat.settings.get('UI_Use_Real_Name')) {
      const subscription = RocketChat.models.Subscriptions.findOne({
        rid: roomData._id
      }, {
        fields: {
          name: 1
        }
      });
      return subscription && subscription.name;
    }
  }

  condition() {
    const groupByType = RocketChat.getUserPreference(Meteor.userId(), 'sidebarGroupByType');
    return groupByType && RocketChat.authz.hasAtLeastOnePermission(['view-d-room', 'view-joined-room']);
  }

  getUserStatus(roomId) {
    const subscription = RocketChat.models.Subscriptions.findOne({
      rid: roomId
    });

    if (subscription == null) {
      return;
    }

    return Session.get(`user_${subscription.name}_status`);
  }

  getDisplayName(room) {
    return room.usernames.join(' x ');
  }

  allowRoomSettingChange(room, setting) {
    switch (setting) {
      case RoomSettingsEnum.NAME:
      case RoomSettingsEnum.SYSTEM_MESSAGES:
      case RoomSettingsEnum.DESCRIPTION:
      case RoomSettingsEnum.READ_ONLY:
      case RoomSettingsEnum.REACT_WHEN_READ_ONLY:
      case RoomSettingsEnum.ARCHIVE_OR_UNARCHIVE:
      case RoomSettingsEnum.JOIN_CODE:
        return false;

      case RoomSettingsEnum.E2E:
        return RocketChat.settings.get('E2E_Enable') === true;

      default:
        return true;
    }
  }

  enableMembersListProfile() {
    return true;
  }

  userDetailShowAll()
  /* room */
  {
    return false;
  }

  getUiText(context) {
    switch (context) {
      case UiTextContext.HIDE_WARNING:
        return 'Hide_Private_Warning';

      case UiTextContext.LEAVE_WARNING:
        return 'Leave_Private_Warning';

      default:
        return '';
    }
  }
  /**
   * Returns details to use on notifications
   *
   * @param {object} room
   * @param {object} user
   * @param {string} notificationMessage
   * @return {object} Notification details
   */


  getNotificationDetails(room, user, notificationMessage) {
    if (!Meteor.isServer) {
      return {};
    }

    const title = RocketChat.settings.get('UI_Use_Real_Name') ? user.name : `@${user.username}`;
    const text = notificationMessage;
    return {
      title,
      text
    };
  }

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"favorite.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/favorite.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  FavoriteRoomType: () => FavoriteRoomType
});
let RoomTypeConfig;
module.watch(require("../RoomTypeConfig"), {
  RoomTypeConfig(v) {
    RoomTypeConfig = v;
  }

}, 0);

class FavoriteRoomType extends RoomTypeConfig {
  constructor() {
    super({
      identifier: 'f',
      order: 20,
      header: 'favorite',
      icon: 'star',
      label: 'Favorites'
    });
  }

  condition() {
    return RocketChat.settings.get('Favorite_Rooms') && RocketChat.getUserPreference(Meteor.userId(), 'sidebarShowFavorites');
  }

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/index.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  ConversationRoomType: () => ConversationRoomType,
  DirectMessageRoomType: () => DirectMessageRoomType,
  FavoriteRoomType: () => FavoriteRoomType,
  PrivateRoomType: () => PrivateRoomType,
  PublicRoomType: () => PublicRoomType,
  UnreadRoomType: () => UnreadRoomType
});
let ConversationRoomType;
module.watch(require("./conversation"), {
  ConversationRoomType(v) {
    ConversationRoomType = v;
  }

}, 0);
let DirectMessageRoomType;
module.watch(require("./direct"), {
  DirectMessageRoomType(v) {
    DirectMessageRoomType = v;
  }

}, 1);
let FavoriteRoomType;
module.watch(require("./favorite"), {
  FavoriteRoomType(v) {
    FavoriteRoomType = v;
  }

}, 2);
let PrivateRoomType;
module.watch(require("./private"), {
  PrivateRoomType(v) {
    PrivateRoomType = v;
  }

}, 3);
let PublicRoomType;
module.watch(require("./public"), {
  PublicRoomType(v) {
    PublicRoomType = v;
  }

}, 4);
let UnreadRoomType;
module.watch(require("./unread"), {
  UnreadRoomType(v) {
    UnreadRoomType = v;
  }

}, 5);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"private.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/private.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  PrivateRoomRoute: () => PrivateRoomRoute,
  PrivateRoomType: () => PrivateRoomType
});
let RoomSettingsEnum, RoomTypeConfig, RoomTypeRouteConfig, UiTextContext;
module.watch(require("../RoomTypeConfig"), {
  RoomSettingsEnum(v) {
    RoomSettingsEnum = v;
  },

  RoomTypeConfig(v) {
    RoomTypeConfig = v;
  },

  RoomTypeRouteConfig(v) {
    RoomTypeRouteConfig = v;
  },

  UiTextContext(v) {
    UiTextContext = v;
  }

}, 0);

class PrivateRoomRoute extends RoomTypeRouteConfig {
  constructor() {
    super({
      name: 'group',
      path: '/group/:name'
    });
  }

  action(params) {
    return openRoom('p', params.name);
  }

}

class PrivateRoomType extends RoomTypeConfig {
  constructor() {
    super({
      identifier: 'p',
      order: 40,
      icon: 'lock',
      label: 'Private_Groups',
      route: new PrivateRoomRoute()
    });
  }

  findRoom(identifier) {
    const query = {
      t: 'p',
      name: identifier
    };
    return ChatRoom.findOne(query);
  }

  roomName(roomData) {
    if (RocketChat.settings.get('UI_Allow_room_names_with_special_chars')) {
      return roomData.fname || roomData.name;
    }

    return roomData.name;
  }

  condition() {
    const groupByType = RocketChat.getUserPreference(Meteor.userId(), 'sidebarGroupByType');
    return groupByType && RocketChat.authz.hasAllPermission('view-p-room');
  }

  isGroupChat() {
    return true;
  }

  canAddUser(room) {
    return RocketChat.authz.hasAtLeastOnePermission(['add-user-to-any-p-room', 'add-user-to-joined-room'], room._id);
  }

  allowRoomSettingChange(room, setting) {
    switch (setting) {
      case RoomSettingsEnum.JOIN_CODE:
        return false;

      case RoomSettingsEnum.BROADCAST:
        return room.broadcast;

      case RoomSettingsEnum.READ_ONLY:
        return !room.broadcast;

      case RoomSettingsEnum.REACT_WHEN_READ_ONLY:
        return !room.broadcast && room.ro;

      case RoomSettingsEnum.SYSTEM_MESSAGES:
      case RoomSettingsEnum.E2E:
        return RocketChat.settings.get('E2E_Enable') === true;

      default:
        return true;
    }
  }

  enableMembersListProfile() {
    return true;
  }

  getUiText(context) {
    switch (context) {
      case UiTextContext.HIDE_WARNING:
        return 'Hide_Group_Warning';

      case UiTextContext.LEAVE_WARNING:
        return 'Leave_Group_Warning';

      default:
        return '';
    }
  }

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"public.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/public.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  PublicRoomRoute: () => PublicRoomRoute,
  PublicRoomType: () => PublicRoomType
});
let RoomTypeConfig, RoomTypeRouteConfig, RoomSettingsEnum, UiTextContext;
module.watch(require("../RoomTypeConfig"), {
  RoomTypeConfig(v) {
    RoomTypeConfig = v;
  },

  RoomTypeRouteConfig(v) {
    RoomTypeRouteConfig = v;
  },

  RoomSettingsEnum(v) {
    RoomSettingsEnum = v;
  },

  UiTextContext(v) {
    UiTextContext = v;
  }

}, 0);

class PublicRoomRoute extends RoomTypeRouteConfig {
  constructor() {
    super({
      name: 'channel',
      path: '/channel/:name'
    });
  }

  action(params) {
    return openRoom('c', params.name);
  }

}

class PublicRoomType extends RoomTypeConfig {
  constructor() {
    super({
      identifier: 'c',
      order: 30,
      icon: 'hashtag',
      label: 'Channels',
      route: new PublicRoomRoute()
    });
  }

  findRoom(identifier) {
    const query = {
      t: 'c',
      name: identifier
    };
    return ChatRoom.findOne(query);
  }

  roomName(roomData) {
    if (RocketChat.settings.get('UI_Allow_room_names_with_special_chars')) {
      return roomData.fname || roomData.name;
    }

    return roomData.name;
  }

  condition() {
    const groupByType = RocketChat.getUserPreference(Meteor.userId(), 'sidebarGroupByType');
    return groupByType && (RocketChat.authz.hasAtLeastOnePermission(['view-c-room', 'view-joined-room']) || RocketChat.settings.get('Accounts_AllowAnonymousRead') === true);
  }

  showJoinLink(roomId) {
    return !!ChatRoom.findOne({
      _id: roomId,
      t: 'c'
    });
  }

  includeInRoomSearch() {
    return true;
  }

  isGroupChat() {
    return true;
  }

  canAddUser(room) {
    return RocketChat.authz.hasAtLeastOnePermission(['add-user-to-any-c-room', 'add-user-to-joined-room'], room._id);
  }

  enableMembersListProfile() {
    return true;
  }

  allowRoomSettingChange(room, setting) {
    switch (setting) {
      case RoomSettingsEnum.BROADCAST:
        return room.broadcast;

      case RoomSettingsEnum.READ_ONLY:
        return !room.broadcast;

      case RoomSettingsEnum.REACT_WHEN_READ_ONLY:
        return !room.broadcast && room.ro;

      case RoomSettingsEnum.SYSTEM_MESSAGES:
      default:
        return true;
    }
  }

  getUiText(context) {
    switch (context) {
      case UiTextContext.HIDE_WARNING:
        return 'Hide_Room_Warning';

      case UiTextContext.LEAVE_WARNING:
        return 'Leave_Room_Warning';

      default:
        return '';
    }
  }

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unread.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/roomTypes/unread.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  UnreadRoomType: () => UnreadRoomType
});
let RoomTypeConfig;
module.watch(require("../RoomTypeConfig"), {
  RoomTypeConfig(v) {
    RoomTypeConfig = v;
  }

}, 0);

class UnreadRoomType extends RoomTypeConfig {
  constructor() {
    super({
      identifier: 'unread',
      order: 10,
      label: 'Unread'
    });
    this.unread = true;
  }

  condition() {
    return RocketChat.getUserPreference(Meteor.userId(), 'sidebarShowUnread');
  }

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"getURL.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/getURL.js                                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);

RocketChat.getURL = (path, {
  cdn = true,
  full = false
} = {}) => {
  const cdnPrefix = s.rtrim(s.trim(RocketChat.settings.get('CDN_PREFIX') || ''), '/');
  const pathPrefix = s.rtrim(s.trim(__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || ''), '/');
  let basePath;
  const finalPath = s.ltrim(s.trim(path), '/');

  if (cdn && cdnPrefix !== '') {
    basePath = cdnPrefix + pathPrefix;
  } else if (full || Meteor.isCordova) {
    return Meteor.absoluteUrl(finalPath);
  } else {
    basePath = pathPrefix;
  }

  return `${basePath}/${finalPath}`;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"callbacks.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/callbacks.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);

/*
* Callback hooks provide an easy way to add extra steps to common operations.
* @namespace RocketChat.callbacks
*/
RocketChat.callbacks = {};

if (Meteor.isServer) {
  RocketChat.callbacks.showTime = true;
  RocketChat.callbacks.showTotalTime = true;
} else {
  RocketChat.callbacks.showTime = false;
  RocketChat.callbacks.showTotalTime = false;
}
/*
* Callback priorities
*/


RocketChat.callbacks.priority = {
  HIGH: -1000,
  MEDIUM: 0,
  LOW: 1000
};

const getHooks = hookName => RocketChat.callbacks[hookName] || [];
/*
* Add a callback function to a hook
* @param {String} hook - The name of the hook
* @param {Function} callback - The callback function
*/


RocketChat.callbacks.add = function (hook, callback, priority, id = Random.id()) {
  if (!_.isNumber(priority)) {
    priority = RocketChat.callbacks.priority.MEDIUM;
  }

  callback.priority = priority;
  callback.id = id;
  RocketChat.callbacks[hook] = getHooks(hook);

  if (RocketChat.callbacks.showTime === true) {
    const err = new Error();
    callback.stack = err.stack;
  }

  if (RocketChat.callbacks[hook].find(cb => cb.id === callback.id)) {
    return;
  }

  RocketChat.callbacks[hook].push(callback);
  RocketChat.callbacks[hook] = _.sortBy(RocketChat.callbacks[hook], function (callback) {
    return callback.priority || RocketChat.callbacks.priority.MEDIUM;
  });
};
/*
* Remove a callback from a hook
* @param {string} hook - The name of the hook
* @param {string} id - The callback's id
*/


RocketChat.callbacks.remove = function (hook, id) {
  RocketChat.callbacks[hook] = getHooks(hook).filter(callback => callback.id !== id);
};
/*
* Successively run all of a hook's callbacks on an item
* @param {String} hook - The name of the hook
* @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks
* @param {Object} [constant] - An optional constant that will be passed along to each callback
* @returns {Object} Returns the item after it's been through all the callbacks for this hook
*/


RocketChat.callbacks.run = function (hook, item, constant) {
  const callbacks = RocketChat.callbacks[hook];

  if (!callbacks || !callbacks.length) {
    return item;
  }

  let rocketchatHooksEnd;

  if (Meteor.isServer) {
    rocketchatHooksEnd = RocketChat.metrics.rocketchatHooks.startTimer({
      hook,
      callbacks_length: callbacks.length
    });
  }

  let totalTime = 0;
  const result = callbacks.reduce(function (result, callback) {
    let rocketchatCallbacksEnd;

    if (Meteor.isServer) {
      rocketchatCallbacksEnd = RocketChat.metrics.rocketchatCallbacks.startTimer({
        hook,
        callback: callback.id
      });
    }

    const time = RocketChat.callbacks.showTime === true || RocketChat.callbacks.showTotalTime === true ? Date.now() : 0;
    const callbackResult = callback(result, constant);

    if (RocketChat.callbacks.showTime === true || RocketChat.callbacks.showTotalTime === true) {
      const currentTime = Date.now() - time;
      totalTime += currentTime;

      if (RocketChat.callbacks.showTime === true) {
        if (Meteor.isServer) {
          rocketchatCallbacksEnd();
          RocketChat.statsTracker.timing('callbacks.time', currentTime, [`hook:${hook}`, `callback:${callback.id}`]);
        } else {
          let stack = callback.stack && typeof callback.stack.split === 'function' && callback.stack.split('\n');
          stack = stack && stack[2] && (stack[2].match(/\(.+\)/) || [])[0];
          console.log(String(currentTime), hook, callback.id, stack);
        }
      }
    }

    return typeof callbackResult === 'undefined' ? result : callbackResult;
  }, item);

  if (Meteor.isServer) {
    rocketchatHooksEnd();
  }

  if (RocketChat.callbacks.showTotalTime === true) {
    if (Meteor.isServer) {
      RocketChat.statsTracker.timing('callbacks.totalTime', totalTime, [`hook:${hook}`]);
    } else {
      console.log(`${hook}:`, totalTime);
    }
  }

  return result;
};
/*
* Successively run all of a hook's callbacks on an item, in async mode (only works on server)
* @param {String} hook - The name of the hook
* @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks
* @param {Object} [constant] - An optional constant that will be passed along to each callback
*/


RocketChat.callbacks.runAsync = function (hook, item, constant) {
  const callbacks = RocketChat.callbacks[hook];

  if (Meteor.isServer && callbacks && callbacks.length) {
    Meteor.defer(function () {
      callbacks.forEach(callback => callback(item, constant));
    });
  }

  return item;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"fileUploadRestrictions.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/fileUploadRestrictions.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);

RocketChat.fileUploadMediaWhiteList = function () {
  const mediaTypeWhiteList = RocketChat.settings.get('FileUpload_MediaTypeWhiteList');

  if (!mediaTypeWhiteList || mediaTypeWhiteList === '*') {
    return;
  }

  return _.map(mediaTypeWhiteList.split(','), function (item) {
    return item.trim();
  });
};

RocketChat.fileUploadIsValidContentType = function (type) {
  const list = RocketChat.fileUploadMediaWhiteList();

  if (!list) {
    return true;
  }

  if (!type) {
    return false;
  }

  if (_.contains(list, type)) {
    return true;
  } else {
    const wildCardGlob = '/*';

    const wildcards = _.filter(list, function (item) {
      return item.indexOf(wildCardGlob) > 0;
    });

    if (_.contains(wildcards, type.replace(/(\/.*)$/, wildCardGlob))) {
      return true;
    }
  }

  return false;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getAvatarColor.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/getAvatarColor.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const colors = ['#F44336', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5', '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50', '#8BC34A', '#CDDC39', '#FFC107', '#FF9800', '#FF5722', '#795548', '#9E9E9E', '#607D8B'];

RocketChat.getAvatarColor = function (name) {
  return colors[name.length % colors.length];
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getDefaultSubscriptionPref.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/getDefaultSubscriptionPref.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.getDefaultSubscriptionPref = function _getDefaultSubscriptionPref(userPref) {
  const subscription = {};
  const {
    desktopNotifications,
    mobileNotifications,
    emailNotificationMode,
    highlights
  } = userPref.settings && userPref.settings.preferences || {};

  if (Array.isArray(highlights) && highlights.length) {
    subscription.userHighlights = highlights;
  }

  if (desktopNotifications && desktopNotifications !== 'default') {
    subscription.desktopNotifications = desktopNotifications;
    subscription.desktopPrefOrigin = 'user';
  }

  if (mobileNotifications && mobileNotifications !== 'default') {
    subscription.mobilePushNotifications = mobileNotifications;
    subscription.mobilePrefOrigin = 'user';
  }

  if (emailNotificationMode && emailNotificationMode !== 'default') {
    subscription.emailNotifications = emailNotificationMode;
    subscription.emailPrefOrigin = 'user';
  }

  return subscription;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getValidRoomName.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/getValidRoomName.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);

RocketChat.getValidRoomName = function getValidRoomName(displayName, rid = '') {
  let slugifiedName = displayName;

  if (RocketChat.settings.get('UI_Allow_room_names_with_special_chars')) {
    const room = RocketChat.models.Rooms.findOneByDisplayName(displayName);

    if (room && room._id !== rid) {
      if (room.archived) {
        throw new Meteor.Error('error-archived-duplicate-name', `There's an archived channel with name ${displayName}`, {
          function: 'RocketChat.getValidRoomName',
          channel_name: displayName
        });
      } else {
        throw new Meteor.Error('error-duplicate-channel-name', `A channel with name '${displayName}' exists`, {
          function: 'RocketChat.getValidRoomName',
          channel_name: displayName
        });
      }
    }

    slugifiedName = s.slugify(displayName);
  }

  let nameValidation;

  try {
    nameValidation = new RegExp(`^${RocketChat.settings.get('UTF8_Names_Validation')}$`);
  } catch (error) {
    nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');
  }

  if (!nameValidation.test(slugifiedName)) {
    throw new Meteor.Error('error-invalid-room-name', `${slugifiedName} is not a valid room name.`, {
      function: 'RocketChat.getValidRoomName',
      channel_name: slugifiedName
    });
  }

  const room = RocketChat.models.Rooms.findOneByName(slugifiedName);

  if (room && room._id !== rid) {
    if (RocketChat.settings.get('UI_Allow_room_names_with_special_chars')) {
      let tmpName = slugifiedName;
      let next = 0;

      while (RocketChat.models.Rooms.findOneByNameAndNotId(tmpName, rid)) {
        tmpName = `${slugifiedName}-${++next}`;
      }

      slugifiedName = tmpName;
    } else if (room.archived) {
      throw new Meteor.Error('error-archived-duplicate-name', `There's an archived channel with name ${slugifiedName}`, {
        function: 'RocketChat.getValidRoomName',
        channel_name: slugifiedName
      });
    } else {
      throw new Meteor.Error('error-duplicate-channel-name', `A channel with name '${slugifiedName}' exists`, {
        function: 'RocketChat.getValidRoomName',
        channel_name: slugifiedName
      });
    }
  }

  return slugifiedName;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"placeholders.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/placeholders.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);
RocketChat.placeholders = {};

RocketChat.placeholders.replace = function (str, data) {
  if (!str) {
    return '';
  }

  str = str.replace(/\[Site_Name\]/g, RocketChat.settings.get('Site_Name') || '');
  str = str.replace(/\[Site_URL\]/g, RocketChat.settings.get('Site_Url') || '');

  if (data) {
    str = str.replace(/\[name\]/g, data.name || '');
    str = str.replace(/\[fname\]/g, s.strLeft(data.name, ' ') || '');
    str = str.replace(/\[lname\]/g, s.strRightBack(data.name, ' ') || '');
    str = str.replace(/\[email\]/g, data.email || '');
    str = str.replace(/\[password\]/g, data.password || '');
    str = str.replace(/\[reason\]/g, data.reason || '');
    str = str.replace(/\[User\]/g, data.user || '');
    str = str.replace(/\[Room\]/g, data.room || '');

    if (data.unsubscribe) {
      str = str.replace(/\[unsubscribe\]/g, data.unsubscribe);
    }
  }

  str = str.replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1' + '<br>' + '$2');
  return str;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"promises.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/promises.js                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);

/*
* Callback hooks provide an easy way to add extra steps to common operations.
* @namespace RocketChat.promises
*/
RocketChat.promises = {};
/*
* Callback priorities
*/

RocketChat.promises.priority = {
  HIGH: -1000,
  MEDIUM: 0,
  LOW: 1000
};

const getHook = hookName => RocketChat.promises[hookName] || [];
/*
* Add a callback function to a hook
* @param {String} hook - The name of the hook
* @param {Function} callback - The callback function
*/


RocketChat.promises.add = function (hook, callback, p = RocketChat.promises.priority.MEDIUM, id) {
  callback.priority = _.isNumber(p) ? p : RocketChat.promises.priority.MEDIUM;
  callback.id = id || Random.id();
  RocketChat.promises[hook] = getHook(hook);

  if (RocketChat.promises[hook].find(cb => cb.id === callback.id)) {
    return;
  }

  RocketChat.promises[hook].push(callback);
  RocketChat.promises[hook] = _.sortBy(RocketChat.promises[hook], callback => callback.priority || RocketChat.promises.priority.MEDIUM);
};
/*
* Remove a callback from a hook
* @param {string} hook - The name of the hook
* @param {string} id - The callback's id
*/


RocketChat.promises.remove = function (hook, id) {
  RocketChat.promises[hook] = getHook(hook).filter(callback => callback.id !== id);
};
/*
* Successively run all of a hook's callbacks on an item
* @param {String} hook - The name of the hook
* @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks
* @param {Object} [constant] - An optional constant that will be passed along to each callback
* @returns {Object} Returns the item after it's been through all the callbacks for this hook
*/


RocketChat.promises.run = function (hook, item, constant) {
  const callbacks = RocketChat.promises[hook];

  if (callbacks == null || callbacks.length === 0) {
    return Promise.resolve(item);
  }

  return callbacks.reduce((previousPromise, callback) => previousPromise.then(result => callback(result, constant)), Promise.resolve(item));
};
/*
* Successively run all of a hook's callbacks on an item, in async mode (only works on server)
* @param {String} hook - The name of the hook
* @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks
* @param {Object} [constant] - An optional constant that will be passed along to each callback
*/


RocketChat.promises.runAsync = function (hook, item, constant) {
  const callbacks = RocketChat.promises[hook];

  if (!Meteor.isServer || callbacks == null || callbacks.length === 0) {
    return item;
  }

  Meteor.defer(() => callbacks.forEach(callback => callback(item, constant)));
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"RoomTypesCommon.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/RoomTypesCommon.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  RoomTypesCommon: () => RoomTypesCommon
});
let RoomTypeConfig;
module.watch(require("./RoomTypeConfig"), {
  RoomTypeConfig(v) {
    RoomTypeConfig = v;
  }

}, 0);

class RoomTypesCommon {
  constructor() {
    this.roomTypes = {};
    this.roomTypesOrder = [];
    this.mainOrder = 1;
  }
  /**
   * Adds a room type to the application.
   *
   * @param {RoomTypeConfig} roomConfig
   * @returns {void}
   */


  add(roomConfig) {
    if (!(roomConfig instanceof RoomTypeConfig)) {
      throw new Error('Invalid Room Configuration object, it must extend "RoomTypeConfig"');
    }

    if (this.roomTypes[roomConfig.identifier]) {
      return false;
    }

    if (!roomConfig.order) {
      roomConfig.order = this.mainOrder + 10;
      this.mainOrder += 10;
    }

    this.roomTypesOrder.push({
      identifier: roomConfig.identifier,
      order: roomConfig.order
    });
    this.roomTypes[roomConfig.identifier] = roomConfig;

    if (roomConfig.route && roomConfig.route.path && roomConfig.route.name && roomConfig.route.action) {
      const routeConfig = {
        name: roomConfig.route.name,
        action: roomConfig.route.action
      };

      if (Meteor.isClient) {
        routeConfig.triggersExit = [roomExit];
      }

      return FlowRouter.route(roomConfig.route.path, routeConfig);
    }
  }

  hasCustomLink(roomType) {
    return this.roomTypes[roomType] && this.roomTypes[roomType].route && this.roomTypes[roomType].route.link != null;
  }
  /**
   * @param {string} roomType room type (e.g.: c (for channels), d (for direct channels))
   * @param {object} subData the user's subscription data
   */


  getRouteLink(roomType, subData) {
    if (!this.roomTypes[roomType]) {
      return false;
    }

    let routeData = {};

    if (this.roomTypes[roomType] && this.roomTypes[roomType].route && this.roomTypes[roomType].route.link) {
      routeData = this.roomTypes[roomType].route.link(subData);
    } else if (subData && subData.name) {
      routeData = {
        name: subData.name
      };
    }

    return FlowRouter.path(this.roomTypes[roomType].route.name, routeData);
  }
  /**
   * @param {string} roomType room type (e.g.: c (for channels), d (for direct channels))
   * @param {RoomTypeConfig} roomConfig room's type configuration
   */


  getConfig(roomType) {
    return this.roomTypes[roomType];
  }

  getURL(...args) {
    const path = this.getRouteLink(...args);

    if (!path) {
      return false;
    }

    return Meteor.absoluteUrl(path.replace(/^\//, ''));
  }

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"slashCommand.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/slashCommand.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.slashCommands = {
  commands: {}
};

RocketChat.slashCommands.add = function _addingSlashCommand(command, callback, options = {}, result, providesPreview = false, previewer, previewCallback) {
  RocketChat.slashCommands.commands[command] = {
    command,
    callback,
    params: options.params,
    description: options.description,
    permission: options.permission,
    clientOnly: options.clientOnly || false,
    result,
    providesPreview,
    previewer,
    previewCallback
  };
};

RocketChat.slashCommands.run = function _runningSlashCommand(command, params, message) {
  if (RocketChat.slashCommands.commands[command] && typeof RocketChat.slashCommands.commands[command].callback === 'function') {
    if (!message || !message.rid) {
      throw new Meteor.Error('invalid-command-usage', 'Executing a command requires at least a message with a room id.');
    }

    return RocketChat.slashCommands.commands[command].callback(command, params, message);
  }
};

RocketChat.slashCommands.getPreviews = function _gettingSlashCommandPreviews(command, params, message) {
  if (RocketChat.slashCommands.commands[command] && typeof RocketChat.slashCommands.commands[command].previewer === 'function') {
    if (!message || !message.rid) {
      throw new Meteor.Error('invalid-command-usage', 'Executing a command requires at least a message with a room id.');
    } // { i18nTitle, items: [{ id, type, value }] }


    const previewInfo = RocketChat.slashCommands.commands[command].previewer(command, params, message);

    if (typeof previewInfo !== 'object' || !Array.isArray(previewInfo.items) || previewInfo.items.length === 0) {
      return;
    } // A limit of ten results, to save time and bandwidth


    if (previewInfo.items.length >= 10) {
      previewInfo.items = previewInfo.items.slice(0, 10);
    }

    return previewInfo;
  }
};

RocketChat.slashCommands.executePreview = function _executeSlashCommandPreview(command, params, message, preview) {
  if (RocketChat.slashCommands.commands[command] && typeof RocketChat.slashCommands.commands[command].previewCallback === 'function') {
    if (!message || !message.rid) {
      throw new Meteor.Error('invalid-command-usage', 'Executing a command requires at least a message with a room id.');
    } // { id, type, value }


    if (!preview.id || !preview.type || !preview.value) {
      throw new Meteor.Error('error-invalid-preview', 'Preview Item must have an id, type, and value.');
    }

    return RocketChat.slashCommands.commands[command].previewCallback(command, params, message, preview);
  }
};

Meteor.methods({
  slashCommand(command) {
    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'slashCommand'
      });
    }

    if (!command || !command.cmd || !RocketChat.slashCommands.commands[command.cmd]) {
      throw new Meteor.Error('error-invalid-command', 'Invalid Command Provided', {
        method: 'executeSlashCommandPreview'
      });
    }

    return RocketChat.slashCommands.run(command.cmd, command.params, command.msg);
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Message.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/Message.js                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);
RocketChat.Message = {
  parse(msg, language) {
    const messageType = RocketChat.MessageTypes.getType(msg);

    if (messageType) {
      if (messageType.render) {
        return messageType.render(msg);
      } else if (messageType.template) {
        // Render message
        return;
      } else if (messageType.message) {
        if (!language && typeof localStorage !== 'undefined') {
          language = localStorage.getItem('userLanguage');
        }

        const data = typeof messageType.data === 'function' && messageType.data(msg) || {};
        return TAPi18n.__(messageType.message, data, language);
      }
    }

    if (msg.u && msg.u.username === RocketChat.settings.get('Chatops_Username')) {
      msg.html = msg.msg;
      return msg.html;
    }

    msg.html = msg.msg;

    if (s.trim(msg.html) !== '') {
      msg.html = s.escapeHTML(msg.html);
    }

    msg.html = msg.html.replace(/\n/gm, '<br/>');
    return msg.html;
  }

};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"MessageProperties.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/MessageProperties.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  messageProperties: () => messageProperties
});
let GraphemeSplitter;
module.watch(require("grapheme-splitter"), {
  default(v) {
    GraphemeSplitter = v;
  }

}, 0);
const splitter = new GraphemeSplitter();
const messageProperties = {
  length: message => splitter.countGraphemes(message),
  messageWithoutEmojiShortnames: message => message.replace(/:\w+:/gm, match => {
    if (RocketChat.emoji.list[match] !== undefined) {
      return ' ';
    }

    return match;
  })
};

// check for tests
if (typeof RocketChat !== 'undefined') {
  RocketChat.messageProperties = messageProperties;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"messageBox.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/messageBox.js                                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/objectSpread"));

let EventEmitter;
module.watch(require("wolfy87-eventemitter"), {
  default(v) {
    EventEmitter = v;
  }

}, 0);
RocketChat.messageBox = new EventEmitter();
RocketChat.messageBox.actions = new class {
  constructor() {
    this.actions = {};
  }
  /* Add a action to messagebox
  @param group
  @param label
  @param config
  icon: icon class
  action: action function
  condition: condition to display the action
  */


  add(group, label, config) {
    if (!group && !label && !config) {
      return;
    }

    if (!this.actions[group]) {
      this.actions[group] = [];
    }

    const actionExists = this.actions[group].find(action => action.label === label);

    if (actionExists) {
      return;
    }

    this.actions[group].push((0, _objectSpread2.default)({}, config, {
      label
    }));
  }

  remove(group, expression) {
    if (!group || !this.actions[group]) {
      return false;
    }

    return this.actions[group] = this.actions[group].filter(action => expression.test(action.id));
  }

  get(group) {
    if (!group) {
      return Object.keys(this.actions).reduce((ret, key) => {
        const actions = this.actions[key].filter(action => !action.condition || action.condition());

        if (actions.length) {
          ret[key] = actions;
        }

        return ret;
      }, {});
    }

    return this.actions[group].filter(action => !action.condition || action.condition());
  }

  getById(id) {
    const messageActions = this.actions;
    let actions = [];
    Object.keys(messageActions).forEach(function (action) {
      actions = actions.concat(messageActions[action]);
    });
    return actions.filter(action => action.id === id);
  }

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"MessageTypes.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/MessageTypes.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.MessageTypes = new class {
  constructor() {
    this.types = {};
  }

  registerType(options) {
    return this.types[options.id] = options;
  }

  getType(message) {
    return this.types[message && message.t];
  }

  isSystemMessage(message) {
    const type = this.types[message && message.t];
    return type && type.system;
  }

}();
Meteor.startup(function () {
  RocketChat.MessageTypes.registerType({
    id: 'r',
    system: true,
    message: 'Room_name_changed',

    data(message) {
      return {
        room_name: message.msg,
        user_by: message.u.username
      };
    }

  });
  RocketChat.MessageTypes.registerType({
    id: 'au',
    system: true,
    message: 'User_added_by',

    data(message) {
      return {
        user_added: message.msg,
        user_by: message.u.username
      };
    }

  });
  RocketChat.MessageTypes.registerType({
    id: 'ru',
    system: true,
    message: 'User_removed_by',

    data(message) {
      return {
        user_removed: message.msg,
        user_by: message.u.username
      };
    }

  });
  RocketChat.MessageTypes.registerType({
    id: 'ul',
    system: true,
    message: 'User_left',

    data(message) {
      return {
        user_left: message.u.username
      };
    }

  });
  RocketChat.MessageTypes.registerType({
    id: 'uj',
    system: true,
    message: 'User_joined_channel',

    data(message) {
      return {
        user: message.u.username
      };
    }

  });
  RocketChat.MessageTypes.registerType({
    id: 'wm',
    system: true,
    message: 'Welcome',

    data(message) {
      return {
        user: message.u.username
      };
    }

  });
  RocketChat.MessageTypes.registerType({
    id: 'rm',
    system: true,
    message: 'Message_removed',

    data(message) {
      return {
        user: message.u.username
      };
    }

  });
  RocketChat.MessageTypes.registerType({
    id: 'rtc',

    render(message) {
      return RocketChat.callbacks.run('renderRtcMessage', message);
    }

  });
  RocketChat.MessageTypes.registerType({
    id: 'user-muted',
    system: true,
    message: 'User_muted_by',

    data(message) {
      return {
        user_muted: message.msg,
        user_by: message.u.username
      };
    }

  });
  RocketChat.MessageTypes.registerType({
    id: 'user-unmuted',
    system: true,
    message: 'User_unmuted_by',

    data(message) {
      return {
        user_unmuted: message.msg,
        user_by: message.u.username
      };
    }

  });
  RocketChat.MessageTypes.registerType({
    id: 'subscription-role-added',
    system: true,
    message: '__username__was_set__role__by__user_by_',

    data(message) {
      return {
        username: message.msg,
        role: message.role,
        user_by: message.u.username
      };
    }

  });
  RocketChat.MessageTypes.registerType({
    id: 'subscription-role-removed',
    system: true,
    message: '__username__is_no_longer__role__defined_by__user_by_',

    data(message) {
      return {
        username: message.msg,
        role: message.role,
        user_by: message.u.username
      };
    }

  });
  RocketChat.MessageTypes.registerType({
    id: 'room-archived',
    system: true,
    message: 'This_room_has_been_archived_by__username_',

    data(message) {
      return {
        username: message.u.username
      };
    }

  });
  RocketChat.MessageTypes.registerType({
    id: 'room-unarchived',
    system: true,
    message: 'This_room_has_been_unarchived_by__username_',

    data(message) {
      return {
        username: message.u.username
      };
    }

  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"templateVarHandler.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/templateVarHandler.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let logger;

if (Meteor.isServer) {
  logger = new Logger('TemplateVarHandler', {});
}

RocketChat.templateVarHandler = function (variable, object) {
  const templateRegex = /#{([\w\-]+)}/gi;
  let match = templateRegex.exec(variable);
  let tmpVariable = variable;

  if (match == null) {
    if (!object.hasOwnProperty(variable)) {
      logger && logger.debug(`user does not have attribute: ${variable}`);
      return;
    }

    return object[variable];
  } else {
    logger && logger.debug('template found. replacing values');

    while (match != null) {
      const tmplVar = match[0];
      const tmplAttrName = match[1];

      if (!object.hasOwnProperty(tmplAttrName)) {
        logger && logger.debug(`user does not have attribute: ${tmplAttrName}`);
        return;
      }

      const attrVal = object[tmplAttrName];
      logger && logger.debug(`replacing template var: ${tmplVar} with value: ${attrVal}`);
      tmpVariable = tmpVariable.replace(tmplVar, attrVal);
      match = templateRegex.exec(variable);
    }

    return tmpVariable;
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getUserNotificationPreference.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/getUserNotificationPreference.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.getUserNotificationPreference = function _getUserNotificationPreference(user, pref) {
  if (typeof user === 'string') {
    user = RocketChat.models.Users.findOneById(user);
  }

  let preferenceKey;

  switch (pref) {
    case 'desktop':
      preferenceKey = 'desktopNotifications';
      break;

    case 'mobile':
      preferenceKey = 'mobileNotifications';
      break;

    case 'email':
      preferenceKey = 'emailNotificationMode';
      break;
  }

  if (user && user.settings && user.settings.preferences && user.settings.preferences[preferenceKey] !== 'default') {
    return {
      value: user.settings.preferences[preferenceKey],
      origin: 'user'
    };
  }

  const serverValue = RocketChat.settings.get(`Accounts_Default_User_Preferences_${preferenceKey}`);

  if (serverValue) {
    return {
      value: serverValue,
      origin: 'server'
    };
  }

  return null;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getUserPreference.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/getUserPreference.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**
 * Tries to retrieve the user preference falling back to a default system
 * value or to a default value if it is passed as argument
*/
RocketChat.getUserPreference = function (user, key, defaultValue = undefined) {
  let preference;

  if (typeof user === typeof '') {
    user = RocketChat.models.Users.findOne(user, {
      fields: {
        [`settings.preferences.${key}`]: 1
      }
    });
  }

  if (user && user.settings && user.settings.preferences && user.settings.preferences.hasOwnProperty(key)) {
    preference = user.settings.preferences[key];
  } else if (defaultValue === undefined) {
    preference = RocketChat.settings.get(`Accounts_Default_User_Preferences_${key}`);
  }

  return preference !== undefined ? preference : defaultValue;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"startup":{"settingsOnLoadSiteUrl.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/lib/startup/settingsOnLoadSiteUrl.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals WebAppInternals */
RocketChat.settings.get('Site_Url', function (key, value) {
  if (value == null || value.trim() === '') {
    return;
  }

  let host = value.replace(/\/$/, ''); // let prefix = '';

  const match = value.match(/([^\/]+\/{2}[^\/]+)(\/.+)/);

  if (match != null) {
    host = match[1]; // prefix = match[2].replace(/\/$/, '');
  }

  __meteor_runtime_config__.ROOT_URL = value;

  if (Meteor.absoluteUrl.defaultOptions && Meteor.absoluteUrl.defaultOptions.rootUrl) {
    Meteor.absoluteUrl.defaultOptions.rootUrl = value;
  }

  if (Meteor.isServer) {
    RocketChat.hostname = host.replace(/^https?:\/\//, '');
    process.env.MOBILE_ROOT_URL = host;
    process.env.MOBILE_DDP_URL = host;

    if (typeof WebAppInternals !== 'undefined' && WebAppInternals.generateBoilerplate) {
      return WebAppInternals.generateBoilerplate();
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"server":{"lib":{"debug.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/debug.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
const logger = new Logger('Meteor', {
  methods: {
    method: {
      type: 'debug'
    },
    publish: {
      type: 'debug'
    }
  }
});
let Log_Trace_Methods;
let Log_Trace_Subscriptions;
RocketChat.settings.get('Log_Trace_Methods', (key, value) => Log_Trace_Methods = value);
RocketChat.settings.get('Log_Trace_Subscriptions', (key, value) => Log_Trace_Subscriptions = value);
let Log_Trace_Methods_Filter;
let Log_Trace_Subscriptions_Filter;
RocketChat.settings.get('Log_Trace_Methods_Filter', (key, value) => Log_Trace_Methods_Filter = value ? new RegExp(value) : undefined);
RocketChat.settings.get('Log_Trace_Subscriptions_Filter', (key, value) => Log_Trace_Subscriptions_Filter = value ? new RegExp(value) : undefined);

const traceConnection = (enable, filter, prefix, name, connection, userId) => {
  if (!enable) {
    return;
  }

  if (filter && !filter.test(name)) {
    return;
  }

  if (connection) {
    console.log(name, {
      id: connection.id,
      clientAddress: connection.clientAddress,
      httpHeaders: connection.httpHeaders,
      userId
    });
  } else {
    console.log(name, 'no-connection');
  }
};

const wrapMethods = function (name, originalHandler, methodsMap) {
  methodsMap[name] = function (...originalArgs) {
    traceConnection(Log_Trace_Methods, Log_Trace_Methods_Filter, 'method', name, this.connection, this.userId);
    const end = RocketChat.metrics.meteorMethods.startTimer({
      method: name,
      has_connection: this.connection != null,
      has_user: this.userId != null
    });
    const args = name === 'ufsWrite' ? Array.prototype.slice.call(originalArgs, 1) : originalArgs;
    logger.method(name, '-> userId:', Meteor.userId(), ', arguments: ', args);
    this.unblock();
    const result = originalHandler.apply(this, originalArgs);
    end();
    return result;
  };
};

const originalMeteorMethods = Meteor.methods;

Meteor.methods = function (methodMap) {
  _.each(methodMap, function (handler, name) {
    wrapMethods(name, handler, methodMap);
  });

  originalMeteorMethods(methodMap);
};

const originalMeteorPublish = Meteor.publish;

Meteor.publish = function (name, func) {
  return originalMeteorPublish(name, function (...args) {
    traceConnection(Log_Trace_Subscriptions, Log_Trace_Subscriptions_Filter, 'subscription', name, this.connection, this.userId);
    logger.publish(name, '-> userId:', this.userId, ', arguments: ', args);
    const end = RocketChat.metrics.meteorSubscriptions.startTimer({
      subscription: name
    });
    const originalReady = this.ready;

    this.ready = function () {
      end();
      return originalReady.apply(this, args);
    };

    return func.apply(this, args);
  });
};

WebApp.rawConnectHandlers.use(function (req, res, next) {
  res.setHeader('X-Instance-ID', InstanceStatus.id());
  return next();
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"bugsnag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/bugsnag.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let bugsnag;
module.watch(require("bugsnag"), {
  default(v) {
    bugsnag = v;
  }

}, 0);
RocketChat.bugsnag = bugsnag;
RocketChat.settings.get('Bugsnag_api_key', (key, value) => {
  if (value) {
    bugsnag.register(value);
  }
});

const notify = function (message, stack) {
  if (typeof stack === 'string') {
    message += ` ${stack}`;
  }

  let options = {};

  if (RocketChat.Info) {
    options = {
      app: {
        version: RocketChat.Info.version,
        info: RocketChat.Info
      }
    };
  }

  const error = new Error(message);
  error.stack = stack;
  RocketChat.bugsnag.notify(error, options);
};

process.on('uncaughtException', Meteor.bindEnvironment(error => {
  notify(error.message, error.stack);
  throw error;
}));
const originalMeteorDebug = Meteor._debug;

Meteor._debug = function (...args) {
  notify(...args);
  return originalMeteorDebug(...args);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"metrics.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/metrics.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let client;
module.watch(require("prom-client"), {
  default(v) {
    client = v;
  }

}, 0);
let connect;
module.watch(require("connect"), {
  default(v) {
    connect = v;
  }

}, 1);
let http;
module.watch(require("http"), {
  default(v) {
    http = v;
  }

}, 2);

let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 3);
RocketChat.promclient = client;
client.collectDefaultMetrics();
RocketChat.metrics = {}; // one sample metrics only - a counter

RocketChat.metrics.meteorMethods = new client.Summary({
  name: 'rocketchat_meteor_methods',
  help: 'summary of meteor methods count and time',
  labelNames: ['method', 'has_connection', 'has_user']
});
RocketChat.metrics.rocketchatCallbacks = new client.Summary({
  name: 'rocketchat_callbacks',
  help: 'summary of rocketchat callbacks count and time',
  labelNames: ['hook', 'callback']
});
RocketChat.metrics.rocketchatHooks = new client.Summary({
  name: 'rocketchat_hooks',
  help: 'summary of rocketchat hooks count and time',
  labelNames: ['hook', 'callbacks_length']
});
RocketChat.metrics.rocketchatRestApi = new client.Summary({
  name: 'rocketchat_rest_api',
  help: 'summary of rocketchat rest api count and time',
  labelNames: ['method', 'entrypoint', 'user_agent', 'status', 'version']
});
RocketChat.metrics.meteorSubscriptions = new client.Summary({
  name: 'rocketchat_meteor_subscriptions',
  help: 'summary of meteor subscriptions count and time',
  labelNames: ['subscription']
});
RocketChat.metrics.messagesSent = new client.Counter({
  name: 'rocketchat_message_sent',
  help: 'cumulated number of messages sent'
});
RocketChat.metrics.notificationsSent = new client.Counter({
  name: 'rocketchat_notification_sent',
  labelNames: ['notification_type'],
  help: 'cumulated number of notifications sent'
});
RocketChat.metrics.ddpSessions = new client.Gauge({
  name: 'rocketchat_ddp_sessions_count',
  help: 'number of open ddp sessions'
});
RocketChat.metrics.ddpAthenticatedSessions = new client.Gauge({
  name: 'rocketchat_ddp_sessions_auth',
  help: 'number of authenticated open ddp sessions'
});
RocketChat.metrics.ddpConnectedUsers = new client.Gauge({
  name: 'rocketchat_ddp_connected_users',
  help: 'number of unique connected users'
});
RocketChat.metrics.version = new client.Gauge({
  name: 'rocketchat_version',
  labelNames: ['version'],
  help: 'Rocket.Chat version'
});
RocketChat.metrics.migration = new client.Gauge({
  name: 'rocketchat_migration',
  help: 'migration versoin'
});
RocketChat.metrics.instanceCount = new client.Gauge({
  name: 'rocketchat_instance_count',
  help: 'instances running'
});
RocketChat.metrics.oplogEnabled = new client.Gauge({
  name: 'rocketchat_oplog_enabled',
  labelNames: ['enabled'],
  help: 'oplog enabled'
}); // User statistics

RocketChat.metrics.totalUsers = new client.Gauge({
  name: 'rocketchat_users_total',
  help: 'total of users'
});
RocketChat.metrics.activeUsers = new client.Gauge({
  name: 'rocketchat_users_active',
  help: 'total of active users'
});
RocketChat.metrics.nonActiveUsers = new client.Gauge({
  name: 'rocketchat_users_non_active',
  help: 'total of non active users'
});
RocketChat.metrics.onlineUsers = new client.Gauge({
  name: 'rocketchat_users_online',
  help: 'total of users online'
});
RocketChat.metrics.awayUsers = new client.Gauge({
  name: 'rocketchat_users_away',
  help: 'total of users away'
});
RocketChat.metrics.offlineUsers = new client.Gauge({
  name: 'rocketchat_users_offline',
  help: 'total of users offline'
}); // Room statistics

RocketChat.metrics.totalRooms = new client.Gauge({
  name: 'rocketchat_rooms_total',
  help: 'total of rooms'
});
RocketChat.metrics.totalChannels = new client.Gauge({
  name: 'rocketchat_channels_total',
  help: 'total of public rooms/channels'
});
RocketChat.metrics.totalPrivateGroups = new client.Gauge({
  name: 'rocketchat_private_groups_total',
  help: 'total of private rooms'
});
RocketChat.metrics.totalDirect = new client.Gauge({
  name: 'rocketchat_direct_total',
  help: 'total of direct rooms'
});
RocketChat.metrics.totalLivechat = new client.Gauge({
  name: 'rocketchat_livechat_total',
  help: 'total of livechat rooms'
}); // Message statistics

RocketChat.metrics.totalMessages = new client.Gauge({
  name: 'rocketchat_messages_total',
  help: 'total of messages'
});
RocketChat.metrics.totalChannelMessages = new client.Gauge({
  name: 'rocketchat_channel_messages_total',
  help: 'total of messages in public rooms'
});
RocketChat.metrics.totalPrivateGroupMessages = new client.Gauge({
  name: 'rocketchat_private_group_messages_total',
  help: 'total of messages in private rooms'
});
RocketChat.metrics.totalDirectMessages = new client.Gauge({
  name: 'rocketchat_direct_messages_total',
  help: 'total of messages in direct rooms'
});
RocketChat.metrics.totalLivechatMessages = new client.Gauge({
  name: 'rocketchat_livechat_messages_total',
  help: 'total of messages in livechat rooms'
});
client.register.setDefaultLabels({
  uniqueId: RocketChat.settings.get('uniqueID'),
  siteUrl: RocketChat.settings.get('Site_Url')
});

const setPrometheusData = () => {
  const date = new Date();
  client.register.setDefaultLabels({
    unique_id: RocketChat.settings.get('uniqueID'),
    site_url: RocketChat.settings.get('Site_Url'),
    version: RocketChat.Info.version
  });
  const sessions = Object.values(Meteor.server.sessions);
  const authenticatedSessions = sessions.filter(s => s.userId);
  RocketChat.metrics.ddpSessions.set(sessions.length, date);
  RocketChat.metrics.ddpAthenticatedSessions.set(authenticatedSessions.length, date);
  RocketChat.metrics.ddpConnectedUsers.set(_.unique(authenticatedSessions.map(s => s.userId)).length, date);

  if (!RocketChat.models.Statistics) {
    return;
  }

  const statistics = RocketChat.models.Statistics.findLast();

  if (!statistics) {
    return;
  }

  RocketChat.metrics.version.set({
    version: statistics.version
  }, 1, date);
  RocketChat.metrics.migration.set(RocketChat.Migrations._getControl().version, date);
  RocketChat.metrics.instanceCount.set(statistics.instanceCount, date);
  RocketChat.metrics.oplogEnabled.set({
    enabled: statistics.oplogEnabled
  }, 1, date); // User statistics

  RocketChat.metrics.totalUsers.set(statistics.totalUsers, date);
  RocketChat.metrics.activeUsers.set(statistics.activeUsers, date);
  RocketChat.metrics.nonActiveUsers.set(statistics.nonActiveUsers, date);
  RocketChat.metrics.onlineUsers.set(statistics.onlineUsers, date);
  RocketChat.metrics.awayUsers.set(statistics.awayUsers, date);
  RocketChat.metrics.offlineUsers.set(statistics.offlineUsers, date); // Room statistics

  RocketChat.metrics.totalRooms.set(statistics.totalRooms, date);
  RocketChat.metrics.totalChannels.set(statistics.totalChannels, date);
  RocketChat.metrics.totalPrivateGroups.set(statistics.totalPrivateGroups, date);
  RocketChat.metrics.totalDirect.set(statistics.totalDirect, date);
  RocketChat.metrics.totalLivechat.set(statistics.totalLivechat, date); // Message statistics

  RocketChat.metrics.totalMessages.set(statistics.totalMessages, date);
  RocketChat.metrics.totalChannelMessages.set(statistics.totalChannelMessages, date);
  RocketChat.metrics.totalPrivateGroupMessages.set(statistics.totalPrivateGroupMessages, date);
  RocketChat.metrics.totalDirectMessages.set(statistics.totalDirectMessages, date);
  RocketChat.metrics.totalLivechatMessages.set(statistics.totalLivechatMessages, date);
};

const app = connect(); // const compression = require('compression');
// app.use(compression());

app.use('/metrics', (req, res) => {
  res.setHeader('Content-Type', 'text/plain');
  res.end(RocketChat.promclient.register.metrics());
});
app.use('/', (req, res) => {
  const html = `<html>
		<head>
			<title>Rocket.Chat Prometheus Exporter</title>
		</head>
		<body>
			<h1>Rocket.Chat Prometheus Exporter</h1>
			<p><a href="/metrics">Metrics</a></p>
		</body>
	</html>`;
  res.write(html);
  res.end();
});
const server = http.createServer(app);
let timer;

const updatePrometheusConfig = () => {
  const port = RocketChat.settings.get('Prometheus_Port');
  const enabled = RocketChat.settings.get('Prometheus_Enabled');

  if (port == null || enabled == null) {
    return;
  }

  if (enabled === true) {
    server.listen({
      port,
      host: process.env.BIND_IP || '0.0.0.0'
    });
    timer = Meteor.setInterval(setPrometheusData, 5000);
  } else {
    server.close();
    Meteor.clearInterval(timer);
  }
};

RocketChat.settings.get('Prometheus_Enabled', updatePrometheusConfig);
RocketChat.settings.get('Prometheus_Port', updatePrometheusConfig);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"RateLimiter.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/RateLimiter.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
RocketChat.RateLimiter = new class {
  limitFunction(fn, numRequests, timeInterval, matchers) {
    if (process.env.TEST_MODE === 'true') {
      return fn;
    }

    const rateLimiter = new RateLimiter();
    rateLimiter.addRule(matchers, numRequests, timeInterval);
    return function (...args) {
      const match = {};

      _.each(matchers, function (matcher, key) {
        return match[key] = args[key];
      });

      rateLimiter.increment(match);
      const rateLimitResult = rateLimiter.check(match);

      if (rateLimitResult.allowed) {
        return fn.apply(null, args);
      } else {
        throw new Meteor.Error('error-too-many-requests', `Error, too many requests. Please slow down. You must wait ${Math.ceil(rateLimitResult.timeToReset / 1000)} seconds before trying again.`, {
          timeToReset: rateLimitResult.timeToReset,
          seconds: Math.ceil(rateLimitResult.timeToReset / 1000)
        });
      }
    };
  }

  limitMethod(methodName, numRequests, timeInterval, matchers) {
    if (process.env.TEST_MODE === 'true') {
      return;
    }

    const match = {
      type: 'method',
      name: methodName
    };

    _.each(matchers, function (matcher, key) {
      return match[key] = matchers[key];
    });

    return DDPRateLimiter.addRule(match, numRequests, timeInterval);
  }

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"configLogger.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/configLogger.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals LoggerManager */
RocketChat.settings.get('Log_Package', function (key, value) {
  return LoggerManager.showPackage = value;
});
RocketChat.settings.get('Log_File', function (key, value) {
  return LoggerManager.showFileAndLine = value;
});
RocketChat.settings.get('Log_Level', function (key, value) {
  if (value != null) {
    LoggerManager.logLevel = parseInt(value);
    Meteor.setTimeout(() => LoggerManager.enable(true), 200);
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"PushNotification.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/PushNotification.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals Push */
class PushNotification {
  getNotificationId(roomId) {
    const serverId = RocketChat.settings.get('uniqueID');
    return this.hash(`${serverId}|${roomId}`); // hash
  }

  hash(str) {
    let hash = 0;
    let i = str.length;

    while (i) {
      hash = (hash << 5) - hash + str.charCodeAt(--i);
      hash = hash & hash; // Convert to 32bit integer
    }

    return hash;
  }

  send({
    roomName,
    roomId,
    username,
    message,
    usersTo,
    payload,
    badge = 1,
    category
  }) {
    let title;

    if (roomName && roomName !== '') {
      title = `${roomName}`;
      message = `${username}: ${message}`;
    } else {
      title = `${username}`;
    }

    const config = {
      from: 'push',
      badge,
      sound: 'default',
      title,
      text: message,
      payload,
      query: usersTo,
      notId: this.getNotificationId(roomId),
      gcm: {
        style: 'inbox',
        summaryText: '%n% new messages',
        image: RocketChat.Assets.getURL('Assets_favicon_192')
      }
    };

    if (category !== '') {
      config.apn = {
        category
      };
    }

    RocketChat.metrics.notificationsSent.inc({
      notification_type: 'mobile'
    });
    return Push.send(config);
  }

}

RocketChat.PushNotification = new PushNotification();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"defaultBlockedDomainsList.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/defaultBlockedDomainsList.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.emailDomainDefaultBlackList = ['0-mail.com', '0815.ru', '0815.su', '0clickemail.com', '0wnd.net', '0wnd.org', '10mail.org', '10minut.com.pl', '10minutemail.co.za', '10minutemail.com', '10minutemail.de', '123-m.com', '1chuan.com', '1fsdfdsfsdf.tk', '1pad.de', '1zhuan.com', '20email.eu', '20mail.eu', '20mail.it', '20minutemail.com', '21cn.com', '2fdgdfgdfgdf.tk', '2prong.com', '30minutemail.com', '33mail.com', '3d-painting.com', '3trtretgfrfe.tk', '4gfdsgfdgfd.tk', '4warding.com', '4warding.net', '4warding.org', '5ghgfhfghfgh.tk', '60minutemail.com', '675hosting.com', '675hosting.net', '675hosting.org', '6hjgjhgkilkj.tk', '6ip.us', '6paq.com', '6url.com', '75hosting.com', '75hosting.net', '75hosting.org', '7days-printing.com', '7tags.com', '99experts.com', '9ox.net', 'a-bc.net', 'a45.in', 'abcmail.email', 'abyssmail.com', 'acentri.com', 'advantimo.com', 'afrobacon.com', 'ag.us.to', 'agedmail.com', 'ahk.jp', 'ajaxapp.net', 'alivance.com', 'ama-trade.de', 'amail.com', 'amilegit.com', 'amiri.net', 'amiriindustries.com', 'anappthat.com', 'ano-mail.net', 'anonbox.net', 'anonmails.de', 'anonymail.dk', 'anonymbox.com', 'antichef.com', 'antichef.net', 'antireg.ru', 'antispam.de', 'antispammail.de', 'appixie.com', 'armyspy.com', 'artman-conception.com', 'aver.com', 'azmeil.tk', 'baxomale.ht.cx', 'beddly.com', 'beefmilk.com', 'bigprofessor.so', 'bigstring.com', 'binkmail.com', 'bio-muesli.net', 'blogmyway.org', 'bobmail.info', 'bofthew.com', 'bootybay.de', 'boun.cr', 'bouncr.com', 'boxformail.in', 'breakthru.com', 'brefmail.com', 'brennendesreich.de', 'broadbandninja.com', 'bsnow.net', 'bspamfree.org', 'bu.mintemail.com', 'buffemail.com', 'bugmenot.com', 'bumpymail.com', 'bund.us', 'bundes-li.ga', 'burnthespam.info', 'burstmail.info', 'buymoreplays.com', 'buyusedlibrarybooks.org', 'byom.de', 'c2.hu', 'cachedot.net', 'card.zp.ua', 'casualdx.com', 'cbair.com', 'cek.pm', 'cellurl.com', 'centermail.com', 'centermail.net', 'chammy.info', 'cheatmail.de', 'childsavetrust.org', 'chogmail.com', 'choicemail1.com', 'chong-mail.com', 'chong-mail.net', 'chong-mail.org', 'clixser.com', 'cmail.com', 'cmail.net', 'cmail.org', 'coldemail.info', 'consumerriot.com', 'cool.fr.nf', 'correo.blogos.net', 'cosmorph.com', 'courriel.fr.nf', 'courrieltemporaire.com', 'crapmail.org', 'crazymailing.com', 'cubiclink.com', 'curryworld.de', 'cust.in', 'cuvox.de', 'd3p.dk', 'dacoolest.com', 'daintly.com', 'dandikmail.com', 'dayrep.com', 'dbunker.com', 'dcemail.com', 'deadaddress.com', 'deadspam.com', 'deagot.com', 'dealja.com', 'delikkt.de', 'despam.it', 'despammed.com', 'devnullmail.com', 'dfgh.net', 'digitalsanctuary.com', 'dingbone.com', 'discard.email', 'discardmail.com', 'discardmail.de', 'disposableaddress.com', 'disposableemailaddresses.com', 'disposableemailaddresses.emailmiser.com', 'disposableinbox.com', 'dispose.it', 'disposeamail.com', 'disposemail.com', 'dispostable.com', 'dlemail.ru', 'dm.w3internet.co.uk', 'dm.w3internet.co.ukexample.com', 'dodgeit.com', 'dodgit.com', 'dodgit.org', 'doiea.com', 'domozmail.com', 'donemail.ru', 'dontreg.com', 'dontsendmespam.de', 'dotmsg.com', 'drdrb.com', 'drdrb.net', 'droplar.com', 'dropmail.me', 'dt.com', 'duam.net', 'dudmail.com', 'dump-email.info', 'dumpandjunk.com', 'dumpmail.de', 'dumpyemail.com', 'duskmail.com', 'e-mail.com', 'e-mail.org', 'e4ward.com', 'easytrashmail.com', 'einmalmail.de', 'einrot.com', 'einrot.de', 'eintagsmail.de', 'email60.com', 'emaildienst.de', 'emailgo.de', 'emailias.com', 'emailigo.de', 'emailinfive.com', 'emaillime.com', 'emailmiser.com', 'emailproxsy.com', 'emailsensei.com', 'emailtemporanea.com', 'emailtemporanea.net', 'emailtemporar.ro', 'emailtemporario.com.br', 'emailthe.net', 'emailtmp.com', 'emailto.de', 'emailwarden.com', 'emailx.at.hm', 'emailxfer.com', 'emeil.in', 'emeil.ir', 'emil.com', 'emz.net', 'enterto.com', 'ephemail.net', 'ero-tube.org', 'etranquil.com', 'etranquil.net', 'etranquil.org', 'evopo.com', 'explodemail.com', 'express.net.ua', 'eyepaste.com', 'fakeinbox.com', 'fakeinformation.com', 'fakemail.fr', 'fakemailz.com', 'fammix.com', 'fansworldwide.de', 'fantasymail.de', 'fastacura.com', 'fastchevy.com', 'fastchrysler.com', 'fastkawasaki.com', 'fastmazda.com', 'fastmitsubishi.com', 'fastnissan.com', 'fastsubaru.com', 'fastsuzuki.com', 'fasttoyota.com', 'fastyamaha.com', 'fatflap.com', 'fdfdsfds.com', 'fightallspam.com', 'figjs.com', 'fiifke.de', 'filzmail.com', 'fivemail.de', 'fixmail.tk', 'fizmail.com', 'fleckens.hu', 'flemail.ru', 'flyspam.com', 'footard.com', 'forgetmail.com', 'fr33mail.info', 'frapmail.com', 'freundin.ru', 'friendlymail.co.uk', 'front14.org', 'fuckingduh.com', 'fudgerub.com', 'fux0ringduh.com', 'fyii.de', 'garliclife.com', 'gehensiemirnichtaufdensack.de', 'gelitik.in', 'get1mail.com', 'get2mail.fr', 'getairmail.com', 'getmails.eu', 'getonemail.com', 'getonemail.net', 'ghosttexter.de', 'giantmail.de', 'girlsundertheinfluence.com', 'gishpuppy.com', 'gmial.com', 'goemailgo.com', 'gorillaswithdirtyarmpits.com', 'gotmail.com', 'gotmail.net', 'gotmail.org', 'gotti.otherinbox.com', 'gowikibooks.com', 'gowikicampus.com', 'gowikicars.com', 'gowikifilms.com', 'gowikigames.com', 'gowikimusic.com', 'gowikimusic.great-host.in', 'gowikinetwork.com', 'gowikitravel.com', 'gowikitv.com', 'grandmamail.com', 'grandmasmail.com', 'great-host.in', 'greensloth.com', 'grr.la', 'gsrv.co.uk', 'guerillamail.biz', 'guerillamail.com', 'guerillamail.net', 'guerillamail.org', 'guerrillamail.biz', 'guerrillamail.com', 'guerrillamail.de', 'guerrillamail.info', 'guerrillamail.net', 'guerrillamail.org', 'guerrillamailblock.com', 'gustr.com', 'h.mintemail.com', 'h8s.org', 'hacccc.com', 'haltospam.com', 'harakirimail.com', 'hartbot.de', 'hat-geld.de', 'hatespam.org', 'hellodream.mobi', 'herp.in', 'hidemail.de', 'hidzz.com', 'hmamail.com', 'hochsitze.com', 'hopemail.biz', 'hotpop.com', 'hulapla.de', 'iaoss.com', 'ieatspam.eu', 'ieatspam.info', 'ieh-mail.de', 'ihateyoualot.info', 'iheartspam.org', 'ikbenspamvrij.nl', 'imails.info', 'imgof.com', 'imstations.com', 'inbax.tk', 'inbox.si', 'inboxalias.com', 'inboxclean.com', 'inboxclean.org', 'inboxproxy.com', 'incognitomail.com', 'incognitomail.net', 'incognitomail.org', 'infocom.zp.ua', 'inoutmail.de', 'inoutmail.eu', 'inoutmail.info', 'inoutmail.net', 'insorg-mail.info', 'instant-mail.de', 'ip6.li', 'ipoo.org', 'irish2me.com', 'iwi.net', 'jamit.com.au', 'jetable.com', 'jetable.fr.nf', 'jetable.net', 'jetable.org', 'jnxjn.com', 'jourrapide.com', 'jsrsolutions.com', 'junk1e.com', 'kasmail.com', 'kaspop.com', 'keepmymail.com', 'killmail.com', 'killmail.net', 'kimsdisk.com', 'kingsq.ga', 'kir.ch.tc', 'klassmaster.com', 'klassmaster.net', 'klzlk.com', 'kook.ml', 'koszmail.pl', 'kulturbetrieb.info', 'kurzepost.de', 'l33r.eu', 'lackmail.net', 'lags.us', 'lawlita.com', 'lazyinbox.com', 'letthemeatspam.com', 'lhsdv.com', 'lifebyfood.com', 'link2mail.net', 'litedrop.com', 'loadby.us', 'login-email.ml', 'lol.ovpn.to', 'lolfreak.net', 'lookugly.com', 'lopl.co.cc', 'lortemail.dk', 'lovemeleaveme.com', 'lr78.com', 'lroid.com', 'lukop.dk', 'm21.cc', 'm4ilweb.info', 'maboard.com', 'mail-filter.com', 'mail-temporaire.fr', 'mail.by', 'mail.mezimages.net', 'mail.zp.ua', 'mail114.net', 'mail1a.de', 'mail21.cc', 'mail2rss.org', 'mail333.com', 'mail4trash.com', 'mailbidon.com', 'mailbiz.biz', 'mailblocks.com', 'mailbucket.org', 'mailcat.biz', 'mailcatch.com', 'mailde.de', 'mailde.info', 'maildrop.cc', 'maildx.com', 'maileater.com', 'mailed.ro', 'maileimer.de', 'mailexpire.com', 'mailfa.tk', 'mailforspam.com', 'mailfreeonline.com', 'mailfs.com', 'mailguard.me', 'mailimate.com', 'mailin8r.com', 'mailinater.com', 'mailinator.com', 'mailinator.net', 'mailinator.org', 'mailinator.us', 'mailinator2.com', 'mailincubator.com', 'mailismagic.com', 'mailmate.com', 'mailme.ir', 'mailme.lv', 'mailme24.com', 'mailmetrash.com', 'mailmetrash.comilzilla.org', 'mailmoat.com', 'mailms.com', 'mailnator.com', 'mailnesia.com', 'mailnull.com', 'mailorg.org', 'mailpick.biz', 'mailproxsy.com', 'mailquack.com', 'mailrock.biz', 'mailscrap.com', 'mailshell.com', 'mailsiphon.com', 'mailslapping.com', 'mailslite.com', 'mailtemp.info', 'mailtome.de', 'mailtothis.com', 'mailtrash.net', 'mailtv.net', 'mailtv.tv', 'mailzilla.com', 'mailzilla.org', 'mailzilla.orgmbx.cc', 'makemetheking.com', 'manifestgenerator.com', 'manybrain.com', 'mbx.cc', 'mega.zik.dj', 'meinspamschutz.de', 'meltmail.com', 'messagebeamer.de', 'mezimages.net', 'mierdamail.com', 'migumail.com', 'ministry-of-silly-walks.de', 'mintemail.com', 'misterpinball.de', 'mjukglass.nu', 'mmailinater.com', 'moakt.com', 'mobi.web.id', 'mobileninja.co.uk', 'moburl.com', 'mohmal.com', 'moncourrier.fr.nf', 'monemail.fr.nf', 'monmail.fr.nf', 'monumentmail.com', 'msa.minsmail.com', 'mt2009.com', 'mt2014.com', 'mx0.wwwnew.eu', 'my10minutemail.com', 'mycard.net.ua', 'mycleaninbox.net', 'myemailboxy.com', 'mymail-in.net', 'mymailoasis.com', 'mynetstore.de', 'mypacks.net', 'mypartyclip.de', 'myphantomemail.com', 'mysamp.de', 'myspaceinc.com', 'myspaceinc.net', 'myspaceinc.org', 'myspacepimpedup.com', 'myspamless.com', 'mytemp.email', 'mytempemail.com', 'mytempmail.com', 'mytrashmail.com', 'nabuma.com', 'neomailbox.com', 'nepwk.com', 'nervmich.net', 'nervtmich.net', 'netmails.com', 'netmails.net', 'netzidiot.de', 'neverbox.com', 'nice-4u.com', 'nincsmail.com', 'nincsmail.hu', 'nnh.com', 'no-spam.ws', 'noblepioneer.com', 'nobulk.com', 'noclickemail.com', 'nogmailspam.info', 'nomail.pw', 'nomail.xl.cx', 'nomail2me.com', 'nomorespamemails.com', 'nonspam.eu', 'nonspammer.de', 'noref.in', 'nospam.ze.tc', 'nospam4.us', 'nospamfor.us', 'nospammail.net', 'nospamthanks.info', 'notmailinator.com', 'notsharingmy.info', 'nowhere.org', 'nowmymail.com', 'nurfuerspam.de', 'nus.edu.sg', 'nwldx.com', 'objectmail.com', 'obobbo.com', 'odaymail.com', 'odnorazovoe.ru', 'one-time.email', 'oneoffemail.com', 'oneoffmail.com', 'one2mail.info', 'onewaymail.com', 'onlatedotcom.info', 'online.ms', 'oopi.org', 'opayq.com', 'ordinaryamerican.net', 'otherinbox.codupmyspace.com', 'otherinbox.com', 'ourklips.com', 'outlawspam.com', 'ovpn.to', 'owlpic.com', 'pancakemail.com', 'paplease.com', 'pcusers.otherinbox.com', 'pepbot.com', 'pfui.ru', 'pimpedupmyspace.com', 'pjjkp.com', 'plexolan.de', 'poczta.onet.pl', 'politikerclub.de', 'pooae.com', 'poofy.org', 'pookmail.com', 'privacy.net', 'privatdemail.net', 'privy-mail.com', 'privymail.de', 'proxymail.eu', 'prtnx.com', 'prtz.eu', 'punkass.com', 'putthisinyourspamdatabase.com', 'pwrby.com', 'quickinbox.com', 'quickmail.nl', 'rcpt.at', 'reallymymail.com', 'realtyalerts.ca', 'recode.me', 'recursor.net', 'recyclemail.dk', 'regbypass.com', 'regbypass.comsafe-mail.net', 'rejectmail.com', 'reliable-mail.com', 'rhyta.com', 'rklips.com', 'rmqkr.net', 'royal.net', 'rppkn.com', 'rtrtr.com', 's0ny.net', 'safe-mail.net', 'safersignup.de', 'safetymail.info', 'safetypost.de', 'sandelf.de', 'saynotospams.com', 'schafmail.de', 'schrott-email.de', 'secretemail.de', 'secure-mail.biz', 'selfdestructingmail.com', 'selfdestructingmail.org', 'sendspamhere.com', 'sendspamhere.com', 'senseless-entertainment.com', 'services391.com', 'sharedmailbox.org', 'sharklasers.com', 'shieldedmail.com', 'shieldemail.com', 'shiftmail.com', 'shitmail.me', 'shitmail.org', 'shitware.nl', 'shmeriously.com', 'shortmail.net', 'shotmail.ru', 'showslow.de', 'sibmail.com', 'sinnlos-mail.de', 'siteposter.net', 'skeefmail.com', 'slapsfromlastnight.com', 'slaskpost.se', 'slipry.net', 'slopsbox.com', 'slushmail.com', 'smashmail.de', 'smellfear.com', 'smellrear.com', 'snakemail.com', 'sneakemail.com', 'sneakmail.de', 'snkmail.com', 'sofimail.com', 'sofort-mail.de', 'softpls.asia', 'sogetthis.com', 'sohu.com', 'solvemail.info', 'soodonims.com', 'spa.com', 'spaereplease.com', 'spam.la', 'spam.su', 'spam4.me', 'spamail.de', 'spamarrest.com', 'spamavert.com', 'spambob.com', 'spambob.net', 'spambob.org', 'spambog.com', 'spambog.de', 'spambog.net', 'spambog.ru', 'spambox.info', 'spambox.irishspringrealty.com', 'spambox.us', 'spamcannon.com', 'spamcannon.net', 'spamcero.com', 'spamcon.org', 'spamcorptastic.com', 'spamcowboy.com', 'spamcowboy.net', 'spamcowboy.org', 'spamday.com', 'spamex.com', 'spamfree.eu', 'spamfree24.com', 'spamfree24.de', 'spamfree24.eu', 'spamfree24.info', 'spamfree24.net', 'spamfree24.org', 'spamgoes.in', 'spamgourmet.com', 'spamgourmet.net', 'spamgourmet.org', 'spamherelots.com', 'spamhereplease.com', 'spamhole.com', 'spamify.com', 'spaminator.de', 'spamkill.info', 'spaml.com', 'spaml.de', 'spammotel.com', 'spamobox.com', 'spamoff.de', 'spamsalad.in', 'spamslicer.com', 'spamspot.com', 'spamstack.net', 'spamthis.co.uk', 'spamthisplease.com', 'spamtrail.com', 'spamtroll.net', 'speed.1s.fr', 'spikio.com', 'spoofmail.de', 'squizzy.de', 'ssoia.com', 'startkeys.com', 'stinkefinger.net', 'stop-my-spam.com', 'stuffmail.de', 'super-auswahl.de', 'supergreatmail.com', 'supermailer.jp', 'superrito.com', 'superstachel.de', 'suremail.info', 'svk.jp', 'sweetxxx.de', 'tagyourself.com', 'talkinator.com', 'tapchicuoihoi.com', 'teewars.org', 'teleosaurs.xyz', 'teleworm.com', 'teleworm.us', 'temp-mail.org', 'temp-mail.ru', 'temp.emeraldwebmail.com', 'temp.headstrong.de', 'tempalias.com', 'tempe-mail.com', 'tempemail.biz', 'tempemail.co.za', 'tempemail.com', 'tempemail.net', 'tempemail.net', 'tempinbox.co.uk', 'tempinbox.com', 'tempmail.eu', 'tempmail.it', 'tempmail2.com', 'tempmaildemo.com', 'tempmailer.com', 'tempmailer.de', 'tempomail.fr', 'temporarily.de', 'temporarioemail.com.br', 'temporaryemail.net', 'temporaryemail.us', 'temporaryforwarding.com', 'temporaryinbox.com', 'temporarymailaddress.com', 'tempsky.com', 'tempthe.net', 'tempymail.com', 'thanksnospam.info', 'thankyou2010.com', 'thc.st', 'thecloudindex.com', 'thelimestones.com', 'thisisnotmyrealemail.com', 'thismail.net', 'thrma.com', 'throwawayemailaddress.com', 'tilien.com', 'tittbit.in', 'tizi.com', 'tmail.ws', 'tmailinator.com', 'toiea.com', 'toomail.biz', 'topranklist.de', 'tradermail.info', 'trash-amil.com', 'trash-mail.at', 'trash-mail.com', 'trash-mail.de', 'trash2009.com', 'trash2010.com', 'trash2011.com', 'trashdevil.com', 'trashdevil.de', 'trashemail.de', 'trashmail.at', 'trashmail.com', 'trashmail.de', 'trashmail.me', 'trashmail.net', 'trashmail.org', 'trashmail.ws', 'trashmailer.com', 'trashymail.com', 'trashymail.net', 'trbvm.com', 'trbvn.com', 'trialmail.de', 'trillianpro.com', 'tryalert.com', 'turual.com', 'twinmail.de', 'twoweirdtricks.com', 'tyldd.com', 'uggsrock.com', 'umail.net', 'upliftnow.com', 'uplipht.com', 'uroid.com', 'us.af', 'username.e4ward.com', 'venompen.com', 'veryrealemail.com', 'vidchart.com', 'viditag.com', 'viewcastmedia.com', 'viewcastmedia.net', 'viewcastmedia.org', 'viewcastmediae', 'viralplays.com', 'vkcode.ru', 'vomoto.com', 'vpn.st', 'vsimcard.com', 'vubby.com', 'walala.org', 'walkmail.net', 'walkmail.ru', 'wasteland.rfc822.org', 'webemail.me', 'webm4il.info', 'webuser.in', 'wee.my', 'weg-werf-email.de', 'wegwerf-email-addressen.de', 'wegwerf-emails.de', 'wegwerfadresse.de', 'wegwerfemail.com', 'wegwerfemail.de', 'wegwerfmail.de', 'wegwerfmail.info', 'wegwerfmail.net', 'wegwerfmail.org', 'wetrainbayarea.com', 'wetrainbayarea.org', 'wh4f.org', 'whatiaas.com', 'whatpaas.com', 'whatsaas.com', 'whopy.com', 'whtjddn.33mail.com', 'whyspam.me', 'wilemail.com', 'willhackforfood.biz', 'willselfdestruct.com', 'winemaven.info', 'wronghead.com', 'wuzup.net', 'wuzupmail.net', 'www.e4ward.com', 'www.gishpuppy.com', 'www.mailinator.com', 'wwwnew.eu', 'x.ip6.li', 'xagloo.com', 'xemaps.com', 'xents.com', 'xmaily.com', 'xoxy.net', 'xyzfree.net', 'yapped.net', 'yeah.net', 'yep.it', 'yogamaven.com', 'yomail.info', 'yopmail.com', 'yopmail.fr', 'yopmail.net', 'yourdomain.com', 'ypmail.webarnak.fr.eu.org', 'yuurok.com', 'z1p.biz', 'za.com', 'zehnminuten.de', 'zehnminutenmail.de', 'zetmail.com', 'zippymail.info', 'zoaxe.com', 'zoemail.com', 'zoemail.net', 'zoemail.org', 'zomg.info', 'zxcv.com', 'zxcvbnm.com', 'zzz.com'];
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"interceptDirectReplyEmails.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/interceptDirectReplyEmails.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  IMAPIntercepter: () => IMAPIntercepter,
  POP3Intercepter: () => POP3Intercepter,
  POP3Helper: () => POP3Helper
});
let IMAP;
module.watch(require("imap"), {
  default(v) {
    IMAP = v;
  }

}, 0);
let POP3;
module.watch(require("poplib"), {
  default(v) {
    POP3 = v;
  }

}, 1);
let simpleParser;
module.watch(require("mailparser"), {
  simpleParser(v) {
    simpleParser = v;
  }

}, 2);

class IMAPIntercepter {
  constructor() {
    this.imap = new IMAP({
      user: RocketChat.settings.get('Direct_Reply_Username'),
      password: RocketChat.settings.get('Direct_Reply_Password'),
      host: RocketChat.settings.get('Direct_Reply_Host'),
      port: RocketChat.settings.get('Direct_Reply_Port'),
      debug: RocketChat.settings.get('Direct_Reply_Debug') ? console.log : false,
      tls: !RocketChat.settings.get('Direct_Reply_IgnoreTLS'),
      connTimeout: 30000,
      keepalive: true
    });
    this.delete = RocketChat.settings.get('Direct_Reply_Delete') ? RocketChat.settings.get('Direct_Reply_Delete') : true; // On successfully connected.

    this.imap.on('ready', Meteor.bindEnvironment(() => {
      if (this.imap.state !== 'disconnected') {
        this.openInbox(Meteor.bindEnvironment(err => {
          if (err) {
            throw err;
          } // fetch new emails & wait [IDLE]


          this.getEmails(); // If new message arrived, fetch them

          this.imap.on('mail', Meteor.bindEnvironment(() => {
            this.getEmails();
          }));
        }));
      } else {
        console.log('IMAP didnot connected.');
        this.imap.end();
      }
    }));
    this.imap.on('error', err => {
      console.log('Error occurred ...');
      throw err;
    });
  }

  openInbox(cb) {
    this.imap.openBox('INBOX', false, cb);
  }

  start() {
    this.imap.connect();
  }

  isActive() {
    if (this.imap && this.imap.state && this.imap.state === 'disconnected') {
      return false;
    }

    return true;
  }

  stop(callback = new Function()) {
    this.imap.end();
    this.imap.once('end', callback);
  }

  restart() {
    this.stop(() => {
      console.log('Restarting IMAP ....');
      this.start();
    });
  } // Fetch all UNSEEN messages and pass them for further processing


  getEmails() {
    this.imap.search(['UNSEEN'], Meteor.bindEnvironment((err, newEmails) => {
      if (err) {
        console.log(err);
        throw err;
      } // newEmails => array containing serials of unseen messages


      if (newEmails.length > 0) {
        const f = this.imap.fetch(newEmails, {
          // fetch headers & first body part.
          bodies: ['HEADER.FIELDS (FROM TO DATE MESSAGE-ID)', '1'],
          struct: true,
          markSeen: true
        });
        f.on('message', Meteor.bindEnvironment((msg, seqno) => {
          const email = {};
          msg.on('body', (stream, info) => {
            let headerBuffer = '';
            let bodyBuffer = '';
            stream.on('data', chunk => {
              if (info.which === '1') {
                bodyBuffer += chunk.toString('utf8');
              } else {
                headerBuffer += chunk.toString('utf8');
              }
            });
            stream.once('end', () => {
              if (info.which === '1') {
                email.body = bodyBuffer;
              } else {
                // parse headers
                email.headers = IMAP.parseHeader(headerBuffer);
                email.headers.to = email.headers.to[0];
                email.headers.date = email.headers.date[0];
                email.headers.from = email.headers.from[0];
              }
            });
          }); // On fetched each message, pass it further

          msg.once('end', Meteor.bindEnvironment(() => {
            // delete message from inbox
            if (this.delete) {
              this.imap.seq.addFlags(seqno, 'Deleted', err => {
                if (err) {
                  console.log(`Mark deleted error: ${err}`);
                }
              });
            }

            RocketChat.processDirectEmail(email);
          }));
        }));
        f.once('error', err => {
          console.log(`Fetch error: ${err}`);
        });
      }
    }));
  }

}

class POP3Intercepter {
  constructor() {
    this.pop3 = new POP3(RocketChat.settings.get('Direct_Reply_Port'), RocketChat.settings.get('Direct_Reply_Host'), {
      enabletls: !RocketChat.settings.get('Direct_Reply_IgnoreTLS'),
      debug: RocketChat.settings.get('Direct_Reply_Debug') ? console.log : false
    });
    this.totalMsgCount = 0;
    this.currentMsgCount = 0;
    this.pop3.on('connect', Meteor.bindEnvironment(() => {
      this.pop3.login(RocketChat.settings.get('Direct_Reply_Username'), RocketChat.settings.get('Direct_Reply_Password'));
    }));
    this.pop3.on('login', Meteor.bindEnvironment(status => {
      if (status) {
        // run on start
        this.pop3.list();
      } else {
        console.log('Unable to Log-in ....');
      }
    })); // on getting list of all emails

    this.pop3.on('list', Meteor.bindEnvironment((status, msgcount) => {
      if (status) {
        if (msgcount > 0) {
          this.totalMsgCount = msgcount;
          this.currentMsgCount = 1; // Retrieve email

          this.pop3.retr(this.currentMsgCount);
        } else {
          this.pop3.quit();
        }
      } else {
        console.log('Cannot Get Emails ....');
      }
    })); // on retrieved email

    this.pop3.on('retr', Meteor.bindEnvironment((status, msgnumber, data) => {
      if (status) {
        // parse raw email data to  JSON object
        simpleParser(data, Meteor.bindEnvironment((err, mail) => {
          this.initialProcess(mail);
        }));
        this.currentMsgCount += 1; // delete email

        this.pop3.dele(msgnumber);
      } else {
        console.log('Cannot Retrieve Message ....');
      }
    })); // on email deleted

    this.pop3.on('dele', Meteor.bindEnvironment(status => {
      if (status) {
        // get next email
        if (this.currentMsgCount <= this.totalMsgCount) {
          this.pop3.retr(this.currentMsgCount);
        } else {
          // parsed all messages.. so quitting
          this.pop3.quit();
        }
      } else {
        console.log('Cannot Delete Message....');
      }
    })); // invalid server state

    this.pop3.on('invalid-state', function (cmd) {
      console.log(`Invalid state. You tried calling ${cmd}`);
    }); // locked => command already running, not finished yet

    this.pop3.on('locked', function (cmd) {
      console.log(`Current command has not finished yet. You tried calling ${cmd}`);
    });
  }

  initialProcess(mail) {
    const email = {
      headers: {
        from: mail.from.text,
        to: mail.to.text,
        date: mail.date,
        'message-id': mail.messageId
      },
      body: mail.text
    };
    RocketChat.processDirectEmail(email);
  }

}

class POP3Helper {
  constructor() {
    this.running = false;
  }

  start() {
    // run every x-minutes
    if (RocketChat.settings.get('Direct_Reply_Frequency')) {
      RocketChat.POP3 = new POP3Intercepter();
      this.running = Meteor.setInterval(() => {
        // get new emails and process
        RocketChat.POP3 = new POP3Intercepter();
      }, Math.max(RocketChat.settings.get('Direct_Reply_Frequency') * 60 * 1000, 2 * 60 * 1000));
    }
  }

  isActive() {
    return this.running;
  }

  stop(callback = new Function()) {
    if (this.isActive()) {
      Meteor.clearInterval(this.running);
    }

    callback();
  }

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"loginErrorMessageOverride.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/loginErrorMessageOverride.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Do not disclose if user exists when password is invalid
const {
  _runLoginHandlers
} = Accounts;

Accounts._runLoginHandlers = function (methodInvocation, options) {
  const result = _runLoginHandlers.call(Accounts, methodInvocation, options);

  if (result.error && result.error.reason === 'Incorrect password') {
    result.error = new Meteor.Error(403, 'User not found');
  }

  return result;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"notifyUsersOnMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/notifyUsersOnMessage.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  messageContainsHighlight: () => messageContainsHighlight
});

let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 1);
let moment;
module.watch(require("moment"), {
  default(v) {
    moment = v;
  }

}, 2);

function messageContainsHighlight(message, highlights) {
  if (!highlights || highlights.length === 0) {
    return false;
  }

  return highlights.some(function (highlight) {
    const regexp = new RegExp(s.escapeRegExp(highlight), 'i');
    return regexp.test(message.msg);
  });
}

function notifyUsersOnMessage(message, room) {
  // skips this callback if the message was edited and increments it if the edit was way in the past (aka imported)
  if (message.editedAt && Math.abs(moment(message.editedAt).diff()) > 60000) {
    // TODO: Review as I am not sure how else to get around this as the incrementing of the msgs count shouldn't be in this callback
    RocketChat.models.Rooms.incMsgCountById(message.rid, 1);
    return message;
  } else if (message.editedAt) {
    // only updates last message if it was edited (skip rest of callback)
    if (RocketChat.settings.get('Store_Last_Message') && (!room.lastMessage || room.lastMessage._id === message._id)) {
      RocketChat.models.Rooms.setLastMessageById(message.rid, message);
    }

    return message;
  }

  if (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {
    RocketChat.models.Rooms.incMsgCountById(message.rid, 1);
    return message;
  }

  if (room != null) {
    let toAll = false;
    let toHere = false;
    const mentionIds = [];
    const highlightsIds = [];
    const highlights = RocketChat.models.Subscriptions.findByRoomWithUserHighlights(room._id, {
      fields: {
        userHighlights: 1,
        'u._id': 1
      }
    }).fetch();

    if (message.mentions != null) {
      message.mentions.forEach(function (mention) {
        if (!toAll && mention._id === 'all') {
          toAll = true;
        }

        if (!toHere && mention._id === 'here') {
          toHere = true;
        }

        if (mention._id !== message.u._id) {
          mentionIds.push(mention._id);
        }
      });
    }

    highlights.forEach(function (subscription) {
      if (subscription.userHighlights && messageContainsHighlight(message, subscription.userHighlights)) {
        if (subscription.u._id !== message.u._id) {
          highlightsIds.push(subscription.u._id);
        }
      }
    });

    if (room.t === 'd') {
      const unreadCountDM = RocketChat.settings.get('Unread_Count_DM');

      if (unreadCountDM === 'all_messages') {
        RocketChat.models.Subscriptions.incUnreadForRoomIdExcludingUserId(room._id, message.u._id);
      } else if (toAll || toHere) {
        RocketChat.models.Subscriptions.incGroupMentionsAndUnreadForRoomIdExcludingUserId(room._id, message.u._id, 1, 1);
      } else if (mentionIds && mentionIds.length > 0 || highlightsIds && highlightsIds.length > 0) {
        RocketChat.models.Subscriptions.incUserMentionsAndUnreadForRoomIdAndUserIds(room._id, _.compact(_.unique(mentionIds.concat(highlightsIds))), 1, 1);
      }
    } else {
      const unreadCount = RocketChat.settings.get('Unread_Count');

      if (toAll || toHere) {
        let incUnread = 0;

        if (['all_messages', 'group_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount)) {
          incUnread = 1;
        }

        RocketChat.models.Subscriptions.incGroupMentionsAndUnreadForRoomIdExcludingUserId(room._id, message.u._id, 1, incUnread);
      } else if (mentionIds && mentionIds.length > 0 || highlightsIds && highlightsIds.length > 0) {
        let incUnread = 0;

        if (['all_messages', 'user_mentions_only', 'user_and_group_mentions_only'].includes(unreadCount)) {
          incUnread = 1;
        }

        RocketChat.models.Subscriptions.incUserMentionsAndUnreadForRoomIdAndUserIds(room._id, _.compact(_.unique(mentionIds.concat(highlightsIds))), 1, incUnread);
      } else if (unreadCount === 'all_messages') {
        RocketChat.models.Subscriptions.incUnreadForRoomIdExcludingUserId(room._id, message.u._id);
      }
    }
  } // Update all the room activity tracker fields
  // This method take so long to execute on gient rooms cuz it will trugger the cache rebuild for the releations of that room


  RocketChat.models.Rooms.incMsgCountAndSetLastMessageById(message.rid, 1, message.ts, RocketChat.settings.get('Store_Last_Message') && message); // Update all other subscriptions to alert their owners but witout incrementing
  // the unread counter, as it is only for mentions and direct messages
  // We now set alert and open properties in two separate update commands. This proved to be more efficient on MongoDB - because it uses a more efficient index.

  RocketChat.models.Subscriptions.setAlertForRoomIdExcludingUserId(message.rid, message.u._id);
  RocketChat.models.Subscriptions.setOpenForRoomIdExcludingUserId(message.rid, message.u._id);
  return message;
}

RocketChat.callbacks.add('afterSaveMessage', notifyUsersOnMessage, RocketChat.callbacks.priority.LOW, 'notifyUsersOnMessage');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"processDirectEmail.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/processDirectEmail.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let reply;
module.watch(require("emailreplyparser"), {
  EmailReplyParser(v) {
    reply = v;
  }

}, 0);
let moment;
module.watch(require("moment"), {
  default(v) {
    moment = v;
  }

}, 1);

RocketChat.processDirectEmail = function (email) {
  function sendMessage(email) {
    const message = {
      ts: new Date(email.headers.date),
      msg: email.body,
      sentByEmail: true,
      groupable: false
    };

    if (message.ts) {
      const tsDiff = Math.abs(moment(message.ts).diff());

      if (tsDiff > 10000) {
        message.ts = new Date();
      }
    } else {
      message.ts = new Date();
    }

    if (message.msg && message.msg.length > RocketChat.settings.get('Message_MaxAllowedSize')) {
      return false;
    } // reduce new lines in multiline message


    message.msg = message.msg.split('\n\n').join('\n');
    const user = RocketChat.models.Users.findOneByEmailAddress(email.headers.from, {
      fields: {
        username: 1,
        name: 1
      }
    });

    if (!user) {
      // user not found
      return false;
    }

    const prevMessage = RocketChat.models.Messages.findOneById(email.headers.mid, {
      rid: 1,
      u: 1
    });

    if (!prevMessage) {
      // message doesn't exist anymore
      return false;
    }

    message.rid = prevMessage.rid;
    const room = Meteor.call('canAccessRoom', message.rid, user._id);

    if (!room) {
      return false;
    }

    const roomInfo = RocketChat.models.Rooms.findOneById(message.rid, {
      t: 1,
      name: 1
    }); // check mention

    if (message.msg.indexOf(`@${prevMessage.u.username}`) === -1 && roomInfo.t !== 'd') {
      message.msg = `@${prevMessage.u.username} ${message.msg}`;
    } // reply message link


    let prevMessageLink = `[ ](${Meteor.absoluteUrl().replace(/\/$/, '')}`;

    if (roomInfo.t === 'c') {
      prevMessageLink += `/channel/${roomInfo.name}?msg=${email.headers.mid}) `;
    } else if (roomInfo.t === 'd') {
      prevMessageLink += `/direct/${prevMessage.u.username}?msg=${email.headers.mid}) `;
    } else if (roomInfo.t === 'p') {
      prevMessageLink += `/group/${roomInfo.name}?msg=${email.headers.mid}) `;
    } // add reply message link


    message.msg = prevMessageLink + message.msg;
    const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(message.rid, user._id);

    if (subscription && (subscription.blocked || subscription.blocker)) {
      // room is blocked
      return false;
    }

    if ((room.muted || []).includes(user.username)) {
      // room is muted
      return false;
    }

    if (message.alias == null && RocketChat.settings.get('Message_SetNameToAliasEnabled')) {
      message.alias = user.name;
    }

    RocketChat.metrics.messagesSent.inc(); // TODO This line needs to be moved to it's proper place. See the comments on: https://github.com/RocketChat/Rocket.Chat/pull/5736

    return RocketChat.sendMessage(user, message, room);
  } // Extract/parse reply from email body


  email.body = reply.parse_reply(email.body); // if 'To' email format is "Name <username@domain>"

  if (email.headers.to.indexOf('<') >= 0 && email.headers.to.indexOf('>') >= 0) {
    email.headers.to = email.headers.to.split('<')[1].split('>')[0];
  } // if 'From' email format is "Name <username@domain>"


  if (email.headers.from.indexOf('<') >= 0 && email.headers.from.indexOf('>') >= 0) {
    email.headers.from = email.headers.from.split('<')[1].split('>')[0];
  } // 'To' email format "username+messageId@domain"


  if (email.headers.to.indexOf('+') >= 0) {
    // Valid 'To' format
    email.headers.mid = email.headers.to.split('@')[0].split('+')[1];
    sendMessage(email);
  } else {
    console.log('Invalid Email....If not. Please report it.');
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"roomTypes.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/roomTypes.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let RoomTypesCommon;
module.watch(require("../../lib/RoomTypesCommon"), {
  RoomTypesCommon(v) {
    RoomTypesCommon = v;
  }

}, 0);
RocketChat.roomTypes = new class roomTypesServer extends RoomTypesCommon {
  /**
   * Add a publish for a room type
   *
   * @param {string} roomType room type (e.g.: c (for channels), d (for direct channels))
   * @param {function} callback function that will return the publish's data
  */
  setPublish(roomType, callback) {
    if (this.roomTypes[roomType] && this.roomTypes[roomType].publish != null) {
      throw new Meteor.Error('route-publish-exists', 'Publish for the given type already exists');
    }

    if (this.roomTypes[roomType] == null) {
      this.roomTypes[roomType] = {};
    }

    return this.roomTypes[roomType].publish = callback;
  }

  setRoomFind(roomType, callback) {
    if (this.roomTypes[roomType] && this.roomTypes[roomType].roomFind != null) {
      throw new Meteor.Error('room-find-exists', 'Room find for the given type already exists');
    }

    if (this.roomTypes[roomType] == null) {
      this.roomTypes[roomType] = {};
    }

    return this.roomTypes[roomType].roomFind = callback;
  }

  getRoomFind(roomType) {
    return this.roomTypes[roomType] && this.roomTypes[roomType].roomFind;
  }

  getRoomName(roomType, roomData) {
    return this.roomTypes[roomType] && this.roomTypes[roomType].roomName && this.roomTypes[roomType].roomName(roomData);
  }
  /**
   * Run the publish for a room type
   *
   * @param scope Meteor publish scope
   * @param {string} roomType room type (e.g.: c (for channels), d (for direct channels))
   * @param identifier identifier of the room
  */


  runPublish(scope, roomType, identifier) {
    return this.roomTypes[roomType] && this.roomTypes[roomType].publish && this.roomTypes[roomType].publish.call(scope, identifier);
  }

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendNotificationsOnMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/sendNotificationsOnMessage.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  sendNotification: () => sendNotification
});
let moment;
module.watch(require("moment"), {
  default(v) {
    moment = v;
  }

}, 0);
let callJoinRoom, messageContainsHighlight, parseMessageTextPerUser, replaceMentionedUsernamesWithFullNames;
module.watch(require("../functions/notifications/"), {
  callJoinRoom(v) {
    callJoinRoom = v;
  },

  messageContainsHighlight(v) {
    messageContainsHighlight = v;
  },

  parseMessageTextPerUser(v) {
    parseMessageTextPerUser = v;
  },

  replaceMentionedUsernamesWithFullNames(v) {
    replaceMentionedUsernamesWithFullNames = v;
  }

}, 1);
let sendEmail, shouldNotifyEmail;
module.watch(require("../functions/notifications/email"), {
  sendEmail(v) {
    sendEmail = v;
  },

  shouldNotifyEmail(v) {
    shouldNotifyEmail = v;
  }

}, 2);
let sendSinglePush, shouldNotifyMobile;
module.watch(require("../functions/notifications/mobile"), {
  sendSinglePush(v) {
    sendSinglePush = v;
  },

  shouldNotifyMobile(v) {
    shouldNotifyMobile = v;
  }

}, 3);
let notifyDesktopUser, shouldNotifyDesktop;
module.watch(require("../functions/notifications/desktop"), {
  notifyDesktopUser(v) {
    notifyDesktopUser = v;
  },

  shouldNotifyDesktop(v) {
    shouldNotifyDesktop = v;
  }

}, 4);
let notifyAudioUser, shouldNotifyAudio;
module.watch(require("../functions/notifications/audio"), {
  notifyAudioUser(v) {
    notifyAudioUser = v;
  },

  shouldNotifyAudio(v) {
    shouldNotifyAudio = v;
  }

}, 5);

const sendNotification = ({
  subscription,
  sender,
  hasMentionToAll,
  hasMentionToHere,
  message,
  notificationMessage,
  room,
  mentionIds,
  disableAllMessageNotifications
}) => {
  // don't notify the sender
  if (subscription.u._id === sender._id) {
    return;
  } // notifications disabled


  if (subscription.disableNotifications) {
    return;
  } // dont send notification to users who ignored the sender


  if (Array.isArray(subscription.ignored) && subscription.ignored.includes(sender._id)) {
    return;
  }

  const hasMentionToUser = mentionIds.includes(subscription.u._id); // mute group notifications (@here and @all) if not directly mentioned as well

  if (!hasMentionToUser && subscription.muteGroupMentions && (hasMentionToAll || hasMentionToHere)) {
    return;
  }

  const receiver = RocketChat.models.Users.findOneById(subscription.u._id);

  if (!receiver || !receiver.active) {
    return;
  }

  const roomType = room.t; // If the user doesn't have permission to view direct messages, don't send notification of direct messages.

  if (roomType === 'd' && !RocketChat.authz.hasPermission(subscription.u._id, 'view-d-room')) {
    return;
  }

  notificationMessage = parseMessageTextPerUser(notificationMessage, message, receiver);
  const isHighlighted = messageContainsHighlight(message, subscription.userHighlights);
  const {
    audioNotifications,
    desktopNotifications,
    mobilePushNotifications,
    emailNotifications
  } = subscription;
  let notificationSent = false; // busy users don't receive audio notification

  if (shouldNotifyAudio({
    disableAllMessageNotifications,
    status: receiver.status,
    audioNotifications,
    hasMentionToAll,
    hasMentionToHere,
    isHighlighted,
    hasMentionToUser,
    roomType
  })) {
    notifyAudioUser(subscription.u._id, message, room);
  } // busy users don't receive desktop notification


  if (shouldNotifyDesktop({
    disableAllMessageNotifications,
    status: receiver.status,
    desktopNotifications,
    hasMentionToAll,
    hasMentionToHere,
    isHighlighted,
    hasMentionToUser,
    roomType
  })) {
    notificationSent = true;
    notifyDesktopUser({
      notificationMessage,
      userId: subscription.u._id,
      user: sender,
      message,
      room,
      duration: subscription.desktopNotificationDuration
    });
  }

  if (shouldNotifyMobile({
    disableAllMessageNotifications,
    mobilePushNotifications,
    hasMentionToAll,
    isHighlighted,
    hasMentionToUser,
    statusConnection: receiver.statusConnection,
    roomType
  })) {
    notificationSent = true;
    sendSinglePush({
      notificationMessage,
      room,
      message,
      userId: subscription.u._id,
      senderUsername: sender.username,
      senderName: sender.name,
      receiverUsername: receiver.username
    });
  }

  if (receiver.emails && shouldNotifyEmail({
    disableAllMessageNotifications,
    statusConnection: receiver.statusConnection,
    emailNotifications,
    isHighlighted,
    hasMentionToUser,
    hasMentionToAll,
    roomType
  })) {
    receiver.emails.some(email => {
      if (email.verified) {
        sendEmail({
          message,
          receiver,
          subscription,
          room,
          emailAddress: email.address,
          hasMentionToUser
        });
        return true;
      }

      return false;
    });
  }

  if (notificationSent) {
    RocketChat.Sandstorm.notify(message, [subscription.u._id], `@${sender.username}: ${message.msg}`, room.t === 'p' ? 'privateMessage' : 'message');
  }
};

function sendAllNotifications(message, room) {
  // skips this callback if the message was edited
  if (message.editedAt) {
    return message;
  }

  if (message.ts && Math.abs(moment(message.ts).diff()) > 60000) {
    return message;
  }

  if (!room || room.t == null) {
    return message;
  }

  const sender = RocketChat.roomTypes.getConfig(room.t).getMsgSender(message.u._id);

  if (!sender) {
    return message;
  }

  const mentionIds = (message.mentions || []).map(({
    _id
  }) => _id);
  const mentionIdsWithoutGroups = mentionIds.filter(_id => _id !== 'all' && _id !== 'here');
  const hasMentionToAll = mentionIds.includes('all');
  const hasMentionToHere = mentionIds.includes('here');
  let notificationMessage = RocketChat.callbacks.run('beforeSendMessageNotifications', message.msg);

  if (mentionIds.length > 0 && RocketChat.settings.get('UI_Use_Real_Name')) {
    notificationMessage = replaceMentionedUsernamesWithFullNames(message.msg, message.mentions);
  } // Don't fetch all users if room exceeds max members


  const maxMembersForNotification = RocketChat.settings.get('Notifications_Max_Room_Members');
  const roomMembersCount = RocketChat.models.Subscriptions.findByRoomId(room._id).count();
  const disableAllMessageNotifications = roomMembersCount > maxMembersForNotification && maxMembersForNotification !== 0;
  const query = {
    rid: room._id,
    $or: [{
      'userHighlights.0': {
        $exists: 1
      }
    }]
  };
  ['audio', 'desktop', 'mobile', 'email'].forEach(kind => {
    const notificationField = `${kind === 'mobile' ? 'mobilePush' : kind}Notifications`;
    const filter = {
      [notificationField]: 'all'
    };

    if (disableAllMessageNotifications) {
      filter[`${kind}PrefOrigin`] = {
        $ne: 'user'
      };
    }

    query.$or.push(filter);

    if (mentionIdsWithoutGroups.length > 0) {
      query.$or.push({
        [notificationField]: 'mentions',
        'u._id': {
          $in: mentionIdsWithoutGroups
        }
      });
    } else if (!disableAllMessageNotifications && (hasMentionToAll || hasMentionToHere)) {
      query.$or.push({
        [notificationField]: 'mentions'
      });
    }

    const serverField = kind === 'email' ? 'emailNotificationMode' : `${kind}Notifications`;
    const serverPreference = RocketChat.settings.get(`Accounts_Default_User_Preferences_${serverField}`);

    if (room.t === 'd' && serverPreference !== 'nothing' || !disableAllMessageNotifications && (serverPreference === 'all' || hasMentionToAll || hasMentionToHere)) {
      query.$or.push({
        [notificationField]: {
          $exists: false
        }
      });
    } else if (serverPreference === 'mentions' && mentionIdsWithoutGroups.length) {
      query.$or.push({
        [notificationField]: {
          $exists: false
        },
        'u._id': {
          $in: mentionIdsWithoutGroups
        }
      });
    }
  }); // the find bellow is crucial. all subscription records returned will receive at least one kind of notification.
  // the query is defined by the server's default values and Notifications_Max_Room_Members setting.

  const subscriptions = RocketChat.models.Subscriptions.findNotificationPreferencesByRoom(query);
  subscriptions.forEach(subscription => sendNotification({
    subscription,
    sender,
    hasMentionToAll,
    hasMentionToHere,
    message,
    notificationMessage,
    room,
    mentionIds,
    disableAllMessageNotifications
  })); // on public channels, if a mentioned user is not member of the channel yet, he will first join the channel and then be notified based on his preferences.

  if (room.t === 'c') {
    // get subscriptions from users already in room (to not send them a notification)
    const mentions = [...mentionIdsWithoutGroups];
    RocketChat.models.Subscriptions.findByRoomIdAndUserIds(room._id, mentionIdsWithoutGroups, {
      fields: {
        'u._id': 1
      }
    }).forEach(subscription => {
      const index = mentions.indexOf(subscription.u._id);

      if (index !== -1) {
        mentions.splice(index, 1);
      }
    });
    Promise.all(mentions.map(userId => Promise.asyncApply(() => {
      Promise.await(callJoinRoom(userId, room._id));
      return userId;
    }))).then(users => {
      users.forEach(userId => {
        const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(room._id, userId);
        sendNotification({
          subscription,
          sender,
          hasMentionToAll,
          hasMentionToHere,
          message,
          notificationMessage,
          room,
          mentionIds
        });
      });
    }).catch(error => {
      throw new Meteor.Error(error);
    });
  }

  return message;
}

RocketChat.callbacks.add('afterSaveMessage', sendAllNotifications, RocketChat.callbacks.priority.LOW, 'sendNotificationsOnMessage');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"validateEmailDomain.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/validateEmailDomain.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
let dns;
module.watch(require("dns"), {
  default(v) {
    dns = v;
  }

}, 1);
let emailDomainBlackList = [];
let emailDomainWhiteList = [];
let useDefaultBlackList = false;
let useDNSDomainCheck = false;
RocketChat.settings.get('Accounts_BlockedDomainsList', function (key, value) {
  emailDomainBlackList = _.map(value.split(','), domain => domain.trim());
});
RocketChat.settings.get('Accounts_AllowedDomainsList', function (key, value) {
  emailDomainWhiteList = _.map(value.split(','), domain => domain.trim());
});
RocketChat.settings.get('Accounts_UseDefaultBlockedDomainsList', function (key, value) {
  useDefaultBlackList = value;
});
RocketChat.settings.get('Accounts_UseDNSDomainCheck', function (key, value) {
  useDNSDomainCheck = value;
});

RocketChat.validateEmailDomain = function (email) {
  const emailValidation = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;

  if (!emailValidation.test(email)) {
    throw new Meteor.Error('error-invalid-email', `Invalid email ${email}`, {
      function: 'RocketChat.validateEmailDomain',
      email
    });
  }

  const emailDomain = email.substr(email.lastIndexOf('@') + 1); // if not in whitelist

  if (emailDomainWhiteList.indexOf(emailDomain) === -1) {
    if (emailDomainBlackList.indexOf(emailDomain) !== -1 || useDefaultBlackList && RocketChat.emailDomainDefaultBlackList.indexOf(emailDomain) !== -1) {
      throw new Meteor.Error('error-email-domain-blacklisted', 'The email domain is blacklisted', {
        function: 'RocketChat.validateEmailDomain'
      });
    }
  }

  if (useDNSDomainCheck) {
    try {
      Meteor.wrapAsync(dns.resolveMx)(emailDomain);
    } catch (e) {
      throw new Meteor.Error('error-invalid-domain', 'Invalid domain', {
        function: 'RocketChat.validateEmailDomain'
      });
    }
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"passwordPolicy.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/passwordPolicy.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let PasswordPolicy;
module.watch(require("./PasswordPolicyClass"), {
  default(v) {
    PasswordPolicy = v;
  }

}, 0);
RocketChat.passwordPolicy = new PasswordPolicy();
RocketChat.settings.get('Accounts_Password_Policy_Enabled', (key, value) => RocketChat.passwordPolicy.enabled = value);
RocketChat.settings.get('Accounts_Password_Policy_MinLength', (key, value) => RocketChat.passwordPolicy.minLength = value);
RocketChat.settings.get('Accounts_Password_Policy_MaxLength', (key, value) => RocketChat.passwordPolicy.maxLength = value);
RocketChat.settings.get('Accounts_Password_Policy_ForbidRepeatingCharacters', (key, value) => RocketChat.passwordPolicy.forbidRepeatingCharacters = value);
RocketChat.settings.get('Accounts_Password_Policy_ForbidRepeatingCharactersCount', (key, value) => RocketChat.passwordPolicy.forbidRepeatingCharactersCount = value);
RocketChat.settings.get('Accounts_Password_Policy_AtLeastOneLowercase', (key, value) => RocketChat.passwordPolicy.mustContainAtLeastOneLowercase = value);
RocketChat.settings.get('Accounts_Password_Policy_AtLeastOneUppercase', (key, value) => RocketChat.passwordPolicy.mustContainAtLeastOneUppercase = value);
RocketChat.settings.get('Accounts_Password_Policy_AtLeastOneNumber', (key, value) => RocketChat.passwordPolicy.mustContainAtLeastOneNumber = value);
RocketChat.settings.get('Accounts_Password_Policy_AtLeastOneSpecialCharacter', (key, value) => RocketChat.passwordPolicy.mustContainAtLeastOneSpecialCharacter = value);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/index.js                                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  RoomSettingsEnum: () => RoomSettingsEnum,
  RoomTypeConfig: () => RoomTypeConfig,
  RoomTypeRouteConfig: () => RoomTypeRouteConfig,
  sendNotification: () => sendNotification
});
let RoomSettingsEnum, RoomTypeConfig, RoomTypeRouteConfig;
module.watch(require("../../lib/RoomTypeConfig"), {
  RoomSettingsEnum(v) {
    RoomSettingsEnum = v;
  },

  RoomTypeConfig(v) {
    RoomTypeConfig = v;
  },

  RoomTypeRouteConfig(v) {
    RoomTypeRouteConfig = v;
  }

}, 0);
let sendNotification;
module.watch(require("./sendNotificationsOnMessage.js"), {
  sendNotification(v) {
    sendNotification = v;
  }

}, 1);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"PasswordPolicyClass.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/lib/PasswordPolicyClass.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
class PasswordPolicy {
  constructor({
    enabled = false,
    minLength = -1,
    maxLength = -1,
    forbidRepeatingCharacters = false,
    forbidRepeatingCharactersCount = 3,
    // the regex is this number minus one
    mustContainAtLeastOneLowercase = false,
    // /[A-Z]{3,}/ could do this instead of at least one
    mustContainAtLeastOneUppercase = false,
    mustContainAtLeastOneNumber = false,
    mustContainAtLeastOneSpecialCharacter = false,
    throwError = true
  } = {}) {
    this.regex = {
      mustContainAtLeastOneLowercase: new RegExp('[a-z]'),
      mustContainAtLeastOneUppercase: new RegExp('[A-Z]'),
      mustContainAtLeastOneNumber: new RegExp('[0-9]'),
      mustContainAtLeastOneSpecialCharacter: new RegExp('[^A-Za-z0-9 ]')
    };
    this.enabled = enabled;
    this.minLength = minLength;
    this.maxLength = maxLength;
    this.forbidRepeatingCharacters = forbidRepeatingCharacters;
    this.forbidRepeatingCharactersCount = forbidRepeatingCharactersCount;
    this.mustContainAtLeastOneLowercase = mustContainAtLeastOneLowercase;
    this.mustContainAtLeastOneUppercase = mustContainAtLeastOneUppercase;
    this.mustContainAtLeastOneNumber = mustContainAtLeastOneNumber;
    this.mustContainAtLeastOneSpecialCharacter = mustContainAtLeastOneSpecialCharacter;
    this.throwError = throwError;
  }

  set forbidRepeatingCharactersCount(value) {
    this._forbidRepeatingCharactersCount = value;
    this.regex.forbiddingRepeatingCharacters = new RegExp(`(.)\\1{${this.forbidRepeatingCharactersCount},}`);
  }

  get forbidRepeatingCharactersCount() {
    return this._forbidRepeatingCharactersCount;
  }

  error(error, message) {
    if (this.throwError) {
      throw new Meteor.Error(error, message);
    }

    return false;
  }

  validate(password) {
    if (!this.enabled) {
      return true;
    }

    if (!password || typeof password !== 'string' || !password.length) {
      return this.error('error-password-policy-not-met', 'The password provided does not meet the server\'s password policy.');
    }

    if (this.minLength >= 1 && password.length < this.minLength) {
      return this.error('error-password-policy-not-met-minLength', 'The password does not meet the minimum length password policy.');
    }

    if (this.maxLength >= 1 && password.length > this.maxLength) {
      return this.error('error-password-policy-not-met-maxLength', 'The password does not meet the maximum length password policy.');
    }

    if (this.forbidRepeatingCharacters && this.regex.forbiddingRepeatingCharacters.test(password)) {
      return this.error('error-password-policy-not-met-repeatingCharacters', 'The password contains repeating characters which is against the password policy.');
    }

    if (this.mustContainAtLeastOneLowercase && !this.regex.mustContainAtLeastOneLowercase.test(password)) {
      return this.error('error-password-policy-not-met-oneLowercase', 'The password does not contain at least one lowercase character which is against the password policy.');
    }

    if (this.mustContainAtLeastOneUppercase && !this.regex.mustContainAtLeastOneUppercase.test(password)) {
      return this.error('error-password-policy-not-met-oneUppercase', 'The password does not contain at least one uppercase character which is against the password policy.');
    }

    if (this.mustContainAtLeastOneNumber && !this.regex.mustContainAtLeastOneNumber.test(password)) {
      return this.error('error-password-policy-not-met-oneNumber', 'The password does not contain at least one numerical character which is against the password policy.');
    }

    if (this.mustContainAtLeastOneSpecialCharacter && !this.regex.mustContainAtLeastOneSpecialCharacter.test(password)) {
      return this.error('error-password-policy-not-met-oneSpecial', 'The password does not contain at least one special character which is against the password policy.');
    }

    return true;
  }

}

module.exportDefault(PasswordPolicy);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"functions":{"isDocker.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/isDocker.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let fs;
module.watch(require("fs"), {
  default(v) {
    fs = v;
  }

}, 0);

function hasDockerEnv() {
  try {
    fs.statSync('/.dockerenv');
    return true;
  } catch (err) {
    return false;
  }
}

function hasDockerCGroup() {
  try {
    return fs.readFileSync('/proc/self/cgroup', 'utf8').indexOf('docker') !== -1;
  } catch (err) {
    return false;
  }
}

function check() {
  return hasDockerEnv() || hasDockerCGroup();
}

let isDocker;

RocketChat.isDocker = function () {
  if (isDocker === undefined) {
    isDocker = check();
  }

  return isDocker;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUserToDefaultChannels.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/addUserToDefaultChannels.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.addUserToDefaultChannels = function (user, silenced) {
  RocketChat.callbacks.run('beforeJoinDefaultChannels', user);
  const defaultRooms = RocketChat.models.Rooms.findByDefaultAndTypes(true, ['c', 'p'], {
    fields: {
      usernames: 0
    }
  }).fetch();
  defaultRooms.forEach(room => {
    // put user in default rooms
    const muted = room.ro && !RocketChat.authz.hasPermission(user._id, 'post-readonly');

    if (muted) {
      RocketChat.models.Rooms.muteUsernameByRoomId(room._id, user.username);
    }

    if (!RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(room._id, user._id)) {
      // Add a subscription to this user
      RocketChat.models.Subscriptions.createWithRoomAndUser(room, user, {
        ts: new Date(),
        open: true,
        alert: true,
        unread: 1,
        userMentions: 1,
        groupMentions: 0
      }); // Insert user joined message

      if (!silenced) {
        RocketChat.models.Messages.createUserJoinWithRoomIdAndUser(room._id, user);
      }
    }
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUserToRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/addUserToRoom.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.addUserToRoom = function (rid, user, inviter, silenced) {
  const now = new Date();
  const room = RocketChat.models.Rooms.findOneById(rid); // Check if user is already in room

  const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, user._id);

  if (subscription) {
    return;
  }

  if (room.t === 'c' || room.t === 'p') {
    RocketChat.callbacks.run('beforeJoinRoom', user, room);
  }

  const muted = room.ro && !RocketChat.authz.hasPermission(user._id, 'post-readonly');

  if (muted) {
    RocketChat.models.Rooms.muteUsernameByRoomId(rid, user.username);
  }

  RocketChat.models.Subscriptions.createWithRoomAndUser(room, user, {
    ts: now,
    open: true,
    alert: true,
    unread: 1,
    userMentions: 1,
    groupMentions: 0
  });

  if (!silenced) {
    if (inviter) {
      RocketChat.models.Messages.createUserAddedWithRoomIdAndUser(rid, user, {
        ts: now,
        u: {
          _id: inviter._id,
          username: inviter.username
        }
      });
    } else {
      RocketChat.models.Messages.createUserJoinWithRoomIdAndUser(rid, user, {
        ts: now
      });
    }
  }

  if (room.t === 'c' || room.t === 'p') {
    Meteor.defer(function () {
      RocketChat.callbacks.run('afterJoinRoom', user, room);
    });
  }

  return true;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"archiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/archiveRoom.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.archiveRoom = function (rid) {
  RocketChat.models.Rooms.archiveById(rid);
  RocketChat.models.Subscriptions.archiveByRoomId(rid);
  RocketChat.callbacks.run('afterRoomArchived', RocketChat.models.Rooms.findOneById(rid), Meteor.user());
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkUsernameAvailability.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/checkUsernameAvailability.js                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);
let usernameBlackList = [];

const toRegExp = username => new RegExp(`^${s.escapeRegExp(username).trim()}$`, 'i');

RocketChat.settings.get('Accounts_BlockedUsernameList', (key, value) => {
  usernameBlackList = value.split(',').map(toRegExp);
});

const usernameIsBlocked = (username, usernameBlackList) => usernameBlackList.length && usernameBlackList.some(restrictedUsername => restrictedUsername.test(s.trim(s.escapeRegExp(username))));

RocketChat.checkUsernameAvailability = function (username) {
  if (usernameIsBlocked(username, usernameBlackList)) {
    return false;
  }

  return !Meteor.users.findOne({
    username: {
      $regex: toRegExp(username)
    }
  }, {
    fields: {
      _id: 1
    }
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkEmailAvailability.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/checkEmailAvailability.js                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);

RocketChat.checkEmailAvailability = function (email) {
  return !Meteor.users.findOne({
    'emails.address': {
      $regex: new RegExp(`^${s.trim(s.escapeRegExp(email))}$`, 'i')
    }
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createRoom.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/createRoom.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 1);

RocketChat.createRoom = function (type, name, owner, members, readOnly, extraData = {}) {
  name = s.trim(name);
  owner = s.trim(owner);
  members = [].concat(members);

  if (!name) {
    throw new Meteor.Error('error-invalid-name', 'Invalid name', {
      function: 'RocketChat.createRoom'
    });
  }

  owner = RocketChat.models.Users.findOneByUsername(owner, {
    fields: {
      username: 1
    }
  });

  if (!owner) {
    throw new Meteor.Error('error-invalid-user', 'Invalid user', {
      function: 'RocketChat.createRoom'
    });
  }

  if (!_.contains(members, owner.username)) {
    members.push(owner.username);
  }

  if (extraData.broadcast) {
    readOnly = true;
    delete extraData.reactWhenReadOnly;
  }

  const now = new Date();
  let room = Object.assign({
    name: RocketChat.getValidRoomName(name),
    fname: name,
    t: type,
    msgs: 0,
    usersCount: 0,
    u: {
      _id: owner._id,
      username: owner.username
    }
  }, extraData, {
    ts: now,
    ro: readOnly === true,
    sysMes: readOnly !== true
  });

  if (type === 'd') {
    room.usernames = members;
  }

  if (Apps && Apps.isLoaded()) {
    const prevent = Promise.await(Apps.getBridges().getListenerBridge().roomEvent('IPreRoomCreatePrevent', room));

    if (prevent) {
      throw new Meteor.Error('error-app-prevented-creation', 'A Rocket.Chat App prevented the room creation.');
    }

    let result;
    result = Promise.await(Apps.getBridges().getListenerBridge().roomEvent('IPreRoomCreateExtend', room));
    result = Promise.await(Apps.getBridges().getListenerBridge().roomEvent('IPreRoomCreateModify', result));

    if (typeof result === 'object') {
      room = Object.assign(room, result);
    }
  }

  if (type === 'c') {
    RocketChat.callbacks.run('beforeCreateChannel', owner, room);
  }

  room = RocketChat.models.Rooms.createWithFullRoomData(room);

  for (const username of members) {
    const member = RocketChat.models.Users.findOneByUsername(username, {
      fields: {
        username: 1,
        'settings.preferences': 1
      }
    });
    const isTheOwner = username === owner.username;

    if (!member) {
      continue;
    } // make all room members (Except the owner) muted by default, unless they have the post-readonly permission


    if (readOnly === true && !RocketChat.authz.hasPermission(member._id, 'post-readonly') && !isTheOwner) {
      RocketChat.models.Rooms.muteUsernameByRoomId(room._id, username);
    }

    const extra = {
      open: true
    };

    if (username === owner.username) {
      extra.ls = now;
    }

    RocketChat.models.Subscriptions.createWithRoomAndUser(room, member, extra);
  }

  RocketChat.authz.addUserRoles(owner._id, ['owner'], room._id);

  if (type === 'c') {
    Meteor.defer(() => {
      RocketChat.callbacks.run('afterCreateChannel', owner, room);
    });
  } else if (type === 'p') {
    Meteor.defer(() => {
      RocketChat.callbacks.run('afterCreatePrivateGroup', owner, room);
    });
  }

  Meteor.defer(() => {
    RocketChat.callbacks.run('afterCreateRoom', owner, room);
  });

  if (Apps && Apps.isLoaded()) {
    // This returns a promise, but it won't mutate anything about the message
    // so, we don't really care if it is successful or fails
    Apps.getBridges().getListenerBridge().roomEvent('IPostRoomCreate', room);
  }

  return {
    rid: room._id,
    name: room.name
  };
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cleanRoomHistory.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/cleanRoomHistory.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.cleanRoomHistory = function ({
  rid,
  latest = new Date(),
  oldest = new Date('0001-01-01T00:00:00Z'),
  inclusive = true,
  limit = 0,
  excludePinned = true,
  filesOnly = false,
  fromUsers = []
}) {
  const gt = inclusive ? '$gte' : '$gt';
  const lt = inclusive ? '$lte' : '$lt';
  const ts = {
    [gt]: oldest,
    [lt]: latest
  };
  const text = `_${TAPi18n.__('File_removed_by_prune')}_`;
  let fileCount = 0;
  RocketChat.models.Messages.findFilesByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts, fromUsers, {
    fields: {
      'file._id': 1,
      pinned: 1
    },
    limit
  }).forEach(document => {
    FileUpload.getStore('Uploads').deleteById(document.file._id);
    fileCount++;

    if (filesOnly) {
      RocketChat.models.Messages.update({
        _id: document._id
      }, {
        $unset: {
          file: 1
        },
        $set: {
          attachments: [{
            color: '#FD745E',
            text
          }]
        }
      });
    }
  });

  if (filesOnly) {
    return fileCount;
  }

  const count = limit ? RocketChat.models.Messages.removeByIdPinnedTimestampLimitAndUsers(rid, excludePinned, ts, limit, fromUsers) : RocketChat.models.Messages.removeByIdPinnedTimestampAndUsers(rid, excludePinned, ts, fromUsers);

  if (count) {
    RocketChat.models.Rooms.resetLastMessageById(rid);
    RocketChat.Notifications.notifyRoom(rid, 'deleteMessageBulk', {
      rid,
      excludePinned,
      ts,
      users: fromUsers
    });
  }

  return count;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/deleteMessage.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals FileUpload */
RocketChat.deleteMessage = function (message, user) {
  const keepHistory = RocketChat.settings.get('Message_KeepHistory');
  const showDeletedStatus = RocketChat.settings.get('Message_ShowDeletedStatus');
  const deletedMsg = RocketChat.models.Messages.findOneById(message._id);

  if (deletedMsg && Apps && Apps.isLoaded()) {
    const prevent = Promise.await(Apps.getBridges().getListenerBridge().messageEvent('IPreMessageDeletePrevent', deletedMsg));

    if (prevent) {
      throw new Meteor.Error('error-app-prevented-deleting', 'A Rocket.Chat App prevented the message deleting.');
    }
  }

  if (keepHistory) {
    if (showDeletedStatus) {
      RocketChat.models.Messages.cloneAndSaveAsHistoryById(message._id);
    } else {
      RocketChat.models.Messages.setHiddenById(message._id, true);
    }

    if (message.file && message.file._id) {
      RocketChat.models.Uploads.update(message.file._id, {
        $set: {
          _hidden: true
        }
      });
    }
  } else {
    if (!showDeletedStatus) {
      RocketChat.models.Messages.removeById(message._id);
    }

    if (message.file && message.file._id) {
      FileUpload.getStore('Uploads').deleteById(message.file._id);
    }
  }

  Meteor.defer(function () {
    RocketChat.callbacks.run('afterDeleteMessage', deletedMsg);
  }); // update last message

  if (RocketChat.settings.get('Store_Last_Message')) {
    const room = RocketChat.models.Rooms.findOneById(message.rid, {
      fields: {
        lastMessage: 1
      }
    });

    if (!room.lastMessage || room.lastMessage._id === message._id) {
      RocketChat.models.Rooms.resetLastMessageById(message.rid);
    }
  }

  if (showDeletedStatus) {
    RocketChat.models.Messages.setAsDeletedByIdAndUser(message._id, user);
  } else {
    RocketChat.Notifications.notifyRoom(message.rid, 'deleteMessage', {
      _id: message._id
    });
  }

  if (Apps && Apps.isLoaded()) {
    Apps.getBridges().getListenerBridge().messageEvent('IPostMessageDeleted', deletedMsg);
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/deleteUser.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.deleteUser = function (userId) {
  const user = RocketChat.models.Users.findOneById(userId, {
    fields: {
      username: 1,
      avatarOrigin: 1
    }
  }); // Users without username can't do anything, so there is nothing to remove

  if (user.username != null) {
    const roomCache = []; // Iterate through all the rooms the user is subscribed to, to check if they are the last owner of any of them.

    RocketChat.models.Subscriptions.db.findByUserId(userId).forEach(subscription => {
      const roomData = {
        rid: subscription.rid,
        t: subscription.t,
        subscribers: null
      }; // DMs can always be deleted, so let's ignore it on this check

      if (roomData.t !== 'd') {
        // If the user is an owner on this room
        if (RocketChat.authz.hasRole(user._id, 'owner', subscription.rid)) {
          // Fetch the number of owners
          const numOwners = RocketChat.authz.getUsersInRole('owner', subscription.rid).fetch().length; // If it's only one, then this user is the only owner.

          if (numOwners === 1) {
            // If the user is the last owner of a public channel, then we need to abort the deletion
            if (roomData.t === 'c') {
              throw new Meteor.Error('error-user-is-last-owner', `To delete this user you'll need to set a new owner to the following room: ${subscription.name}.`, {
                method: 'deleteUser'
              });
            } // For private groups, let's check how many subscribers it has. If the user is the only subscriber, then it will be eliminated and doesn't need to abort the deletion


            roomData.subscribers = RocketChat.models.Subscriptions.findByRoomId(subscription.rid).count();

            if (roomData.subscribers > 1) {
              throw new Meteor.Error('error-user-is-last-owner', `To delete this user you'll need to set a new owner to the following room: ${subscription.name}.`, {
                method: 'deleteUser'
              });
            }
          }
        }
      }

      roomCache.push(roomData);
    });
    const messageErasureType = RocketChat.settings.get('Message_ErasureType');

    switch (messageErasureType) {
      case 'Delete':
        const store = FileUpload.getStore('Uploads');
        RocketChat.models.Messages.findFilesByUserId(userId).forEach(function ({
          file
        }) {
          store.deleteById(file._id);
        });
        RocketChat.models.Messages.removeByUserId(userId);
        break;

      case 'Unlink':
        const rocketCat = RocketChat.models.Users.findOneById('rocket.cat');

        const nameAlias = TAPi18n.__('Removed_User');

        RocketChat.models.Messages.unlinkUserId(userId, rocketCat._id, rocketCat.username, nameAlias);
        break;
    }

    roomCache.forEach(roomData => {
      if (roomData.subscribers === null && roomData.t !== 'd' && roomData.t !== 'c') {
        roomData.subscribers = RocketChat.models.Subscriptions.findByRoomId(roomData.rid).count();
      } // Remove DMs and non-channel rooms with only 1 user (the one being deleted)


      if (roomData.t === 'd' || roomData.t !== 'c' && roomData.subscribers === 1) {
        RocketChat.models.Subscriptions.removeByRoomId(roomData.rid);
        RocketChat.models.Messages.removeFilesByRoomId(roomData.rid);
        RocketChat.models.Messages.removeByRoomId(roomData.rid);
        RocketChat.models.Rooms.removeById(roomData.rid);
      }
    });
    RocketChat.models.Subscriptions.removeByUserId(userId); // Remove user subscriptions

    RocketChat.models.Rooms.removeDirectRoomContainingUsername(user.username); // Remove direct rooms with the user
    // removes user's avatar

    if (user.avatarOrigin === 'upload' || user.avatarOrigin === 'url') {
      FileUpload.getStore('Avatars').deleteByName(user.username);
    }

    RocketChat.models.Integrations.disableByUserId(userId); // Disables all the integrations which rely on the user being deleted.

    RocketChat.Notifications.notifyLogged('Users:Deleted', {
      userId
    });
  }

  RocketChat.models.Users.removeById(userId); // Remove user from users database
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getFullUserData.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/getFullUserData.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/objectSpread"));

let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);
const logger = new Logger('getFullUserData');
const defaultFields = {
  name: 1,
  username: 1,
  status: 1,
  utcOffset: 1,
  type: 1,
  active: 1,
  reason: 1
};
const fullFields = {
  emails: 1,
  phone: 1,
  statusConnection: 1,
  createdAt: 1,
  lastLogin: 1,
  services: 1,
  requirePasswordChange: 1,
  requirePasswordChangeReason: 1,
  roles: 1
};
let publicCustomFields = {};
let customFields = {};
RocketChat.settings.get('Accounts_CustomFields', (key, value) => {
  publicCustomFields = {};
  customFields = {};

  if (!value.trim()) {
    return;
  }

  try {
    const customFieldsOnServer = JSON.parse(value.trim());
    Object.keys(customFieldsOnServer).forEach(key => {
      const element = customFieldsOnServer[key];

      if (element.public) {
        publicCustomFields[`customFields.${key}`] = 1;
      }

      customFields[`customFields.${key}`] = 1;
    });
  } catch (e) {
    logger.warn(`The JSON specified for "Accounts_CustomFields" is invalid. The following error was thrown: ${e}`);
  }
});

RocketChat.getFullUserData = function ({
  userId,
  filter,
  limit: l
}) {
  const username = s.trim(filter);
  const userToRetrieveFullUserData = RocketChat.models.Users.findOneByUsername(username);
  const isMyOwnInfo = userToRetrieveFullUserData && userToRetrieveFullUserData._id === userId;
  const viewFullOtherUserInfo = RocketChat.authz.hasPermission(userId, 'view-full-other-user-info');
  const limit = !viewFullOtherUserInfo ? 1 : l;

  if (!username && limit <= 1) {
    return undefined;
  }

  const _customFields = isMyOwnInfo || viewFullOtherUserInfo ? customFields : publicCustomFields;

  const fields = viewFullOtherUserInfo ? (0, _objectSpread2.default)({}, defaultFields, fullFields, _customFields) : (0, _objectSpread2.default)({}, defaultFields, _customFields);
  const options = {
    fields,
    limit,
    sort: {
      username: 1
    }
  };

  if (!username) {
    return RocketChat.models.Users.find({}, options);
  }

  if (limit === 1) {
    return RocketChat.models.Users.findByUsername(username, options);
  }

  const usernameReg = new RegExp(s.escapeRegExp(username), 'i');
  return RocketChat.models.Users.findByUsernameNameOrEmailAddress(usernameReg, options);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getRoomByNameOrIdWithOptionToJoin.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/getRoomByNameOrIdWithOptionToJoin.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);

RocketChat.getRoomByNameOrIdWithOptionToJoin = function _getRoomByNameOrIdWithOptionToJoin({
  currentUserId,
  nameOrId,
  type = '',
  tryDirectByUserIdOnly = false,
  joinChannel = true,
  errorOnEmpty = true
}) {
  let room; // If the nameOrId starts with #, then let's try to find a channel or group

  if (nameOrId.startsWith('#')) {
    nameOrId = nameOrId.substring(1);
    room = RocketChat.models.Rooms.findOneByIdOrName(nameOrId);
  } else if (nameOrId.startsWith('@') || type === 'd') {
    // If the nameOrId starts with @ OR type is 'd', then let's try just a direct message
    nameOrId = nameOrId.replace('@', '');
    let roomUser;

    if (tryDirectByUserIdOnly) {
      roomUser = RocketChat.models.Users.findOneById(nameOrId);
    } else {
      roomUser = RocketChat.models.Users.findOne({
        $or: [{
          _id: nameOrId
        }, {
          username: nameOrId
        }]
      });
    }

    const rid = _.isObject(roomUser) ? [currentUserId, roomUser._id].sort().join('') : nameOrId;
    room = RocketChat.models.Rooms.findOneById(rid); // If the room hasn't been found yet, let's try some more

    if (!_.isObject(room)) {
      // If the roomUser wasn't found, then there's no destination to point towards
      // so return out based upon errorOnEmpty
      if (!_.isObject(roomUser)) {
        if (errorOnEmpty) {
          throw new Meteor.Error('invalid-channel');
        } else {
          return;
        }
      }

      room = Meteor.runAsUser(currentUserId, function () {
        const {
          rid
        } = Meteor.call('createDirectMessage', roomUser.username);
        return RocketChat.models.Rooms.findOneById(rid);
      });
    }
  } else {
    // Otherwise, we'll treat this as a channel or group.
    room = RocketChat.models.Rooms.findOneByIdOrName(nameOrId);
  } // If no room was found, handle the room return based upon errorOnEmpty


  if (!room && errorOnEmpty) {
    throw new Meteor.Error('invalid-channel');
  } else if (!room) {
    return;
  } // If a room was found and they provided a type to search, then check
  // and if the type found isn't what we're looking for then handle
  // the return based upon errorOnEmpty


  if (type && room.t !== type) {
    if (errorOnEmpty) {
      throw new Meteor.Error('invalid-channel');
    } else {
      return;
    }
  } // If the room type is channel and joinChannel has been passed, try to join them
  // if they can't join the room, this will error out!


  if (room.t === 'c' && joinChannel) {
    const sub = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(room._id, currentUserId);

    if (!sub) {
      Meteor.runAsUser(currentUserId, function () {
        return Meteor.call('joinRoom', room._id);
      });
    }
  }

  return room;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"loadMessageHistory.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/loadMessageHistory.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
const hideMessagesOfType = [];
RocketChat.settings.get(/Message_HideType_.+/, function (key, value) {
  const type = key.replace('Message_HideType_', '');
  const types = type === 'mute_unmute' ? ['user-muted', 'user-unmuted'] : [type];
  return types.forEach(type => {
    const index = hideMessagesOfType.indexOf(type);

    if (value === true && index === -1) {
      return hideMessagesOfType.push(type);
    }

    if (index > -1) {
      return hideMessagesOfType.splice(index, 1);
    }
  });
});

RocketChat.loadMessageHistory = function loadMessageHistory({
  userId,
  rid,
  end,
  limit = 20,
  ls
}) {
  const options = {
    sort: {
      ts: -1
    },
    limit
  };

  if (!RocketChat.settings.get('Message_ShowEditedStatus')) {
    options.fields = {
      editedAt: 0
    };
  }

  let records;

  if (end != null) {
    records = RocketChat.models.Messages.findVisibleByRoomIdBeforeTimestampNotContainingTypes(rid, end, hideMessagesOfType, options).fetch();
  } else {
    records = RocketChat.models.Messages.findVisibleByRoomIdNotContainingTypes(rid, hideMessagesOfType, options).fetch();
  }

  const UI_Use_Real_Name = RocketChat.settings.get('UI_Use_Real_Name') === true;
  const messages = records.map(message => {
    message.starred = _.findWhere(message.starred, {
      _id: userId
    });

    if (message.u && message.u._id && UI_Use_Real_Name) {
      const user = RocketChat.models.Users.findOneById(message.u._id);
      message.u.name = user && user.name;
    }

    if (message.mentions && message.mentions.length && UI_Use_Real_Name) {
      message.mentions.forEach(mention => {
        const user = RocketChat.models.Users.findOneById(mention._id);
        mention.name = user && user.name;
      });
    }

    return message;
  });
  let unreadNotLoaded = 0;
  let firstUnread;

  if (ls != null) {
    const firstMessage = messages[messages.length - 1];

    if ((firstMessage != null ? firstMessage.ts : undefined) > ls) {
      delete options.limit;
      const unreadMessages = RocketChat.models.Messages.findVisibleByRoomIdBetweenTimestampsNotContainingTypes(rid, ls, firstMessage.ts, hideMessagesOfType, {
        limit: 1,
        sort: {
          ts: 1
        }
      });
      firstUnread = unreadMessages.fetch()[0];
      unreadNotLoaded = unreadMessages.count();
    }
  }

  return {
    messages,
    firstUnread,
    unreadNotLoaded
  };
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeUserFromRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/removeUserFromRoom.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.removeUserFromRoom = function (rid, user) {
  const room = RocketChat.models.Rooms.findOneById(rid);

  if (room) {
    RocketChat.callbacks.run('beforeLeaveRoom', user, room);
    const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, user._id, {
      fields: {
        _id: 1
      }
    });

    if (subscription) {
      const removedUser = user;
      RocketChat.models.Messages.createUserLeaveWithRoomIdAndUser(rid, removedUser);
    }

    if (room.t === 'l') {
      RocketChat.models.Messages.createCommandWithRoomIdAndUser('survey', rid, user);
    }

    RocketChat.models.Subscriptions.removeByRoomIdAndUserId(rid, user._id);
    Meteor.defer(function () {
      // TODO: CACHE: maybe a queue?
      RocketChat.callbacks.run('afterLeaveRoom', user, room);
    });
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveUser.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/saveUser.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 1);
let Mailer;
module.watch(require("meteor/rocketchat:mailer"), {
  "*"(v) {
    Mailer = v;
  }

}, 2);
let html = '';
Meteor.startup(() => {
  Mailer.getTemplate('Accounts_UserAddedEmail_Email', template => {
    html = template;
  });
});

function validateUserData(userId, userData) {
  const existingRoles = _.pluck(RocketChat.authz.getRoles(), '_id');

  if (userData._id && userId !== userData._id && !RocketChat.authz.hasPermission(userId, 'edit-other-user-info')) {
    throw new Meteor.Error('error-action-not-allowed', 'Editing user is not allowed', {
      method: 'insertOrUpdateUser',
      action: 'Editing_user'
    });
  }

  if (!userData._id && !RocketChat.authz.hasPermission(userId, 'create-user')) {
    throw new Meteor.Error('error-action-not-allowed', 'Adding user is not allowed', {
      method: 'insertOrUpdateUser',
      action: 'Adding_user'
    });
  }

  if (userData.roles && _.difference(userData.roles, existingRoles).length > 0) {
    throw new Meteor.Error('error-action-not-allowed', 'The field Roles consist invalid role name', {
      method: 'insertOrUpdateUser',
      action: 'Assign_role'
    });
  }

  if (userData.roles && _.indexOf(userData.roles, 'admin') >= 0 && !RocketChat.authz.hasPermission(userId, 'assign-admin-role')) {
    throw new Meteor.Error('error-action-not-allowed', 'Assigning admin is not allowed', {
      method: 'insertOrUpdateUser',
      action: 'Assign_admin'
    });
  }

  if (!userData._id && !s.trim(userData.name)) {
    throw new Meteor.Error('error-the-field-is-required', 'The field Name is required', {
      method: 'insertOrUpdateUser',
      field: 'Name'
    });
  }

  if (!userData._id && !s.trim(userData.username)) {
    throw new Meteor.Error('error-the-field-is-required', 'The field Username is required', {
      method: 'insertOrUpdateUser',
      field: 'Username'
    });
  }

  let nameValidation;

  try {
    nameValidation = new RegExp(`^${RocketChat.settings.get('UTF8_Names_Validation')}$`);
  } catch (e) {
    nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');
  }

  if (userData.username && !nameValidation.test(userData.username)) {
    throw new Meteor.Error('error-input-is-not-a-valid-field', `${_.escape(userData.username)} is not a valid username`, {
      method: 'insertOrUpdateUser',
      input: userData.username,
      field: 'Username'
    });
  }

  if (!userData._id && !userData.password) {
    throw new Meteor.Error('error-the-field-is-required', 'The field Password is required', {
      method: 'insertOrUpdateUser',
      field: 'Password'
    });
  }

  if (!userData._id) {
    if (!RocketChat.checkUsernameAvailability(userData.username)) {
      throw new Meteor.Error('error-field-unavailable', `${_.escape(userData.username)} is already in use :(`, {
        method: 'insertOrUpdateUser',
        field: userData.username
      });
    }

    if (userData.email && !RocketChat.checkEmailAvailability(userData.email)) {
      throw new Meteor.Error('error-field-unavailable', `${_.escape(userData.email)} is already in use :(`, {
        method: 'insertOrUpdateUser',
        field: userData.email
      });
    }
  }
}

RocketChat.saveUser = function (userId, userData) {
  validateUserData(userId, userData);

  if (!userData._id) {
    RocketChat.validateEmailDomain(userData.email); // insert user

    const createUser = {
      username: userData.username,
      password: userData.password,
      joinDefaultChannels: userData.joinDefaultChannels
    };

    if (userData.email) {
      createUser.email = userData.email;
    }

    const _id = Accounts.createUser(createUser);

    const updateUser = {
      $set: {
        name: userData.name,
        roles: userData.roles || ['user'],
        settings: userData.settings || {}
      }
    };

    if (typeof userData.requirePasswordChange !== 'undefined') {
      updateUser.$set.requirePasswordChange = userData.requirePasswordChange;
    }

    if (typeof userData.verified === 'boolean') {
      updateUser.$set['emails.0.verified'] = userData.verified;
    }

    Meteor.users.update({
      _id
    }, updateUser);

    if (userData.sendWelcomeEmail) {
      const subject = RocketChat.settings.get('Accounts_UserAddedEmail_Subject');
      const email = {
        to: userData.email,
        from: RocketChat.settings.get('From_Email'),
        subject,
        html,
        data: {
          name: s.escapeHTML(userData.name),
          email: s.escapeHTML(userData.email),
          password: s.escapeHTML(userData.password)
        }
      };

      try {
        Mailer.send(email);
      } catch (error) {
        throw new Meteor.Error('error-email-send-failed', `Error trying to send email: ${error.message}`, {
          function: 'RocketChat.saveUser',
          message: error.message
        });
      }
    }

    userData._id = _id;

    if (RocketChat.settings.get('Accounts_SetDefaultAvatar') === true && userData.email) {
      const gravatarUrl = Gravatar.imageUrl(userData.email, {
        default: '404',
        size: 200,
        secure: true
      });

      try {
        RocketChat.setUserAvatar(userData, gravatarUrl, '', 'url');
      } catch (e) {// Ignore this error for now, as it not being successful isn't bad
      }
    }

    return _id;
  }

  if (!RocketChat.settings.get('Accounts_AllowUserProfileChange') && !RocketChat.authz.hasPermission(userId, 'edit-other-user-info') && !RocketChat.authz.hasPermission(userId, 'edit-other-user-password')) {
    throw new Meteor.Error('error-action-not-allowed', 'Edit user profile is not allowed', {
      method: 'insertOrUpdateUser',
      action: 'Update_user'
    });
  }

  if (userData.username && !RocketChat.settings.get('Accounts_AllowUsernameChange') && !RocketChat.authz.hasPermission(userId, 'edit-other-user-info')) {
    throw new Meteor.Error('error-action-not-allowed', 'Edit username is not allowed', {
      method: 'insertOrUpdateUser',
      action: 'Update_user'
    });
  }

  if (userData.name && !RocketChat.settings.get('Accounts_AllowRealNameChange') && !RocketChat.authz.hasPermission(userId, 'edit-other-user-info')) {
    throw new Meteor.Error('error-action-not-allowed', 'Edit user real name is not allowed', {
      method: 'insertOrUpdateUser',
      action: 'Update_user'
    });
  }

  if (userData.email && !RocketChat.settings.get('Accounts_AllowEmailChange') && !RocketChat.authz.hasPermission(userId, 'edit-other-user-info')) {
    throw new Meteor.Error('error-action-not-allowed', 'Edit user email is not allowed', {
      method: 'insertOrUpdateUser',
      action: 'Update_user'
    });
  }

  if (userData.password && !RocketChat.settings.get('Accounts_AllowPasswordChange') && !RocketChat.authz.hasPermission(userId, 'edit-other-user-password')) {
    throw new Meteor.Error('error-action-not-allowed', 'Edit user password is not allowed', {
      method: 'insertOrUpdateUser',
      action: 'Update_user'
    });
  } // update user


  if (userData.username) {
    RocketChat.setUsername(userData._id, userData.username);
  }

  if (userData.name) {
    RocketChat.setRealName(userData._id, userData.name);
  }

  if (userData.email) {
    const shouldSendVerificationEmailToUser = userData.verified !== true;
    RocketChat.setEmail(userData._id, userData.email, shouldSendVerificationEmailToUser);
  }

  if (userData.password && userData.password.trim() && RocketChat.authz.hasPermission(userId, 'edit-other-user-password') && RocketChat.passwordPolicy.validate(userData.password)) {
    Accounts.setPassword(userData._id, userData.password.trim());
  }

  const updateUser = {
    $set: {}
  };

  if (userData.roles) {
    updateUser.$set.roles = userData.roles;
  }

  if (userData.settings) {
    updateUser.$set.settings = {
      preferences: userData.settings.preferences
    };
  }

  if (typeof userData.requirePasswordChange !== 'undefined') {
    updateUser.$set.requirePasswordChange = userData.requirePasswordChange;
  }

  if (typeof userData.verified === 'boolean') {
    updateUser.$set['emails.0.verified'] = userData.verified;
  }

  Meteor.users.update({
    _id: userData._id
  }, updateUser);
  return true;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveCustomFields.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/saveCustomFields.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);

RocketChat.saveCustomFields = function (userId, formData) {
  if (s.trim(RocketChat.settings.get('Accounts_CustomFields')) !== '') {
    RocketChat.validateCustomFields(formData);
    return RocketChat.saveCustomFieldsWithoutValidation(userId, formData);
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveCustomFieldsWithoutValidation.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/saveCustomFieldsWithoutValidation.js                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);

RocketChat.saveCustomFieldsWithoutValidation = function (userId, formData) {
  if (s.trim(RocketChat.settings.get('Accounts_CustomFields')) !== '') {
    let customFieldsMeta;

    try {
      customFieldsMeta = JSON.parse(RocketChat.settings.get('Accounts_CustomFields'));
    } catch (e) {
      throw new Meteor.Error('error-invalid-customfield-json', 'Invalid JSON for Custom Fields');
    }

    const customFields = {};
    Object.keys(customFieldsMeta).forEach(key => customFields[key] = formData[key]);
    RocketChat.models.Users.setCustomFields(userId, customFields); // Update customFields of all Direct Messages' Rooms for userId

    RocketChat.models.Subscriptions.setCustomFieldsDirectMessagesByUserId(userId, customFields);
    Object.keys(customFields).forEach(fieldName => {
      if (!customFieldsMeta[fieldName].modifyRecordField) {
        return;
      }

      const {
        modifyRecordField
      } = customFieldsMeta[fieldName];
      const update = {};

      if (modifyRecordField.array) {
        update.$addToSet = {};
        update.$addToSet[modifyRecordField.field] = customFields[fieldName];
      } else {
        update.$set = {};
        update.$set[modifyRecordField.field] = customFields[fieldName];
      }

      RocketChat.models.Users.update(userId, update);
    });
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/sendMessage.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
const objectMaybeIncluding = types => Match.Where(value => {
  Object.keys(types).forEach(field => {
    if (value[field] != null) {
      try {
        check(value[field], types[field]);
      } catch (error) {
        error.path = field;
        throw error;
      }
    }
  });
  return true;
});

const validateAttachmentsFields = attachmentField => {
  check(attachmentField, objectMaybeIncluding({
    short: Boolean,
    title: String,
    value: Match.OneOf(String, Match.Integer, Boolean)
  }));

  if (typeof attachmentField.value !== 'undefined') {
    attachmentField.value = String(attachmentField.value);
  }
};

const validateAttachmentsActions = attachmentActions => {
  check(attachmentActions, objectMaybeIncluding({
    type: String,
    text: String,
    url: String,
    image_url: String,
    is_webview: Boolean,
    webview_height_ratio: String,
    msg: String,
    msg_in_chat_window: Boolean
  }));
};

const validateAttachment = attachment => {
  check(attachment, objectMaybeIncluding({
    color: String,
    text: String,
    ts: Match.OneOf(String, Match.Integer),
    thumb_url: String,
    button_alignment: String,
    actions: [Match.Any],
    message_link: String,
    collapsed: Boolean,
    author_name: String,
    author_link: String,
    author_icon: String,
    title: String,
    title_link: String,
    title_link_download: Boolean,
    image_url: String,
    audio_url: String,
    video_url: String,
    fields: [Match.Any]
  }));

  if (attachment.fields && attachment.fields.length) {
    attachment.fields.map(validateAttachmentsFields);
  }

  if (attachment.actions && attachment.actions.length) {
    attachment.actions.map(validateAttachmentsActions);
  }
};

const validateBodyAttachments = attachments => attachments.map(validateAttachment);

RocketChat.sendMessage = function (user, message, room, upsert = false) {
  if (!user || !message || !room._id) {
    return false;
  }

  check(message, objectMaybeIncluding({
    _id: String,
    msg: String,
    text: String,
    alias: String,
    emoji: String,
    avatar: String,
    attachments: [Match.Any]
  }));

  if (Array.isArray(message.attachments) && message.attachments.length) {
    validateBodyAttachments(message.attachments);
  }

  if (!message.ts) {
    message.ts = new Date();
  }

  const {
    _id,
    username,
    name
  } = user;
  message.u = {
    _id,
    username,
    name
  };
  message.rid = room._id;

  if (!Match.test(message.msg, String)) {
    message.msg = '';
  }

  if (message.ts == null) {
    message.ts = new Date();
  }

  if (RocketChat.settings.get('Message_Read_Receipt_Enabled')) {
    message.unread = true;
  } // For the Rocket.Chat Apps :)


  if (message && Apps && Apps.isLoaded()) {
    const prevent = Promise.await(Apps.getBridges().getListenerBridge().messageEvent('IPreMessageSentPrevent', message));

    if (prevent) {
      throw new Meteor.Error('error-app-prevented-sending', 'A Rocket.Chat App prevented the message sending.');
    }

    let result;
    result = Promise.await(Apps.getBridges().getListenerBridge().messageEvent('IPreMessageSentExtend', message));
    result = Promise.await(Apps.getBridges().getListenerBridge().messageEvent('IPreMessageSentModify', result));

    if (typeof result === 'object') {
      message = Object.assign(message, result);
    }
  }

  if (message.parseUrls !== false) {
    message.html = message.msg;
    message = RocketChat.Markdown.code(message);
    const urls = message.html.match(/([A-Za-z]{3,9}):\/\/([-;:&=\+\$,\w]+@{1})?([-A-Za-z0-9\.]+)+:?(\d+)?((\/[-\+=!:~%\/\.@\,\(\)\w]*)?\??([-\+=&!:;%@\/\.\,\w]+)?(?:#([^\s\)]+))?)?/g);

    if (urls) {
      message.urls = urls.map(url => ({
        url
      }));
    }

    message = RocketChat.Markdown.mountTokensBack(message, false);
    message.msg = message.html;
    delete message.html;
    delete message.tokens;
  }

  message = RocketChat.callbacks.run('beforeSaveMessage', message);

  if (message) {
    // Avoid saving sandstormSessionId to the database
    let sandstormSessionId = null;

    if (message.sandstormSessionId) {
      sandstormSessionId = message.sandstormSessionId;
      delete message.sandstormSessionId;
    }

    if (message._id && upsert) {
      const {
        _id
      } = message;
      delete message._id;
      RocketChat.models.Messages.upsert({
        _id,
        'u._id': message.u._id
      }, message);
      message._id = _id;
    } else {
      message._id = RocketChat.models.Messages.insert(message);
    }

    if (Apps && Apps.isLoaded()) {
      // This returns a promise, but it won't mutate anything about the message
      // so, we don't really care if it is successful or fails
      Apps.getBridges().getListenerBridge().messageEvent('IPostMessageSent', message);
    }
    /*
    Defer other updates as their return is not interesting to the user
    */


    Meteor.defer(() => {
      // Execute all callbacks
      message.sandstormSessionId = sandstormSessionId;
      return RocketChat.callbacks.run('afterSaveMessage', message, room, user._id);
    });
    return message;
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settings.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/settings.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
const blockedSettings = {};

if (process.env.SETTINGS_BLOCKED) {
  process.env.SETTINGS_BLOCKED.split(',').forEach(settingId => blockedSettings[settingId] = 1);
}

const hiddenSettings = {};

if (process.env.SETTINGS_HIDDEN) {
  process.env.SETTINGS_HIDDEN.split(',').forEach(settingId => hiddenSettings[settingId] = 1);
}

RocketChat.settings._sorter = {};
/*
* Add a setting
* @param {String} _id
* @param {Mixed} value
* @param {Object} setting
*/

RocketChat.settings.add = function (_id, value, options = {}) {
  if (options == null) {
    options = {};
  }

  if (!_id || value == null) {
    return false;
  }

  if (RocketChat.settings._sorter[options.group] == null) {
    RocketChat.settings._sorter[options.group] = 0;
  }

  options.packageValue = value;
  options.valueSource = 'packageValue';
  options.hidden = options.hidden || false;
  options.blocked = options.blocked || false;

  if (options.sorter == null) {
    options.sorter = RocketChat.settings._sorter[options.group]++;
  }

  if (options.enableQuery != null) {
    options.enableQuery = JSON.stringify(options.enableQuery);
  }

  if (options.i18nDefaultQuery != null) {
    options.i18nDefaultQuery = JSON.stringify(options.i18nDefaultQuery);
  }

  if (typeof process !== 'undefined' && process.env && process.env[_id]) {
    value = process.env[_id];

    if (value.toLowerCase() === 'true') {
      value = true;
    } else if (value.toLowerCase() === 'false') {
      value = false;
    }

    options.processEnvValue = value;
    options.valueSource = 'processEnvValue';
  } else if (Meteor.settings && typeof Meteor.settings[_id] !== 'undefined') {
    if (Meteor.settings[_id] == null) {
      return false;
    }

    value = Meteor.settings[_id];
    options.meteorSettingsValue = value;
    options.valueSource = 'meteorSettingsValue';
  }

  if (options.i18nLabel == null) {
    options.i18nLabel = _id;
  }

  if (options.i18nDescription == null) {
    options.i18nDescription = `${_id}_Description`;
  }

  if (blockedSettings[_id] != null) {
    options.blocked = true;
  }

  if (hiddenSettings[_id] != null) {
    options.hidden = true;
  }

  if (options.autocomplete == null) {
    options.autocomplete = true;
  }

  if (typeof process !== 'undefined' && process.env && process.env[`OVERWRITE_SETTING_${_id}`]) {
    let value = process.env[`OVERWRITE_SETTING_${_id}`];

    if (value.toLowerCase() === 'true') {
      value = true;
    } else if (value.toLowerCase() === 'false') {
      value = false;
    }

    options.value = value;
    options.processEnvValue = value;
    options.valueSource = 'processEnvValue';
  }

  const updateOperations = {
    $set: options,
    $setOnInsert: {
      createdAt: new Date()
    }
  };

  if (options.editor != null) {
    updateOperations.$setOnInsert.editor = options.editor;
    delete options.editor;
  }

  if (options.value == null) {
    if (options.force === true) {
      updateOperations.$set.value = options.packageValue;
    } else {
      updateOperations.$setOnInsert.value = value;
    }
  }

  const query = _.extend({
    _id
  }, updateOperations.$set);

  if (options.section == null) {
    updateOperations.$unset = {
      section: 1
    };
    query.section = {
      $exists: false
    };
  }

  const existantSetting = RocketChat.models.Settings.db.findOne(query);

  if (existantSetting != null) {
    if (existantSetting.editor == null && updateOperations.$setOnInsert.editor != null) {
      updateOperations.$set.editor = updateOperations.$setOnInsert.editor;
      delete updateOperations.$setOnInsert.editor;
    }
  } else {
    updateOperations.$set.ts = new Date();
  }

  return RocketChat.models.Settings.upsert({
    _id
  }, updateOperations);
};
/*
* Add a setting group
* @param {String} _id
*/


RocketChat.settings.addGroup = function (_id, options = {}, cb) {
  if (!_id) {
    return false;
  }

  if (_.isFunction(options)) {
    cb = options;
    options = {};
  }

  if (options.i18nLabel == null) {
    options.i18nLabel = _id;
  }

  if (options.i18nDescription == null) {
    options.i18nDescription = `${_id}_Description`;
  }

  options.ts = new Date();
  options.blocked = false;
  options.hidden = false;

  if (blockedSettings[_id] != null) {
    options.blocked = true;
  }

  if (hiddenSettings[_id] != null) {
    options.hidden = true;
  }

  RocketChat.models.Settings.upsert({
    _id
  }, {
    $set: options,
    $setOnInsert: {
      type: 'group',
      createdAt: new Date()
    }
  });

  if (cb != null) {
    cb.call({
      add(id, value, options) {
        if (options == null) {
          options = {};
        }

        options.group = _id;
        return RocketChat.settings.add(id, value, options);
      },

      section(section, cb) {
        return cb.call({
          add(id, value, options) {
            if (options == null) {
              options = {};
            }

            options.group = _id;
            options.section = section;
            return RocketChat.settings.add(id, value, options);
          }

        });
      }

    });
  }
};
/*
* Remove a setting by id
* @param {String} _id
*/


RocketChat.settings.removeById = function (_id) {
  if (!_id) {
    return false;
  }

  return RocketChat.models.Settings.removeById(_id);
};
/*
* Update a setting by id
* @param {String} _id
*/


RocketChat.settings.updateById = function (_id, value, editor) {
  if (!_id || value == null) {
    return false;
  }

  if (editor != null) {
    return RocketChat.models.Settings.updateValueAndEditorById(_id, value, editor);
  }

  return RocketChat.models.Settings.updateValueById(_id, value);
};
/*
* Update options of a setting by id
* @param {String} _id
*/


RocketChat.settings.updateOptionsById = function (_id, options) {
  if (!_id || options == null) {
    return false;
  }

  return RocketChat.models.Settings.updateOptionsById(_id, options);
};
/*
* Update a setting by id
* @param {String} _id
*/


RocketChat.settings.clearById = function (_id) {
  if (_id == null) {
    return false;
  }

  return RocketChat.models.Settings.updateValueById(_id, undefined);
};
/*
* Update a setting by id
*/


RocketChat.settings.init = function () {
  RocketChat.settings.initialLoad = true;
  RocketChat.models.Settings.find().observe({
    added(record) {
      Meteor.settings[record._id] = record.value;

      if (record.env === true) {
        process.env[record._id] = record.value;
      }

      return RocketChat.settings.load(record._id, record.value, RocketChat.settings.initialLoad);
    },

    changed(record) {
      Meteor.settings[record._id] = record.value;

      if (record.env === true) {
        process.env[record._id] = record.value;
      }

      return RocketChat.settings.load(record._id, record.value, RocketChat.settings.initialLoad);
    },

    removed(record) {
      delete Meteor.settings[record._id];

      if (record.env === true) {
        delete process.env[record._id];
      }

      return RocketChat.settings.load(record._id, undefined, RocketChat.settings.initialLoad);
    }

  });
  RocketChat.settings.initialLoad = false;
  RocketChat.settings.afterInitialLoad.forEach(fn => fn(Meteor.settings));
};

RocketChat.settings.afterInitialLoad = [];

RocketChat.settings.onAfterInitialLoad = function (fn) {
  RocketChat.settings.afterInitialLoad.push(fn);

  if (RocketChat.settings.initialLoad === false) {
    return fn(Meteor.settings);
  }
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUserAvatar.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setUserAvatar.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.setUserAvatar = function (user, dataURI, contentType, service) {
  let encoding;
  let image;

  if (service === 'initials') {
    return RocketChat.models.Users.setAvatarOrigin(user._id, service);
  } else if (service === 'url') {
    let result = null;

    try {
      result = HTTP.get(dataURI, {
        npmRequestOptions: {
          encoding: 'binary'
        }
      });
    } catch (error) {
      if (!error.response || error.response.statusCode !== 404) {
        console.log(`Error while handling the setting of the avatar from a url (${dataURI}) for ${user.username}:`, error);
        throw new Meteor.Error('error-avatar-url-handling', `Error while handling avatar setting from a URL (${dataURI}) for ${user.username}`, {
          function: 'RocketChat.setUserAvatar',
          url: dataURI,
          username: user.username
        });
      }
    }

    if (result.statusCode !== 200) {
      console.log(`Not a valid response, ${result.statusCode}, from the avatar url: ${dataURI}`);
      throw new Meteor.Error('error-avatar-invalid-url', `Invalid avatar URL: ${dataURI}`, {
        function: 'RocketChat.setUserAvatar',
        url: dataURI
      });
    }

    if (!/image\/.+/.test(result.headers['content-type'])) {
      console.log(`Not a valid content-type from the provided url, ${result.headers['content-type']}, from the avatar url: ${dataURI}`);
      throw new Meteor.Error('error-avatar-invalid-url', `Invalid avatar URL: ${dataURI}`, {
        function: 'RocketChat.setUserAvatar',
        url: dataURI
      });
    }

    encoding = 'binary';
    image = result.content;
    contentType = result.headers['content-type'];
  } else if (service === 'rest') {
    encoding = 'binary';
    image = dataURI;
  } else {
    const fileData = RocketChatFile.dataURIParse(dataURI);
    encoding = 'base64';
    image = fileData.image;
    contentType = fileData.contentType;
  }

  const buffer = new Buffer(image, encoding);
  const fileStore = FileUpload.getStore('Avatars');
  fileStore.deleteByName(user.username);
  const file = {
    userId: user._id,
    type: contentType,
    size: buffer.length
  };
  fileStore.insert(file, buffer, () => {
    Meteor.setTimeout(function () {
      RocketChat.models.Users.setAvatarOrigin(user._id, service);
      RocketChat.Notifications.notifyLogged('updateAvatar', {
        username: user.username
      });
    }, 500);
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUsername.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setUsername.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);

RocketChat._setUsername = function (userId, u) {
  const username = s.trim(u);

  if (!userId || !username) {
    return false;
  }

  let nameValidation;

  try {
    nameValidation = new RegExp(`^${RocketChat.settings.get('UTF8_Names_Validation')}$`);
  } catch (error) {
    nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');
  }

  if (!nameValidation.test(username)) {
    return false;
  }

  const user = RocketChat.models.Users.findOneById(userId); // User already has desired username, return

  if (user.username === username) {
    return user;
  }

  const previousUsername = user.username; // Check username availability or if the user already owns a different casing of the name

  if (!previousUsername || !(username.toLowerCase() === previousUsername.toLowerCase())) {
    if (!RocketChat.checkUsernameAvailability(username)) {
      return false;
    }
  } // If first time setting username, send Enrollment Email


  try {
    if (!previousUsername && user.emails && user.emails.length > 0 && RocketChat.settings.get('Accounts_Enrollment_Email')) {
      Accounts.sendEnrollmentEmail(user._id);
    }
  } catch (e) {
    console.error(e);
  }
  /* globals getAvatarSuggestionForUser */


  user.username = username;

  if (!previousUsername && RocketChat.settings.get('Accounts_SetDefaultAvatar') === true) {
    const avatarSuggestions = getAvatarSuggestionForUser(user);
    let gravatar;
    Object.keys(avatarSuggestions).some(service => {
      const avatarData = avatarSuggestions[service];

      if (service !== 'gravatar') {
        RocketChat.setUserAvatar(user, avatarData.blob, avatarData.contentType, service);
        gravatar = null;
        return true;
      }

      gravatar = avatarData;
      return false;
    });

    if (gravatar != null) {
      RocketChat.setUserAvatar(user, gravatar.blob, gravatar.contentType, 'gravatar');
    }
  } // Username is available; if coming from old username, update all references


  if (previousUsername) {
    RocketChat.models.Messages.updateAllUsernamesByUserId(user._id, username);
    RocketChat.models.Messages.updateUsernameOfEditByUserId(user._id, username);
    RocketChat.models.Messages.findByMention(previousUsername).forEach(function (msg) {
      const updatedMsg = msg.msg.replace(new RegExp(`@${previousUsername}`, 'ig'), `@${username}`);
      return RocketChat.models.Messages.updateUsernameAndMessageOfMentionByIdAndOldUsername(msg._id, previousUsername, username, updatedMsg);
    });
    RocketChat.models.Rooms.replaceUsername(previousUsername, username);
    RocketChat.models.Rooms.replaceMutedUsername(previousUsername, username);
    RocketChat.models.Rooms.replaceUsernameOfUserByUserId(user._id, username);
    RocketChat.models.Subscriptions.setUserUsernameByUserId(user._id, username);
    RocketChat.models.Subscriptions.setNameForDirectRoomsWithOldName(previousUsername, username);
    RocketChat.models.LivechatDepartmentAgents.replaceUsernameOfAgentByUserId(user._id, username);
    const fileStore = FileUpload.getStore('Avatars');
    const file = fileStore.model.findOneByName(previousUsername);

    if (file) {
      fileStore.model.updateFileNameById(file._id, username);
    }
  } // Set new username*


  RocketChat.models.Users.setUsername(user._id, username);
  return user;
};

RocketChat.setUsername = RocketChat.RateLimiter.limitFunction(RocketChat._setUsername, 1, 60000, {
  [0](userId) {
    return !userId || !RocketChat.authz.hasPermission(userId, 'edit-other-user-info');
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setRealName.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setRealName.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);

RocketChat._setRealName = function (userId, name) {
  name = s.trim(name);

  if (!userId || !name) {
    return false;
  }

  const user = RocketChat.models.Users.findOneById(userId); // User already has desired name, return

  if (user.name === name) {
    return user;
  } // Set new name


  RocketChat.models.Users.setName(user._id, name);
  user.name = name;
  RocketChat.models.Subscriptions.updateDirectFNameByName(user.username, name);

  if (RocketChat.settings.get('UI_Use_Real_Name') === true) {
    RocketChat.Notifications.notifyLogged('Users:NameChanged', {
      _id: user._id,
      name: user.name,
      username: user.username
    });
  }

  return user;
};

RocketChat.setRealName = RocketChat.RateLimiter.limitFunction(RocketChat._setRealName, 1, 60000, {
  0() {
    return !Meteor.userId() || !RocketChat.authz.hasPermission(Meteor.userId(), 'edit-other-user-info');
  }

} // Administrators have permission to change others names, so don't limit those
);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setEmail.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/setEmail.js                                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);

RocketChat._setEmail = function (userId, email, shouldSendVerificationEmail = true) {
  email = s.trim(email);

  if (!userId) {
    throw new Meteor.Error('error-invalid-user', 'Invalid user', {
      function: '_setEmail'
    });
  }

  if (!email) {
    throw new Meteor.Error('error-invalid-email', 'Invalid email', {
      function: '_setEmail'
    });
  }

  RocketChat.validateEmailDomain(email);
  const user = RocketChat.models.Users.findOneById(userId); // User already has desired username, return

  if (user.emails && user.emails[0] && user.emails[0].address === email) {
    return user;
  } // Check email availability


  if (!RocketChat.checkEmailAvailability(email)) {
    throw new Meteor.Error('error-field-unavailable', `${email} is already in use :(`, {
      function: '_setEmail',
      field: email
    });
  } // Set new email


  RocketChat.models.Users.setEmail(user._id, email);
  user.email = email;

  if (shouldSendVerificationEmail === true) {
    Meteor.call('sendConfirmationEmail', user.email);
  }

  return user;
};

RocketChat.setEmail = RocketChat.RateLimiter.limitFunction(RocketChat._setEmail, 1, 60000, {
  0() {
    return !Meteor.userId() || !RocketChat.authz.hasPermission(Meteor.userId(), 'edit-other-user-info');
  }

} // Administrators have permission to change others emails, so don't limit those
);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unarchiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/unarchiveRoom.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.unarchiveRoom = function (rid) {
  RocketChat.models.Rooms.unarchiveById(rid);
  RocketChat.models.Subscriptions.unarchiveByRoomId(rid);
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/updateMessage.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.updateMessage = function (message, user, originalMessage) {
  if (!originalMessage) {
    originalMessage = RocketChat.models.Messages.findOneById(message._id);
  } // For the Rocket.Chat Apps :)


  if (message && Apps && Apps.isLoaded()) {
    const appMessage = Object.assign({}, originalMessage, message);
    const prevent = Promise.await(Apps.getBridges().getListenerBridge().messageEvent('IPreMessageUpdatedPrevent', appMessage));

    if (prevent) {
      throw new Meteor.Error('error-app-prevented-updating', 'A Rocket.Chat App prevented the message updating.');
    }

    let result;
    result = Promise.await(Apps.getBridges().getListenerBridge().messageEvent('IPreMessageUpdatedExtend', appMessage));
    result = Promise.await(Apps.getBridges().getListenerBridge().messageEvent('IPreMessageUpdatedModify', result));

    if (typeof result === 'object') {
      message = Object.assign(appMessage, result);
    }
  } // If we keep history of edits, insert a new message to store history information


  if (RocketChat.settings.get('Message_KeepHistory')) {
    RocketChat.models.Messages.cloneAndSaveAsHistoryById(message._id);
  }

  message.editedAt = new Date();
  message.editedBy = {
    _id: user._id,
    username: user.username
  };
  const urls = message.msg.match(/([A-Za-z]{3,9}):\/\/([-;:&=\+\$,\w]+@{1})?([-A-Za-z0-9\.]+)+:?(\d+)?((\/[-\+=!:~%\/\.@\,\w]*)?\??([-\+=&!:;%@\/\.\,\w]+)?(?:#([^\s\)]+))?)?/g) || [];
  message.urls = urls.map(url => ({
    url
  }));
  message = RocketChat.callbacks.run('beforeSaveMessage', message);
  const tempid = message._id;
  delete message._id;
  RocketChat.models.Messages.update({
    _id: tempid
  }, {
    $set: message
  });
  const room = RocketChat.models.Rooms.findOneById(message.rid);

  if (Apps && Apps.isLoaded()) {
    // This returns a promise, but it won't mutate anything about the message
    // so, we don't really care if it is successful or fails
    Apps.getBridges().getListenerBridge().messageEvent('IPostMessageUpdated', message);
  }

  Meteor.defer(function () {
    RocketChat.callbacks.run('afterSaveMessage', RocketChat.models.Messages.findOneById(tempid), room, user._id);
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"validateCustomFields.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/validateCustomFields.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);

RocketChat.validateCustomFields = function (fields) {
  // Special Case:
  // If an admin didn't set any custom fields there's nothing to validate against so consider any customFields valid
  if (s.trim(RocketChat.settings.get('Accounts_CustomFields')) === '') {
    return;
  }

  let customFieldsMeta;

  try {
    customFieldsMeta = JSON.parse(RocketChat.settings.get('Accounts_CustomFields'));
  } catch (e) {
    throw new Meteor.Error('error-invalid-customfield-json', 'Invalid JSON for Custom Fields');
  }

  const customFields = {};
  Object.keys(customFieldsMeta).forEach(fieldName => {
    const field = customFieldsMeta[fieldName];
    customFields[fieldName] = fields[fieldName];
    const fieldValue = s.trim(fields[fieldName]);

    if (field.required && fieldValue === '') {
      throw new Meteor.Error('error-user-registration-custom-field', `Field ${fieldName} is required`, {
        method: 'registerUser'
      });
    }

    if (field.type === 'select' && field.options.indexOf(fields[fieldName]) === -1) {
      throw new Meteor.Error('error-user-registration-custom-field', `Value for field ${fieldName} is invalid`, {
        method: 'registerUser'
      });
    }

    if (field.maxLength && fieldValue.length > field.maxLength) {
      throw new Meteor.Error('error-user-registration-custom-field', `Max length of field ${fieldName} ${field.maxLength}`, {
        method: 'registerUser'
      });
    }

    if (field.minLength && fieldValue.length < field.minLength) {
      throw new Meteor.Error('error-user-registration-custom-field', `Min length of field ${fieldName} ${field.minLength}`, {
        method: 'registerUser'
      });
    }
  });
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Notifications.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/Notifications.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.Notifications = new class {
  constructor() {
    this.debug = false;
    this.streamAll = new Meteor.Streamer('notify-all');
    this.streamLogged = new Meteor.Streamer('notify-logged');
    this.streamRoom = new Meteor.Streamer('notify-room');
    this.streamRoomUsers = new Meteor.Streamer('notify-room-users');
    this.streamUser = new Meteor.Streamer('notify-user');
    this.streamAll.allowWrite('none');
    this.streamLogged.allowWrite('none');
    this.streamRoom.allowWrite('none');
    this.streamRoomUsers.allowWrite(function (eventName, ...args) {
      const [roomId, e] = eventName.split('/'); // const user = Meteor.users.findOne(this.userId, {
      // 	fields: {
      // 		username: 1
      // 	}
      // });

      if (RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId) != null) {
        const subscriptions = RocketChat.models.Subscriptions.findByRoomIdAndNotUserId(roomId, this.userId).fetch();
        subscriptions.forEach(subscription => RocketChat.Notifications.notifyUser(subscription.u._id, e, ...args));
      }

      return false;
    });
    this.streamUser.allowWrite('logged');
    this.streamAll.allowRead('all');
    this.streamLogged.allowRead('logged');
    this.streamRoom.allowRead(function (eventName, extraData) {
      const [roomId] = eventName.split('/');
      const room = RocketChat.models.Rooms.findOneById(roomId);

      if (!room) {
        console.warn(`Invalid streamRoom eventName: "${eventName}"`);
        return false;
      }

      if (room.t === 'l' && extraData && extraData.token && room.v.token === extraData.token) {
        return true;
      }

      if (this.userId == null) {
        return false;
      }

      const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(roomId, this.userId, {
        fields: {
          _id: 1
        }
      });
      return subscription != null;
    });
    this.streamRoomUsers.allowRead('none');
    this.streamUser.allowRead(function (eventName) {
      const [userId] = eventName.split('/');
      return this.userId != null && this.userId === userId;
    });
  }

  notifyAll(eventName, ...args) {
    if (this.debug === true) {
      console.log('notifyAll', [eventName, ...args]);
    }

    args.unshift(eventName);
    return this.streamAll.emit.apply(this.streamAll, args);
  }

  notifyLogged(eventName, ...args) {
    if (this.debug === true) {
      console.log('notifyLogged', [eventName, ...args]);
    }

    args.unshift(eventName);
    return this.streamLogged.emit.apply(this.streamLogged, args);
  }

  notifyRoom(room, eventName, ...args) {
    if (this.debug === true) {
      console.log('notifyRoom', [room, eventName, ...args]);
    }

    args.unshift(`${room}/${eventName}`);
    return this.streamRoom.emit.apply(this.streamRoom, args);
  }

  notifyUser(userId, eventName, ...args) {
    if (this.debug === true) {
      console.log('notifyUser', [userId, eventName, ...args]);
    }

    args.unshift(`${userId}/${eventName}`);
    return this.streamUser.emit.apply(this.streamUser, args);
  }

  notifyAllInThisInstance(eventName, ...args) {
    if (this.debug === true) {
      console.log('notifyAll', [eventName, ...args]);
    }

    args.unshift(eventName);
    return this.streamAll.emitWithoutBroadcast.apply(this.streamAll, args);
  }

  notifyLoggedInThisInstance(eventName, ...args) {
    if (this.debug === true) {
      console.log('notifyLogged', [eventName, ...args]);
    }

    args.unshift(eventName);
    return this.streamLogged.emitWithoutBroadcast.apply(this.streamLogged, args);
  }

  notifyRoomInThisInstance(room, eventName, ...args) {
    if (this.debug === true) {
      console.log('notifyRoomAndBroadcast', [room, eventName, ...args]);
    }

    args.unshift(`${room}/${eventName}`);
    return this.streamRoom.emitWithoutBroadcast.apply(this.streamRoom, args);
  }

  notifyUserInThisInstance(userId, eventName, ...args) {
    if (this.debug === true) {
      console.log('notifyUserAndBroadcast', [userId, eventName, ...args]);
    }

    args.unshift(`${userId}/${eventName}`);
    return this.streamUser.emitWithoutBroadcast.apply(this.streamUser, args);
  }

}();
RocketChat.Notifications.streamRoom.allowWrite(function (eventName, username, typing, extraData) {
  const [roomId, e] = eventName.split('/');

  if (e === 'webrtc') {
    return true;
  }

  if (e === 'typing') {
    const key = RocketChat.settings.get('UI_Use_Real_Name') ? 'name' : 'username'; // typing from livechat widget

    if (extraData && extraData.token) {
      const room = RocketChat.models.Rooms.findOneById(roomId);

      if (room && room.t === 'l' && room.v.token === extraData.token) {
        return true;
      }
    }

    const user = Meteor.users.findOne(this.userId, {
      fields: {
        [key]: 1
      }
    });

    if (!user) {
      return false;
    }

    return user[key] === username;
  }

  return false;
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"notifications":{"audio.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/notifications/audio.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  shouldNotifyAudio: () => shouldNotifyAudio,
  notifyAudioUser: () => notifyAudioUser
});

function shouldNotifyAudio({
  disableAllMessageNotifications,
  status,
  audioNotifications,
  hasMentionToAll,
  hasMentionToHere,
  isHighlighted,
  hasMentionToUser,
  roomType
}) {
  if (disableAllMessageNotifications && audioNotifications == null) {
    return false;
  }

  if (status === 'busy' || audioNotifications === 'nothing') {
    return false;
  }

  if (!audioNotifications && RocketChat.settings.get('Accounts_Default_User_Preferences_audioNotifications') === 'all') {
    return true;
  }

  return roomType === 'd' || !disableAllMessageNotifications && (hasMentionToAll || hasMentionToHere) || isHighlighted || audioNotifications === 'all' || hasMentionToUser;
}

function notifyAudioUser(userId, message, room) {
  RocketChat.metrics.notificationsSent.inc({
    notification_type: 'audio'
  });
  RocketChat.Notifications.notifyUser(userId, 'audioNotification', {
    payload: {
      _id: message._id,
      rid: message.rid,
      sender: message.u,
      type: room.t,
      name: room.name
    }
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"desktop.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/notifications/desktop.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  notifyDesktopUser: () => notifyDesktopUser,
  shouldNotifyDesktop: () => shouldNotifyDesktop
});

function notifyDesktopUser({
  userId,
  user,
  message,
  room,
  duration,
  notificationMessage
}) {
  const {
    title,
    text
  } = RocketChat.roomTypes.getConfig(room.t).getNotificationDetails(room, user, notificationMessage);
  RocketChat.metrics.notificationsSent.inc({
    notification_type: 'desktop'
  });
  RocketChat.Notifications.notifyUser(userId, 'notification', {
    title,
    text,
    duration,
    payload: {
      _id: message._id,
      rid: message.rid,
      sender: message.u,
      type: room.t,
      name: room.name,
      message: {
        msg: message.msg,
        t: message.t
      }
    }
  });
}

function shouldNotifyDesktop({
  disableAllMessageNotifications,
  status,
  desktopNotifications,
  hasMentionToAll,
  hasMentionToHere,
  isHighlighted,
  hasMentionToUser,
  roomType
}) {
  if (disableAllMessageNotifications && desktopNotifications == null) {
    return false;
  }

  if (status === 'busy' || desktopNotifications === 'nothing') {
    return false;
  }

  if (!desktopNotifications) {
    if (RocketChat.settings.get('Accounts_Default_User_Preferences_desktopNotifications') === 'all') {
      return true;
    }

    if (RocketChat.settings.get('Accounts_Default_User_Preferences_desktopNotifications') === 'nothing') {
      return false;
    }
  }

  return roomType === 'd' || !disableAllMessageNotifications && (hasMentionToAll || hasMentionToHere) || isHighlighted || desktopNotifications === 'all' || hasMentionToUser;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"email.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/notifications/email.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  sendEmail: () => sendEmail,
  shouldNotifyEmail: () => shouldNotifyEmail
});
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);
let Mailer;
module.watch(require("meteor/rocketchat:mailer"), {
  "*"(v) {
    Mailer = v;
  }

}, 1);
let advice = '';
let goToMessage = '';
Meteor.startup(() => {
  RocketChat.settings.get('email_style', function () {
    goToMessage = Mailer.inlinecss('<p><a class=\'btn\' href="[room_path]">{Offline_Link_Message}</a></p>');
  });
  Mailer.getTemplate('Email_Footer_Direct_Reply', value => {
    advice = value;
  });
});

function getEmailContent({
  message,
  user,
  room
}) {
  const lng = user && user.language || RocketChat.settings.get('language') || 'en';
  const roomName = s.escapeHTML(`#${RocketChat.roomTypes.getRoomName(room.t, room)}`);
  const userName = s.escapeHTML(RocketChat.settings.get('UI_Use_Real_Name') ? message.u.name || message.u.username : message.u.username);

  const header = TAPi18n.__(room.t === 'd' ? 'User_sent_a_message_to_you' : 'User_sent_a_message_on_channel', {
    username: userName,
    channel: roomName,
    lng
  });

  if (message.msg !== '') {
    let messageContent = s.escapeHTML(message.msg);

    if (message.t === 'e2e') {
      messageContent = TAPi18n.__('Encrypted_message', {
        lng
      });
    }

    message = RocketChat.callbacks.run('renderMessage', message);

    if (message.tokens && message.tokens.length > 0) {
      message.tokens.forEach(token => {
        token.text = token.text.replace(/([^\$])(\$[^\$])/gm, '$1$$$2');
        messageContent = messageContent.replace(token.token, token.text);
      });
    }

    return `${header}<br/><br/>${messageContent.replace(/\n/gm, '<br/>')}`;
  }

  if (message.file) {
    const fileHeader = TAPi18n.__(room.t === 'd' ? 'User_uploaded_a_file_to_you' : 'User_uploaded_a_file_on_channel', {
      username: userName,
      channel: roomName,
      lng
    });

    let content = `${TAPi18n.__('Attachment_File_Uploaded')}: ${s.escapeHTML(message.file.name)}`;

    if (message.attachments && message.attachments.length === 1 && message.attachments[0].description !== '') {
      content += `<br/><br/>${s.escapeHTML(message.attachments[0].description)}`;
    }

    return `${fileHeader}<br/><br/>${content}`;
  }

  if (message.attachments.length > 0) {
    const [attachment] = message.attachments;
    let content = '';

    if (attachment.title) {
      content += `${s.escapeHTML(attachment.title)}<br/>`;
    }

    if (attachment.text) {
      content += `${s.escapeHTML(attachment.text)}<br/>`;
    }

    return `${header}<br/><br/>${content}`;
  }

  return header;
}

function sendEmail({
  message,
  user,
  subscription,
  room,
  emailAddress,
  hasMentionToUser
}) {
  const username = RocketChat.settings.get('UI_Use_Real_Name') ? message.u.name : message.u.username;
  let subjectKey = 'Offline_Mention_All_Email';

  if (room.t === 'd') {
    subjectKey = 'Offline_DM_Email';
  } else if (hasMentionToUser) {
    subjectKey = 'Offline_Mention_Email';
  }

  const emailSubject = Mailer.replace(RocketChat.settings.get(subjectKey), {
    user: username,
    room: RocketChat.roomTypes.getRoomName(room.t, room)
  });
  const content = getEmailContent({
    message,
    user,
    room
  });
  const room_path = RocketChat.roomTypes.getURL(room.t, subscription);
  const email = {
    to: emailAddress,
    subject: emailSubject,
    html: content + goToMessage + (RocketChat.settings.get('Direct_Reply_Enable') ? advice : ''),
    data: {
      room_path
    }
  };
  const from = room.t === 'd' ? message.u.name : room.name; // using user full-name/channel name in from address

  email.from = `${String(from).replace(/@/g, '%40').replace(/[<>,]/g, '')} <${RocketChat.settings.get('From_Email')}>`; // If direct reply enabled, email content with headers

  if (RocketChat.settings.get('Direct_Reply_Enable')) {
    const replyto = RocketChat.settings.get('Direct_Reply_ReplyTo') || RocketChat.settings.get('Direct_Reply_Username');
    email.headers = {
      // Reply-To header with format "username+messageId@domain"
      'Reply-To': `${replyto.split('@')[0].split(RocketChat.settings.get('Direct_Reply_Separator'))[0]}${RocketChat.settings.get('Direct_Reply_Separator')}${message._id}@${replyto.split('@')[1]}`
    };
  }

  RocketChat.metrics.notificationsSent.inc({
    notification_type: 'email'
  });
  return Mailer.send(email);
}

function shouldNotifyEmail({
  disableAllMessageNotifications,
  statusConnection,
  emailNotifications,
  isHighlighted,
  hasMentionToUser,
  hasMentionToAll,
  roomType
}) {
  // use connected (don't need to send him an email)
  if (statusConnection === 'online') {
    return false;
  } // user/room preference to nothing


  if (emailNotifications === 'nothing') {
    return false;
  } // no user or room preference


  if (emailNotifications == null) {
    if (disableAllMessageNotifications) {
      return false;
    } // default server preference is disabled


    if (RocketChat.settings.get('Accounts_Default_User_Preferences_emailNotificationMode') === 'nothing') {
      return false;
    }
  }

  return roomType === 'd' || isHighlighted || emailNotifications === 'all' || hasMentionToUser || !disableAllMessageNotifications && hasMentionToAll;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/notifications/index.js                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  parseMessageTextPerUser: () => parseMessageTextPerUser,
  replaceMentionedUsernamesWithFullNames: () => replaceMentionedUsernamesWithFullNames,
  messageContainsHighlight: () => messageContainsHighlight,
  callJoinRoom: () => callJoinRoom
});
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);

function parseMessageTextPerUser(messageText, message, receiver) {
  if (!message.msg && message.attachments && message.attachments[0]) {
    const lng = receiver.language || RocketChat.settings.get('language') || 'en';
    return message.attachments[0].image_type ? TAPi18n.__('User_uploaded_image', {
      lng
    }) : TAPi18n.__('User_uploaded_file', {
      lng
    });
  }

  if (message.msg && message.t === 'e2e') {
    const lng = receiver.language || RocketChat.settings.get('language') || 'en';
    return TAPi18n.__('Encrypted_message', {
      lng
    });
  }

  return messageText;
}

function replaceMentionedUsernamesWithFullNames(message, mentions) {
  if (!mentions || !mentions.length) {
    return message;
  }

  mentions.forEach(mention => {
    if (mention.name) {
      message = message.replace(new RegExp(s.escapeRegExp(`@${mention.username}`), 'g'), mention.name);
    }
  });
  return message;
}

function messageContainsHighlight(message, highlights) {
  if (!highlights || highlights.length === 0) {
    return false;
  }

  return highlights.some(function (highlight) {
    const regexp = new RegExp(s.escapeRegExp(highlight), 'i');
    return regexp.test(message.msg);
  });
}

function callJoinRoom(userId, rid) {
  return new Promise((resolve, reject) => {
    Meteor.runAsUser(userId, () => Meteor.call('joinRoom', rid, (error, result) => {
      if (error) {
        return reject(error);
      }

      return resolve(result);
    }));
  });
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"mobile.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/functions/notifications/mobile.js                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.export({
  sendSinglePush: () => sendSinglePush,
  shouldNotifyMobile: () => shouldNotifyMobile
});
const CATEGORY_MESSAGE = 'MESSAGE';
const CATEGORY_MESSAGE_NOREPLY = 'MESSAGE_NOREPLY';
let alwaysNotifyMobileBoolean;
RocketChat.settings.get('Notifications_Always_Notify_Mobile', (key, value) => {
  alwaysNotifyMobileBoolean = value;
});
let SubscriptionRaw;
Meteor.startup(() => {
  SubscriptionRaw = RocketChat.models.Subscriptions.model.rawCollection();
});

function getBadgeCount(userId) {
  return Promise.asyncApply(() => {
    const [result] = Promise.await(SubscriptionRaw.aggregate([{
      $match: {
        'u._id': userId
      }
    }, {
      $group: {
        _id: 'total',
        total: {
          $sum: '$unread'
        }
      }
    }]).toArray());
    const {
      total
    } = result;
    return total;
  });
}

function canSendMessageToRoom(room, username) {
  return !(room.muted || []).includes(username);
}

function sendSinglePush({
  room,
  message,
  userId,
  receiverUsername,
  senderUsername,
  senderName,
  notificationMessage
}) {
  return Promise.asyncApply(() => {
    let username = '';

    if (RocketChat.settings.get('Push_show_username_room')) {
      username = RocketChat.settings.get('UI_Use_Real_Name') === true ? senderName : senderUsername;
    }

    RocketChat.PushNotification.send({
      roomId: message.rid,
      payload: {
        host: Meteor.absoluteUrl(),
        rid: message.rid,
        sender: message.u,
        type: room.t,
        name: room.name
      },
      roomName: RocketChat.settings.get('Push_show_username_room') && room.t !== 'd' ? `#${RocketChat.roomTypes.getRoomName(room.t, room)}` : '',
      username,
      message: RocketChat.settings.get('Push_show_message') ? notificationMessage : ' ',
      badge: Promise.await(getBadgeCount(userId)),
      usersTo: {
        userId
      },
      category: canSendMessageToRoom(room, receiverUsername) ? CATEGORY_MESSAGE : CATEGORY_MESSAGE_NOREPLY
    });
  });
}

function shouldNotifyMobile({
  disableAllMessageNotifications,
  mobilePushNotifications,
  hasMentionToAll,
  isHighlighted,
  hasMentionToUser,
  statusConnection,
  roomType
}) {
  if (disableAllMessageNotifications && mobilePushNotifications == null) {
    return false;
  }

  if (mobilePushNotifications === 'nothing') {
    return false;
  }

  if (!alwaysNotifyMobileBoolean && statusConnection === 'online') {
    return false;
  }

  if (!mobilePushNotifications) {
    if (RocketChat.settings.get('Accounts_Default_User_Preferences_mobileNotifications') === 'all') {
      return true;
    }

    if (RocketChat.settings.get('Accounts_Default_User_Preferences_mobileNotifications') === 'nothing') {
      return false;
    }
  }

  return roomType === 'd' || !disableAllMessageNotifications && hasMentionToAll || isHighlighted || mobilePushNotifications === 'all' || hasMentionToUser;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"models":{"_Base.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/_Base.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let ModelsBaseDb;
module.watch(require("./_BaseDb"), {
  default(v) {
    ModelsBaseDb = v;
  }

}, 0);
let objectPath;
module.watch(require("object-path"), {
  default(v) {
    objectPath = v;
  }

}, 1);

let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 2);

class ModelsBase {
  constructor(nameOrModel) {
    this._db = new ModelsBaseDb(nameOrModel, this);
    this.model = this._db.model;
    this.collectionName = this._db.collectionName;
    this.name = this._db.name;
    this.on = this._db.on.bind(this._db);
    this.emit = this._db.emit.bind(this._db);
    this.db = this;
  }

  get origin() {
    return '_db';
  }

  arrayToCursor(data) {
    return {
      fetch() {
        return data;
      },

      count() {
        return data.length;
      },

      forEach(fn) {
        return data.forEach(fn);
      }

    };
  }

  setUpdatedAt(...args
  /* record, checkQuery, query*/
  ) {
    return this._db.setUpdatedAt(...args);
  }

  find(...args) {
    try {
      return this[this.origin].find(...args);
    } catch (e) {
      console.error('Exception on find', e, ...args);
    }
  }

  findOne(...args) {
    try {
      return this[this.origin].findOne(...args);
    } catch (e) {
      console.error('Exception on find', e, ...args);
    }
  }

  findOneById(...args) {
    try {
      return this[this.origin].findOneById(...args);
    } catch (e) {
      console.error('Exception on find', e, ...args);
    }
  }

  findOneByIds(ids, options, ...args) {
    check(ids, [String]);

    try {
      return this[this.origin].findOneByIds(ids, options);
    } catch (e) {
      console.error('Exception on find', e, [ids, options, ...args]);
    }
  }

  insert(...args
  /* record*/
  ) {
    return this._db.insert(...args);
  }

  update(...args
  /* query, update, options*/
  ) {
    return this._db.update(...args);
  }

  upsert(...args
  /* query, update*/
  ) {
    return this._db.upsert(...args);
  }

  remove(...args
  /* query*/
  ) {
    return this._db.remove(...args);
  }

  insertOrUpsert(...args) {
    return this._db.insertOrUpsert(...args);
  }

  allow(...args) {
    return this._db.allow(...args);
  }

  deny(...args) {
    return this._db.deny(...args);
  }

  ensureIndex(...args) {
    return this._db.ensureIndex(...args);
  }

  dropIndex(...args) {
    return this._db.dropIndex(...args);
  }

  tryEnsureIndex(...args) {
    return this._db.tryEnsureIndex(...args);
  }

  tryDropIndex(...args) {
    return this._db.tryDropIndex(...args);
  }

  trashFind(...args
  /* query, options*/
  ) {
    return this._db.trashFind(...args);
  }

  trashFindOneById(...args
  /* _id, options*/
  ) {
    return this._db.trashFindOneById(...args);
  }

  trashFindDeletedAfter(...args
  /* deletedAt, query, options*/
  ) {
    return this._db.trashFindDeletedAfter(...args);
  }

  processQueryOptionsOnResult(result, options = {}) {
    if (result === undefined || result === null) {
      return undefined;
    }

    if (Array.isArray(result)) {
      if (options.sort) {
        result = result.sort((a, b) => {
          let r = 0;

          for (const field in options.sort) {
            if (options.sort.hasOwnProperty(field)) {
              const direction = options.sort[field];
              let valueA;
              let valueB;

              if (field.indexOf('.') > -1) {
                valueA = objectPath.get(a, field);
                valueB = objectPath.get(b, field);
              } else {
                valueA = a[field];
                valueB = b[field];
              }

              if (valueA > valueB) {
                r = direction;
                break;
              }

              if (valueA < valueB) {
                r = -direction;
                break;
              }
            }
          }

          return r;
        });
      }

      if (typeof options.skip === 'number') {
        result.splice(0, options.skip);
      }

      if (typeof options.limit === 'number' && options.limit !== 0) {
        result.splice(options.limit);
      }
    }

    if (!options.fields) {
      options.fields = {};
    }

    const fieldsToRemove = [];
    const fieldsToGet = [];

    for (const field in options.fields) {
      if (options.fields.hasOwnProperty(field)) {
        if (options.fields[field] === 0) {
          fieldsToRemove.push(field);
        } else if (options.fields[field] === 1) {
          fieldsToGet.push(field);
        }
      }
    }

    if (fieldsToRemove.length > 0 && fieldsToGet.length > 0) {
      console.warn('Can\'t mix remove and get fields');
      fieldsToRemove.splice(0, fieldsToRemove.length);
    }

    if (fieldsToGet.length > 0 && fieldsToGet.indexOf('_id') === -1) {
      fieldsToGet.push('_id');
    }

    const pickFields = (obj, fields) => {
      const picked = {};
      fields.forEach(field => {
        if (field.indexOf('.') !== -1) {
          objectPath.set(picked, field, objectPath.get(obj, field));
        } else {
          picked[field] = obj[field];
        }
      });
      return picked;
    };

    if (fieldsToRemove.length > 0 || fieldsToGet.length > 0) {
      if (Array.isArray(result)) {
        result = result.map(record => {
          if (fieldsToRemove.length > 0) {
            return _.omit(record, ...fieldsToRemove);
          }

          if (fieldsToGet.length > 0) {
            return pickFields(record, fieldsToGet);
          }

          return null;
        });
      } else {
        if (fieldsToRemove.length > 0) {
          return _.omit(result, ...fieldsToRemove);
        }

        if (fieldsToGet.length > 0) {
          return pickFields(result, fieldsToGet);
        }
      }
    }

    return result;
  } // dinamicTrashFindAfter(method, deletedAt, ...args) {
  // 	const scope = {
  // 		find: (query={}) => {
  // 			return this.trashFindDeletedAfter(deletedAt, query, { fields: {_id: 1, _deletedAt: 1} });
  // 		}
  // 	};
  // 	scope.model = {
  // 		find: scope.find
  // 	};
  // 	return this[method].apply(scope, args);
  // }
  // dinamicFindAfter(method, updatedAt, ...args) {
  // 	const scope = {
  // 		find: (query={}, options) => {
  // 			query._updatedAt = {
  // 				$gt: updatedAt
  // 			};
  // 			return this.find(query, options);
  // 		}
  // 	};
  // 	scope.model = {
  // 		find: scope.find
  // 	};
  // 	return this[method].apply(scope, args);
  // }
  // dinamicFindChangesAfter(method, updatedAt, ...args) {
  // 	return {
  // 		update: this.dinamicFindAfter(method, updatedAt, ...args).fetch(),
  // 		remove: this.dinamicTrashFindAfter(method, updatedAt, ...args).fetch()
  // 	};
  // }


}

RocketChat.models._Base = ModelsBase;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Avatars.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Avatars.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 1);
RocketChat.models.Avatars = new class extends RocketChat.models._Base {
  constructor() {
    super('avatars');
    this.model.before.insert((userId, doc) => {
      doc.instanceId = InstanceStatus.id();
    });
    this.tryEnsureIndex({
      name: 1
    });
  }

  insertAvatarFileInit(name, userId, store, file, extra) {
    const fileData = {
      _id: name,
      name,
      userId,
      store,
      complete: false,
      uploading: true,
      progress: 0,
      extension: s.strRightBack(file.name, '.'),
      uploadedAt: new Date()
    };

    _.extend(fileData, file, extra);

    return this.insertOrUpsert(fileData);
  }

  updateFileComplete(fileId, userId, file) {
    if (!fileId) {
      return;
    }

    const filter = {
      _id: fileId,
      userId
    };
    const update = {
      $set: {
        complete: true,
        uploading: false,
        progress: 1
      }
    };
    update.$set = _.extend(file, update.$set);

    if (this.model.direct && this.model.direct.update) {
      return this.model.direct.update(filter, update);
    } else {
      return this.update(filter, update);
    }
  }

  findOneByName(name) {
    return this.findOne({
      name
    });
  }

  updateFileNameById(fileId, name) {
    const filter = {
      _id: fileId
    };
    const update = {
      $set: {
        name
      }
    };

    if (this.model.direct && this.model.direct.update) {
      return this.model.direct.update(filter, update);
    } else {
      return this.update(filter, update);
    }
  } // @TODO deprecated


  updateFileCompleteByNameAndUserId(name, userId, url) {
    if (!name) {
      return;
    }

    const filter = {
      name,
      userId
    };
    const update = {
      $set: {
        complete: true,
        uploading: false,
        progress: 1,
        url
      }
    };

    if (this.model.direct && this.model.direct.update) {
      return this.model.direct.update(filter, update);
    } else {
      return this.update(filter, update);
    }
  }

  deleteFile(fileId) {
    if (this.model.direct && this.model.direct.remove) {
      return this.model.direct.remove({
        _id: fileId
      });
    } else {
      return this.remove({
        _id: fileId
      });
    }
  }

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Messages.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Messages.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/objectSpread"));

let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
RocketChat.models.Messages = new class extends RocketChat.models._Base {
  constructor() {
    super('message');
    this.tryEnsureIndex({
      rid: 1,
      ts: 1
    });
    this.tryEnsureIndex({
      ts: 1
    });
    this.tryEnsureIndex({
      'u._id': 1
    });
    this.tryEnsureIndex({
      editedAt: 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      'editedBy._id': 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      rid: 1,
      t: 1,
      'u._id': 1
    });
    this.tryEnsureIndex({
      expireAt: 1
    }, {
      expireAfterSeconds: 0
    });
    this.tryEnsureIndex({
      msg: 'text'
    });
    this.tryEnsureIndex({
      'file._id': 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      'mentions.username': 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      pinned: 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      snippeted: 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      location: '2dsphere'
    });
    this.tryEnsureIndex({
      slackBotId: 1,
      slackTs: 1
    }, {
      sparse: 1
    });
  }

  countVisibleByRoomIdBetweenTimestampsInclusive(roomId, afterTimestamp, beforeTimestamp, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      rid: roomId,
      ts: {
        $gte: afterTimestamp,
        $lte: beforeTimestamp
      }
    };
    return this.find(query, options).count();
  } // FIND


  findByMention(username, options) {
    const query = {
      'mentions.username': username
    };
    return this.find(query, options);
  }

  findFilesByUserId(userId, options = {}) {
    const query = {
      'u._id': userId,
      'file._id': {
        $exists: true
      }
    };
    return this.find(query, (0, _objectSpread2.default)({
      fields: {
        'file._id': 1
      }
    }, options));
  }

  findFilesByRoomIdPinnedTimestampAndUsers(rid, excludePinned, ts, users = [], options = {}) {
    const query = {
      rid,
      ts,
      'file._id': {
        $exists: true
      }
    };

    if (excludePinned) {
      query.pinned = {
        $ne: true
      };
    }

    if (users.length) {
      query['u.username'] = {
        $in: users
      };
    }

    return this.find(query, (0, _objectSpread2.default)({
      fields: {
        'file._id': 1
      }
    }, options));
  }

  findVisibleByMentionAndRoomId(username, rid, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      'mentions.username': username,
      rid
    };
    return this.find(query, options);
  }

  findVisibleByRoomId(roomId, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      rid: roomId
    };
    return this.find(query, options);
  }

  findVisibleByRoomIdNotContainingTypes(roomId, types, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      rid: roomId
    };

    if (Match.test(types, [String]) && types.length > 0) {
      query.t = {
        $nin: types
      };
    }

    return this.find(query, options);
  }

  findInvisibleByRoomId(roomId, options) {
    const query = {
      _hidden: true,
      rid: roomId
    };
    return this.find(query, options);
  }

  findVisibleByRoomIdAfterTimestamp(roomId, timestamp, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      rid: roomId,
      ts: {
        $gt: timestamp
      }
    };
    return this.find(query, options);
  }

  findForUpdates(roomId, timestamp, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      rid: roomId,
      _updatedAt: {
        $gt: timestamp
      }
    };
    return this.find(query, options);
  }

  findVisibleByRoomIdBeforeTimestamp(roomId, timestamp, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      rid: roomId,
      ts: {
        $lt: timestamp
      }
    };
    return this.find(query, options);
  }

  findVisibleByRoomIdBeforeTimestampInclusive(roomId, timestamp, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      rid: roomId,
      ts: {
        $lte: timestamp
      }
    };
    return this.find(query, options);
  }

  findVisibleByRoomIdBetweenTimestamps(roomId, afterTimestamp, beforeTimestamp, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      rid: roomId,
      ts: {
        $gt: afterTimestamp,
        $lt: beforeTimestamp
      }
    };
    return this.find(query, options);
  }

  findVisibleByRoomIdBetweenTimestampsInclusive(roomId, afterTimestamp, beforeTimestamp, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      rid: roomId,
      ts: {
        $gte: afterTimestamp,
        $lte: beforeTimestamp
      }
    };
    return this.find(query, options);
  }

  findVisibleByRoomIdBeforeTimestampNotContainingTypes(roomId, timestamp, types, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      rid: roomId,
      ts: {
        $lt: timestamp
      }
    };

    if (Match.test(types, [String]) && types.length > 0) {
      query.t = {
        $nin: types
      };
    }

    return this.find(query, options);
  }

  findVisibleByRoomIdBetweenTimestampsNotContainingTypes(roomId, afterTimestamp, beforeTimestamp, types, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      rid: roomId,
      ts: {
        $gt: afterTimestamp,
        $lt: beforeTimestamp
      }
    };

    if (Match.test(types, [String]) && types.length > 0) {
      query.t = {
        $nin: types
      };
    }

    return this.find(query, options);
  }

  findVisibleCreatedOrEditedAfterTimestamp(timestamp, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      $or: [{
        ts: {
          $gt: timestamp
        }
      }, {
        editedAt: {
          $gt: timestamp
        }
      }]
    };
    return this.find(query, options);
  }

  findStarredByUserAtRoom(userId, roomId, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      'starred._id': userId,
      rid: roomId
    };
    return this.find(query, options);
  }

  findPinnedByRoom(roomId, options) {
    const query = {
      t: {
        $ne: 'rm'
      },
      _hidden: {
        $ne: true
      },
      pinned: true,
      rid: roomId
    };
    return this.find(query, options);
  }

  findSnippetedByRoom(roomId, options) {
    const query = {
      _hidden: {
        $ne: true
      },
      snippeted: true,
      rid: roomId
    };
    return this.find(query, options);
  }

  getLastTimestamp(options) {
    if (options == null) {
      options = {};
    }

    const query = {
      ts: {
        $exists: 1
      }
    };
    options.sort = {
      ts: -1
    };
    options.limit = 1;
    const [message] = this.find(query, options).fetch();
    return message && message.ts;
  }

  findByRoomIdAndMessageIds(rid, messageIds, options) {
    const query = {
      rid,
      _id: {
        $in: messageIds
      }
    };
    return this.find(query, options);
  }

  findOneBySlackBotIdAndSlackTs(slackBotId, slackTs) {
    const query = {
      slackBotId,
      slackTs
    };
    return this.findOne(query);
  }

  findOneBySlackTs(slackTs) {
    const query = {
      slackTs
    };
    return this.findOne(query);
  }

  findByRoomIdAndType(roomId, type, options) {
    const query = {
      rid: roomId,
      t: type
    };

    if (options == null) {
      options = {};
    }

    return this.find(query, options);
  }

  findByRoomId(roomId, options) {
    const query = {
      rid: roomId
    };
    return this.find(query, options);
  }

  getLastVisibleMessageSentWithNoTypeByRoomId(rid, messageId) {
    const query = {
      rid,
      _hidden: {
        $ne: true
      },
      t: {
        $exists: false
      }
    };

    if (messageId) {
      query._id = {
        $ne: messageId
      };
    }

    const options = {
      sort: {
        ts: -1
      }
    };
    return this.findOne(query, options);
  }

  cloneAndSaveAsHistoryById(_id) {
    const me = RocketChat.models.Users.findOneById(Meteor.userId());
    const record = this.findOneById(_id);
    record._hidden = true;
    record.parent = record._id;
    record.editedAt = new Date();
    record.editedBy = {
      _id: Meteor.userId(),
      username: me.username
    };
    delete record._id;
    return this.insert(record);
  } // UPDATE


  setHiddenById(_id, hidden) {
    if (hidden == null) {
      hidden = true;
    }

    const query = {
      _id
    };
    const update = {
      $set: {
        _hidden: hidden
      }
    };
    return this.update(query, update);
  }

  setAsDeletedByIdAndUser(_id, user) {
    const query = {
      _id
    };
    const update = {
      $set: {
        msg: '',
        t: 'rm',
        urls: [],
        mentions: [],
        attachments: [],
        reactions: [],
        editedAt: new Date(),
        editedBy: {
          _id: user._id,
          username: user.username
        }
      }
    };
    return this.update(query, update);
  }

  setPinnedByIdAndUserId(_id, pinnedBy, pinned, pinnedAt) {
    if (pinned == null) {
      pinned = true;
    }

    if (pinnedAt == null) {
      pinnedAt = 0;
    }

    const query = {
      _id
    };
    const update = {
      $set: {
        pinned,
        pinnedAt: pinnedAt || new Date(),
        pinnedBy
      }
    };
    return this.update(query, update);
  }

  setSnippetedByIdAndUserId(message, snippetName, snippetedBy, snippeted, snippetedAt) {
    if (snippeted == null) {
      snippeted = true;
    }

    if (snippetedAt == null) {
      snippetedAt = 0;
    }

    const query = {
      _id: message._id
    };
    const msg = `\`\`\`${message.msg}\`\`\``;
    const update = {
      $set: {
        msg,
        snippeted,
        snippetedAt: snippetedAt || new Date(),
        snippetedBy,
        snippetName
      }
    };
    return this.update(query, update);
  }

  setUrlsById(_id, urls) {
    const query = {
      _id
    };
    const update = {
      $set: {
        urls
      }
    };
    return this.update(query, update);
  }

  updateAllUsernamesByUserId(userId, username) {
    const query = {
      'u._id': userId
    };
    const update = {
      $set: {
        'u.username': username
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  updateUsernameOfEditByUserId(userId, username) {
    const query = {
      'editedBy._id': userId
    };
    const update = {
      $set: {
        'editedBy.username': username
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  updateUsernameAndMessageOfMentionByIdAndOldUsername(_id, oldUsername, newUsername, newMessage) {
    const query = {
      _id,
      'mentions.username': oldUsername
    };
    const update = {
      $set: {
        'mentions.$.username': newUsername,
        msg: newMessage
      }
    };
    return this.update(query, update);
  }

  updateUserStarById(_id, userId, starred) {
    let update;
    const query = {
      _id
    };

    if (starred) {
      update = {
        $addToSet: {
          starred: {
            _id: userId
          }
        }
      };
    } else {
      update = {
        $pull: {
          starred: {
            _id: Meteor.userId()
          }
        }
      };
    }

    return this.update(query, update);
  }

  upgradeEtsToEditAt() {
    const query = {
      ets: {
        $exists: 1
      }
    };
    const update = {
      $rename: {
        ets: 'editedAt'
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  setMessageAttachments(_id, attachments) {
    const query = {
      _id
    };
    const update = {
      $set: {
        attachments
      }
    };
    return this.update(query, update);
  }

  setSlackBotIdAndSlackTs(_id, slackBotId, slackTs) {
    const query = {
      _id
    };
    const update = {
      $set: {
        slackBotId,
        slackTs
      }
    };
    return this.update(query, update);
  }

  unlinkUserId(userId, newUserId, newUsername, newNameAlias) {
    const query = {
      'u._id': userId
    };
    const update = {
      $set: {
        alias: newNameAlias,
        'u._id': newUserId,
        'u.username': newUsername,
        'u.name': undefined
      }
    };
    return this.update(query, update, {
      multi: true
    });
  } // INSERT


  createWithTypeRoomIdMessageAndUser(type, roomId, message, user, extraData) {
    const room = RocketChat.models.Rooms.findOneById(roomId, {
      fields: {
        sysMes: 1
      }
    });

    if ((room != null ? room.sysMes : undefined) === false) {
      return;
    }

    const record = {
      t: type,
      rid: roomId,
      ts: new Date(),
      msg: message,
      u: {
        _id: user._id,
        username: user.username
      },
      groupable: false
    };

    if (RocketChat.settings.get('Message_Read_Receipt_Enabled')) {
      record.unread = true;
    }

    _.extend(record, extraData);

    record._id = this.insertOrUpsert(record);
    RocketChat.models.Rooms.incMsgCountById(room._id, 1);
    return record;
  }

  createNavigationHistoryWithRoomIdMessageAndUser(roomId, message, user, extraData) {
    const type = 'livechat_navigation_history';
    const room = RocketChat.models.Rooms.findOneById(roomId, {
      fields: {
        sysMes: 1
      }
    });

    if ((room != null ? room.sysMes : undefined) === false) {
      return;
    }

    const record = {
      t: type,
      rid: roomId,
      ts: new Date(),
      msg: message,
      u: {
        _id: user._id,
        username: user.username
      },
      groupable: false
    };

    if (RocketChat.settings.get('Message_Read_Receipt_Enabled')) {
      record.unread = true;
    }

    _.extend(record, extraData);

    record._id = this.insertOrUpsert(record);
    return record;
  }

  createUserJoinWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('uj', roomId, message, user, extraData);
  }

  createUserLeaveWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('ul', roomId, message, user, extraData);
  }

  createUserRemovedWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('ru', roomId, message, user, extraData);
  }

  createUserAddedWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('au', roomId, message, user, extraData);
  }

  createCommandWithRoomIdAndUser(command, roomId, user, extraData) {
    return this.createWithTypeRoomIdMessageAndUser('command', roomId, command, user, extraData);
  }

  createUserMutedWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('user-muted', roomId, message, user, extraData);
  }

  createUserUnmutedWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('user-unmuted', roomId, message, user, extraData);
  }

  createNewModeratorWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('new-moderator', roomId, message, user, extraData);
  }

  createModeratorRemovedWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('moderator-removed', roomId, message, user, extraData);
  }

  createNewOwnerWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('new-owner', roomId, message, user, extraData);
  }

  createOwnerRemovedWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('owner-removed', roomId, message, user, extraData);
  }

  createNewLeaderWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('new-leader', roomId, message, user, extraData);
  }

  createLeaderRemovedWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('leader-removed', roomId, message, user, extraData);
  }

  createSubscriptionRoleAddedWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('subscription-role-added', roomId, message, user, extraData);
  }

  createSubscriptionRoleRemovedWithRoomIdAndUser(roomId, user, extraData) {
    const message = user.username;
    return this.createWithTypeRoomIdMessageAndUser('subscription-role-removed', roomId, message, user, extraData);
  } // REMOVE


  removeById(_id) {
    const query = {
      _id
    };
    return this.remove(query);
  }

  removeByRoomId(roomId) {
    const query = {
      rid: roomId
    };
    return this.remove(query);
  }

  removeByIdPinnedTimestampAndUsers(rid, pinned, ts, users = []) {
    const query = {
      rid,
      ts
    };

    if (pinned) {
      query.pinned = {
        $ne: true
      };
    }

    if (users.length) {
      query['u.username'] = {
        $in: users
      };
    }

    return this.remove(query);
  }

  removeByIdPinnedTimestampLimitAndUsers(rid, pinned, ts, limit, users = []) {
    const query = {
      rid,
      ts
    };

    if (pinned) {
      query.pinned = {
        $ne: true
      };
    }

    if (users.length) {
      query['u.username'] = {
        $in: users
      };
    }

    const messagesToDelete = RocketChat.models.Messages.find(query, {
      fields: {
        _id: 1
      },
      limit
    }).map(({
      _id
    }) => _id);
    return this.remove({
      _id: {
        $in: messagesToDelete
      }
    });
  }

  removeByUserId(userId) {
    const query = {
      'u._id': userId
    };
    return this.remove(query);
  }

  removeFilesByRoomId(roomId) {
    this.find({
      rid: roomId,
      'file._id': {
        $exists: true
      }
    }, {
      fields: {
        'file._id': 1
      }
    }).fetch().forEach(document => FileUpload.getStore('Uploads').deleteById(document.file._id));
  }

  getMessageByFileId(fileID) {
    return this.findOne({
      'file._id': fileID
    });
  }

  setAsRead(rid, until) {
    return this.update({
      rid,
      unread: true,
      ts: {
        $lt: until
      }
    }, {
      $unset: {
        unread: 1
      }
    }, {
      multi: true
    });
  }

  setAsReadById(_id) {
    return this.update({
      _id
    }, {
      $unset: {
        unread: 1
      }
    });
  }

  findUnreadMessagesByRoomAndDate(rid, after) {
    const query = {
      unread: true,
      rid
    };

    if (after) {
      query.ts = {
        $gt: after
      };
    }

    return this.find(query, {
      fields: {
        _id: 1
      }
    });
  }

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Reports.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Reports.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
RocketChat.models.Reports = new class extends RocketChat.models._Base {
  constructor() {
    super('reports');
  }

  createWithMessageDescriptionAndUserId(message, description, userId, extraData) {
    const record = {
      message,
      description,
      ts: new Date(),
      userId
    };

    _.extend(record, extraData);

    record._id = this.insert(record);
    return record;
  }

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Rooms.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Rooms.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 1);

class ModelRooms extends RocketChat.models._Base {
  constructor(...args) {
    super(...args);
    this.tryEnsureIndex({
      name: 1
    }, {
      unique: 1,
      sparse: 1
    });
    this.tryEnsureIndex({
      default: 1
    });
    this.tryEnsureIndex({
      t: 1
    });
    this.tryEnsureIndex({
      'u._id': 1
    });
  }

  findOneByIdOrName(_idOrName, options) {
    const query = {
      $or: [{
        _id: _idOrName
      }, {
        name: _idOrName
      }]
    };
    return this.findOne(query, options);
  }

  findOneByImportId(_id, options) {
    const query = {
      importIds: _id
    };
    return this.findOne(query, options);
  }

  findOneByName(name, options) {
    const query = {
      name
    };
    return this.findOne(query, options);
  }

  findOneByNameAndNotId(name, rid) {
    const query = {
      _id: {
        $ne: rid
      },
      name
    };
    return this.findOne(query);
  }

  findOneByDisplayName(fname, options) {
    const query = {
      fname
    };
    return this.findOne(query, options);
  }

  findOneByNameAndType(name, type, options) {
    const query = {
      name,
      t: type
    };
    return this.findOne(query, options);
  } // FIND


  findById(roomId, options) {
    return this.find({
      _id: roomId
    }, options);
  }

  findByIds(roomIds, options) {
    return this.find({
      _id: {
        $in: [].concat(roomIds)
      }
    }, options);
  }

  findByType(type, options) {
    const query = {
      t: type
    };
    return this.find(query, options);
  }

  findByTypeInIds(type, ids, options) {
    const query = {
      _id: {
        $in: ids
      },
      t: type
    };
    return this.find(query, options);
  }

  findByTypes(types, options) {
    const query = {
      t: {
        $in: types
      }
    };
    return this.find(query, options);
  }

  findByUserId(userId, options) {
    const query = {
      'u._id': userId
    };
    return this.find(query, options);
  }

  findBySubscriptionUserId(userId, options) {
    const data = RocketChat.models.Subscriptions.findByUserId(userId, {
      fields: {
        rid: 1
      }
    }).fetch().map(item => item.rid);
    const query = {
      _id: {
        $in: data
      }
    };
    return this.find(query, options);
  }

  findBySubscriptionTypeAndUserId(type, userId, options) {
    const data = RocketChat.models.Subscriptions.findByUserIdAndType(userId, type, {
      fields: {
        rid: 1
      }
    }).fetch().map(item => item.rid);
    const query = {
      t: type,
      _id: {
        $in: data
      }
    };
    return this.find(query, options);
  }

  findBySubscriptionUserIdUpdatedAfter(userId, _updatedAt, options) {
    const ids = RocketChat.models.Subscriptions.findByUserId(userId, {
      fields: {
        rid: 1
      }
    }).fetch().map(item => item.rid);
    const query = {
      _id: {
        $in: ids
      },
      _updatedAt: {
        $gt: _updatedAt
      }
    };
    return this.find(query, options);
  }

  findByNameContaining(name, options) {
    const nameRegex = new RegExp(s.trim(s.escapeRegExp(name)), 'i');
    const query = {
      $or: [{
        name: nameRegex
      }, {
        t: 'd',
        usernames: nameRegex
      }]
    };
    return this.find(query, options);
  }

  findByNameContainingAndTypes(name, types, options) {
    const nameRegex = new RegExp(s.trim(s.escapeRegExp(name)), 'i');
    const query = {
      t: {
        $in: types
      },
      $or: [{
        name: nameRegex
      }, {
        t: 'd',
        usernames: nameRegex
      }]
    };
    return this.find(query, options);
  }

  findByNameAndType(name, type, options) {
    const query = {
      t: type,
      name
    }; // do not use cache

    return this._db.find(query, options);
  }

  findByNameAndTypeNotDefault(name, type, options) {
    const query = {
      t: type,
      name,
      default: {
        $ne: true
      }
    }; // do not use cache

    return this._db.find(query, options);
  }

  findByNameAndTypesNotInIds(name, types, ids, options) {
    const query = {
      _id: {
        $ne: ids
      },
      t: {
        $in: types
      },
      name
    }; // do not use cache

    return this._db.find(query, options);
  }

  findChannelAndPrivateByNameStarting(name, options) {
    const nameRegex = new RegExp(`^${s.trim(s.escapeRegExp(name))}`, 'i');
    const query = {
      t: {
        $in: ['c', 'p']
      },
      name: nameRegex
    };
    return this.find(query, options);
  }

  findByDefaultAndTypes(defaultValue, types, options) {
    const query = {
      default: defaultValue,
      t: {
        $in: types
      }
    };
    return this.find(query, options);
  }

  findDirectRoomContainingUsername(username, options) {
    const query = {
      t: 'd',
      usernames: username
    };
    return this.find(query, options);
  }

  findByTypeAndName(type, name, options) {
    const query = {
      name,
      t: type
    };
    return this.find(query, options);
  }

  findByTypeAndNameContaining(type, name, options) {
    const nameRegex = new RegExp(s.trim(s.escapeRegExp(name)), 'i');
    const query = {
      name: nameRegex,
      t: type
    };
    return this.find(query, options);
  }

  findByTypeInIdsAndNameContaining(type, ids, name, options) {
    const nameRegex = new RegExp(s.trim(s.escapeRegExp(name)), 'i');
    const query = {
      _id: {
        $in: ids
      },
      name: nameRegex,
      t: type
    };
    return this.find(query, options);
  }

  findByTypeAndArchivationState(type, archivationstate, options) {
    const query = {
      t: type
    };

    if (archivationstate) {
      query.archived = true;
    } else {
      query.archived = {
        $ne: true
      };
    }

    return this.find(query, options);
  } // UPDATE


  addImportIds(_id, importIds) {
    importIds = [].concat(importIds);
    const query = {
      _id
    };
    const update = {
      $addToSet: {
        importIds: {
          $each: importIds
        }
      }
    };
    return this.update(query, update);
  }

  archiveById(_id) {
    const query = {
      _id
    };
    const update = {
      $set: {
        archived: true
      }
    };
    return this.update(query, update);
  }

  unarchiveById(_id) {
    const query = {
      _id
    };
    const update = {
      $set: {
        archived: false
      }
    };
    return this.update(query, update);
  }

  setNameById(_id, name, fname) {
    const query = {
      _id
    };
    const update = {
      $set: {
        name,
        fname
      }
    };
    return this.update(query, update);
  }

  setFnameById(_id, fname) {
    const query = {
      _id
    };
    const update = {
      $set: {
        fname
      }
    };
    return this.update(query, update);
  }

  incMsgCountById(_id, inc) {
    if (inc == null) {
      inc = 1;
    }

    const query = {
      _id
    };
    const update = {
      $inc: {
        msgs: inc
      }
    };
    return this.update(query, update);
  }

  incMsgCountAndSetLastMessageById(_id, inc, lastMessageTimestamp, lastMessage) {
    if (inc == null) {
      inc = 1;
    }

    const query = {
      _id
    };
    const update = {
      $set: {
        lm: lastMessageTimestamp
      },
      $inc: {
        msgs: inc
      }
    };

    if (lastMessage) {
      update.$set.lastMessage = lastMessage;
    }

    return this.update(query, update);
  }

  incUsersCountById(_id, inc = 1) {
    const query = {
      _id
    };
    const update = {
      $inc: {
        usersCount: inc
      }
    };
    return this.update(query, update);
  }

  incUsersCountByIds(ids, inc = 1) {
    const query = {
      _id: {
        $in: ids
      }
    };
    const update = {
      $inc: {
        usersCount: inc
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  setLastMessageById(_id, lastMessage) {
    const query = {
      _id
    };
    const update = {
      $set: {
        lastMessage
      }
    };
    return this.update(query, update);
  }

  resetLastMessageById(_id) {
    const query = {
      _id
    };
    const lastMessage = RocketChat.models.Messages.getLastVisibleMessageSentWithNoTypeByRoomId(_id);
    const update = lastMessage ? {
      $set: {
        lastMessage
      }
    } : {
      $unset: {
        lastMessage: 1
      }
    };
    return this.update(query, update);
  }

  replaceUsername(previousUsername, username) {
    const query = {
      usernames: previousUsername
    };
    const update = {
      $set: {
        'usernames.$': username
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  replaceMutedUsername(previousUsername, username) {
    const query = {
      muted: previousUsername
    };
    const update = {
      $set: {
        'muted.$': username
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  replaceUsernameOfUserByUserId(userId, username) {
    const query = {
      'u._id': userId
    };
    const update = {
      $set: {
        'u.username': username
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  setJoinCodeById(_id, joinCode) {
    let update;
    const query = {
      _id
    };

    if ((joinCode != null ? joinCode.trim() : undefined) !== '') {
      update = {
        $set: {
          joinCodeRequired: true,
          joinCode
        }
      };
    } else {
      update = {
        $set: {
          joinCodeRequired: false
        },
        $unset: {
          joinCode: 1
        }
      };
    }

    return this.update(query, update);
  }

  setUserById(_id, user) {
    const query = {
      _id
    };
    const update = {
      $set: {
        u: {
          _id: user._id,
          username: user.username
        }
      }
    };
    return this.update(query, update);
  }

  setTypeById(_id, type) {
    const query = {
      _id
    };
    const update = {
      $set: {
        t: type
      }
    };

    if (type === 'p') {
      update.$unset = {
        default: ''
      };
    }

    return this.update(query, update);
  }

  setTopicById(_id, topic) {
    const query = {
      _id
    };
    const update = {
      $set: {
        topic
      }
    };
    return this.update(query, update);
  }

  setAnnouncementById(_id, announcement, announcementDetails) {
    const query = {
      _id
    };
    const update = {
      $set: {
        announcement,
        announcementDetails
      }
    };
    return this.update(query, update);
  }

  setCustomFieldsById(_id, customFields) {
    const query = {
      _id
    };
    const update = {
      $set: {
        customFields
      }
    };
    return this.update(query, update);
  }

  muteUsernameByRoomId(_id, username) {
    const query = {
      _id
    };
    const update = {
      $addToSet: {
        muted: username
      }
    };
    return this.update(query, update);
  }

  unmuteUsernameByRoomId(_id, username) {
    const query = {
      _id
    };
    const update = {
      $pull: {
        muted: username
      }
    };
    return this.update(query, update);
  }

  saveDefaultById(_id, defaultValue) {
    const query = {
      _id
    };
    const update = {
      $set: {
        default: defaultValue === 'true'
      }
    };
    return this.update(query, update);
  }

  saveRetentionEnabledById(_id, value) {
    const query = {
      _id
    };
    const update = {};

    if (value == null) {
      update.$unset = {
        'retention.enabled': true
      };
    } else {
      update.$set = {
        'retention.enabled': !!value
      };
    }

    return this.update(query, update);
  }

  saveRetentionMaxAgeById(_id, value) {
    const query = {
      _id
    };
    value = Number(value);

    if (!value) {
      value = 30;
    }

    const update = {
      $set: {
        'retention.maxAge': value
      }
    };
    return this.update(query, update);
  }

  saveRetentionExcludePinnedById(_id, value) {
    const query = {
      _id
    };
    const update = {
      $set: {
        'retention.excludePinned': value === true
      }
    };
    return this.update(query, update);
  }

  saveRetentionFilesOnlyById(_id, value) {
    const query = {
      _id
    };
    const update = {
      $set: {
        'retention.filesOnly': value === true
      }
    };
    return this.update(query, update);
  }

  saveRetentionOverrideGlobalById(_id, value) {
    const query = {
      _id
    };
    const update = {
      $set: {
        'retention.overrideGlobal': value === true
      }
    };
    return this.update(query, update);
  }

  saveEncryptedById(_id, value) {
    const query = {
      _id
    };
    const update = {
      $set: {
        encrypted: value === true
      }
    };
    return this.update(query, update);
  }

  setTopicAndTagsById(_id, topic, tags) {
    const setData = {};
    const unsetData = {};

    if (topic != null) {
      if (!_.isEmpty(s.trim(topic))) {
        setData.topic = s.trim(topic);
      } else {
        unsetData.topic = 1;
      }
    }

    if (tags != null) {
      if (!_.isEmpty(s.trim(tags))) {
        setData.tags = s.trim(tags).split(',').map(tag => s.trim(tag));
      } else {
        unsetData.tags = 1;
      }
    }

    const update = {};

    if (!_.isEmpty(setData)) {
      update.$set = setData;
    }

    if (!_.isEmpty(unsetData)) {
      update.$unset = unsetData;
    }

    if (_.isEmpty(update)) {
      return;
    }

    return this.update({
      _id
    }, update);
  } // INSERT


  createWithTypeNameUserAndUsernames(type, name, fname, user, usernames, extraData) {
    const room = {
      name,
      fname,
      t: type,
      usernames,
      msgs: 0,
      usersCount: 0,
      u: {
        _id: user._id,
        username: user.username
      }
    };

    _.extend(room, extraData);

    room._id = this.insert(room);
    return room;
  }

  createWithIdTypeAndName(_id, type, name, extraData) {
    const room = {
      _id,
      ts: new Date(),
      t: type,
      name,
      usernames: [],
      msgs: 0,
      usersCount: 0
    };

    _.extend(room, extraData);

    this.insert(room);
    return room;
  }

  createWithFullRoomData(room) {
    delete room._id;
    room._id = this.insert(room);
    return room;
  } // REMOVE


  removeById(_id) {
    const query = {
      _id
    };
    return this.remove(query);
  }

  removeDirectRoomContainingUsername(username) {
    const query = {
      t: 'd',
      usernames: username
    };
    return this.remove(query);
  }

}

RocketChat.models.Rooms = new ModelRooms('room', true);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Settings.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Settings.js                                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
class ModelSettings extends RocketChat.models._Base {
  constructor(...args) {
    super(...args);
    this.tryEnsureIndex({
      blocked: 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      hidden: 1
    }, {
      sparse: 1
    });
  } // FIND


  findById(_id) {
    const query = {
      _id
    };
    return this.find(query);
  }

  findOneNotHiddenById(_id) {
    const query = {
      _id,
      hidden: {
        $ne: true
      }
    };
    return this.findOne(query);
  }

  findByIds(_id = []) {
    _id = [].concat(_id);
    const query = {
      _id: {
        $in: _id
      }
    };
    return this.find(query);
  }

  findByRole(role, options) {
    const query = {
      role
    };
    return this.find(query, options);
  }

  findPublic(options) {
    const query = {
      public: true
    };
    return this.find(query, options);
  }

  findNotHiddenPublic(ids = []) {
    const filter = {
      hidden: {
        $ne: true
      },
      public: true
    };

    if (ids.length > 0) {
      filter._id = {
        $in: ids
      };
    }

    return this.find(filter, {
      fields: {
        _id: 1,
        value: 1
      }
    });
  }

  findNotHiddenPublicUpdatedAfter(updatedAt) {
    const filter = {
      hidden: {
        $ne: true
      },
      public: true,
      _updatedAt: {
        $gt: updatedAt
      }
    };
    return this.find(filter, {
      fields: {
        _id: 1,
        value: 1
      }
    });
  }

  findNotHiddenPrivate() {
    return this.find({
      hidden: {
        $ne: true
      },
      public: {
        $ne: true
      }
    });
  }

  findNotHidden(options) {
    return this.find({
      hidden: {
        $ne: true
      }
    }, options);
  }

  findNotHiddenUpdatedAfter(updatedAt) {
    return this.find({
      hidden: {
        $ne: true
      },
      _updatedAt: {
        $gt: updatedAt
      }
    });
  }

  findSetupWizardSettings() {
    return this.find({
      wizard: {
        $exists: true,
        $ne: null
      }
    });
  } // UPDATE


  updateValueById(_id, value) {
    const query = {
      blocked: {
        $ne: true
      },
      value: {
        $ne: value
      },
      _id
    };
    const update = {
      $set: {
        value
      }
    };
    return this.update(query, update);
  }

  updateValueAndEditorById(_id, value, editor) {
    const query = {
      blocked: {
        $ne: true
      },
      value: {
        $ne: value
      },
      _id
    };
    const update = {
      $set: {
        value,
        editor
      }
    };
    return this.update(query, update);
  }

  updateValueNotHiddenById(_id, value) {
    const query = {
      _id,
      hidden: {
        $ne: true
      },
      blocked: {
        $ne: true
      }
    };
    const update = {
      $set: {
        value
      }
    };
    return this.update(query, update);
  }

  updateOptionsById(_id, options) {
    const query = {
      blocked: {
        $ne: true
      },
      _id
    };
    const update = {
      $set: options
    };
    return this.update(query, update);
  } // INSERT


  createWithIdAndValue(_id, value) {
    const record = {
      _id,
      value,
      _createdAt: new Date()
    };
    return this.insert(record);
  } // REMOVE


  removeById(_id) {
    const query = {
      blocked: {
        $ne: true
      },
      _id
    };
    return this.remove(query);
  }

}

RocketChat.models.Settings = new ModelSettings('settings', true);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Subscriptions.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Subscriptions.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/objectSpread"));

class ModelSubscriptions extends RocketChat.models._Base {
  constructor(...args) {
    super(...args);
    this.tryEnsureIndex({
      rid: 1,
      'u._id': 1
    }, {
      unique: 1
    });
    this.tryEnsureIndex({
      rid: 1,
      'u.username': 1
    });
    this.tryEnsureIndex({
      rid: 1,
      alert: 1,
      'u._id': 1
    });
    this.tryEnsureIndex({
      rid: 1,
      roles: 1
    });
    this.tryEnsureIndex({
      'u._id': 1,
      name: 1,
      t: 1
    });
    this.tryEnsureIndex({
      open: 1
    });
    this.tryEnsureIndex({
      alert: 1
    });
    this.tryEnsureIndex({
      rid: 1,
      'u._id': 1,
      open: 1
    });
    this.tryEnsureIndex({
      ts: 1
    });
    this.tryEnsureIndex({
      ls: 1
    });
    this.tryEnsureIndex({
      audioNotifications: 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      desktopNotifications: 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      mobilePushNotifications: 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      emailNotifications: 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      autoTranslate: 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      autoTranslateLanguage: 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      'userHighlights.0': 1
    }, {
      sparse: 1
    });
  } // FIND ONE


  findOneByRoomIdAndUserId(roomId, userId, options) {
    const query = {
      rid: roomId,
      'u._id': userId
    };
    return this.findOne(query, options);
  }

  findOneByRoomIdAndUsername(roomId, username, options) {
    const query = {
      rid: roomId,
      'u.username': username
    };
    return this.findOne(query, options);
  }

  findOneByRoomNameAndUserId(roomName, userId) {
    const query = {
      name: roomName,
      'u._id': userId
    };
    return this.findOne(query);
  } // FIND


  findByUserId(userId, options) {
    const query = {
      'u._id': userId
    };
    return this.find(query, options);
  }

  findByUserIdAndType(userId, type, options) {
    const query = {
      'u._id': userId,
      t: type
    };
    return this.find(query, options);
  }

  findByUserIdAndTypes(userId, types, options) {
    const query = {
      'u._id': userId,
      t: {
        $in: types
      }
    };
    return this.find(query, options);
  }

  findByUserIdUpdatedAfter(userId, updatedAt, options) {
    const query = {
      'u._id': userId,
      _updatedAt: {
        $gt: updatedAt
      }
    };
    return this.find(query, options);
  }

  findByRoomIdAndRoles(roomId, roles, options) {
    roles = [].concat(roles);
    const query = {
      rid: roomId,
      roles: {
        $in: roles
      }
    };
    return this.find(query, options);
  }

  findByType(types, options) {
    const query = {
      t: {
        $in: types
      }
    };
    return this.find(query, options);
  }

  findByTypeAndUserId(type, userId, options) {
    const query = {
      t: type,
      'u._id': userId
    };
    return this.find(query, options);
  }

  findByRoomId(roomId, options) {
    const query = {
      rid: roomId
    };
    return this.find(query, options);
  }

  findByRoomIdAndNotUserId(roomId, userId, options) {
    const query = {
      rid: roomId,
      'u._id': {
        $ne: userId
      }
    };
    return this.find(query, options);
  }

  findByRoomWithUserHighlights(roomId, options) {
    const query = {
      rid: roomId,
      'userHighlights.0': {
        $exists: true
      }
    };
    return this.find(query, options);
  }

  getLastSeen(options) {
    if (options == null) {
      options = {};
    }

    const query = {
      ls: {
        $exists: 1
      }
    };
    options.sort = {
      ls: -1
    };
    options.limit = 1;
    const [subscription] = this.find(query, options).fetch();
    return subscription && subscription.ls;
  }

  findByRoomIdAndUserIds(roomId, userIds, options) {
    const query = {
      rid: roomId,
      'u._id': {
        $in: userIds
      }
    };
    return this.find(query, options);
  }

  findByRoomIdAndUserIdsOrAllMessages(roomId, userIds) {
    const query = {
      rid: roomId,
      $or: [{
        'u._id': {
          $in: userIds
        }
      }, {
        emailNotifications: 'all'
      }]
    };
    return this.find(query);
  }

  findByRoomIdWhenUserIdExists(rid, options) {
    const query = {
      rid,
      'u._id': {
        $exists: 1
      }
    };
    return this.find(query, options);
  }

  findByRoomIdWhenUsernameExists(rid, options) {
    const query = {
      rid,
      'u.username': {
        $exists: 1
      }
    };
    return this.find(query, options);
  }

  findUnreadByUserId(userId) {
    const query = {
      'u._id': userId,
      unread: {
        $gt: 0
      }
    };
    return this.find(query, {
      fields: {
        unread: 1
      }
    });
  }

  getMinimumLastSeenByRoomId(rid) {
    return this.db.findOne({
      rid
    }, {
      sort: {
        ls: 1
      },
      fields: {
        ls: 1
      }
    });
  } // UPDATE


  archiveByRoomId(roomId) {
    const query = {
      rid: roomId
    };
    const update = {
      $set: {
        alert: false,
        open: false,
        archived: true
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  unarchiveByRoomId(roomId) {
    const query = {
      rid: roomId
    };
    const update = {
      $set: {
        alert: false,
        open: true,
        archived: false
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  hideByRoomIdAndUserId(roomId, userId) {
    const query = {
      rid: roomId,
      'u._id': userId
    };
    const update = {
      $set: {
        alert: false,
        open: false
      }
    };
    return this.update(query, update);
  }

  openByRoomIdAndUserId(roomId, userId) {
    const query = {
      rid: roomId,
      'u._id': userId
    };
    const update = {
      $set: {
        open: true
      }
    };
    return this.update(query, update);
  }

  setAsReadByRoomIdAndUserId(roomId, userId) {
    const query = {
      rid: roomId,
      'u._id': userId
    };
    const update = {
      $set: {
        open: true,
        alert: false,
        unread: 0,
        userMentions: 0,
        groupMentions: 0,
        ls: new Date()
      }
    };
    return this.update(query, update);
  }

  setAsUnreadByRoomIdAndUserId(roomId, userId, firstMessageUnreadTimestamp) {
    const query = {
      rid: roomId,
      'u._id': userId
    };
    const update = {
      $set: {
        open: true,
        alert: true,
        ls: firstMessageUnreadTimestamp
      }
    };
    return this.update(query, update);
  }

  setCustomFieldsDirectMessagesByUserId(userId, fields) {
    const query = {
      'u._id': userId,
      t: 'd'
    };
    const update = {
      $set: {
        customFields: fields
      }
    };
    const options = {
      multi: true
    };
    return this.update(query, update, options);
  }

  setFavoriteByRoomIdAndUserId(roomId, userId, favorite) {
    if (favorite == null) {
      favorite = true;
    }

    const query = {
      rid: roomId,
      'u._id': userId
    };
    const update = {
      $set: {
        f: favorite
      }
    };
    return this.update(query, update);
  }

  updateNameAndAlertByRoomId(roomId, name, fname) {
    const query = {
      rid: roomId
    };
    const update = {
      $set: {
        name,
        fname,
        alert: true
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  updateDisplayNameByRoomId(roomId, fname) {
    const query = {
      rid: roomId
    };
    const update = {
      $set: {
        fname
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  setUserUsernameByUserId(userId, username) {
    const query = {
      'u._id': userId
    };
    const update = {
      $set: {
        'u.username': username
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  setNameForDirectRoomsWithOldName(oldName, name) {
    const query = {
      name: oldName,
      t: 'd'
    };
    const update = {
      $set: {
        name
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  incUnreadForRoomIdExcludingUserId(roomId, userId, inc) {
    if (inc == null) {
      inc = 1;
    }

    const query = {
      rid: roomId,
      'u._id': {
        $ne: userId
      }
    };
    const update = {
      $set: {
        alert: true,
        open: true
      },
      $inc: {
        unread: inc
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  incGroupMentionsAndUnreadForRoomIdExcludingUserId(roomId, userId, incGroup = 1, incUnread = 1) {
    const query = {
      rid: roomId,
      'u._id': {
        $ne: userId
      }
    };
    const update = {
      $set: {
        alert: true,
        open: true
      },
      $inc: {
        unread: incUnread,
        groupMentions: incGroup
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  incUserMentionsAndUnreadForRoomIdAndUserIds(roomId, userIds, incUser = 1, incUnread = 1) {
    const query = {
      rid: roomId,
      'u._id': {
        $in: userIds
      }
    };
    const update = {
      $set: {
        alert: true,
        open: true
      },
      $inc: {
        unread: incUnread,
        userMentions: incUser
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  ignoreUser({
    _id,
    ignoredUser: ignored,
    ignore = true
  }) {
    const query = {
      _id
    };
    const update = {};

    if (ignore) {
      update.$addToSet = {
        ignored
      };
    } else {
      update.$pull = {
        ignored
      };
    }

    return this.update(query, update);
  }

  setAlertForRoomIdExcludingUserId(roomId, userId) {
    const query = {
      rid: roomId,
      'u._id': {
        $ne: userId
      },
      alert: {
        $ne: true
      }
    };
    const update = {
      $set: {
        alert: true
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  setOpenForRoomIdExcludingUserId(roomId, userId) {
    const query = {
      rid: roomId,
      'u._id': {
        $ne: userId
      },
      open: {
        $ne: true
      }
    };
    const update = {
      $set: {
        open: true
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  setBlockedByRoomId(rid, blocked, blocker) {
    const query = {
      rid,
      'u._id': blocked
    };
    const update = {
      $set: {
        blocked: true
      }
    };
    const query2 = {
      rid,
      'u._id': blocker
    };
    const update2 = {
      $set: {
        blocker: true
      }
    };
    return this.update(query, update) && this.update(query2, update2);
  }

  unsetBlockedByRoomId(rid, blocked, blocker) {
    const query = {
      rid,
      'u._id': blocked
    };
    const update = {
      $unset: {
        blocked: 1
      }
    };
    const query2 = {
      rid,
      'u._id': blocker
    };
    const update2 = {
      $unset: {
        blocker: 1
      }
    };
    return this.update(query, update) && this.update(query2, update2);
  }

  updateCustomFieldsByRoomId(rid, cfields) {
    const query = {
      rid
    };
    const customFields = cfields || {};
    const update = {
      $set: {
        customFields
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  updateTypeByRoomId(roomId, type) {
    const query = {
      rid: roomId
    };
    const update = {
      $set: {
        t: type
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  addRoleById(_id, role) {
    const query = {
      _id
    };
    const update = {
      $addToSet: {
        roles: role
      }
    };
    return this.update(query, update);
  }

  removeRoleById(_id, role) {
    const query = {
      _id
    };
    const update = {
      $pull: {
        roles: role
      }
    };
    return this.update(query, update);
  }

  setArchivedByUsername(username, archived) {
    const query = {
      t: 'd',
      name: username
    };
    const update = {
      $set: {
        archived
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  clearDesktopNotificationUserPreferences(userId) {
    const query = {
      'u._id': userId,
      desktopPrefOrigin: 'user'
    };
    const update = {
      $unset: {
        desktopNotifications: 1,
        desktopPrefOrigin: 1
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  updateDesktopNotificationUserPreferences(userId, desktopNotifications) {
    const query = {
      'u._id': userId,
      desktopPrefOrigin: {
        $ne: 'subscription'
      }
    };
    const update = {
      $set: {
        desktopNotifications,
        desktopPrefOrigin: 'user'
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  clearMobileNotificationUserPreferences(userId) {
    const query = {
      'u._id': userId,
      mobilePrefOrigin: 'user'
    };
    const update = {
      $unset: {
        mobilePushNotifications: 1,
        mobilePrefOrigin: 1
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  updateMobileNotificationUserPreferences(userId, mobilePushNotifications) {
    const query = {
      'u._id': userId,
      mobilePrefOrigin: {
        $ne: 'subscription'
      }
    };
    const update = {
      $set: {
        mobilePushNotifications,
        mobilePrefOrigin: 'user'
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  clearEmailNotificationUserPreferences(userId) {
    const query = {
      'u._id': userId,
      emailPrefOrigin: 'user'
    };
    const update = {
      $unset: {
        emailNotifications: 1,
        emailPrefOrigin: 1
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  updateEmailNotificationUserPreferences(userId, emailNotifications) {
    const query = {
      'u._id': userId,
      emailPrefOrigin: {
        $ne: 'subscription'
      }
    };
    const update = {
      $set: {
        emailNotifications,
        emailPrefOrigin: 'user'
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  updateUserHighlights(userId, userHighlights) {
    const query = {
      'u._id': userId
    };
    const update = {
      $set: {
        userHighlights
      }
    };
    return this.update(query, update, {
      multi: true
    });
  }

  updateDirectFNameByName(name, fname) {
    const query = {
      t: 'd',
      name
    };
    const update = {
      $set: {
        fname
      }
    };
    return this.update(query, update, {
      multi: true
    });
  } // INSERT


  createWithRoomAndUser(room, user, extraData) {
    const subscription = (0, _objectSpread2.default)({
      open: false,
      alert: false,
      unread: 0,
      userMentions: 0,
      groupMentions: 0,
      ts: room.ts,
      rid: room._id,
      name: room.name,
      fname: room.fname,
      customFields: room.customFields,
      t: room.t,
      u: {
        _id: user._id,
        username: user.username,
        name: user.name
      }
    }, RocketChat.getDefaultSubscriptionPref(user), extraData);
    const result = this.insert(subscription);
    RocketChat.models.Rooms.incUsersCountById(room._id);
    return result;
  } // REMOVE


  removeByUserId(userId) {
    const query = {
      'u._id': userId
    };
    const roomIds = this.findByUserId(userId).map(s => s.rid);
    const result = this.remove(query);

    if (Match.test(result, Number) && result > 0) {
      RocketChat.models.Rooms.incUsersCountByIds(roomIds, -1);
    }

    return result;
  }

  removeByRoomId(roomId) {
    const query = {
      rid: roomId
    };
    const result = this.remove(query);

    if (Match.test(result, Number) && result > 0) {
      RocketChat.models.Rooms.incUsersCountById(roomId, -result);
    }

    return result;
  }

  removeByRoomIdAndUserId(roomId, userId) {
    const query = {
      rid: roomId,
      'u._id': userId
    };
    const result = this.remove(query);

    if (Match.test(result, Number) && result > 0) {
      RocketChat.models.Rooms.incUsersCountById(roomId, -result);
    }

    return result;
  }

}

RocketChat.models.Subscriptions = new ModelSubscriptions('subscription', true);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Uploads.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Uploads.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 1);
RocketChat.models.Uploads = new class extends RocketChat.models._Base {
  constructor() {
    super('uploads');
    this.model.before.insert((userId, doc) => {
      doc.instanceId = InstanceStatus.id();
    });
    this.tryEnsureIndex({
      rid: 1
    });
    this.tryEnsureIndex({
      uploadedAt: 1
    });
  }

  findNotHiddenFilesOfRoom(roomId, searchText, limit) {
    const fileQuery = {
      rid: roomId,
      complete: true,
      uploading: false,
      _hidden: {
        $ne: true
      }
    };

    if (searchText) {
      fileQuery.name = {
        $regex: new RegExp(RegExp.escape(searchText), 'i')
      };
    }

    const fileOptions = {
      limit,
      sort: {
        uploadedAt: -1
      },
      fields: {
        _id: 1,
        userId: 1,
        rid: 1,
        name: 1,
        description: 1,
        type: 1,
        url: 1,
        uploadedAt: 1
      }
    };
    return this.find(fileQuery, fileOptions);
  }

  insertFileInit(userId, store, file, extra) {
    const fileData = {
      userId,
      store,
      complete: false,
      uploading: true,
      progress: 0,
      extension: s.strRightBack(file.name, '.'),
      uploadedAt: new Date()
    };

    _.extend(fileData, file, extra);

    if (this.model.direct && this.model.direct.insert != null) {
      file = this.model.direct.insert(fileData);
    } else {
      file = this.insert(fileData);
    }

    return file;
  }

  updateFileComplete(fileId, userId, file) {
    let result;

    if (!fileId) {
      return;
    }

    const filter = {
      _id: fileId,
      userId
    };
    const update = {
      $set: {
        complete: true,
        uploading: false,
        progress: 1
      }
    };
    update.$set = _.extend(file, update.$set);

    if (this.model.direct && this.model.direct.update != null) {
      result = this.model.direct.update(filter, update);
    } else {
      result = this.update(filter, update);
    }

    return result;
  }

  deleteFile(fileId) {
    if (this.model.direct && this.model.direct.remove != null) {
      return this.model.direct.remove({
        _id: fileId
      });
    } else {
      return this.remove({
        _id: fileId
      });
    }
  }

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"Users.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/Users.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 1);

class ModelUsers extends RocketChat.models._Base {
  constructor(...args) {
    super(...args);
    this.tryEnsureIndex({
      roles: 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      name: 1
    });
    this.tryEnsureIndex({
      lastLogin: 1
    });
    this.tryEnsureIndex({
      status: 1
    });
    this.tryEnsureIndex({
      active: 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      statusConnection: 1
    }, {
      sparse: 1
    });
    this.tryEnsureIndex({
      type: 1
    });
  }

  findOneByImportId(_id, options) {
    return this.findOne({
      importIds: _id
    }, options);
  }

  findOneByUsername(username, options) {
    if (typeof username === 'string') {
      username = new RegExp(`^${username}$`, 'i');
    }

    const query = {
      username
    };
    return this.findOne(query, options);
  }

  findOneByEmailAddress(emailAddress, options) {
    const query = {
      'emails.address': new RegExp(`^${s.escapeRegExp(emailAddress)}$`, 'i')
    };
    return this.findOne(query, options);
  }

  findOneAdmin(admin, options) {
    const query = {
      admin
    };
    return this.findOne(query, options);
  }

  findOneByIdAndLoginToken(_id, token, options) {
    const query = {
      _id,
      'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(token)
    };
    return this.findOne(query, options);
  }

  findOneById(userId, options) {
    const query = {
      _id: userId
    };
    return this.findOne(query, options);
  } // FIND


  findById(userId) {
    const query = {
      _id: userId
    };
    return this.find(query);
  }

  findByIds(users, options) {
    const query = {
      _id: {
        $in: users
      }
    };
    return this.find(query, options);
  }

  findUsersNotOffline(options) {
    const query = {
      username: {
        $exists: 1
      },
      status: {
        $in: ['online', 'away', 'busy']
      }
    };
    return this.find(query, options);
  }

  findByRoomId(rid, options) {
    const data = RocketChat.models.Subscriptions.findByRoomId(rid).fetch().map(item => item.u._id);
    const query = {
      _id: {
        $in: data
      }
    };
    return this.find(query, options);
  }

  findByUsername(username, options) {
    const query = {
      username
    };
    return this.find(query, options);
  }

  findActiveByUsernameOrNameRegexWithExceptions(searchTerm, exceptions, options) {
    if (exceptions == null) {
      exceptions = [];
    }

    if (options == null) {
      options = {};
    }

    if (!_.isArray(exceptions)) {
      exceptions = [exceptions];
    }

    const termRegex = new RegExp(s.escapeRegExp(searchTerm), 'i');
    const query = {
      $or: [{
        username: termRegex
      }, {
        name: termRegex
      }],
      active: true,
      type: {
        $in: ['user', 'bot']
      },
      $and: [{
        username: {
          $exists: true
        }
      }, {
        username: {
          $nin: exceptions
        }
      }]
    };
    return this.find(query, options);
  }

  findByActiveUsersExcept(searchTerm, exceptions, options) {
    if (exceptions == null) {
      exceptions = [];
    }

    if (options == null) {
      options = {};
    }

    if (!_.isArray(exceptions)) {
      exceptions = [exceptions];
    }

    const termRegex = new RegExp(s.escapeRegExp(searchTerm), 'i');

    const orStmt = _.reduce(RocketChat.settings.get('Accounts_SearchFields').trim().split(','), function (acc, el) {
      acc.push({
        [el.trim()]: termRegex
      });
      return acc;
    }, []);

    const query = {
      $and: [{
        active: true,
        $or: orStmt
      }, {
        username: {
          $exists: true,
          $nin: exceptions
        }
      }]
    }; // do not use cache

    return this._db.find(query, options);
  }

  findUsersByNameOrUsername(nameOrUsername, options) {
    const query = {
      username: {
        $exists: 1
      },
      $or: [{
        name: nameOrUsername
      }, {
        username: nameOrUsername
      }],
      type: {
        $in: ['user']
      }
    };
    return this.find(query, options);
  }

  findByUsernameNameOrEmailAddress(usernameNameOrEmailAddress, options) {
    const query = {
      $or: [{
        name: usernameNameOrEmailAddress
      }, {
        username: usernameNameOrEmailAddress
      }, {
        'emails.address': usernameNameOrEmailAddress
      }],
      type: {
        $in: ['user', 'bot']
      }
    };
    return this.find(query, options);
  }

  findLDAPUsers(options) {
    const query = {
      ldap: true
    };
    return this.find(query, options);
  }

  findCrowdUsers(options) {
    const query = {
      crowd: true
    };
    return this.find(query, options);
  }

  getLastLogin(options) {
    if (options == null) {
      options = {};
    }

    const query = {
      lastLogin: {
        $exists: 1
      }
    };
    options.sort = {
      lastLogin: -1
    };
    options.limit = 1;
    const [user] = this.find(query, options).fetch();
    return user && user.lastLogin;
  }

  findUsersByUsernames(usernames, options) {
    const query = {
      username: {
        $in: usernames
      }
    };
    return this.find(query, options);
  }

  findUsersByIds(ids, options) {
    const query = {
      _id: {
        $in: ids
      }
    };
    return this.find(query, options);
  }

  findUsersWithUsernameByIds(ids, options) {
    const query = {
      _id: {
        $in: ids
      },
      username: {
        $exists: 1
      }
    };
    return this.find(query, options);
  }

  findUsersWithUsernameByIdsNotOffline(ids, options) {
    const query = {
      _id: {
        $in: ids
      },
      username: {
        $exists: 1
      },
      status: {
        $in: ['online', 'away', 'busy']
      }
    };
    return this.find(query, options);
  }

  getOldest(fields = {
    _id: 1
  }) {
    const query = {
      _id: {
        $ne: 'rocket.cat'
      }
    };
    const options = {
      fields,
      sort: {
        createdAt: 1
      }
    };
    return this.findOne(query, options);
  } // UPDATE


  addImportIds(_id, importIds) {
    importIds = [].concat(importIds);
    const query = {
      _id
    };
    const update = {
      $addToSet: {
        importIds: {
          $each: importIds
        }
      }
    };
    return this.update(query, update);
  }

  updateLastLoginById(_id) {
    const update = {
      $set: {
        lastLogin: new Date()
      }
    };
    return this.update(_id, update);
  }

  setServiceId(_id, serviceName, serviceId) {
    const update = {
      $set: {}
    };
    const serviceIdKey = `services.${serviceName}.id`;
    update.$set[serviceIdKey] = serviceId;
    return this.update(_id, update);
  }

  setUsername(_id, username) {
    const update = {
      $set: {
        username
      }
    };
    return this.update(_id, update);
  }

  setEmail(_id, email) {
    const update = {
      $set: {
        emails: [{
          address: email,
          verified: false
        }]
      }
    };
    return this.update(_id, update);
  }

  setEmailVerified(_id, email) {
    const query = {
      _id,
      emails: {
        $elemMatch: {
          address: email,
          verified: false
        }
      }
    };
    const update = {
      $set: {
        'emails.$.verified': true
      }
    };
    return this.update(query, update);
  }

  setName(_id, name) {
    const update = {
      $set: {
        name
      }
    };
    return this.update(_id, update);
  }

  setCustomFields(_id, fields) {
    const values = {};
    Object.keys(fields).forEach(key => {
      values[`customFields.${key}`] = fields[key];
    });
    const update = {
      $set: values
    };
    return this.update(_id, update);
  }

  setAvatarOrigin(_id, origin) {
    const update = {
      $set: {
        avatarOrigin: origin
      }
    };
    return this.update(_id, update);
  }

  unsetAvatarOrigin(_id) {
    const update = {
      $unset: {
        avatarOrigin: 1
      }
    };
    return this.update(_id, update);
  }

  setUserActive(_id, active) {
    if (active == null) {
      active = true;
    }

    const update = {
      $set: {
        active
      }
    };
    return this.update(_id, update);
  }

  setAllUsersActive(active) {
    const update = {
      $set: {
        active
      }
    };
    return this.update({}, update, {
      multi: true
    });
  }

  unsetLoginTokens(_id) {
    const update = {
      $set: {
        'services.resume.loginTokens': []
      }
    };
    return this.update(_id, update);
  }

  unsetRequirePasswordChange(_id) {
    const update = {
      $unset: {
        requirePasswordChange: true,
        requirePasswordChangeReason: true
      }
    };
    return this.update(_id, update);
  }

  resetPasswordAndSetRequirePasswordChange(_id, requirePasswordChange, requirePasswordChangeReason) {
    const update = {
      $unset: {
        'services.password': 1
      },
      $set: {
        requirePasswordChange,
        requirePasswordChangeReason
      }
    };
    return this.update(_id, update);
  }

  setLanguage(_id, language) {
    const update = {
      $set: {
        language
      }
    };
    return this.update(_id, update);
  }

  setProfile(_id, profile) {
    const update = {
      $set: {
        'settings.profile': profile
      }
    };
    return this.update(_id, update);
  }

  clearSettings(_id) {
    const update = {
      $set: {
        settings: {}
      }
    };
    return this.update(_id, update);
  }

  setPreferences(_id, preferences) {
    const settings = Object.assign({}, ...Object.keys(preferences).map(key => ({
      [`settings.preferences.${key}`]: preferences[key]
    })));
    const update = {
      $set: settings
    };

    if (parseInt(preferences.clockMode) === 0) {
      delete update.$set['settings.preferences.clockMode'];
      update.$unset = {
        'settings.preferences.clockMode': 1
      };
    }

    return this.update(_id, update);
  }

  setUtcOffset(_id, utcOffset) {
    const query = {
      _id,
      utcOffset: {
        $ne: utcOffset
      }
    };
    const update = {
      $set: {
        utcOffset
      }
    };
    return this.update(query, update);
  }

  saveUserById(_id, data) {
    const setData = {};
    const unsetData = {};

    if (data.name != null) {
      if (!_.isEmpty(s.trim(data.name))) {
        setData.name = s.trim(data.name);
      } else {
        unsetData.name = 1;
      }
    }

    if (data.email != null) {
      if (!_.isEmpty(s.trim(data.email))) {
        setData.emails = [{
          address: s.trim(data.email)
        }];
      } else {
        unsetData.emails = 1;
      }
    }

    if (data.phone != null) {
      if (!_.isEmpty(s.trim(data.phone))) {
        setData.phone = [{
          phoneNumber: s.trim(data.phone)
        }];
      } else {
        unsetData.phone = 1;
      }
    }

    const update = {};

    if (!_.isEmpty(setData)) {
      update.$set = setData;
    }

    if (!_.isEmpty(unsetData)) {
      update.$unset = unsetData;
    }

    if (_.isEmpty(update)) {
      return true;
    }

    return this.update({
      _id
    }, update);
  }

  setReason(_id, reason) {
    const update = {
      $set: {
        reason
      }
    };
    return this.update(_id, update);
  }

  unsetReason(_id) {
    const update = {
      $unset: {
        reason: true
      }
    };
    return this.update(_id, update);
  }

  addBannerById(_id, banner) {
    const update = {
      $set: {
        [`banners.${banner.id}`]: banner
      }
    };
    return this.update({
      _id
    }, update);
  }

  removeBannerById(_id, banner) {
    const update = {
      $unset: {
        [`banners.${banner.id}`]: true
      }
    };
    return this.update({
      _id
    }, update);
  } // INSERT


  create(data) {
    const user = {
      createdAt: new Date(),
      avatarOrigin: 'none'
    };

    _.extend(user, data);

    return this.insert(user);
  } // REMOVE


  removeById(_id) {
    return this.remove(_id);
  }
  /*
  Find users to send a message by email if:
  - he is not online
  - has a verified email
  - has not disabled email notifications
  - `active` is equal to true (false means they were deactivated and can't login)
  */


  getUsersToSendOfflineEmail(usersIds) {
    const query = {
      _id: {
        $in: usersIds
      },
      active: true,
      status: 'offline',
      statusConnection: {
        $ne: 'online'
      },
      'emails.verified': true
    };
    const options = {
      fields: {
        name: 1,
        username: 1,
        emails: 1,
        'settings.preferences.emailNotificationMode': 1,
        language: 1
      }
    };
    return this.find(query, options);
  }

}

RocketChat.models.Users = new ModelUsers(Meteor.users, true);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"ExportOperations.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/ExportOperations.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
RocketChat.models.ExportOperations = new class ModelExportOperations extends RocketChat.models._Base {
  constructor() {
    super('export_operations');
    this.tryEnsureIndex({
      userId: 1
    });
    this.tryEnsureIndex({
      status: 1
    });
  } // FIND


  findById(id) {
    const query = {
      _id: id
    };
    return this.find(query);
  }

  findLastOperationByUser(userId, fullExport = false, options = {}) {
    const query = {
      userId,
      fullExport
    };
    options.sort = {
      createdAt: -1
    };
    return this.findOne(query, options);
  }

  findPendingByUser(userId, options) {
    const query = {
      userId,
      status: {
        $nin: ['completed']
      }
    };
    return this.find(query, options);
  }

  findAllPending(options) {
    const query = {
      status: {
        $nin: ['completed']
      }
    };
    return this.find(query, options);
  } // UPDATE


  updateOperation(data) {
    const update = {
      $set: {
        roomList: data.roomList,
        status: data.status,
        fileList: data.fileList,
        generatedFile: data.generatedFile
      }
    };
    return this.update(data._id, update);
  } // INSERT


  create(data) {
    const exportOperation = {
      createdAt: new Date()
    };

    _.extend(exportOperation, data);

    return this.insert(exportOperation);
  } // REMOVE


  removeById(_id) {
    return this.remove(_id);
  }

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"UserDataFiles.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/UserDataFiles.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
RocketChat.models.UserDataFiles = new class ModelUserDataFiles extends RocketChat.models._Base {
  constructor() {
    super('user_data_files');
    this.tryEnsureIndex({
      userId: 1
    });
  } // FIND


  findById(id) {
    const query = {
      _id: id
    };
    return this.find(query);
  }

  findLastFileByUser(userId, options = {}) {
    const query = {
      userId
    };
    options.sort = {
      _updatedAt: -1
    };
    return this.findOne(query, options);
  } // INSERT


  create(data) {
    const userDataFile = {
      createdAt: new Date()
    };

    _.extend(userDataFile, data);

    return this.insert(userDataFile);
  } // REMOVE


  removeById(_id) {
    return this.remove(_id);
  }

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"_BaseDb.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/models/_BaseDb.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
let EventEmitter;
module.watch(require("events"), {
  EventEmitter(v) {
    EventEmitter = v;
  }

}, 1);
const baseName = 'rocketchat_';
const trash = new Mongo.Collection(`${baseName}_trash`);

try {
  trash._ensureIndex({
    collection: 1
  });

  trash._ensureIndex({
    _deletedAt: 1
  }, {
    expireAfterSeconds: 60 * 60 * 24 * 30
  });
} catch (e) {
  console.log(e);
}

const isOplogAvailable = MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle && !!MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle.onOplogEntry;
let isOplogEnabled = isOplogAvailable;
RocketChat.settings.get('Force_Disable_OpLog_For_Cache', (key, value) => {
  isOplogEnabled = isOplogAvailable && value === false;
});

class ModelsBaseDb extends EventEmitter {
  constructor(model, baseModel) {
    super();

    if (Match.test(model, String)) {
      this.name = model;
      this.collectionName = this.baseName + this.name;
      this.model = new Mongo.Collection(this.collectionName);
    } else {
      this.name = model._name;
      this.collectionName = this.name;
      this.model = model;
    }

    this.baseModel = baseModel;
    this.wrapModel();
    let alreadyListeningToOplog = false; // When someone start listening for changes we start oplog if available

    this.on('newListener', (event
    /* , listener*/
    ) => {
      if (event === 'change' && alreadyListeningToOplog === false) {
        alreadyListeningToOplog = true;

        if (isOplogEnabled) {
          const query = {
            collection: this.collectionName
          };

          MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle.onOplogEntry(query, this.processOplogRecord.bind(this));

          MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle._defineTooFarBehind(Number.MAX_SAFE_INTEGER);
        }
      }
    });
    this.tryEnsureIndex({
      _updatedAt: 1
    });
  }

  get baseName() {
    return baseName;
  }

  setUpdatedAt(record = {}) {
    // TODO: Check if this can be deleted, Rodrigo does not rememebr WHY he added it. So he removed it to fix issue #5541
    // setUpdatedAt(record = {}, checkQuery = false, query) {
    // if (checkQuery === true) {
    // 	if (!query || Object.keys(query).length === 0) {
    // 		throw new Meteor.Error('Models._Base: Empty query');
    // 	}
    // }
    if (/(^|,)\$/.test(Object.keys(record).join(','))) {
      record.$set = record.$set || {};
      record.$set._updatedAt = new Date();
    } else {
      record._updatedAt = new Date();
    }

    return record;
  }

  wrapModel() {
    this.originals = {
      insert: this.model.insert.bind(this.model),
      update: this.model.update.bind(this.model),
      remove: this.model.remove.bind(this.model)
    };
    const self = this;

    this.model.insert = function (...args) {
      return self.insert(...args);
    };

    this.model.update = function (...args) {
      return self.update(...args);
    };

    this.model.remove = function (...args) {
      return self.remove(...args);
    };
  }

  _doNotMixInclusionAndExclusionFields(options) {
    if (options && options.fields) {
      const keys = Object.keys(options.fields);
      const removeKeys = keys.filter(key => options.fields[key] === 0);

      if (keys.length > removeKeys.length) {
        removeKeys.forEach(key => delete options.fields[key]);
      }
    }
  }

  find(...args) {
    this._doNotMixInclusionAndExclusionFields(args[1]);

    return this.model.find(...args);
  }

  findOne(...args) {
    this._doNotMixInclusionAndExclusionFields(args[1]);

    return this.model.findOne(...args);
  }

  findOneById(_id, options) {
    return this.findOne({
      _id
    }, options);
  }

  findOneByIds(ids, options) {
    return this.findOne({
      _id: {
        $in: ids
      }
    }, options);
  }

  updateHasPositionalOperator(update) {
    return Object.keys(update).some(key => key.includes('.$') || Match.test(update[key], Object) && this.updateHasPositionalOperator(update[key]));
  }

  processOplogRecord(action) {
    if (isOplogEnabled === false) {
      return;
    }

    if (action.op.op === 'i') {
      this.emit('change', {
        action: 'insert',
        clientAction: 'inserted',
        id: action.op.o._id,
        data: action.op.o,
        oplog: true
      });
      return;
    }

    if (action.op.op === 'u') {
      if (!action.op.o.$set && !action.op.o.$unset) {
        this.emit('change', {
          action: 'update',
          clientAction: 'updated',
          id: action.id,
          data: action.op.o,
          oplog: true
        });
        return;
      }

      const diff = {};

      if (action.op.o.$set) {
        for (const key in action.op.o.$set) {
          if (action.op.o.$set.hasOwnProperty(key)) {
            diff[key] = action.op.o.$set[key];
          }
        }
      }

      if (action.op.o.$unset) {
        for (const key in action.op.o.$unset) {
          if (action.op.o.$unset.hasOwnProperty(key)) {
            diff[key] = undefined;
          }
        }
      }

      this.emit('change', {
        action: 'update',
        clientAction: 'updated',
        id: action.id,
        diff,
        oplog: true
      });
      return;
    }

    if (action.op.op === 'd') {
      this.emit('change', {
        action: 'remove',
        clientAction: 'removed',
        id: action.id,
        oplog: true
      });
      return;
    }
  }

  insert(record, ...args) {
    this.setUpdatedAt(record);
    const result = this.originals.insert(record, ...args);
    record._id = result;

    if (!isOplogEnabled && this.listenerCount('change') > 0) {
      this.emit('change', {
        action: 'insert',
        clientAction: 'inserted',
        id: result,
        data: _.extend({}, record),
        oplog: false
      });
    }

    return result;
  }

  update(query, update, options = {}) {
    this.setUpdatedAt(update, true, query);
    let ids = [];

    if (!isOplogEnabled && this.listenerCount('change') > 0) {
      const findOptions = {
        fields: {
          _id: 1
        }
      };
      let records = options.multi ? this.find(query, findOptions).fetch() : this.findOne(query, findOptions) || [];

      if (!Array.isArray(records)) {
        records = [records];
      }

      ids = records.map(item => item._id);

      if (options.upsert !== true && this.updateHasPositionalOperator(update) === false) {
        query = {
          _id: {
            $in: ids
          }
        };
      }
    } // TODO: CACHE: Can we use findAndModify here when oplog is disabled?


    const result = this.originals.update(query, update, options);

    if (!isOplogEnabled && this.listenerCount('change') > 0) {
      if (options.upsert === true && result.insertedId) {
        this.emit('change', {
          action: 'insert',
          clientAction: 'inserted',
          id: result.insertedId,
          oplog: false
        });
        return result;
      }

      for (const id of ids) {
        this.emit('change', {
          action: 'update',
          clientAction: 'updated',
          id,
          oplog: false
        });
      }
    }

    return result;
  }

  upsert(query, update, options = {}) {
    options.upsert = true;
    options._returnObject = true;
    return this.update(query, update, options);
  }

  remove(query) {
    const records = this.model.find(query).fetch();
    const ids = [];

    for (const record of records) {
      ids.push(record._id);
      record._deletedAt = new Date();
      record.__collection__ = this.name;
      trash.upsert({
        _id: record._id
      }, _.omit(record, '_id'));
    }

    query = {
      _id: {
        $in: ids
      }
    };
    const result = this.originals.remove(query);

    if (!isOplogEnabled && this.listenerCount('change') > 0) {
      for (const record of records) {
        this.emit('change', {
          action: 'remove',
          clientAction: 'removed',
          id: record._id,
          data: _.extend({}, record),
          oplog: false
        });
      }
    }

    return result;
  }

  insertOrUpsert(...args) {
    if (args[0] && args[0]._id) {
      const {
        _id
      } = args[0];
      delete args[0]._id;
      args.unshift({
        _id
      });
      this.upsert(...args);
      return _id;
    } else {
      return this.insert(...args);
    }
  }

  allow(...args) {
    return this.model.allow(...args);
  }

  deny(...args) {
    return this.model.deny(...args);
  }

  ensureIndex(...args) {
    return this.model._ensureIndex(...args);
  }

  dropIndex(...args) {
    return this.model._dropIndex(...args);
  }

  tryEnsureIndex(...args) {
    try {
      return this.ensureIndex(...args);
    } catch (e) {
      console.error('Error creating index:', this.name, '->', ...args, e);
    }
  }

  tryDropIndex(...args) {
    try {
      return this.dropIndex(...args);
    } catch (e) {
      console.error('Error dropping index:', this.name, '->', ...args, e);
    }
  }

  trashFind(query, options) {
    query.__collection__ = this.name;
    return trash.find(query, options);
  }

  trashFindOneById(_id, options) {
    const query = {
      _id,
      __collection__: this.name
    };
    return trash.findOne(query, options);
  }

  trashFindDeletedAfter(deletedAt, query = {}, options) {
    query.__collection__ = this.name;
    query._deletedAt = {
      $gt: deletedAt
    };
    return trash.find(query, options);
  }

}

module.exportDefault(ModelsBaseDb);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"oauth":{"oauth.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/oauth/oauth.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
const AccessTokenServices = {};

RocketChat.registerAccessTokenService = function (serviceName, handleAccessTokenRequest) {
  AccessTokenServices[serviceName] = {
    serviceName,
    handleAccessTokenRequest
  };
}; // Listen to calls to `login` with an oauth option set. This is where
// users actually get logged in to meteor via oauth.


Accounts.registerLoginHandler(function (options) {
  if (!options.accessToken) {
    return undefined; // don't handle
  }

  check(options, Match.ObjectIncluding({
    serviceName: String
  }));
  const service = AccessTokenServices[options.serviceName]; // Skip everything if there's no service set by the oauth middleware

  if (!service) {
    throw new Error(`Unexpected AccessToken service ${options.serviceName}`);
  } // Make sure we're configured


  if (!ServiceConfiguration.configurations.findOne({
    service: service.serviceName
  })) {
    throw new ServiceConfiguration.ConfigError();
  }

  if (!_.contains(Accounts.oauth.serviceNames(), service.serviceName)) {
    // serviceName was not found in the registered services list.
    // This could happen because the service never registered itself or
    // unregisterService was called on it.
    return {
      type: 'oauth',
      error: new Meteor.Error(Accounts.LoginCancelledError.numericError, `No registered oauth service found for: ${service.serviceName}`)
    };
  }

  const oauthResult = service.handleAccessTokenRequest(options);
  return Accounts.updateOrCreateUserFromExternalService(service.serviceName, oauthResult.serviceData, oauthResult.options);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"facebook.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/oauth/facebook.js                                                                    //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
let OAuth;
module.watch(require("meteor/oauth"), {
  OAuth(v) {
    OAuth = v;
  }

}, 1);

const crypto = Npm.require('crypto');

const whitelisted = ['id', 'email', 'name', 'first_name', 'last_name', 'link', 'gender', 'locale', 'age_range'];
const FB_API_VERSION = 'v2.9';
const FB_URL = 'https://graph.facebook.com';

const getIdentity = function (accessToken, fields, secret) {
  const hmac = crypto.createHmac('sha256', OAuth.openSecret(secret));
  hmac.update(accessToken);

  try {
    return HTTP.get(`${FB_URL}/${FB_API_VERSION}/me`, {
      params: {
        access_token: accessToken,
        appsecret_proof: hmac.digest('hex'),
        fields: fields.join(',')
      }
    }).data;
  } catch (err) {
    throw _.extend(new Error(`Failed to fetch identity from Facebook. ${err.message}`), {
      response: err.response
    });
  }
};

RocketChat.registerAccessTokenService('facebook', function (options) {
  check(options, Match.ObjectIncluding({
    accessToken: String,
    secret: String,
    expiresIn: Match.Integer,
    identity: Match.Maybe(Object)
  }));
  const identity = options.identity || getIdentity(options.accessToken, whitelisted, options.secret);
  const serviceData = {
    accessToken: options.accessToken,
    expiresAt: +new Date() + 1000 * parseInt(options.expiresIn, 10)
  };

  const fields = _.pick(identity, whitelisted);

  _.extend(serviceData, fields);

  return {
    serviceData,
    options: {
      profile: {
        name: identity.name
      }
    }
  };
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"twitter.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/oauth/twitter.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Twit;
module.watch(require("twit"), {
  default(v) {
    Twit = v;
  }

}, 0);

let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 1);
const whitelistedFields = ['id', 'name', 'description', 'profile_image_url', 'profile_image_url_https', 'lang', 'email'];

const getIdentity = function (accessToken, appId, appSecret, accessTokenSecret) {
  const Twitter = new Twit({
    consumer_key: appId,
    consumer_secret: appSecret,
    access_token: accessToken,
    access_token_secret: accessTokenSecret
  });
  const syncTwitter = Meteor.wrapAsync(Twitter.get, Twitter);

  try {
    return syncTwitter('account/verify_credentials.json?include_email=true');
  } catch (err) {
    throw _.extend(new Error(`Failed to fetch identity from Twwiter. ${err.message}`), {
      response: err.response
    });
  }
};

RocketChat.registerAccessTokenService('twitter', function (options) {
  check(options, Match.ObjectIncluding({
    accessToken: String,
    appSecret: String,
    appId: String,
    accessTokenSecret: String,
    expiresIn: Match.Integer,
    identity: Match.Maybe(Object)
  }));
  const identity = options.identity || getIdentity(options.accessToken, options.appId, options.appSecret, options.accessTokenSecret);
  const serviceData = {
    accessToken: options.accessToken,
    expiresAt: +new Date() + 1000 * parseInt(options.expiresIn, 10)
  };

  const fields = _.pick(identity, whitelistedFields);

  _.extend(serviceData, fields);

  return {
    serviceData,
    options: {
      profile: {
        name: identity.name
      }
    }
  };
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"google.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/oauth/google.js                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);

function getIdentity(accessToken) {
  try {
    return HTTP.get('https://www.googleapis.com/oauth2/v1/userinfo', {
      params: {
        access_token: accessToken
      }
    }).data;
  } catch (err) {
    throw _.extend(new Error(`Failed to fetch identity from Google. ${err.message}`), {
      response: err.response
    });
  }
}

function getScopes(accessToken) {
  try {
    return HTTP.get('https://www.googleapis.com/oauth2/v1/tokeninfo', {
      params: {
        access_token: accessToken
      }
    }).data.scope.split(' ');
  } catch (err) {
    throw _.extend(new Error(`Failed to fetch tokeninfo from Google. ${err.message}`), {
      response: err.response
    });
  }
}

RocketChat.registerAccessTokenService('google', function (options) {
  check(options, Match.ObjectIncluding({
    accessToken: String,
    idToken: String,
    expiresIn: Match.Integer,
    scope: Match.Maybe(String),
    identity: Match.Maybe(Object)
  }));
  const identity = options.identity || getIdentity(options.accessToken);
  const serviceData = {
    accessToken: options.accessToken,
    idToken: options.idToken,
    expiresAt: +new Date() + 1000 * parseInt(options.expiresIn, 10),
    scope: options.scopes || getScopes(options.accessToken)
  };

  const fields = _.pick(identity, Google.whitelistedFields);

  _.extend(serviceData, fields); // only set the token in serviceData if it's there. this ensures
  // that we don't lose old ones (since we only get this on the first
  // log in attempt)


  if (options.refreshToken) {
    serviceData.refreshToken = options.refreshToken;
  }

  return {
    serviceData,
    options: {
      profile: {
        name: identity.name
      }
    }
  };
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"proxy.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/oauth/proxy.js                                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
OAuth._redirectUri = _.wrap(OAuth._redirectUri, function (func, serviceName, ...args) {
  const proxy = RocketChat.settings.get('Accounts_OAuth_Proxy_services').replace(/\s/g, '').split(',');

  if (proxy.includes(serviceName)) {
    return `${RocketChat.settings.get('Accounts_OAuth_Proxy_host')}/oauth_redirect`;
  } else {
    return func(serviceName, ...args);
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"startup":{"statsTracker.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/statsTracker.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let StatsD;
module.watch(require("node-dogstatsd"), {
  StatsD(v) {
    StatsD = v;
  }

}, 0);
RocketChat.statsTracker = new class StatsTracker {
  constructor() {
    this.StatsD = StatsD;
    this.dogstatsd = new this.StatsD();
  }

  track(type, stats, ...args) {
    this.dogstatsd[type](`RocketChat.${stats}`, ...args);
  }

  now() {
    const hrtime = process.hrtime();
    return hrtime[0] * 1000000 + hrtime[1] / 1000;
  }

  timing(stats, time, tags) {
    this.track('timing', stats, time, tags);
  }

  increment(stats, time, tags) {
    this.track('increment', stats, time, tags);
  }

  decrement(stats, time, tags) {
    this.track('decrement', stats, time, tags);
  }

  histogram(stats, time, tags) {
    this.track('histogram', stats, time, tags);
  }

  gauge(stats, time, tags) {
    this.track('gauge', stats, time, tags);
  }

  unique(stats, time, tags) {
    this.track('unique', stats, time, tags);
  }

  set(stats, time, tags) {
    this.track('set', stats, time, tags);
  }

}();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settingsOnLoadCdnPrefix.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settingsOnLoadCdnPrefix.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);

function testWebAppInternals(fn) {
  typeof WebAppInternals !== 'undefined' && fn(WebAppInternals);
}

RocketChat.settings.onload('CDN_PREFIX', function (key, value) {
  const useForAll = RocketChat.settings.get('CDN_PREFIX_ALL');

  if (_.isString(value) && value.trim() && useForAll) {
    return testWebAppInternals(WebAppInternals => WebAppInternals.setBundledJsCssPrefix(value));
  }
});
RocketChat.settings.onload('CDN_JSCSS_PREFIX', function (key, value) {
  const useForAll = RocketChat.settings.get('CDN_PREFIX_ALL');

  if (_.isString(value) && value.trim() && !useForAll) {
    return testWebAppInternals(WebAppInternals => WebAppInternals.setBundledJsCssPrefix(value));
  }
});
Meteor.startup(function () {
  const cdnValue = RocketChat.settings.get('CDN_PREFIX');
  const useForAll = RocketChat.settings.get('CDN_PREFIX_ALL');
  const cdnJsCss = RocketChat.settings.get('CDN_JSCSS_PREFIX');

  if (_.isString(cdnValue) && cdnValue.trim()) {
    if (useForAll) {
      return testWebAppInternals(WebAppInternals => WebAppInternals.setBundledJsCssPrefix(cdnValue));
    } else if (_.isString(cdnJsCss) && cdnJsCss.trim()) {
      return testWebAppInternals(WebAppInternals => WebAppInternals.setBundledJsCssPrefix(cdnJsCss));
    }
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settingsOnLoadDirectReply.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settingsOnLoadDirectReply.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
let IMAPIntercepter, POP3Helper;
module.watch(require("../lib/interceptDirectReplyEmails.js"), {
  IMAPIntercepter(v) {
    IMAPIntercepter = v;
  },

  POP3Helper(v) {
    POP3Helper = v;
  }

}, 1);

const startEmailIntercepter = _.debounce(Meteor.bindEnvironment(function () {
  console.log('Starting Email Intercepter...');

  if (RocketChat.settings.get('Direct_Reply_Enable') && RocketChat.settings.get('Direct_Reply_Protocol') && RocketChat.settings.get('Direct_Reply_Host') && RocketChat.settings.get('Direct_Reply_Port') && RocketChat.settings.get('Direct_Reply_Username') && RocketChat.settings.get('Direct_Reply_Password')) {
    if (RocketChat.settings.get('Direct_Reply_Protocol') === 'IMAP') {
      // stop already running IMAP instance
      if (RocketChat.IMAP && RocketChat.IMAP.isActive()) {
        console.log('Disconnecting already running IMAP instance...');
        RocketChat.IMAP.stop(Meteor.bindEnvironment(function () {
          console.log('Starting new IMAP instance......');
          RocketChat.IMAP = new IMAPIntercepter();
          RocketChat.IMAP.start();
          return true;
        }));
      } else if (RocketChat.POP3 && RocketChat.POP3Helper && RocketChat.POP3Helper.isActive()) {
        console.log('Disconnecting already running POP instance...');
        RocketChat.POP3Helper.stop(Meteor.bindEnvironment(function () {
          console.log('Starting new IMAP instance......');
          RocketChat.IMAP = new IMAPIntercepter();
          RocketChat.IMAP.start();
          return true;
        }));
      } else {
        console.log('Starting new IMAP instance......');
        RocketChat.IMAP = new IMAPIntercepter();
        RocketChat.IMAP.start();
        return true;
      }
    } else if (RocketChat.settings.get('Direct_Reply_Protocol') === 'POP') {
      // stop already running POP instance
      if (RocketChat.POP3 && RocketChat.POP3Helper && RocketChat.POP3Helper.isActive()) {
        console.log('Disconnecting already running POP instance...');
        RocketChat.POP3Helper.stop(Meteor.bindEnvironment(function () {
          console.log('Starting new POP instance......');
          RocketChat.POP3Helper = new POP3Helper();
          RocketChat.POP3Helper.start();
          return true;
        }));
      } else if (RocketChat.IMAP && RocketChat.IMAP.isActive()) {
        console.log('Disconnecting already running IMAP instance...');
        RocketChat.IMAP.stop(Meteor.bindEnvironment(function () {
          console.log('Starting new POP instance......');
          RocketChat.POP3Helper = new POP3Helper();
          RocketChat.POP3Helper.start();
          return true;
        }));
      } else {
        console.log('Starting new POP instance......');
        RocketChat.POP3Helper = new POP3Helper();
        RocketChat.POP3Helper.start();
        return true;
      }
    }
  } else if (RocketChat.IMAP && RocketChat.IMAP.isActive()) {
    // stop IMAP instance
    RocketChat.IMAP.stop();
  } else if (RocketChat.POP3 && RocketChat.POP3Helper.isActive()) {
    // stop POP3 instance
    RocketChat.POP3Helper.stop();
  }
}), 1000);

RocketChat.settings.onload(/^Direct_Reply_.+/, startEmailIntercepter);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settingsOnLoadSMTP.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settingsOnLoadSMTP.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);

const buildMailURL = _.debounce(function () {
  console.log('Updating process.env.MAIL_URL');

  if (RocketChat.settings.get('SMTP_Host')) {
    process.env.MAIL_URL = `${RocketChat.settings.get('SMTP_Protocol')}://`;

    if (RocketChat.settings.get('SMTP_Username') && RocketChat.settings.get('SMTP_Password')) {
      process.env.MAIL_URL += `${encodeURIComponent(RocketChat.settings.get('SMTP_Username'))}:${encodeURIComponent(RocketChat.settings.get('SMTP_Password'))}@`;
    }

    process.env.MAIL_URL += encodeURIComponent(RocketChat.settings.get('SMTP_Host'));

    if (RocketChat.settings.get('SMTP_Port')) {
      process.env.MAIL_URL += `:${parseInt(RocketChat.settings.get('SMTP_Port'))}`;
    }

    process.env.MAIL_URL += `?pool=${RocketChat.settings.get('SMTP_Pool')}`;

    if (RocketChat.settings.get('SMTP_Protocol') === 'smtp' && RocketChat.settings.get('SMTP_IgnoreTLS')) {
      process.env.MAIL_URL += '&secure=false&ignoreTLS=true';
    }

    return process.env.MAIL_URL;
  }
}, 500);

RocketChat.settings.onload('SMTP_Host', function (key, value) {
  if (_.isString(value)) {
    return buildMailURL();
  }
});
RocketChat.settings.onload('SMTP_Port', function () {
  return buildMailURL();
});
RocketChat.settings.onload('SMTP_Username', function (key, value) {
  if (_.isString(value)) {
    return buildMailURL();
  }
});
RocketChat.settings.onload('SMTP_Password', function (key, value) {
  if (_.isString(value)) {
    return buildMailURL();
  }
});
RocketChat.settings.onload('SMTP_Protocol', function () {
  return buildMailURL();
});
RocketChat.settings.onload('SMTP_Pool', function () {
  return buildMailURL();
});
RocketChat.settings.onload('SMTP_IgnoreTLS', function () {
  return buildMailURL();
});
Meteor.startup(function () {
  return buildMailURL();
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"oAuthServicesUpdate.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/oAuthServicesUpdate.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
const logger = new Logger('rocketchat:lib', {
  methods: {
    oauth_updated: {
      type: 'info'
    }
  }
});

function _OAuthServicesUpdate() {
  const services = RocketChat.settings.get(/^(Accounts_OAuth_|Accounts_OAuth_Custom-)[a-z0-9_]+$/i);
  services.forEach(service => {
    logger.oauth_updated(service.key);
    let serviceName = service.key.replace('Accounts_OAuth_', '');

    if (serviceName === 'Meteor') {
      serviceName = 'meteor-developer';
    }

    if (/Accounts_OAuth_Custom-/.test(service.key)) {
      serviceName = service.key.replace('Accounts_OAuth_Custom-', '');
    }

    if (service.value === true) {
      const data = {
        clientId: RocketChat.settings.get(`${service.key}_id`),
        secret: RocketChat.settings.get(`${service.key}_secret`)
      };

      if (/Accounts_OAuth_Custom-/.test(service.key)) {
        data.custom = true;
        data.clientId = RocketChat.settings.get(`${service.key}-id`);
        data.secret = RocketChat.settings.get(`${service.key}-secret`);
        data.serverURL = RocketChat.settings.get(`${service.key}-url`);
        data.tokenPath = RocketChat.settings.get(`${service.key}-token_path`);
        data.identityPath = RocketChat.settings.get(`${service.key}-identity_path`);
        data.authorizePath = RocketChat.settings.get(`${service.key}-authorize_path`);
        data.scope = RocketChat.settings.get(`${service.key}-scope`);
        data.buttonLabelText = RocketChat.settings.get(`${service.key}-button_label_text`);
        data.buttonLabelColor = RocketChat.settings.get(`${service.key}-button_label_color`);
        data.loginStyle = RocketChat.settings.get(`${service.key}-login_style`);
        data.buttonColor = RocketChat.settings.get(`${service.key}-button_color`);
        data.tokenSentVia = RocketChat.settings.get(`${service.key}-token_sent_via`);
        data.identityTokenSentVia = RocketChat.settings.get(`${service.key}-identity_token_sent_via`);
        data.usernameField = RocketChat.settings.get(`${service.key}-username_field`);
        data.mergeUsers = RocketChat.settings.get(`${service.key}-merge_users`);
        new CustomOAuth(serviceName.toLowerCase(), {
          serverURL: data.serverURL,
          tokenPath: data.tokenPath,
          identityPath: data.identityPath,
          authorizePath: data.authorizePath,
          scope: data.scope,
          loginStyle: data.loginStyle,
          tokenSentVia: data.tokenSentVia,
          identityTokenSentVia: data.identityTokenSentVia,
          usernameField: data.usernameField,
          mergeUsers: data.mergeUsers
        });
      }

      if (serviceName === 'Facebook') {
        data.appId = data.clientId;
        delete data.clientId;
      }

      if (serviceName === 'Twitter') {
        data.consumerKey = data.clientId;
        delete data.clientId;
      }

      ServiceConfiguration.configurations.upsert({
        service: serviceName.toLowerCase()
      }, {
        $set: data
      });
    } else {
      ServiceConfiguration.configurations.remove({
        service: serviceName.toLowerCase()
      });
    }
  });
}

const OAuthServicesUpdate = _.debounce(Meteor.bindEnvironment(_OAuthServicesUpdate), 2000);

function OAuthServicesRemove(_id) {
  const serviceName = _id.replace('Accounts_OAuth_Custom-', '');

  return ServiceConfiguration.configurations.remove({
    service: serviceName.toLowerCase()
  });
}

RocketChat.settings.get(/^Accounts_OAuth_.+/, function () {
  return OAuthServicesUpdate(); // eslint-disable-line new-cap
});
RocketChat.settings.get(/^Accounts_OAuth_Custom-[a-z0-9_]+/, function (key, value) {
  if (!value) {
    return OAuthServicesRemove(key); // eslint-disable-line new-cap
  }
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"settings.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/settings.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
module.watch(require("./email"));
// Insert server unique id if it doesn't exist
RocketChat.settings.add('uniqueID', process.env.DEPLOYMENT_ID || Random.id(), {
  public: true,
  hidden: true
}); // When you define a setting and want to add a description, you don't need to automatically define the i18nDescription
// if you add a node to the i18n.json with the same setting name but with `_Description` it will automatically work.

RocketChat.settings.addGroup('Accounts', function () {
  this.add('Accounts_AllowAnonymousRead', false, {
    type: 'boolean',
    public: true
  });
  this.add('Accounts_AllowAnonymousWrite', false, {
    type: 'boolean',
    public: true,
    enableQuery: {
      _id: 'Accounts_AllowAnonymousRead',
      value: true
    }
  });
  this.add('Accounts_AllowDeleteOwnAccount', false, {
    type: 'boolean',
    public: true,
    enableQuery: {
      _id: 'Accounts_AllowUserProfileChange',
      value: true
    }
  });
  this.add('Accounts_AllowUserProfileChange', true, {
    type: 'boolean',
    public: true
  });
  this.add('Accounts_AllowUserAvatarChange', true, {
    type: 'boolean',
    public: true
  });
  this.add('Accounts_AllowRealNameChange', true, {
    type: 'boolean',
    public: true
  });
  this.add('Accounts_AllowUsernameChange', true, {
    type: 'boolean',
    public: true
  });
  this.add('Accounts_AllowEmailChange', true, {
    type: 'boolean',
    public: true
  });
  this.add('Accounts_AllowPasswordChange', true, {
    type: 'boolean',
    public: true
  });
  this.add('Accounts_CustomFieldsToShowInUserInfo', '', {
    type: 'string',
    public: true
  });
  this.add('Accounts_LoginExpiration', 90, {
    type: 'int',
    public: true
  });
  this.add('Accounts_ShowFormLogin', true, {
    type: 'boolean',
    public: true
  });
  this.add('Accounts_EmailOrUsernamePlaceholder', '', {
    type: 'string',
    public: true,
    i18nLabel: 'Placeholder_for_email_or_username_login_field'
  });
  this.add('Accounts_PasswordPlaceholder', '', {
    type: 'string',
    public: true,
    i18nLabel: 'Placeholder_for_password_login_field'
  });
  this.add('Accounts_ConfirmPasswordPlaceholder', '', {
    type: 'string',
    public: true,
    i18nLabel: 'Placeholder_for_password_login_field'
  });
  this.add('Accounts_ForgetUserSessionOnWindowClose', false, {
    type: 'boolean',
    public: true
  });
  this.add('Accounts_SearchFields', 'username, name', {
    type: 'string',
    public: true
  });
  this.add('Accounts_Directory_DefaultView', 'channels', {
    type: 'select',
    values: [{
      key: 'channels',
      i18nLabel: 'Channels'
    }, {
      key: 'users',
      i18nLabel: 'Users'
    }],
    public: true
  });
  this.section('Registration', function () {
    this.add('Accounts_DefaultUsernamePrefixSuggestion', 'user', {
      type: 'string'
    });
    this.add('Accounts_RequireNameForSignUp', true, {
      type: 'boolean',
      public: true
    });
    this.add('Accounts_RequirePasswordConfirmation', true, {
      type: 'boolean',
      public: true
    });
    this.add('Accounts_EmailVerification', false, {
      type: 'boolean',
      public: true,
      enableQuery: {
        _id: 'SMTP_Host',
        value: {
          $exists: 1,
          $ne: ''
        }
      }
    });
    this.add('Accounts_ManuallyApproveNewUsers', false, {
      public: true,
      type: 'boolean'
    });
    this.add('Accounts_AllowedDomainsList', '', {
      type: 'string',
      public: true
    });
    this.add('Accounts_BlockedDomainsList', '', {
      type: 'string'
    });
    this.add('Accounts_BlockedUsernameList', '', {
      type: 'string'
    });
    this.add('Accounts_UseDefaultBlockedDomainsList', true, {
      type: 'boolean'
    });
    this.add('Accounts_UseDNSDomainCheck', false, {
      type: 'boolean'
    });
    this.add('Accounts_RegistrationForm', 'Public', {
      type: 'select',
      public: true,
      values: [{
        key: 'Public',
        i18nLabel: 'Accounts_RegistrationForm_Public'
      }, {
        key: 'Disabled',
        i18nLabel: 'Accounts_RegistrationForm_Disabled'
      }, {
        key: 'Secret URL',
        i18nLabel: 'Accounts_RegistrationForm_Secret_URL'
      }]
    });
    this.add('Accounts_RegistrationForm_SecretURL', Random.id(), {
      type: 'string'
    });
    this.add('Accounts_RegistrationForm_LinkReplacementText', 'New user registration is currently disabled', {
      type: 'string',
      public: true
    });
    this.add('Accounts_Registration_AuthenticationServices_Enabled', true, {
      type: 'boolean',
      public: true
    });
    this.add('Accounts_Registration_AuthenticationServices_Default_Roles', 'user', {
      type: 'string',
      enableQuery: {
        _id: 'Accounts_Registration_AuthenticationServices_Enabled',
        value: true
      }
    });
    this.add('Accounts_PasswordReset', true, {
      type: 'boolean',
      public: true
    });
    this.add('Accounts_CustomFields', '', {
      type: 'code',
      public: true,
      i18nLabel: 'Custom_Fields'
    });
  });
  this.section('Accounts_Default_User_Preferences', function () {
    this.add('Accounts_Default_User_Preferences_enableAutoAway', true, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Enable_Auto_Away'
    });
    this.add('Accounts_Default_User_Preferences_idleTimeLimit', 300, {
      type: 'int',
      public: true,
      i18nLabel: 'Idle_Time_Limit'
    });
    this.add('Accounts_Default_User_Preferences_desktopNotificationDuration', 0, {
      type: 'int',
      public: true,
      i18nLabel: 'Notification_Duration'
    });
    this.add('Accounts_Default_User_Preferences_audioNotifications', 'mentions', {
      type: 'select',
      values: [{
        key: 'all',
        i18nLabel: 'All_messages'
      }, {
        key: 'mentions',
        i18nLabel: 'Mentions'
      }, {
        key: 'nothing',
        i18nLabel: 'Nothing'
      }],
      public: true
    });
    this.add('Accounts_Default_User_Preferences_desktopNotifications', 'mentions', {
      type: 'select',
      values: [{
        key: 'all',
        i18nLabel: 'All_messages'
      }, {
        key: 'mentions',
        i18nLabel: 'Mentions'
      }, {
        key: 'nothing',
        i18nLabel: 'Nothing'
      }],
      public: true
    });
    this.add('Accounts_Default_User_Preferences_mobileNotifications', 'mentions', {
      type: 'select',
      values: [{
        key: 'all',
        i18nLabel: 'All_messages'
      }, {
        key: 'mentions',
        i18nLabel: 'Mentions'
      }, {
        key: 'nothing',
        i18nLabel: 'Nothing'
      }],
      public: true
    });
    this.add('Accounts_Default_User_Preferences_unreadAlert', true, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Unread_Tray_Icon_Alert'
    });
    this.add('Accounts_Default_User_Preferences_useEmojis', true, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Use_Emojis'
    });
    this.add('Accounts_Default_User_Preferences_convertAsciiEmoji', true, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Convert_Ascii_Emojis'
    });
    this.add('Accounts_Default_User_Preferences_autoImageLoad', true, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Auto_Load_Images'
    });
    this.add('Accounts_Default_User_Preferences_saveMobileBandwidth', true, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Save_Mobile_Bandwidth'
    });
    this.add('Accounts_Default_User_Preferences_collapseMediaByDefault', false, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Collapse_Embedded_Media_By_Default'
    });
    this.add('Accounts_Default_User_Preferences_hideUsernames', false, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Hide_usernames'
    });
    this.add('Accounts_Default_User_Preferences_hideRoles', false, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Hide_roles'
    });
    this.add('Accounts_Default_User_Preferences_hideFlexTab', false, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Hide_flextab'
    });
    this.add('Accounts_Default_User_Preferences_hideAvatars', false, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Hide_Avatars'
    });
    this.add('Accounts_Default_User_Preferences_sidebarGroupByType', true, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Group_by_Type'
    });
    this.add('Accounts_Default_User_Preferences_sidebarViewMode', 'medium', {
      type: 'select',
      values: [{
        key: 'extended',
        i18nLabel: 'Extended'
      }, {
        key: 'medium',
        i18nLabel: 'Medium'
      }, {
        key: 'condensed',
        i18nLabel: 'Condensed'
      }],
      public: true,
      i18nLabel: 'Sidebar_list_mode'
    });
    this.add('Accounts_Default_User_Preferences_sidebarHideAvatar', false, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Hide_Avatars'
    });
    this.add('Accounts_Default_User_Preferences_sidebarShowUnread', false, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Unread_on_top'
    });
    this.add('Accounts_Default_User_Preferences_sidebarShowFavorites', true, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Group_favorites'
    });
    this.add('Accounts_Default_User_Preferences_sendOnEnter', 'normal', {
      type: 'select',
      values: [{
        key: 'normal',
        i18nLabel: 'Enter_Normal'
      }, {
        key: 'alternative',
        i18nLabel: 'Enter_Alternative'
      }, {
        key: 'desktop',
        i18nLabel: 'Only_On_Desktop'
      }],
      public: true,
      i18nLabel: 'Enter_Behaviour'
    });
    this.add('Accounts_Default_User_Preferences_messageViewMode', 0, {
      type: 'select',
      values: [{
        key: 0,
        i18nLabel: 'Normal'
      }, {
        key: 1,
        i18nLabel: 'Cozy'
      }, {
        key: 2,
        i18nLabel: 'Compact'
      }],
      public: true,
      i18nLabel: 'MessageBox_view_mode'
    });
    this.add('Accounts_Default_User_Preferences_emailNotificationMode', 'mentions', {
      type: 'select',
      values: [{
        key: 'nothing',
        i18nLabel: 'Email_Notification_Mode_Disabled'
      }, {
        key: 'mentions',
        i18nLabel: 'Email_Notification_Mode_All'
      }],
      public: true,
      i18nLabel: 'Email_Notification_Mode'
    });
    this.add('Accounts_Default_User_Preferences_roomCounterSidebar', false, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Show_room_counter_on_sidebar'
    });
    this.add('Accounts_Default_User_Preferences_newRoomNotification', 'door', {
      type: 'select',
      values: [{
        key: 'none',
        i18nLabel: 'None'
      }, {
        key: 'door',
        i18nLabel: 'Default'
      }],
      public: true,
      i18nLabel: 'New_Room_Notification'
    });
    this.add('Accounts_Default_User_Preferences_newMessageNotification', 'chime', {
      type: 'select',
      values: [{
        key: 'none',
        i18nLabel: 'None'
      }, {
        key: 'chime',
        i18nLabel: 'Default'
      }],
      public: true,
      i18nLabel: 'New_Message_Notification'
    });
    this.add('Accounts_Default_User_Preferences_muteFocusedConversations', true, {
      type: 'boolean',
      public: true,
      i18nLabel: 'Mute_Focused_Conversations'
    });
    this.add('Accounts_Default_User_Preferences_notificationsSoundVolume', 100, {
      type: 'int',
      public: true,
      i18nLabel: 'Notifications_Sound_Volume'
    });
  });
  this.section('Avatar', function () {
    this.add('Accounts_AvatarResize', true, {
      type: 'boolean'
    });
    this.add('Accounts_AvatarSize', 200, {
      type: 'int',
      enableQuery: {
        _id: 'Accounts_AvatarResize',
        value: true
      }
    });
    this.add('Accounts_AvatarCacheTime', 3600, {
      type: 'int',
      i18nDescription: 'Accounts_AvatarCacheTime_description'
    });
    this.add('Accounts_AvatarBlockUnauthenticatedAccess', false, {
      type: 'boolean'
    });
    return this.add('Accounts_SetDefaultAvatar', true, {
      type: 'boolean'
    });
  });
  this.section('Password_Policy', function () {
    this.add('Accounts_Password_Policy_Enabled', false, {
      type: 'boolean'
    });
    const enableQuery = {
      _id: 'Accounts_Password_Policy_Enabled',
      value: true
    };
    this.add('Accounts_Password_Policy_MinLength', 7, {
      type: 'int',
      enableQuery
    });
    this.add('Accounts_Password_Policy_MaxLength', -1, {
      type: 'int',
      enableQuery
    });
    this.add('Accounts_Password_Policy_ForbidRepeatingCharacters', true, {
      type: 'boolean',
      enableQuery
    });
    this.add('Accounts_Password_Policy_ForbidRepeatingCharactersCount', 3, {
      type: 'int',
      enableQuery
    });
    this.add('Accounts_Password_Policy_AtLeastOneLowercase', true, {
      type: 'boolean',
      enableQuery
    });
    this.add('Accounts_Password_Policy_AtLeastOneUppercase', true, {
      type: 'boolean',
      enableQuery
    });
    this.add('Accounts_Password_Policy_AtLeastOneNumber', true, {
      type: 'boolean',
      enableQuery
    });
    this.add('Accounts_Password_Policy_AtLeastOneSpecialCharacter', true, {
      type: 'boolean',
      enableQuery
    });
  });
});
RocketChat.settings.addGroup('OAuth', function () {
  this.section('Facebook', function () {
    const enableQuery = {
      _id: 'Accounts_OAuth_Facebook',
      value: true
    };
    this.add('Accounts_OAuth_Facebook', false, {
      type: 'boolean',
      public: true
    });
    this.add('Accounts_OAuth_Facebook_id', '', {
      type: 'string',
      enableQuery
    });
    this.add('Accounts_OAuth_Facebook_secret', '', {
      type: 'string',
      enableQuery
    });
    return this.add('Accounts_OAuth_Facebook_callback_url', '_oauth/facebook', {
      type: 'relativeUrl',
      readonly: true,
      force: true,
      enableQuery
    });
  });
  this.section('Google', function () {
    const enableQuery = {
      _id: 'Accounts_OAuth_Google',
      value: true
    };
    this.add('Accounts_OAuth_Google', false, {
      type: 'boolean',
      public: true
    });
    this.add('Accounts_OAuth_Google_id', '', {
      type: 'string',
      enableQuery
    });
    this.add('Accounts_OAuth_Google_secret', '', {
      type: 'string',
      enableQuery
    });
    return this.add('Accounts_OAuth_Google_callback_url', '_oauth/google', {
      type: 'relativeUrl',
      readonly: true,
      force: true,
      enableQuery
    });
  });
  this.section('GitHub', function () {
    const enableQuery = {
      _id: 'Accounts_OAuth_Github',
      value: true
    };
    this.add('Accounts_OAuth_Github', false, {
      type: 'boolean',
      public: true
    });
    this.add('Accounts_OAuth_Github_id', '', {
      type: 'string',
      enableQuery
    });
    this.add('Accounts_OAuth_Github_secret', '', {
      type: 'string',
      enableQuery
    });
    return this.add('Accounts_OAuth_Github_callback_url', '_oauth/github', {
      type: 'relativeUrl',
      readonly: true,
      force: true,
      enableQuery
    });
  });
  this.section('Linkedin', function () {
    const enableQuery = {
      _id: 'Accounts_OAuth_Linkedin',
      value: true
    };
    this.add('Accounts_OAuth_Linkedin', false, {
      type: 'boolean',
      public: true
    });
    this.add('Accounts_OAuth_Linkedin_id', '', {
      type: 'string',
      enableQuery
    });
    this.add('Accounts_OAuth_Linkedin_secret', '', {
      type: 'string',
      enableQuery
    });
    return this.add('Accounts_OAuth_Linkedin_callback_url', '_oauth/linkedin', {
      type: 'relativeUrl',
      readonly: true,
      force: true,
      enableQuery
    });
  });
  this.section('Meteor', function () {
    const enableQuery = {
      _id: 'Accounts_OAuth_Meteor',
      value: true
    };
    this.add('Accounts_OAuth_Meteor', false, {
      type: 'boolean',
      public: true
    });
    this.add('Accounts_OAuth_Meteor_id', '', {
      type: 'string',
      enableQuery
    });
    this.add('Accounts_OAuth_Meteor_secret', '', {
      type: 'string',
      enableQuery
    });
    return this.add('Accounts_OAuth_Meteor_callback_url', '_oauth/meteor', {
      type: 'relativeUrl',
      readonly: true,
      force: true,
      enableQuery
    });
  });
  this.section('Twitter', function () {
    const enableQuery = {
      _id: 'Accounts_OAuth_Twitter',
      value: true
    };
    this.add('Accounts_OAuth_Twitter', false, {
      type: 'boolean',
      public: true
    });
    this.add('Accounts_OAuth_Twitter_id', '', {
      type: 'string',
      enableQuery
    });
    this.add('Accounts_OAuth_Twitter_secret', '', {
      type: 'string',
      enableQuery
    });
    return this.add('Accounts_OAuth_Twitter_callback_url', '_oauth/twitter', {
      type: 'relativeUrl',
      readonly: true,
      force: true,
      enableQuery
    });
  });
  return this.section('Proxy', function () {
    this.add('Accounts_OAuth_Proxy_host', 'https://oauth-proxy.rocket.chat', {
      type: 'string',
      public: true
    });
    return this.add('Accounts_OAuth_Proxy_services', '', {
      type: 'string',
      public: true
    });
  });
});
RocketChat.settings.addGroup('General', function () {
  this.add('Show_Setup_Wizard', 'pending', {
    type: 'select',
    public: true,
    values: [{
      key: 'pending',
      i18nLabel: 'Pending'
    }, {
      key: 'in_progress',
      i18nLabel: 'In_progress'
    }, {
      key: 'completed',
      i18nLabel: 'Completed'
    }]
  });
  this.add('Site_Url', typeof __meteor_runtime_config__ !== 'undefined' && __meteor_runtime_config__ !== null ? __meteor_runtime_config__.ROOT_URL : null, {
    type: 'string',
    i18nDescription: 'Site_Url_Description',
    public: true
  });
  this.add('Site_Name', 'Rocket.Chat', {
    type: 'string',
    public: true,
    wizard: {
      step: 3,
      order: 0
    }
  });
  this.add('Document_Domain', '', {
    type: 'string',
    public: true
  });
  this.add('Language', '', {
    type: 'language',
    public: true,
    wizard: {
      step: 3,
      order: 1
    }
  });
  this.add('Allow_Invalid_SelfSigned_Certs', false, {
    type: 'boolean'
  });
  this.add('Favorite_Rooms', true, {
    type: 'boolean',
    public: true
  });
  this.add('First_Channel_After_Login', '', {
    type: 'string',
    public: true
  });
  this.add('Unread_Count', 'user_and_group_mentions_only', {
    type: 'select',
    values: [{
      key: 'all_messages',
      i18nLabel: 'All_messages'
    }, {
      key: 'user_mentions_only',
      i18nLabel: 'User_mentions_only'
    }, {
      key: 'group_mentions_only',
      i18nLabel: 'Group_mentions_only'
    }, {
      key: 'user_and_group_mentions_only',
      i18nLabel: 'User_and_group_mentions_only'
    }],
    public: true
  });
  this.add('Unread_Count_DM', 'all_messages', {
    type: 'select',
    values: [{
      key: 'all_messages',
      i18nLabel: 'All_messages'
    }, {
      key: 'mentions_only',
      i18nLabel: 'Mentions_only'
    }],
    public: true
  });
  this.add('CDN_PREFIX', '', {
    type: 'string',
    public: true
  });
  this.add('CDN_PREFIX_ALL', true, {
    type: 'boolean',
    public: true
  });
  this.add('CDN_JSCSS_PREFIX', '', {
    type: 'string',
    public: true,
    enableQuery: {
      _id: 'CDN_PREFIX_ALL',
      value: false
    }
  });
  this.add('Force_SSL', false, {
    type: 'boolean',
    public: true
  });
  this.add('GoogleTagManager_id', '', {
    type: 'string',
    public: true
  });
  this.add('Bugsnag_api_key', '', {
    type: 'string',
    public: false
  });
  this.add('Force_Disable_OpLog_For_Cache', false, {
    type: 'boolean',
    public: false
  });
  this.add('Restart', 'restart_server', {
    type: 'action',
    actionText: 'Restart_the_server'
  });
  this.add('Store_Last_Message', true, {
    type: 'boolean',
    public: true,
    i18nDescription: 'Store_Last_Message_Sent_per_Room'
  });
  this.section('UTF8', function () {
    this.add('UTF8_Names_Validation', '[0-9a-zA-Z-_.]+', {
      type: 'string',
      public: true,
      i18nDescription: 'UTF8_Names_Validation_Description'
    });
    return this.add('UTF8_Names_Slugify', true, {
      type: 'boolean',
      public: true
    });
  });
  this.section('Reporting', function () {
    return this.add('Statistics_reporting', true, {
      type: 'boolean'
    });
  });
  this.section('Notifications', function () {
    this.add('Notifications_Max_Room_Members', 100, {
      type: 'int',
      public: true,
      i18nDescription: 'Notifications_Max_Room_Members_Description'
    });
    this.add('Notifications_Always_Notify_Mobile', false, {
      type: 'boolean',
      public: true,
      i18nDescription: 'Notifications_Always_Notify_Mobile_Description'
    });
  });
  this.section('REST API', function () {
    return this.add('API_User_Limit', 500, {
      type: 'int',
      public: true,
      i18nDescription: 'API_User_Limit'
    });
  });
  this.section('Iframe_Integration', function () {
    this.add('Iframe_Integration_send_enable', false, {
      type: 'boolean',
      public: true
    });
    this.add('Iframe_Integration_send_target_origin', '*', {
      type: 'string',
      public: true,
      enableQuery: {
        _id: 'Iframe_Integration_send_enable',
        value: true
      }
    });
    this.add('Iframe_Integration_receive_enable', false, {
      type: 'boolean',
      public: true
    });
    return this.add('Iframe_Integration_receive_origin', '*', {
      type: 'string',
      public: true,
      enableQuery: {
        _id: 'Iframe_Integration_receive_enable',
        value: true
      }
    });
  });
  this.section('Translations', function () {
    return this.add('Custom_Translations', '', {
      type: 'code',
      public: true
    });
  });
  return this.section('Stream_Cast', function () {
    return this.add('Stream_Cast_Address', '', {
      type: 'string'
    });
  });
});
RocketChat.settings.addGroup('Message', function () {
  this.section('Message_Attachments', function () {
    this.add('Message_Attachments_GroupAttach', false, {
      type: 'boolean',
      public: true,
      i18nDescription: 'Message_Attachments_GroupAttachDescription'
    });
  });
  this.section('Message_Audio', function () {
    this.add('Message_AudioRecorderEnabled', true, {
      type: 'boolean',
      public: true,
      i18nDescription: 'Message_AudioRecorderEnabledDescription'
    });
    this.add('Message_Audio_bitRate', 32, {
      type: 'int',
      public: true
    });
  });
  this.add('Message_AllowEditing', true, {
    type: 'boolean',
    public: true
  });
  this.add('Message_AllowEditing_BlockEditInMinutes', 0, {
    type: 'int',
    public: true,
    i18nDescription: 'Message_AllowEditing_BlockEditInMinutesDescription'
  });
  this.add('Message_AllowDeleting', true, {
    type: 'boolean',
    public: true
  });
  this.add('Message_AllowDeleting_BlockDeleteInMinutes', 0, {
    type: 'int',
    public: true,
    i18nDescription: 'Message_AllowDeleting_BlockDeleteInMinutes'
  });
  this.add('Message_AllowUnrecognizedSlashCommand', false, {
    type: 'boolean',
    public: true
  });
  this.add('Message_AllowDirectMessagesToYourself', true, {
    type: 'boolean',
    public: true
  });
  this.add('Message_AlwaysSearchRegExp', false, {
    type: 'boolean'
  });
  this.add('Message_ShowEditedStatus', true, {
    type: 'boolean',
    public: true
  });
  this.add('Message_ShowDeletedStatus', false, {
    type: 'boolean',
    public: true
  });
  this.add('Message_AllowBadWordsFilter', false, {
    type: 'boolean',
    public: true
  });
  this.add('Message_BadWordsFilterList', '', {
    type: 'string',
    public: true
  });
  this.add('Message_KeepHistory', false, {
    type: 'boolean',
    public: true
  });
  this.add('Message_MaxAll', 0, {
    type: 'int',
    public: true
  });
  this.add('Message_MaxAllowedSize', 5000, {
    type: 'int',
    public: true
  });
  this.add('Message_ShowFormattingTips', true, {
    type: 'boolean',
    public: true
  });
  this.add('Message_SetNameToAliasEnabled', false, {
    type: 'boolean',
    public: false,
    i18nDescription: 'Message_SetNameToAliasEnabled_Description'
  });
  this.add('Message_GroupingPeriod', 300, {
    type: 'int',
    public: true,
    i18nDescription: 'Message_GroupingPeriodDescription'
  });
  this.add('API_Embed', true, {
    type: 'boolean',
    public: true
  });
  this.add('API_Embed_UserAgent', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.0 Safari/537.36', {
    type: 'string',
    public: true
  });
  this.add('API_EmbedCacheExpirationDays', 30, {
    type: 'int',
    public: false
  });
  this.add('API_Embed_clear_cache_now', 'OEmbedCacheCleanup', {
    type: 'action',
    actionText: 'clear',
    i18nLabel: 'clear_cache_now'
  });
  this.add('API_EmbedDisabledFor', '', {
    type: 'string',
    public: true,
    i18nDescription: 'API_EmbedDisabledFor_Description'
  });
  this.add('API_EmbedIgnoredHosts', 'localhost, 127.0.0.1, 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16', {
    type: 'string',
    i18nDescription: 'API_EmbedIgnoredHosts_Description'
  });
  this.add('API_EmbedSafePorts', '80, 443', {
    type: 'string'
  });
  this.add('Message_TimeFormat', 'LT', {
    type: 'string',
    public: true,
    i18nDescription: 'Message_TimeFormat_Description'
  });
  this.add('Message_DateFormat', 'LL', {
    type: 'string',
    public: true,
    i18nDescription: 'Message_DateFormat_Description'
  });
  this.add('Message_TimeAndDateFormat', 'LLL', {
    type: 'string',
    public: true,
    i18nDescription: 'Message_TimeAndDateFormat_Description'
  });
  this.add('Message_QuoteChainLimit', 2, {
    type: 'int',
    public: true
  });
  this.add('Message_HideType_uj', false, {
    type: 'boolean',
    public: true
  });
  this.add('Message_HideType_ul', false, {
    type: 'boolean',
    public: true
  });
  this.add('Message_HideType_ru', false, {
    type: 'boolean',
    public: true
  });
  this.add('Message_HideType_au', false, {
    type: 'boolean',
    public: true
  });
  this.add('Message_HideType_mute_unmute', false, {
    type: 'boolean',
    public: true
  });
  this.add('Message_ErasureType', 'Delete', {
    type: 'select',
    public: true,
    values: [{
      key: 'Keep',
      i18nLabel: 'Message_ErasureType_Keep'
    }, {
      key: 'Delete',
      i18nLabel: 'Message_ErasureType_Delete'
    }, {
      key: 'Unlink',
      i18nLabel: 'Message_ErasureType_Unlink'
    }]
  });
});
RocketChat.settings.addGroup('Meta', function () {
  this.add('Meta_language', '', {
    type: 'string'
  });
  this.add('Meta_fb_app_id', '', {
    type: 'string'
  });
  this.add('Meta_robots', 'INDEX,FOLLOW', {
    type: 'string'
  });
  this.add('Meta_google-site-verification', '', {
    type: 'string'
  });
  this.add('Meta_msvalidate01', '', {
    type: 'string'
  });
  return this.add('Meta_custom', '', {
    type: 'code',
    code: 'text/html',
    multiline: true
  });
});
RocketChat.settings.addGroup('Push', function () {
  this.add('Push_enable', true, {
    type: 'boolean',
    public: true,
    alert: 'Push_Setting_Requires_Restart_Alert'
  });
  this.add('Push_debug', false, {
    type: 'boolean',
    public: true,
    alert: 'Push_Setting_Requires_Restart_Alert',
    enableQuery: {
      _id: 'Push_enable',
      value: true
    }
  });
  this.add('Push_enable_gateway', true, {
    type: 'boolean',
    alert: 'Push_Setting_Requires_Restart_Alert',
    enableQuery: {
      _id: 'Push_enable',
      value: true
    }
  });
  this.add('Push_gateway', 'https://gateway.rocket.chat', {
    type: 'string',
    alert: 'Push_Setting_Requires_Restart_Alert',
    enableQuery: [{
      _id: 'Push_enable',
      value: true
    }, {
      _id: 'Push_enable_gateway',
      value: true
    }]
  });
  this.add('Push_production', true, {
    type: 'boolean',
    public: true,
    alert: 'Push_Setting_Requires_Restart_Alert',
    enableQuery: [{
      _id: 'Push_enable',
      value: true
    }, {
      _id: 'Push_enable_gateway',
      value: false
    }]
  });
  this.add('Push_test_push', 'push_test', {
    type: 'action',
    actionText: 'Send_a_test_push_to_my_user',
    enableQuery: {
      _id: 'Push_enable',
      value: true
    }
  });
  this.section('Certificates_and_Keys', function () {
    this.add('Push_apn_passphrase', '', {
      type: 'string'
    });
    this.add('Push_apn_key', '', {
      type: 'string',
      multiline: true
    });
    this.add('Push_apn_cert', '', {
      type: 'string',
      multiline: true
    });
    this.add('Push_apn_dev_passphrase', '', {
      type: 'string'
    });
    this.add('Push_apn_dev_key', '', {
      type: 'string',
      multiline: true
    });
    this.add('Push_apn_dev_cert', '', {
      type: 'string',
      multiline: true
    });
    this.add('Push_gcm_api_key', '', {
      type: 'string'
    });
    return this.add('Push_gcm_project_number', '', {
      type: 'string',
      public: true
    });
  });
  return this.section('Privacy', function () {
    this.add('Push_show_username_room', true, {
      type: 'boolean',
      public: true
    });
    return this.add('Push_show_message', true, {
      type: 'boolean',
      public: true
    });
  });
});
RocketChat.settings.addGroup('Layout', function () {
  this.section('Content', function () {
    this.add('Layout_Home_Title', 'Home', {
      type: 'string',
      public: true
    });
    this.add('Layout_Home_Body', '<p>Welcome to Rocket.Chat!</p>\n<p>The Rocket.Chat desktops apps for Windows, macOS and Linux are available to download <a title="Rocket.Chat desktop apps" href="https: //rocket.chat/download" target="_blank" rel="noopener">here</a>.</p><p>The native mobile app, Rocket.Chat+,\n  for Android and iOS is available from <a title="Rocket.Chat+ on Google Play" href="https: //play.google.com/store/apps/details?id=chat.rocket.android" target="_blank" rel="noopener">Google Play</a> and the <a title="Rocket.Chat+ on the App Store" href="https: //itunes.apple.com/app/rocket-chat/id1148741252" target="_blank" rel="noopener">App Store</a>.</p>\n<p>For further help, please consult the <a title="Rocket.Chat Documentation" href="https: //rocket.chat/docs/" target="_blank" rel="noopener">documentation</a>.</p>\n<p>If you\'re an admin, feel free to change this content via <strong>Administration</strong> -> <strong>Layout</strong> -> <strong>Home Body</strong>. Or clicking <a title="Home Body Layout" href="/admin/Layout">here</a>.</p>', {
      type: 'code',
      code: 'text/html',
      multiline: true,
      public: true
    });
    this.add('Layout_Terms_of_Service', 'Terms of Service <br> Go to APP SETTINGS -> Layout to customize this page.', {
      type: 'code',
      code: 'text/html',
      multiline: true,
      public: true
    });
    this.add('Layout_Login_Terms', 'By proceeding you are agreeing to our <a href="terms-of-service">Terms of Service</a> and <a href="privacy-policy">Privacy Policy</a>.', {
      type: 'string',
      multiline: true,
      public: true
    });
    this.add('Layout_Privacy_Policy', 'Privacy Policy <br> Go to APP SETTINGS -> Layout to customize this page.', {
      type: 'code',
      code: 'text/html',
      multiline: true,
      public: true
    });
    return this.add('Layout_Sidenav_Footer', '<a href="/home"><img src="assets/logo"/></a>', {
      type: 'code',
      code: 'text/html',
      public: true,
      i18nDescription: 'Layout_Sidenav_Footer_description'
    });
  });
  this.section('Custom_Scripts', function () {
    this.add('Custom_Script_Logged_Out', '//Add your script', {
      type: 'code',
      multiline: true,
      public: true
    });
    return this.add('Custom_Script_Logged_In', '//Add your script', {
      type: 'code',
      multiline: true,
      public: true
    });
  });
  return this.section('User_Interface', function () {
    this.add('UI_DisplayRoles', true, {
      type: 'boolean',
      public: true
    });
    this.add('UI_Group_Channels_By_Type', true, {
      type: 'boolean',
      public: false
    });
    this.add('UI_Use_Name_Avatar', false, {
      type: 'boolean',
      public: true
    });
    this.add('UI_Use_Real_Name', false, {
      type: 'boolean',
      public: true
    });
    this.add('UI_Click_Direct_Message', false, {
      type: 'boolean',
      public: true
    });
    this.add('UI_Unread_Counter_Style', 'Different_Style_For_User_Mentions', {
      type: 'select',
      values: [{
        key: 'Same_Style_For_Mentions',
        i18nLabel: 'Same_Style_For_Mentions'
      }, {
        key: 'Different_Style_For_User_Mentions',
        i18nLabel: 'Different_Style_For_User_Mentions'
      }],
      public: true
    });
    this.add('UI_Allow_room_names_with_special_chars', false, {
      type: 'boolean',
      public: true
    });
  });
});
RocketChat.settings.addGroup('Logs', function () {
  this.add('Log_Level', '0', {
    type: 'select',
    values: [{
      key: '0',
      i18nLabel: '0_Errors_Only'
    }, {
      key: '1',
      i18nLabel: '1_Errors_and_Information'
    }, {
      key: '2',
      i18nLabel: '2_Erros_Information_and_Debug'
    }],
    public: true
  });
  this.add('Log_Package', false, {
    type: 'boolean',
    public: true
  });
  this.add('Log_File', false, {
    type: 'boolean',
    public: true
  });
  this.add('Log_View_Limit', 1000, {
    type: 'int'
  });
  this.add('Log_Trace_Methods', false, {
    type: 'boolean'
  });
  this.add('Log_Trace_Methods_Filter', '', {
    type: 'string',
    enableQuery: {
      _id: 'Log_Trace_Methods',
      value: true
    }
  });
  this.add('Log_Trace_Subscriptions', false, {
    type: 'boolean'
  });
  this.add('Log_Trace_Subscriptions_Filter', '', {
    type: 'string',
    enableQuery: {
      _id: 'Log_Trace_Subscriptions',
      value: true
    }
  });
  this.section('Prometheus', function () {
    this.add('Prometheus_Enabled', false, {
      type: 'boolean',
      i18nLabel: 'Enabled'
    }); // See the default port allocation at https://github.com/prometheus/prometheus/wiki/Default-port-allocations

    this.add('Prometheus_Port', 9458, {
      type: 'string',
      i18nLabel: 'Port'
    });
  });
});
RocketChat.settings.addGroup('Setup_Wizard', function () {
  this.section('Organization_Info', function () {
    this.add('Organization_Type', '', {
      type: 'select',
      values: [{
        key: 'nonprofit',
        i18nLabel: 'Nonprofit'
      }, {
        key: 'enterprise',
        i18nLabel: 'Enterprise'
      }, {
        key: 'government',
        i18nLabel: 'Government'
      }, {
        key: 'community',
        i18nLabel: 'Community'
      }],
      wizard: {
        step: 2,
        order: 0
      }
    });
    this.add('Organization_Name', '', {
      type: 'string',
      wizard: {
        step: 2,
        order: 1
      }
    });
    this.add('Industry', '', {
      type: 'select',
      values: [{
        key: 'advocacy',
        i18nLabel: 'Advocacy'
      }, {
        key: 'blockchain',
        i18nLabel: 'Blockchain'
      }, {
        key: 'helpCenter',
        i18nLabel: 'Help_Center'
      }, {
        key: 'manufacturing',
        i18nLabel: 'Manufacturing'
      }, {
        key: 'education',
        i18nLabel: 'Education'
      }, {
        key: 'insurance',
        i18nLabel: 'Insurance'
      }, {
        key: 'logistics',
        i18nLabel: 'Logistics'
      }, {
        key: 'consulting',
        i18nLabel: 'Consulting'
      }, {
        key: 'entertainment',
        i18nLabel: 'Entertainment'
      }, {
        key: 'publicRelations',
        i18nLabel: 'Public_Relations'
      }, {
        key: 'religious',
        i18nLabel: 'Religious'
      }, {
        key: 'gaming',
        i18nLabel: 'Gaming'
      }, {
        key: 'socialNetwork',
        i18nLabel: 'Social_Network'
      }, {
        key: 'realEstate',
        i18nLabel: 'Real_Estate'
      }, {
        key: 'tourism',
        i18nLabel: 'Tourism'
      }, {
        key: 'telecom',
        i18nLabel: 'Telecom'
      }, {
        key: 'consumerGoods',
        i18nLabel: 'Consumer_Goods'
      }, {
        key: 'financialServices',
        i18nLabel: 'Financial_Services'
      }, {
        key: 'healthcarePharmaceutical',
        i18nLabel: 'Healthcare_and_Pharmaceutical'
      }, {
        key: 'industry',
        i18nLabel: 'Industry'
      }, {
        key: 'media',
        i18nLabel: 'Media'
      }, {
        key: 'retail',
        i18nLabel: 'Retail'
      }, {
        key: 'technologyServices',
        i18nLabel: 'Technology_Services'
      }, {
        key: 'technologyProvider',
        i18nLabel: 'Technology_Provider'
      }, {
        key: 'other',
        i18nLabel: 'Other'
      }],
      wizard: {
        step: 2,
        order: 2
      }
    });
    this.add('Size', '', {
      type: 'select',
      values: [{
        key: '0',
        i18nLabel: '1-10 people'
      }, {
        key: '1',
        i18nLabel: '11-50 people'
      }, {
        key: '2',
        i18nLabel: '51-100 people'
      }, {
        key: '3',
        i18nLabel: '101-250 people'
      }, {
        key: '4',
        i18nLabel: '251-500 people'
      }, {
        key: '5',
        i18nLabel: '501-1000 people'
      }, {
        key: '6',
        i18nLabel: '1001-4000 people'
      }, {
        key: '7',
        i18nLabel: '4000 or more people'
      }],
      wizard: {
        step: 2,
        order: 3
      }
    });
    this.add('Country', '', {
      type: 'select',
      values: [{
        key: 'worldwide',
        i18nLabel: 'Worldwide'
      }, {
        key: 'afghanistan',
        i18nLabel: 'Country_Afghanistan'
      }, {
        key: 'albania',
        i18nLabel: 'Country_Albania'
      }, {
        key: 'algeria',
        i18nLabel: 'Country_Algeria'
      }, {
        key: 'americanSamoa',
        i18nLabel: 'Country_American_Samoa'
      }, {
        key: 'andorra',
        i18nLabel: 'Country_Andorra'
      }, {
        key: 'angola',
        i18nLabel: 'Country_Angola'
      }, {
        key: 'anguilla',
        i18nLabel: 'Country_Anguilla'
      }, {
        key: 'antarctica',
        i18nLabel: 'Country_Antarctica'
      }, {
        key: 'antiguaAndBarbuda',
        i18nLabel: 'Country_Antigua_and_Barbuda'
      }, {
        key: 'argentina',
        i18nLabel: 'Country_Argentina'
      }, {
        key: 'armenia',
        i18nLabel: 'Country_Armenia'
      }, {
        key: 'aruba',
        i18nLabel: 'Country_Aruba'
      }, {
        key: 'australia',
        i18nLabel: 'Country_Australia'
      }, {
        key: 'austria',
        i18nLabel: 'Country_Austria'
      }, {
        key: 'azerbaijan',
        i18nLabel: 'Country_Azerbaijan'
      }, {
        key: 'bahamas',
        i18nLabel: 'Country_Bahamas'
      }, {
        key: 'bahrain',
        i18nLabel: 'Country_Bahrain'
      }, {
        key: 'bangladesh',
        i18nLabel: 'Country_Bangladesh'
      }, {
        key: 'barbados',
        i18nLabel: 'Country_Barbados'
      }, {
        key: 'belarus',
        i18nLabel: 'Country_Belarus'
      }, {
        key: 'belgium',
        i18nLabel: 'Country_Belgium'
      }, {
        key: 'belize',
        i18nLabel: 'Country_Belize'
      }, {
        key: 'benin',
        i18nLabel: 'Country_Benin'
      }, {
        key: 'bermuda',
        i18nLabel: 'Country_Bermuda'
      }, {
        key: 'bhutan',
        i18nLabel: 'Country_Bhutan'
      }, {
        key: 'bolivia',
        i18nLabel: 'Country_Bolivia'
      }, {
        key: 'bosniaAndHerzegovina',
        i18nLabel: 'Country_Bosnia_and_Herzegovina'
      }, {
        key: 'botswana',
        i18nLabel: 'Country_Botswana'
      }, {
        key: 'bouvetIsland',
        i18nLabel: 'Country_Bouvet_Island'
      }, {
        key: 'brazil',
        i18nLabel: 'Country_Brazil'
      }, {
        key: 'britishIndianOceanTerritory',
        i18nLabel: 'Country_British_Indian_Ocean_Territory'
      }, {
        key: 'bruneiDarussalam',
        i18nLabel: 'Country_Brunei_Darussalam'
      }, {
        key: 'bulgaria',
        i18nLabel: 'Country_Bulgaria'
      }, {
        key: 'burkinaFaso',
        i18nLabel: 'Country_Burkina_Faso'
      }, {
        key: 'burundi',
        i18nLabel: 'Country_Burundi'
      }, {
        key: 'cambodia',
        i18nLabel: 'Country_Cambodia'
      }, {
        key: 'cameroon',
        i18nLabel: 'Country_Cameroon'
      }, {
        key: 'canada',
        i18nLabel: 'Country_Canada'
      }, {
        key: 'capeVerde',
        i18nLabel: 'Country_Cape_Verde'
      }, {
        key: 'caymanIslands',
        i18nLabel: 'Country_Cayman_Islands'
      }, {
        key: 'centralAfricanRepublic',
        i18nLabel: 'Country_Central_African_Republic'
      }, {
        key: 'chad',
        i18nLabel: 'Country_Chad'
      }, {
        key: 'chile',
        i18nLabel: 'Country_Chile'
      }, {
        key: 'china',
        i18nLabel: 'Country_China'
      }, {
        key: 'christmasIsland',
        i18nLabel: 'Country_Christmas_Island'
      }, {
        key: 'cocosKeelingIslands',
        i18nLabel: 'Country_Cocos_Keeling_Islands'
      }, {
        key: 'colombia',
        i18nLabel: 'Country_Colombia'
      }, {
        key: 'comoros',
        i18nLabel: 'Country_Comoros'
      }, {
        key: 'congo',
        i18nLabel: 'Country_Congo'
      }, {
        key: 'congoTheDemocraticRepublicOfThe',
        i18nLabel: 'Country_Congo_The_Democratic_Republic_of_The'
      }, {
        key: 'cookIslands',
        i18nLabel: 'Country_Cook_Islands'
      }, {
        key: 'costaRica',
        i18nLabel: 'Country_Costa_Rica'
      }, {
        key: 'coteDivoire',
        i18nLabel: 'Country_Cote_Divoire'
      }, {
        key: 'croatia',
        i18nLabel: 'Country_Croatia'
      }, {
        key: 'cuba',
        i18nLabel: 'Country_Cuba'
      }, {
        key: 'cyprus',
        i18nLabel: 'Country_Cyprus'
      }, {
        key: 'czechRepublic',
        i18nLabel: 'Country_Czech_Republic'
      }, {
        key: 'denmark',
        i18nLabel: 'Country_Denmark'
      }, {
        key: 'djibouti',
        i18nLabel: 'Country_Djibouti'
      }, {
        key: 'dominica',
        i18nLabel: 'Country_Dominica'
      }, {
        key: 'dominicanRepublic',
        i18nLabel: 'Country_Dominican_Republic'
      }, {
        key: 'ecuador',
        i18nLabel: 'Country_Ecuador'
      }, {
        key: 'egypt',
        i18nLabel: 'Country_Egypt'
      }, {
        key: 'elSalvador',
        i18nLabel: 'Country_El_Salvador'
      }, {
        key: 'equatorialGuinea',
        i18nLabel: 'Country_Equatorial_Guinea'
      }, {
        key: 'eritrea',
        i18nLabel: 'Country_Eritrea'
      }, {
        key: 'estonia',
        i18nLabel: 'Country_Estonia'
      }, {
        key: 'ethiopia',
        i18nLabel: 'Country_Ethiopia'
      }, {
        key: 'falklandIslandsMalvinas',
        i18nLabel: 'Country_Falkland_Islands_Malvinas'
      }, {
        key: 'faroeIslands',
        i18nLabel: 'Country_Faroe_Islands'
      }, {
        key: 'fiji',
        i18nLabel: 'Country_Fiji'
      }, {
        key: 'finland',
        i18nLabel: 'Country_Finland'
      }, {
        key: 'france',
        i18nLabel: 'Country_France'
      }, {
        key: 'frenchGuiana',
        i18nLabel: 'Country_French_Guiana'
      }, {
        key: 'frenchPolynesia',
        i18nLabel: 'Country_French_Polynesia'
      }, {
        key: 'frenchSouthernTerritories',
        i18nLabel: 'Country_French_Southern_Territories'
      }, {
        key: 'gabon',
        i18nLabel: 'Country_Gabon'
      }, {
        key: 'gambia',
        i18nLabel: 'Country_Gambia'
      }, {
        key: 'georgia',
        i18nLabel: 'Country_Georgia'
      }, {
        key: 'germany',
        i18nLabel: 'Country_Germany'
      }, {
        key: 'ghana',
        i18nLabel: 'Country_Ghana'
      }, {
        key: 'gibraltar',
        i18nLabel: 'Country_Gibraltar'
      }, {
        key: 'greece',
        i18nLabel: 'Country_Greece'
      }, {
        key: 'greenland',
        i18nLabel: 'Country_Greenland'
      }, {
        key: 'grenada',
        i18nLabel: 'Country_Grenada'
      }, {
        key: 'guadeloupe',
        i18nLabel: 'Country_Guadeloupe'
      }, {
        key: 'guam',
        i18nLabel: 'Country_Guam'
      }, {
        key: 'guatemala',
        i18nLabel: 'Country_Guatemala'
      }, {
        key: 'guinea',
        i18nLabel: 'Country_Guinea'
      }, {
        key: 'guineaBissau',
        i18nLabel: 'Country_Guinea_bissau'
      }, {
        key: 'guyana',
        i18nLabel: 'Country_Guyana'
      }, {
        key: 'haiti',
        i18nLabel: 'Country_Haiti'
      }, {
        key: 'heardIslandAndMcdonaldIslands',
        i18nLabel: 'Country_Heard_Island_and_Mcdonald_Islands'
      }, {
        key: 'holySeeVaticanCityState',
        i18nLabel: 'Country_Holy_See_Vatican_City_State'
      }, {
        key: 'honduras',
        i18nLabel: 'Country_Honduras'
      }, {
        key: 'hongKong',
        i18nLabel: 'Country_Hong_Kong'
      }, {
        key: 'hungary',
        i18nLabel: 'Country_Hungary'
      }, {
        key: 'iceland',
        i18nLabel: 'Country_Iceland'
      }, {
        key: 'india',
        i18nLabel: 'Country_India'
      }, {
        key: 'indonesia',
        i18nLabel: 'Country_Indonesia'
      }, {
        key: 'iranIslamicRepublicOf',
        i18nLabel: 'Country_Iran_Islamic_Republic_of'
      }, {
        key: 'iraq',
        i18nLabel: 'Country_Iraq'
      }, {
        key: 'ireland',
        i18nLabel: 'Country_Ireland'
      }, {
        key: 'israel',
        i18nLabel: 'Country_Israel'
      }, {
        key: 'italy',
        i18nLabel: 'Country_Italy'
      }, {
        key: 'jamaica',
        i18nLabel: 'Country_Jamaica'
      }, {
        key: 'japan',
        i18nLabel: 'Country_Japan'
      }, {
        key: 'jordan',
        i18nLabel: 'Country_Jordan'
      }, {
        key: 'kazakhstan',
        i18nLabel: 'Country_Kazakhstan'
      }, {
        key: 'kenya',
        i18nLabel: 'Country_Kenya'
      }, {
        key: 'kiribati',
        i18nLabel: 'Country_Kiribati'
      }, {
        key: 'koreaDemocraticPeoplesRepublicOf',
        i18nLabel: 'Country_Korea_Democratic_Peoples_Republic_of'
      }, {
        key: 'koreaRepublicOf',
        i18nLabel: 'Country_Korea_Republic_of'
      }, {
        key: 'kuwait',
        i18nLabel: 'Country_Kuwait'
      }, {
        key: 'kyrgyzstan',
        i18nLabel: 'Country_Kyrgyzstan'
      }, {
        key: 'laoPeoplesDemocraticRepublic',
        i18nLabel: 'Country_Lao_Peoples_Democratic_Republic'
      }, {
        key: 'latvia',
        i18nLabel: 'Country_Latvia'
      }, {
        key: 'lebanon',
        i18nLabel: 'Country_Lebanon'
      }, {
        key: 'lesotho',
        i18nLabel: 'Country_Lesotho'
      }, {
        key: 'liberia',
        i18nLabel: 'Country_Liberia'
      }, {
        key: 'libyanArabJamahiriya',
        i18nLabel: 'Country_Libyan_Arab_Jamahiriya'
      }, {
        key: 'liechtenstein',
        i18nLabel: 'Country_Liechtenstein'
      }, {
        key: 'lithuania',
        i18nLabel: 'Country_Lithuania'
      }, {
        key: 'luxembourg',
        i18nLabel: 'Country_Luxembourg'
      }, {
        key: 'macao',
        i18nLabel: 'Country_Macao'
      }, {
        key: 'macedoniaTheFormerYugoslavRepublicOf',
        i18nLabel: 'Country_Macedonia_The_Former_Yugoslav_Republic_of'
      }, {
        key: 'madagascar',
        i18nLabel: 'Country_Madagascar'
      }, {
        key: 'malawi',
        i18nLabel: 'Country_Malawi'
      }, {
        key: 'malaysia',
        i18nLabel: 'Country_Malaysia'
      }, {
        key: 'maldives',
        i18nLabel: 'Country_Maldives'
      }, {
        key: 'mali',
        i18nLabel: 'Country_Mali'
      }, {
        key: 'malta',
        i18nLabel: 'Country_Malta'
      }, {
        key: 'marshallIslands',
        i18nLabel: 'Country_Marshall_Islands'
      }, {
        key: 'martinique',
        i18nLabel: 'Country_Martinique'
      }, {
        key: 'mauritania',
        i18nLabel: 'Country_Mauritania'
      }, {
        key: 'mauritius',
        i18nLabel: 'Country_Mauritius'
      }, {
        key: 'mayotte',
        i18nLabel: 'Country_Mayotte'
      }, {
        key: 'mexico',
        i18nLabel: 'Country_Mexico'
      }, {
        key: 'micronesiaFederatedStatesOf',
        i18nLabel: 'Country_Micronesia_Federated_States_of'
      }, {
        key: 'moldovaRepublicOf',
        i18nLabel: 'Country_Moldova_Republic_of'
      }, {
        key: 'monaco',
        i18nLabel: 'Country_Monaco'
      }, {
        key: 'mongolia',
        i18nLabel: 'Country_Mongolia'
      }, {
        key: 'montserrat',
        i18nLabel: 'Country_Montserrat'
      }, {
        key: 'morocco',
        i18nLabel: 'Country_Morocco'
      }, {
        key: 'mozambique',
        i18nLabel: 'Country_Mozambique'
      }, {
        key: 'myanmar',
        i18nLabel: 'Country_Myanmar'
      }, {
        key: 'namibia',
        i18nLabel: 'Country_Namibia'
      }, {
        key: 'nauru',
        i18nLabel: 'Country_Nauru'
      }, {
        key: 'nepal',
        i18nLabel: 'Country_Nepal'
      }, {
        key: 'netherlands',
        i18nLabel: 'Country_Netherlands'
      }, {
        key: 'netherlandsAntilles',
        i18nLabel: 'Country_Netherlands_Antilles'
      }, {
        key: 'newCaledonia',
        i18nLabel: 'Country_New_Caledonia'
      }, {
        key: 'newZealand',
        i18nLabel: 'Country_New_Zealand'
      }, {
        key: 'nicaragua',
        i18nLabel: 'Country_Nicaragua'
      }, {
        key: 'niger',
        i18nLabel: 'Country_Niger'
      }, {
        key: 'nigeria',
        i18nLabel: 'Country_Nigeria'
      }, {
        key: 'niue',
        i18nLabel: 'Country_Niue'
      }, {
        key: 'norfolkIsland',
        i18nLabel: 'Country_Norfolk_Island'
      }, {
        key: 'northernMarianaIslands',
        i18nLabel: 'Country_Northern_Mariana_Islands'
      }, {
        key: 'norway',
        i18nLabel: 'Country_Norway'
      }, {
        key: 'oman',
        i18nLabel: 'Country_Oman'
      }, {
        key: 'pakistan',
        i18nLabel: 'Country_Pakistan'
      }, {
        key: 'palau',
        i18nLabel: 'Country_Palau'
      }, {
        key: 'palestinianTerritoryOccupied',
        i18nLabel: 'Country_Palestinian_Territory_Occupied'
      }, {
        key: 'panama',
        i18nLabel: 'Country_Panama'
      }, {
        key: 'papuaNewGuinea',
        i18nLabel: 'Country_Papua_New_Guinea'
      }, {
        key: 'paraguay',
        i18nLabel: 'Country_Paraguay'
      }, {
        key: 'peru',
        i18nLabel: 'Country_Peru'
      }, {
        key: 'philippines',
        i18nLabel: 'Country_Philippines'
      }, {
        key: 'pitcairn',
        i18nLabel: 'Country_Pitcairn'
      }, {
        key: 'poland',
        i18nLabel: 'Country_Poland'
      }, {
        key: 'portugal',
        i18nLabel: 'Country_Portugal'
      }, {
        key: 'puertoRico',
        i18nLabel: 'Country_Puerto_Rico'
      }, {
        key: 'qatar',
        i18nLabel: 'Country_Qatar'
      }, {
        key: 'reunion',
        i18nLabel: 'Country_Reunion'
      }, {
        key: 'romania',
        i18nLabel: 'Country_Romania'
      }, {
        key: 'russianFederation',
        i18nLabel: 'Country_Russian_Federation'
      }, {
        key: 'rwanda',
        i18nLabel: 'Country_Rwanda'
      }, {
        key: 'saintHelena',
        i18nLabel: 'Country_Saint_Helena'
      }, {
        key: 'saintKittsAndNevis',
        i18nLabel: 'Country_Saint_Kitts_and_Nevis'
      }, {
        key: 'saintLucia',
        i18nLabel: 'Country_Saint_Lucia'
      }, {
        key: 'saintPierreAndMiquelon',
        i18nLabel: 'Country_Saint_Pierre_and_Miquelon'
      }, {
        key: 'saintVincentAndTheGrenadines',
        i18nLabel: 'Country_Saint_Vincent_and_The_Grenadines'
      }, {
        key: 'samoa',
        i18nLabel: 'Country_Samoa'
      }, {
        key: 'sanMarino',
        i18nLabel: 'Country_San_Marino'
      }, {
        key: 'saoTomeAndPrincipe',
        i18nLabel: 'Country_Sao_Tome_and_Principe'
      }, {
        key: 'saudiArabia',
        i18nLabel: 'Country_Saudi_Arabia'
      }, {
        key: 'senegal',
        i18nLabel: 'Country_Senegal'
      }, {
        key: 'serbiaAndMontenegro',
        i18nLabel: 'Country_Serbia_and_Montenegro'
      }, {
        key: 'seychelles',
        i18nLabel: 'Country_Seychelles'
      }, {
        key: 'sierraLeone',
        i18nLabel: 'Country_Sierra_Leone'
      }, {
        key: 'singapore',
        i18nLabel: 'Country_Singapore'
      }, {
        key: 'slovakia',
        i18nLabel: 'Country_Slovakia'
      }, {
        key: 'slovenia',
        i18nLabel: 'Country_Slovenia'
      }, {
        key: 'solomonIslands',
        i18nLabel: 'Country_Solomon_Islands'
      }, {
        key: 'somalia',
        i18nLabel: 'Country_Somalia'
      }, {
        key: 'southAfrica',
        i18nLabel: 'Country_South_Africa'
      }, {
        key: 'southGeorgiaAndTheSouthSandwichIslands',
        i18nLabel: 'Country_South_Georgia_and_The_South_Sandwich_Islands'
      }, {
        key: 'spain',
        i18nLabel: 'Country_Spain'
      }, {
        key: 'sriLanka',
        i18nLabel: 'Country_Sri_Lanka'
      }, {
        key: 'sudan',
        i18nLabel: 'Country_Sudan'
      }, {
        key: 'suriname',
        i18nLabel: 'Country_Suriname'
      }, {
        key: 'svalbardAndJanMayen',
        i18nLabel: 'Country_Svalbard_and_Jan_Mayen'
      }, {
        key: 'swaziland',
        i18nLabel: 'Country_Swaziland'
      }, {
        key: 'sweden',
        i18nLabel: 'Country_Sweden'
      }, {
        key: 'switzerland',
        i18nLabel: 'Country_Switzerland'
      }, {
        key: 'syrianArabRepublic',
        i18nLabel: 'Country_Syrian_Arab_Republic'
      }, {
        key: 'taiwanProvinceOfChina',
        i18nLabel: 'Country_Taiwan_Province_of_China'
      }, {
        key: 'tajikistan',
        i18nLabel: 'Country_Tajikistan'
      }, {
        key: 'tanzaniaUnitedRepublicOf',
        i18nLabel: 'Country_Tanzania_United_Republic_of'
      }, {
        key: 'thailand',
        i18nLabel: 'Country_Thailand'
      }, {
        key: 'timorLeste',
        i18nLabel: 'Country_Timor_leste'
      }, {
        key: 'togo',
        i18nLabel: 'Country_Togo'
      }, {
        key: 'tokelau',
        i18nLabel: 'Country_Tokelau'
      }, {
        key: 'tonga',
        i18nLabel: 'Country_Tonga'
      }, {
        key: 'trinidadAndTobago',
        i18nLabel: 'Country_Trinidad_and_Tobago'
      }, {
        key: 'tunisia',
        i18nLabel: 'Country_Tunisia'
      }, {
        key: 'turkey',
        i18nLabel: 'Country_Turkey'
      }, {
        key: 'turkmenistan',
        i18nLabel: 'Country_Turkmenistan'
      }, {
        key: 'turksAndCaicosIslands',
        i18nLabel: 'Country_Turks_and_Caicos_Islands'
      }, {
        key: 'tuvalu',
        i18nLabel: 'Country_Tuvalu'
      }, {
        key: 'uganda',
        i18nLabel: 'Country_Uganda'
      }, {
        key: 'ukraine',
        i18nLabel: 'Country_Ukraine'
      }, {
        key: 'unitedArabEmirates',
        i18nLabel: 'Country_United_Arab_Emirates'
      }, {
        key: 'unitedKingdom',
        i18nLabel: 'Country_United_Kingdom'
      }, {
        key: 'unitedStates',
        i18nLabel: 'Country_United_States'
      }, {
        key: 'unitedStatesMinorOutlyingIslands',
        i18nLabel: 'Country_United_States_Minor_Outlying_Islands'
      }, {
        key: 'uruguay',
        i18nLabel: 'Country_Uruguay'
      }, {
        key: 'uzbekistan',
        i18nLabel: 'Country_Uzbekistan'
      }, {
        key: 'vanuatu',
        i18nLabel: 'Country_Vanuatu'
      }, {
        key: 'venezuela',
        i18nLabel: 'Country_Venezuela'
      }, {
        key: 'vietNam',
        i18nLabel: 'Country_Viet_Nam'
      }, {
        key: 'virginIslandsBritish',
        i18nLabel: 'Country_Virgin_Islands_British'
      }, {
        key: 'virginIslandsUS',
        i18nLabel: 'Country_Virgin_Islands_US'
      }, {
        key: 'wallisAndFutuna',
        i18nLabel: 'Country_Wallis_and_Futuna'
      }, {
        key: 'westernSahara',
        i18nLabel: 'Country_Western_Sahara'
      }, {
        key: 'yemen',
        i18nLabel: 'Country_Yemen'
      }, {
        key: 'zambia',
        i18nLabel: 'Country_Zambia'
      }, {
        key: 'zimbabwe',
        i18nLabel: 'Country_Zimbabwe'
      }],
      wizard: {
        step: 2,
        order: 4
      }
    });
    this.add('Website', '', {
      type: 'string',
      wizard: {
        step: 2,
        order: 5
      }
    });
    this.add('Server_Type', '', {
      type: 'select',
      values: [{
        key: 'privateTeam',
        i18nLabel: 'Private_Team'
      }, {
        key: 'publicCommunity',
        i18nLabel: 'Public_Community'
      }],
      wizard: {
        step: 3,
        order: 2
      }
    });
    this.add('Allow_Marketing_Emails', true, {
      type: 'boolean'
    });
  });
});
RocketChat.settings.init();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"email.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/startup/email.js                                                                     //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.settings.addGroup('Email', function () {
  this.section('Style', function () {
    this.add('email_style', `html, body, .body { font-family: -apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,'Helvetica Neue','Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol','Meiryo UI',Arial,sans-serif; }

	body, .body {
		width: 100%;
		height: 100%;
	}

	a {
		color: #1D74F5;
		font-weight: bold;
		text-decoration: none;
		line-height: 1.8;
		padding-left: 2px;
		padding-right: 2px;
	}
	p {
		margin: 1rem 0;
	}
	.btn {
		text-decoration: none;
		color: #FFF;
		background-color: #1D74F5;
		padding: 12px 18px;
		font-weight: 500;
		font-size: 14px;
		margin-top: 8px;
		text-align: center;
		cursor: pointer;
		display: inline-block;
		border-radius: 2px;
	}

	ol, ul, div {
		list-style-position: inside;
		padding: 16px 0 ;
	}
	li {
		padding: 8px 0;
		font-weight: 600;
	}
	.wrap {
		width: 100%;
		clear: both;
	}

	h1,h2,h3,h4,h5,h6 {
		line-height: 1.1; margin:0 0 16px 0; color: #000;
	}

	h1 { font-weight: 100; font-size: 44px;}
	h2 { font-weight: 600; font-size: 30px; color: #2F343D;}
	h3 { font-weight: 100; font-size: 27px;}
	h4 { font-weight: 500; font-size: 14px; color: #2F343D;}
	h5 { font-weight: 500; font-size: 13px; line-height: 1.6; color: #2F343D}
	h6 { font-weight: 500; font-size: 10px; color: #6c727A; line-height: 1.7;}

	.container {
		display: block;
		max-width: 640px;
		margin: 0 auto; /* makes it centered */
		clear: both;
		border-radius: 2px;
	}

	.content {
		padding: 36px;
	}

	.header-content {
		padding-top: 36px;
		padding-bottom: 36px;
		padding-left: 36px;
		padding-right: 36px;
		max-width: 640px;
		margin: 0 auto;
		display: block;
	}

	.lead {
		margin-bottom: 32px;
		color: #2f343d;
		line-height: 22px;
		font-size: 14px;
	}

	.advice {
		height: 20px;
		color: #9EA2A8;
		font-size: 12px;
		font-weight: normal;
		margin-bottom: 0;
	}
	.social {
		font-size: 12px
	}
			`, {
      type: 'code',
      code: 'css',
      multiline: true,
      i18nLabel: 'email_style_label',
      i18nDescription: 'email_style_description'
    });
  });
  this.section('Subject', function () {
    this.add('Offline_DM_Email', '[[Site_Name]] You have been direct messaged by [User]', {
      type: 'code',
      code: 'text',
      multiline: true,
      i18nLabel: 'Offline_DM_Email',
      i18nDescription: 'Offline_Email_Subject_Description'
    });
    this.add('Offline_Mention_Email', '[[Site_Name]] You have been mentioned by [User] in #[Room]', {
      type: 'code',
      code: 'text',
      multiline: true,
      i18nLabel: 'Offline_Mention_Email',
      i18nDescription: 'Offline_Email_Subject_Description'
    });
    this.add('Offline_Mention_All_Email', '[User] has posted a message in #[Room]', {
      type: 'code',
      code: 'text',
      multiline: true,
      i18nLabel: 'Offline_Mention_All_Email',
      i18nDescription: 'Offline_Email_Subject_Description'
    });
  });
  this.section('Header_and_Footer', function () {
    this.add('Email_Header', '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><!-- If you delete this tag, the sky will fall on your head --><meta name="viewport" content="width=device-width" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Rocket.Chat Cloud</title></head><body bgcolor="#F7F8FA"><table class="body" bgcolor="#F7F8FA" width="100%"><tr><td><!-- HEADER --><table class="wrap" bgcolor="#F7F8FA"><tr><td class="header container"><div class="header-content"><table bgcolor="#F7F8FA" width="100%"><tr><td><img src="[Site_Url_Slash]assets/logo.png" alt="Rocket.chat" width="150px" /></td></tr></table></div></td></tr></table><!-- /HEADER --></td></tr><tr><td><!-- BODY --><table class="wrap"><tr><td class="container" bgcolor="#FFFFFF"><div class="content"><table><tr><td>', {
      type: 'code',
      code: 'text/html',
      multiline: true,
      i18nLabel: 'Header'
    });
    this.add('Email_Footer', '</td></tr></table></div></td></tr></table><!-- /BODY --></td></tr><tr style="margin: 0; padding: 0;"><td style="margin: 0; padding: 0;"><!-- FOOTER --><table class="wrap"><tr><td class="container"><!-- content --><div class="content"><table width="100%"><tr><td align="center" class="social"><a href="https://rocket.chat/blog">Blog</a> | <a href="https://github.com/RocketChat">Github</a> | <a href="https://www.facebook.com/RocketChatApp">Facebook</a> | <a href="https://www.instagram.com/rocket.chat">Instagram</a></td></tr><tr><td align="center"><h6>© Rocket.Chat Technologies Corp.</h6><h6>Made with ❤️ in 🇧🇷 🇨🇦 🇩🇪 🇮🇳 🇬🇧 🇺🇸 </h6></td></tr></table></div><!-- /content --></td></tr></table><!-- /FOOTER --></td></tr></table></body></html>', {
      type: 'code',
      code: 'text/html',
      multiline: true,
      i18nLabel: 'Footer'
    });
    this.add('Email_Footer_Direct_Reply', '<p class="advice">{Direct_Reply_Advice}</p>', {
      type: 'code',
      code: 'text/html',
      multiline: true,
      i18nLabel: 'Footer_Direct_Reply'
    });
  });
  this.section('Direct_Reply', function () {
    this.add('Direct_Reply_Enable', false, {
      type: 'boolean',
      env: true,
      i18nLabel: 'Direct_Reply_Enable'
    });
    this.add('Direct_Reply_Debug', false, {
      type: 'boolean',
      env: true,
      i18nLabel: 'Direct_Reply_Debug',
      i18nDescription: 'Direct_Reply_Debug_Description'
    });
    this.add('Direct_Reply_Protocol', 'IMAP', {
      type: 'select',
      values: [{
        key: 'IMAP',
        i18nLabel: 'IMAP'
      }, {
        key: 'POP',
        i18nLabel: 'POP'
      }],
      env: true,
      i18nLabel: 'Protocol'
    });
    this.add('Direct_Reply_Host', '', {
      type: 'string',
      env: true,
      i18nLabel: 'Host'
    });
    this.add('Direct_Reply_Port', '', {
      type: 'string',
      env: true,
      i18nLabel: 'Port'
    });
    this.add('Direct_Reply_IgnoreTLS', false, {
      type: 'boolean',
      env: true,
      i18nLabel: 'IgnoreTLS'
    });
    this.add('Direct_Reply_Frequency', 5, {
      type: 'int',
      env: true,
      i18nLabel: 'Direct_Reply_Frequency',
      enableQuery: {
        _id: 'Direct_Reply_Protocol',
        value: 'POP'
      }
    });
    this.add('Direct_Reply_Delete', true, {
      type: 'boolean',
      env: true,
      i18nLabel: 'Direct_Reply_Delete',
      enableQuery: {
        _id: 'Direct_Reply_Protocol',
        value: 'IMAP'
      }
    });
    this.add('Direct_Reply_Separator', '+', {
      type: 'select',
      values: [{
        key: '!',
        i18nLabel: '!'
      }, {
        key: '#',
        i18nLabel: '#'
      }, {
        key: '$',
        i18nLabel: '$'
      }, {
        key: '%',
        i18nLabel: '%'
      }, {
        key: '&',
        i18nLabel: '&'
      }, {
        key: '\'',
        i18nLabel: '\''
      }, {
        key: '*',
        i18nLabel: '*'
      }, {
        key: '+',
        i18nLabel: '+'
      }, {
        key: '-',
        i18nLabel: '-'
      }, {
        key: '/',
        i18nLabel: '/'
      }, {
        key: '=',
        i18nLabel: '='
      }, {
        key: '?',
        i18nLabel: '?'
      }, {
        key: '^',
        i18nLabel: '^'
      }, {
        key: '_',
        i18nLabel: '_'
      }, {
        key: '`',
        i18nLabel: '`'
      }, {
        key: '{',
        i18nLabel: '{'
      }, {
        key: '|',
        i18nLabel: '|'
      }, {
        key: '}',
        i18nLabel: '}'
      }, {
        key: '~',
        i18nLabel: '~'
      }],
      env: true,
      i18nLabel: 'Direct_Reply_Separator'
    });
    this.add('Direct_Reply_Username', '', {
      type: 'string',
      env: true,
      i18nLabel: 'Username',
      placeholder: 'email@domain'
    });
    this.add('Direct_Reply_ReplyTo', '', {
      type: 'string',
      env: true,
      i18nLabel: 'ReplyTo',
      placeholder: 'email@domain'
    });
    return this.add('Direct_Reply_Password', '', {
      type: 'password',
      env: true,
      i18nLabel: 'Password'
    });
  });
  this.section('SMTP', function () {
    this.add('SMTP_Protocol', 'smtp', {
      type: 'select',
      values: [{
        key: 'smtp',
        i18nLabel: 'smtp'
      }, {
        key: 'smtps',
        i18nLabel: 'smtps'
      }],
      env: true,
      i18nLabel: 'Protocol'
    });
    this.add('SMTP_Host', '', {
      type: 'string',
      env: true,
      i18nLabel: 'Host'
    });
    this.add('SMTP_Port', '', {
      type: 'string',
      env: true,
      i18nLabel: 'Port'
    });
    this.add('SMTP_IgnoreTLS', true, {
      type: 'boolean',
      env: true,
      i18nLabel: 'IgnoreTLS',
      enableQuery: {
        _id: 'SMTP_Protocol',
        value: 'smtp'
      }
    });
    this.add('SMTP_Pool', true, {
      type: 'boolean',
      env: true,
      i18nLabel: 'Pool'
    });
    this.add('SMTP_Username', '', {
      type: 'string',
      env: true,
      i18nLabel: 'Username',
      autocomplete: false
    });
    this.add('SMTP_Password', '', {
      type: 'password',
      env: true,
      i18nLabel: 'Password',
      autocomplete: false
    });
    this.add('From_Email', '', {
      type: 'string',
      placeholder: 'email@domain'
    });
    return this.add('SMTP_Test_Button', 'sendSMTPTestEmail', {
      type: 'action',
      actionText: 'Send_a_test_mail_to_my_user'
    });
  });
  this.section('Registration', function () {
    this.add('Accounts_Enrollment_Email_Subject', '{Welcome_to Site_name}', {
      type: 'string',
      i18nLabel: 'Subject'
    });
    this.add('Accounts_Enrollment_Email', '<h2>{Welcome_to Site_Name}</h2><p>{Visit_Site_Url_and_try_the_best_open_source_chat_solution_available_today}</p><a class="btn" target="_blank" href="[Site_URL]">{Login}</a>', {
      type: 'code',
      code: 'text/html',
      multiline: true,
      i18nLabel: 'Body'
    });
  });
  this.section('Registration_via_Admin', function () {
    this.add('Accounts_UserAddedEmail_Subject', '{Welcome_to Site_Name}', {
      type: 'string',
      i18nLabel: 'Subject'
    });
    this.add('Accounts_UserAddedEmail_Email', '<h2>{Welcome_to Site_Name}</h2><p>{Visit_Site_Url_and_try_the_best_open_source_chat_solution_available_today}</p><a class="btn" target="_blank" href="[Site_URL]">{Login}</a>', {
      type: 'code',
      code: 'text/html',
      multiline: true,
      i18nLabel: 'Body',
      i18nDescription: 'Accounts_UserAddedEmail_Description'
    });
  });
  this.section('Verification', function () {
    this.add('Verification_Email_Subject', '{Verification_Email_Subject}', {
      type: 'string',
      i18nLabel: 'Subject'
    });
    this.add('Verification_Email', '<h2>{Hi_username}</h2><p>{Verification_email_body}</p><a class="btn" target="_blank" href="[Verification_Url]">{Verify_your_email}</a>', {
      type: 'code',
      code: 'text/html',
      multiline: true,
      i18nLabel: 'Body',
      i18nDescription: 'Verification_Description'
    });
  });
  this.section('Invitation', function () {
    this.add('Invitation_Subject', '{Invitation_Subject_Default}', {
      type: 'string',
      i18nLabel: 'Subject'
    });
    this.add('Invitation_Email', '<h2>{Welcome_to Site_Name}</h2><p>{Visit_Site_Url_and_try_the_best_open_source_chat_solution_available_today}</p><a class="btn" href="[Site_URL]">{Join_Chat}</a>', {
      type: 'code',
      code: 'text/html',
      multiline: true,
      i18nLabel: 'Body',
      i18nDescription: 'Invitation_Email_Description'
    });
  });
  this.section('Forgot_password_section', function () {
    this.add('Forgot_Password_Email_Subject', '{Forgot_Password_Email_Subject}', {
      type: 'string',
      i18nLabel: 'Subject'
    });
    this.add('Forgot_Password_Email', '<h2>{Forgot_password}</h2><p>{Lets_get_you_new_one}</p><a class="btn" href="[Forgot_Password_Url]">{Reset}</a><p class="advice">{If_you_didnt_ask_for_reset_ignore_this_email}</p>', {
      type: 'code',
      code: 'text/html',
      multiline: true,
      i18nLabel: 'Body',
      i18nDescription: 'Forgot_Password_Description'
    });
  });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"publications":{"settings.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/publications/settings.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  'public-settings/get'(updatedAt) {
    this.unblock();
    const records = RocketChat.models.Settings.findNotHiddenPublic().fetch();

    if (updatedAt instanceof Date) {
      return {
        update: records.filter(function (record) {
          return record._updatedAt > updatedAt;
        }),
        remove: RocketChat.models.Settings.trashFindDeletedAfter(updatedAt, {
          hidden: {
            $ne: true
          },
          public: true
        }, {
          fields: {
            _id: 1,
            _deletedAt: 1
          }
        }).fetch()
      };
    }

    return records;
  },

  'private-settings/get'(updatedAt) {
    if (!Meteor.userId()) {
      return [];
    }

    this.unblock();

    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'view-privileged-setting')) {
      return [];
    }

    const records = RocketChat.models.Settings.findNotHidden().fetch();

    if (updatedAt instanceof Date) {
      return {
        update: records.filter(function (record) {
          return record._updatedAt > updatedAt;
        }),
        remove: RocketChat.models.Settings.trashFindDeletedAfter(updatedAt, {
          hidden: {
            $ne: true
          }
        }, {
          fields: {
            _id: 1,
            _deletedAt: 1
          }
        }).fetch()
      };
    }

    return records;
  }

});
RocketChat.models.Settings.on('change', ({
  clientAction,
  id,
  data
}) => {
  switch (clientAction) {
    case 'updated':
    case 'inserted':
      const setting = data || RocketChat.models.Settings.findOneById(id);
      const value = {
        _id: setting._id,
        value: setting.value,
        editor: setting.editor,
        properties: setting.properties
      };

      if (setting.public === true) {
        RocketChat.Notifications.notifyAllInThisInstance('public-settings-changed', clientAction, value);
      } else {
        RocketChat.Notifications.notifyLoggedInThisInstance('private-settings-changed', clientAction, setting);
      }

      break;

    case 'removed':
      RocketChat.Notifications.notifyLoggedInThisInstance('private-settings-changed', clientAction, {
        _id: id
      });
      RocketChat.Notifications.notifyAllInThisInstance('public-settings-changed', clientAction, {
        _id: id
      });
      break;
  }
});
RocketChat.Notifications.streamAll.allowRead('private-settings-changed', function () {
  if (this.userId == null) {
    return false;
  }

  return RocketChat.authz.hasPermission(this.userId, 'view-privileged-setting');
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"methods":{"addOAuthService.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/addOAuthService.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);
Meteor.methods({
  addOAuthService(name) {
    check(name, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'addOAuthService'
      });
    }

    if (RocketChat.authz.hasPermission(Meteor.userId(), 'add-oauth-service') !== true) {
      throw new Meteor.Error('error-action-not-allowed', 'Adding OAuth Services is not allowed', {
        method: 'addOAuthService',
        action: 'Adding_OAuth_Services'
      });
    }

    name = name.toLowerCase().replace(/[^a-z0-9_]/g, '');
    name = s.capitalize(name);
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}`, false, {
      type: 'boolean',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Enable',
      persistent: true
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-url`, '', {
      type: 'string',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'URL',
      persistent: true
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-token_path`, '/oauth/token', {
      type: 'string',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Token_Path',
      persistent: true
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-token_sent_via`, 'payload', {
      type: 'select',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Token_Sent_Via',
      persistent: true,
      values: [{
        key: 'header',
        i18nLabel: 'Header'
      }, {
        key: 'payload',
        i18nLabel: 'Payload'
      }]
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-identity_token_sent_via`, 'default', {
      type: 'select',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Identity_Token_Sent_Via',
      persistent: true,
      values: [{
        key: 'default',
        i18nLabel: 'Same_As_Token_Sent_Via'
      }, {
        key: 'header',
        i18nLabel: 'Header'
      }, {
        key: 'payload',
        i18nLabel: 'Payload'
      }]
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-identity_path`, '/me', {
      type: 'string',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Identity_Path',
      persistent: true
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-authorize_path`, '/oauth/authorize', {
      type: 'string',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Authorize_Path',
      persistent: true
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-scope`, 'openid', {
      type: 'string',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Scope',
      persistent: true
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-id`, '', {
      type: 'string',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_id',
      persistent: true
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-secret`, '', {
      type: 'string',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Secret',
      persistent: true
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-login_style`, 'popup', {
      type: 'select',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Login_Style',
      persistent: true,
      values: [{
        key: 'redirect',
        i18nLabel: 'Redirect'
      }, {
        key: 'popup',
        i18nLabel: 'Popup'
      }, {
        key: '',
        i18nLabel: 'Default'
      }]
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-button_label_text`, '', {
      type: 'string',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Button_Label_Text',
      persistent: true
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-button_label_color`, '#FFFFFF', {
      type: 'string',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Button_Label_Color',
      persistent: true
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-button_color`, '#13679A', {
      type: 'string',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Button_Color',
      persistent: true
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-username_field`, '', {
      type: 'string',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Username_Field',
      persistent: true
    });
    RocketChat.settings.add(`Accounts_OAuth_Custom-${name}-merge_users`, false, {
      type: 'boolean',
      group: 'OAuth',
      section: `Custom OAuth: ${name}`,
      i18nLabel: 'Accounts_OAuth_Custom_Merge_Users',
      persistent: true
    });
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"refreshOAuthService.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/refreshOAuthService.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  refreshOAuthService() {
    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'refreshOAuthService'
      });
    }

    if (RocketChat.authz.hasPermission(Meteor.userId(), 'add-oauth-service') !== true) {
      throw new Meteor.Error('error-action-not-allowed', 'Refresh OAuth Services is not allowed', {
        method: 'refreshOAuthService',
        action: 'Refreshing_OAuth_Services'
      });
    }

    ServiceConfiguration.configurations.remove({});
    RocketChat.models.Settings.update({
      _id: /^Accounts_OAuth_.+/
    }, {
      $set: {
        _updatedAt: new Date()
      }
    }, {
      multi: true
    });
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUserToRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/addUserToRoom.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  addUserToRoom(data) {
    return Meteor.call('addUsersToRoom', {
      rid: data.rid,
      users: [data.username]
    });
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"addUsersToRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/addUsersToRoom.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  addUsersToRoom(data = {}) {
    // Validate user and room
    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'addUsersToRoom'
      });
    }

    if (!Match.test(data.rid, String)) {
      throw new Meteor.Error('error-invalid-room', 'Invalid room', {
        method: 'addUsersToRoom'
      });
    } // Get user and room details


    const room = RocketChat.models.Rooms.findOneById(data.rid);
    const userId = Meteor.userId();
    const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(data.rid, userId, {
      fields: {
        _id: 1
      }
    });
    const userInRoom = subscription != null; // Can't add to direct room ever

    if (room.t === 'd') {
      throw new Meteor.Error('error-cant-invite-for-direct-room', 'Can\'t invite user to direct rooms', {
        method: 'addUsersToRoom'
      });
    } // Can add to any room you're in, with permission, otherwise need specific room type permission


    let canAddUser = false;

    if (userInRoom && RocketChat.authz.hasPermission(userId, 'add-user-to-joined-room', room._id)) {
      canAddUser = true;
    } else if (room.t === 'c' && RocketChat.authz.hasPermission(userId, 'add-user-to-any-c-room')) {
      canAddUser = true;
    } else if (room.t === 'p' && RocketChat.authz.hasPermission(userId, 'add-user-to-any-p-room')) {
      canAddUser = true;
    } // Adding wasn't allowed


    if (!canAddUser) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'addUsersToRoom'
      });
    } // Missing the users to be added


    if (!Array.isArray(data.users)) {
      throw new Meteor.Error('error-invalid-arguments', 'Invalid arguments', {
        method: 'addUsersToRoom'
      });
    } // Validate each user, then add to room


    const user = Meteor.user();
    data.users.forEach(username => {
      const newUser = RocketChat.models.Users.findOneByUsername(username);

      if (!newUser) {
        throw new Meteor.Error('error-invalid-username', 'Invalid username', {
          method: 'addUsersToRoom'
        });
      }

      RocketChat.addUserToRoom(data.rid, newUser, user);
    });
    return true;
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"archiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/archiveRoom.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  archiveRoom(rid) {
    check(rid, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'archiveRoom'
      });
    }

    const room = RocketChat.models.Rooms.findOneById(rid);

    if (!room) {
      throw new Meteor.Error('error-invalid-room', 'Invalid room', {
        method: 'archiveRoom'
      });
    }

    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'archive-room', room._id)) {
      throw new Meteor.Error('error-not-authorized', 'Not authorized', {
        method: 'archiveRoom'
      });
    }

    if (room.t === 'd') {
      throw new Meteor.Error('error-direct-message-room', 'Direct Messages can not be archived', {
        method: 'archiveRoom'
      });
    }

    return RocketChat.archiveRoom(rid);
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"blockUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/blockUser.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  blockUser({
    rid,
    blocked
  }) {
    check(rid, String);
    check(blocked, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'blockUser'
      });
    }

    const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, Meteor.userId());
    const subscription2 = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, blocked);

    if (!subscription || !subscription2) {
      throw new Meteor.Error('error-invalid-room', 'Invalid room', {
        method: 'blockUser'
      });
    }

    RocketChat.models.Subscriptions.setBlockedByRoomId(rid, blocked, Meteor.userId());
    return true;
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkRegistrationSecretURL.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/checkRegistrationSecretURL.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  checkRegistrationSecretURL(hash) {
    check(hash, String);
    return hash === RocketChat.settings.get('Accounts_RegistrationForm_SecretURL');
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"checkUsernameAvailability.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/checkUsernameAvailability.js                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  checkUsernameAvailability(username) {
    check(username, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'setUsername'
      });
    }

    const user = Meteor.user();

    if (user.username && !RocketChat.settings.get('Accounts_AllowUsernameChange')) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'setUsername'
      });
    }

    if (user.username === username) {
      return true;
    }

    return RocketChat.checkUsernameAvailability(username);
  }

});
RocketChat.RateLimiter.limitMethod('checkUsernameAvailability', 1, 1000, {
  userId() {
    return true;
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"cleanRoomHistory.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/cleanRoomHistory.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* globals FileUpload */
Meteor.methods({
  cleanRoomHistory({
    roomId,
    latest,
    oldest,
    inclusive = true,
    limit,
    excludePinned = false,
    filesOnly = false,
    fromUsers = []
  }) {
    check(roomId, String);
    check(latest, Date);
    check(oldest, Date);
    check(inclusive, Boolean);
    check(limit, Match.Maybe(Number));
    check(excludePinned, Match.Maybe(Boolean));
    check(filesOnly, Match.Maybe(Boolean));
    check(fromUsers, Match.Maybe([String]));
    const userId = Meteor.userId();

    if (!userId) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'cleanRoomHistory'
      });
    }

    if (!RocketChat.authz.hasPermission(userId, 'clean-channel-history', roomId)) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'cleanRoomHistory'
      });
    }

    return RocketChat.cleanRoomHistory({
      rid: roomId,
      latest,
      oldest,
      inclusive,
      limit,
      excludePinned,
      filesOnly,
      fromUsers
    });
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createChannel.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/createChannel.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/objectSpread"));

Meteor.methods({
  createChannel(name, members, readOnly = false, customFields = {}, extraData = {}) {
    check(name, String);
    check(members, Match.Optional([String]));

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'createChannel'
      });
    }

    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'create-c')) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'createChannel'
      });
    }

    return RocketChat.createRoom('c', name, Meteor.user() && Meteor.user().username, members, readOnly, (0, _objectSpread2.default)({
      customFields
    }, extraData));
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createToken.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/createToken.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  createToken(userId) {
    if (Meteor.userId() !== userId && !RocketChat.authz.hasPermission(Meteor.userId(), 'user-generate-access-token')) {
      throw new Meteor.Error('error-not-authorized', 'Not authorized', {
        method: 'createToken'
      });
    }

    const token = Accounts._generateStampedLoginToken();

    Accounts._insertLoginToken(userId, token);

    return {
      userId,
      authToken: token.token
    };
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"createPrivateGroup.js":function(require){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/createPrivateGroup.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var _interopRequireDefault = require("@babel/runtime/helpers/builtin/interopRequireDefault");

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/builtin/objectSpread"));

Meteor.methods({
  createPrivateGroup(name, members, readOnly = false, customFields = {}, extraData = {}) {
    check(name, String);
    check(members, Match.Optional([String]));

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'createPrivateGroup'
      });
    }

    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'create-p')) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'createPrivateGroup'
      });
    } // validate extra data schema


    check(extraData, Match.ObjectIncluding({
      tokenpass: Match.Maybe({
        require: String,
        tokens: [{
          token: String,
          balance: String
        }]
      })
    }));
    return RocketChat.createRoom('p', name, Meteor.user() && Meteor.user().username, members, readOnly, (0, _objectSpread2.default)({
      customFields
    }, extraData));
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/deleteMessage.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let moment;
module.watch(require("moment"), {
  default(v) {
    moment = v;
  }

}, 0);
Meteor.methods({
  deleteMessage(message) {
    check(message, Match.ObjectIncluding({
      _id: String
    }));

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'deleteMessage'
      });
    }

    const originalMessage = RocketChat.models.Messages.findOneById(message._id, {
      fields: {
        u: 1,
        rid: 1,
        file: 1,
        ts: 1
      }
    });

    if (originalMessage == null) {
      throw new Meteor.Error('error-action-not-allowed', 'Not allowed', {
        method: 'deleteMessage',
        action: 'Delete_message'
      });
    }

    const forceDelete = RocketChat.authz.hasPermission(Meteor.userId(), 'force-delete-message', originalMessage.rid);
    const hasPermission = RocketChat.authz.hasPermission(Meteor.userId(), 'delete-message', originalMessage.rid);
    const deleteAllowed = RocketChat.settings.get('Message_AllowDeleting');
    const deleteOwn = originalMessage && originalMessage.u && originalMessage.u._id === Meteor.userId();

    if (!(hasPermission || deleteAllowed && deleteOwn) && !forceDelete) {
      throw new Meteor.Error('error-action-not-allowed', 'Not allowed', {
        method: 'deleteMessage',
        action: 'Delete_message'
      });
    }

    const blockDeleteInMinutes = RocketChat.settings.get('Message_AllowDeleting_BlockDeleteInMinutes');

    if (blockDeleteInMinutes != null && blockDeleteInMinutes !== 0 && !forceDelete) {
      if (originalMessage.ts == null) {
        return;
      }

      const msgTs = moment(originalMessage.ts);

      if (msgTs == null) {
        return;
      }

      const currentTsDiff = moment().diff(msgTs, 'minutes');

      if (currentTsDiff > blockDeleteInMinutes) {
        throw new Meteor.Error('error-message-deleting-blocked', 'Message deleting is blocked', {
          method: 'deleteMessage'
        });
      }
    }

    return RocketChat.deleteMessage(originalMessage, Meteor.user());
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"deleteUserOwnAccount.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/deleteUserOwnAccount.js                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);
Meteor.methods({
  deleteUserOwnAccount(password) {
    check(password, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'deleteUserOwnAccount'
      });
    }

    if (!RocketChat.settings.get('Accounts_AllowDeleteOwnAccount')) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'deleteUserOwnAccount'
      });
    }

    const userId = Meteor.userId();
    const user = RocketChat.models.Users.findOneById(userId);

    if (!user) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'deleteUserOwnAccount'
      });
    }

    if (user.services && user.services.password && s.trim(user.services.password.bcrypt)) {
      const result = Accounts._checkPassword(user, {
        digest: password,
        algorithm: 'sha-256'
      });

      if (result.error) {
        throw new Meteor.Error('error-invalid-password', 'Invalid password', {
          method: 'deleteUserOwnAccount'
        });
      }
    } else if (user.username !== s.trim(password)) {
      throw new Meteor.Error('error-invalid-username', 'Invalid username', {
        method: 'deleteUserOwnAccount'
      });
    }

    Meteor.defer(function () {
      RocketChat.deleteUser(userId);
    });
    return true;
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"executeSlashCommandPreview.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/executeSlashCommandPreview.js                                                //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  executeSlashCommandPreview(command, preview) {
    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'getSlashCommandPreview'
      });
    }

    if (!command || !command.cmd || !RocketChat.slashCommands.commands[command.cmd]) {
      throw new Meteor.Error('error-invalid-command', 'Invalid Command Provided', {
        method: 'executeSlashCommandPreview'
      });
    }

    const theCmd = RocketChat.slashCommands.commands[command.cmd];

    if (!theCmd.providesPreview) {
      throw new Meteor.Error('error-invalid-command', 'Command Does Not Provide Previews', {
        method: 'executeSlashCommandPreview'
      });
    }

    if (!preview) {
      throw new Meteor.Error('error-invalid-command-preview', 'Invalid Preview Provided', {
        method: 'executeSlashCommandPreview'
      });
    }

    return RocketChat.slashCommands.executePreview(command.cmd, command.params, command.msg, preview);
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"filterBadWords.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/filterBadWords.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Filter;
module.watch(require("bad-words"), {
  default(v) {
    Filter = v;
  }

}, 0);
RocketChat.callbacks.add('beforeSaveMessage', function (message) {
  if (RocketChat.settings.get('Message_AllowBadWordsFilter')) {
    const badWordsList = RocketChat.settings.get('Message_BadWordsFilterList');
    let options; // Add words to the blacklist

    if (!!badWordsList && badWordsList.length) {
      options = {
        list: badWordsList.split(',')
      };
    }

    const filter = new Filter(options);
    message.msg = filter.clean(message.msg);
  }

  return message;
}, 1, 'filterBadWords');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"filterATAllTag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/filterATAllTag.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
RocketChat.callbacks.add('beforeSaveMessage', function (message) {
  // Test if the message mentions include @all.
  if (message.mentions != null && _.pluck(message.mentions, '_id').some(item => item === 'all')) {
    // Check if the user has permissions to use @all in both global and room scopes.
    if (!RocketChat.authz.hasPermission(message.u._id, 'mention-all') && !RocketChat.authz.hasPermission(message.u._id, 'mention-all', message.rid)) {
      // Get the language of the user for the error notification.
      const {
        language
      } = RocketChat.models.Users.findOneById(message.u._id);

      const action = TAPi18n.__('Notify_all_in_this_room', {}, language); // Add a notification to the chat, informing the user that this
      // action is not allowed.


      RocketChat.Notifications.notifyUser(message.u._id, 'message', {
        _id: Random.id(),
        rid: message.rid,
        ts: new Date(),
        msg: TAPi18n.__('error-action-not-allowed', {
          action
        }, language)
      }); // Also throw to stop propagation of 'sendMessage'.

      throw new Meteor.Error('error-action-not-allowed', 'Notify all in this room not allowed', {
        method: 'filterATAllTag',
        action: 'Notify_all_in_this_room'
      });
    }
  }

  return message;
}, 1, 'filterATAllTag');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"filterATHereTag.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/filterATHereTag.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
RocketChat.callbacks.add('beforeSaveMessage', function (message) {
  // Test if the message mentions include @here.
  if (message.mentions != null && _.pluck(message.mentions, '_id').some(item => item === 'here')) {
    // Check if the user has permissions to use @here in both global and room scopes.
    if (!RocketChat.authz.hasPermission(message.u._id, 'mention-here') && !RocketChat.authz.hasPermission(message.u._id, 'mention-here', message.rid)) {
      // Get the language of the user for the error notification.
      const {
        language
      } = RocketChat.models.Users.findOneById(message.u._id);

      const action = TAPi18n.__('Notify_active_in_this_room', {}, language); // Add a notification to the chat, informing the user that this
      // action is not allowed.


      RocketChat.Notifications.notifyUser(message.u._id, 'message', {
        _id: Random.id(),
        rid: message.rid,
        ts: new Date(),
        msg: TAPi18n.__('error-action-not-allowed', {
          action
        }, language)
      }); // Also throw to stop propagation of 'sendMessage'.

      throw new Meteor.Error('error-action-not-allowed', 'Notify here in this room not allowed', {
        method: 'filterATHereTag',
        action: 'Notify_active_in_this_room'
      });
    }
  }

  return message;
}, 1, 'filterATHereTag');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getChannelHistory.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getChannelHistory.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
Meteor.methods({
  getChannelHistory({
    rid,
    latest,
    oldest,
    inclusive,
    count = 20,
    unreads
  }) {
    check(rid, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'getChannelHistory'
      });
    }

    const fromUserId = Meteor.userId();
    const room = Meteor.call('canAccessRoom', rid, fromUserId);

    if (!room) {
      return false;
    } // Make sure they can access the room


    if (room.t === 'c' && !RocketChat.authz.hasPermission(fromUserId, 'preview-c-room') && !RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, fromUserId, {
      fields: {
        _id: 1
      }
    })) {
      return false;
    } // Ensure latest is always defined.


    if (_.isUndefined(latest)) {
      latest = new Date();
    } // Verify oldest is a date if it exists


    if (!_.isUndefined(oldest) && !_.isDate(oldest)) {
      throw new Meteor.Error('error-invalid-date', 'Invalid date', {
        method: 'getChannelHistory'
      });
    }

    const options = {
      sort: {
        ts: -1
      },
      limit: count
    };

    if (!RocketChat.settings.get('Message_ShowEditedStatus')) {
      options.fields = {
        editedAt: 0
      };
    }

    let records = [];

    if (_.isUndefined(oldest) && inclusive) {
      records = RocketChat.models.Messages.findVisibleByRoomIdBeforeTimestampInclusive(rid, latest, options).fetch();
    } else if (_.isUndefined(oldest) && !inclusive) {
      records = RocketChat.models.Messages.findVisibleByRoomIdBeforeTimestamp(rid, latest, options).fetch();
    } else if (!_.isUndefined(oldest) && inclusive) {
      records = RocketChat.models.Messages.findVisibleByRoomIdBetweenTimestampsInclusive(rid, oldest, latest, options).fetch();
    } else {
      records = RocketChat.models.Messages.findVisibleByRoomIdBetweenTimestamps(rid, oldest, latest, options).fetch();
    }

    const UI_Use_Real_Name = RocketChat.settings.get('UI_Use_Real_Name') === true;

    const messages = _.map(records, message => {
      message.starred = _.findWhere(message.starred, {
        _id: fromUserId
      });

      if (message.u && message.u._id && UI_Use_Real_Name) {
        const user = RocketChat.models.Users.findOneById(message.u._id);
        message.u.name = user && user.name;
      }

      if (message.mentions && message.mentions.length && UI_Use_Real_Name) {
        message.mentions.forEach(mention => {
          const user = RocketChat.models.Users.findOneById(mention._id);
          mention.name = user && user.name;
        });
      }

      return message;
    });

    if (unreads) {
      let unreadNotLoaded = 0;
      let firstUnread = undefined;

      if (!_.isUndefined(oldest)) {
        const firstMsg = messages[messages.length - 1];

        if (!_.isUndefined(firstMsg) && firstMsg.ts > oldest) {
          const unreadMessages = RocketChat.models.Messages.findVisibleByRoomIdBetweenTimestamps(rid, oldest, firstMsg.ts, {
            limit: 1,
            sort: {
              ts: 1
            }
          });
          firstUnread = unreadMessages.fetch()[0];
          unreadNotLoaded = unreadMessages.count();
        }
      }

      return {
        messages: messages || [],
        firstUnread,
        unreadNotLoaded
      };
    }

    return {
      messages: messages || []
    };
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getFullUserData.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getFullUserData.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  getFullUserData({
    filter = '',
    username = '',
    limit = 1
  }) {
    const result = RocketChat.getFullUserData({
      userId: Meteor.userId(),
      filter: filter || username,
      limit
    });
    return result && result.fetch();
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getRoomJoinCode.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getRoomJoinCode.js                                                           //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  getRoomJoinCode(rid) {
    check(rid, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'getJoinCode'
      });
    }

    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'view-join-code')) {
      throw new Meteor.Error('error-not-authorized', 'Not authorized', {
        method: 'getJoinCode'
      });
    }

    const [room] = RocketChat.models.Rooms.findById(rid).fetch();
    return room && room.joinCode;
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getRoomRoles.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getRoomRoles.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
Meteor.methods({
  getRoomRoles(rid) {
    check(rid, String);

    if (!Meteor.userId() && RocketChat.settings.get('Accounts_AllowAnonymousRead') === false) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'getRoomRoles'
      });
    }

    check(rid, String);
    const options = {
      sort: {
        'u.username': 1
      },
      fields: {
        rid: 1,
        u: 1,
        roles: 1
      }
    };
    const UI_Use_Real_Name = RocketChat.settings.get('UI_Use_Real_Name') === true;
    const roles = RocketChat.models.Roles.find({
      scope: 'Subscriptions',
      description: {
        $exists: 1,
        $ne: ''
      }
    }).fetch();
    const subscriptions = RocketChat.models.Subscriptions.findByRoomIdAndRoles(rid, _.pluck(roles, '_id'), options).fetch();

    if (!UI_Use_Real_Name) {
      return subscriptions;
    } else {
      return subscriptions.map(subscription => {
        const user = RocketChat.models.Users.findOneById(subscription.u._id);
        subscription.u.name = user && user.name;
        return subscription;
      });
    }
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getServerInfo.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getServerInfo.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  getServerInfo() {
    return RocketChat.Info;
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getSingleMessage.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getSingleMessage.js                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  getSingleMessage(msgId) {
    check(msgId, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'getSingleMessage'
      });
    }

    const msg = RocketChat.models.Messages.findOneById(msgId);

    if (!msg && !msg.rid) {
      return undefined;
    }

    Meteor.call('canAccessRoom', msg.rid, Meteor.userId());
    return msg;
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getSlashCommandPreviews.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getSlashCommandPreviews.js                                                   //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  getSlashCommandPreviews(command) {
    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'getSlashCommandPreview'
      });
    }

    if (!command || !command.cmd || !RocketChat.slashCommands.commands[command.cmd]) {
      throw new Meteor.Error('error-invalid-command', 'Invalid Command Provided', {
        method: 'executeSlashCommandPreview'
      });
    }

    const theCmd = RocketChat.slashCommands.commands[command.cmd];

    if (!theCmd.providesPreview) {
      throw new Meteor.Error('error-invalid-command', 'Command Does Not Provide Previews', {
        method: 'executeSlashCommandPreview'
      });
    }

    return RocketChat.slashCommands.getPreviews(command.cmd, command.params, command.msg);
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"getUserRoles.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/getUserRoles.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
Meteor.methods({
  getUserRoles() {
    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'getUserRoles'
      });
    }

    const options = {
      sort: {
        username: 1
      },
      fields: {
        username: 1,
        roles: 1
      }
    };
    const roles = RocketChat.models.Roles.find({
      scope: 'Users',
      description: {
        $exists: 1,
        $ne: ''
      }
    }).fetch();

    const roleIds = _.pluck(roles, '_id'); // Security issue: we should not send all user's roles to all clients, only the 'public' roles
    // We must remove all roles that are not part of the query from the returned users


    const users = RocketChat.models.Users.findUsersInRoles(roleIds, null, options).fetch();

    for (const user of users) {
      user.roles = _.intersection(user.roles, roleIds);
    }

    return users;
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"insertOrUpdateUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/insertOrUpdateUser.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  insertOrUpdateUser(userData) {
    check(userData, Object);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'insertOrUpdateUser'
      });
    }

    return RocketChat.saveUser(Meteor.userId(), userData);
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"joinDefaultChannels.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/joinDefaultChannels.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  joinDefaultChannels(silenced) {
    check(silenced, Match.Optional(Boolean));

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'joinDefaultChannels'
      });
    }

    this.unblock();
    return RocketChat.addUserToDefaultChannels(Meteor.user(), silenced);
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"joinRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/joinRoom.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  joinRoom(rid, code) {
    check(rid, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'joinRoom'
      });
    }

    const room = RocketChat.models.Rooms.findOneById(rid);

    if (!room) {
      throw new Meteor.Error('error-invalid-room', 'Invalid room', {
        method: 'joinRoom'
      });
    } // TODO we should have a 'beforeJoinRoom' call back so external services can do their own validations


    const user = Meteor.user();

    if (room.tokenpass && user && user.services && user.services.tokenpass) {
      const balances = RocketChat.updateUserTokenpassBalances(user);

      if (!RocketChat.Tokenpass.validateAccess(room.tokenpass, balances)) {
        throw new Meteor.Error('error-not-allowed', 'Token required', {
          method: 'joinRoom'
        });
      }
    } else {
      if (!RocketChat.authz.canAccessRoom(room, Meteor.user())) {
        throw new Meteor.Error('error-not-allowed', 'Not allowed', {
          method: 'joinRoom'
        });
      }

      if (room.joinCodeRequired === true && code !== room.joinCode && !RocketChat.authz.hasPermission(Meteor.userId(), 'join-without-join-code')) {
        throw new Meteor.Error('error-code-invalid', 'Invalid Room Password', {
          method: 'joinRoom'
        });
      }
    }

    return RocketChat.addUserToRoom(rid, user);
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"leaveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/leaveRoom.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  leaveRoom(rid) {
    check(rid, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'leaveRoom'
      });
    }

    this.unblock();
    const room = RocketChat.models.Rooms.findOneById(rid);
    const user = Meteor.user();

    if (room.t === 'd' || room.t === 'c' && !RocketChat.authz.hasPermission(user._id, 'leave-c') || room.t === 'p' && !RocketChat.authz.hasPermission(user._id, 'leave-p')) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'leaveRoom'
      });
    }

    const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, user._id, {
      fields: {
        _id: 1
      }
    });

    if (!subscription) {
      throw new Meteor.Error('error-user-not-in-room', 'You are not in this room', {
        method: 'leaveRoom'
      });
    } // If user is room owner, check if there are other owners. If there isn't anyone else, warn user to set a new owner.


    if (RocketChat.authz.hasRole(user._id, 'owner', room._id)) {
      const numOwners = RocketChat.authz.getUsersInRole('owner', room._id).count();

      if (numOwners === 1) {
        throw new Meteor.Error('error-you-are-last-owner', 'You are the last owner. Please set new owner before leaving the room.', {
          method: 'leaveRoom'
        });
      }
    }

    return RocketChat.removeUserFromRoom(rid, user);
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"removeOAuthService.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/removeOAuthService.js                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let s;
module.watch(require("underscore.string"), {
  default(v) {
    s = v;
  }

}, 0);
Meteor.methods({
  removeOAuthService(name) {
    check(name, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'removeOAuthService'
      });
    }

    if (RocketChat.authz.hasPermission(Meteor.userId(), 'add-oauth-service') !== true) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'removeOAuthService'
      });
    }

    name = name.toLowerCase().replace(/[^a-z0-9_]/g, '');
    name = s.capitalize(name);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-url`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-token_path`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-identity_path`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-authorize_path`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-scope`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-token_sent_via`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-identity_token_sent_via`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-id`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-secret`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-button_label_text`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-button_label_color`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-button_color`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-login_style`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-username_field`);
    RocketChat.settings.removeById(`Accounts_OAuth_Custom-${name}-merge_users`);
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"restartServer.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/restartServer.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  restart_server() {
    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'restart_server'
      });
    }

    if (RocketChat.authz.hasRole(Meteor.userId(), 'admin') !== true) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'restart_server'
      });
    }

    Meteor.setTimeout(() => {
      Meteor.setTimeout(() => {
        console.warn('Call to process.exit() timed out, aborting.');
        process.abort();
      }, 1000);
      process.exit(1);
    }, 1000);
    return {
      message: 'The_server_will_restart_in_s_seconds',
      params: [2]
    };
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"robotMethods.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/robotMethods.js                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
Meteor.methods({
  'robot.modelCall'(model, method, args) {
    check(model, String);
    check(method, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'robot.modelCall'
      });
    }

    if (!RocketChat.authz.hasRole(Meteor.userId(), 'robot')) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'robot.modelCall'
      });
    }

    const m = RocketChat.models[model];

    if (!m || !_.isFunction(m[method])) {
      throw new Meteor.Error('error-invalid-method', 'Invalid method', {
        method: 'robot.modelCall'
      });
    }

    const cursor = RocketChat.models[model][method].apply(RocketChat.models[model], args);
    return cursor && cursor.fetch ? cursor.fetch() : cursor;
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"saveSetting.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/saveSetting.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/* eslint new-cap: 0 */
Meteor.methods({
  saveSetting(_id, value, editor) {
    if (Meteor.userId() === null) {
      throw new Meteor.Error('error-action-not-allowed', 'Editing settings is not allowed', {
        method: 'saveSetting'
      });
    }

    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'edit-privileged-setting')) {
      throw new Meteor.Error('error-action-not-allowed', 'Editing settings is not allowed', {
        method: 'saveSetting'
      });
    } // Verify the _id passed in is a string.


    check(_id, String);
    const setting = RocketChat.models.Settings.db.findOneById(_id); // Verify the value is what it should be

    switch (setting.type) {
      case 'roomPick':
        check(value, Match.OneOf([Object], ''));
        break;

      case 'boolean':
        check(value, Boolean);
        break;

      case 'int':
        check(value, Number);
        break;

      default:
        check(value, String);
        break;
    }

    RocketChat.settings.updateById(_id, value, editor);
    return true;
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendInvitationEmail.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/sendInvitationEmail.js                                                       //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Mailer;
module.watch(require("meteor/rocketchat:mailer"), {
  "*"(v) {
    Mailer = v;
  }

}, 0);
let html = '';
Meteor.startup(() => {
  Mailer.getTemplate('Invitation_Email', value => {
    html = value;
  });
});
Meteor.methods({
  sendInvitationEmail(emails) {
    check(emails, [String]);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'sendInvitationEmail'
      });
    }

    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'bulk-register-user')) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'sendInvitationEmail'
      });
    }

    const validEmails = emails.filter(Mailer.checkAddressFormat);
    const subject = RocketChat.settings.get('Invitation_Subject');
    return validEmails.filter(email => {
      try {
        return Mailer.send({
          to: email,
          from: RocketChat.settings.get('From_Email'),
          subject,
          html,
          data: {
            email
          }
        });
      } catch ({
        message
      }) {
        throw new Meteor.Error('error-email-send-failed', `Error trying to send email: ${message}`, {
          method: 'sendInvitationEmail',
          message
        });
      }
    });
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/sendMessage.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let moment;
module.watch(require("moment"), {
  default(v) {
    moment = v;
  }

}, 0);
Meteor.methods({
  sendMessage(message) {
    check(message, Object);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'sendMessage'
      });
    }

    if (!message.rid) {
      throw new Error('The \'rid\' property on the message object is missing.');
    }

    if (message.ts) {
      const tsDiff = Math.abs(moment(message.ts).diff());

      if (tsDiff > 60000) {
        throw new Meteor.Error('error-message-ts-out-of-sync', 'Message timestamp is out of sync', {
          method: 'sendMessage',
          message_ts: message.ts,
          server_ts: new Date().getTime()
        });
      } else if (tsDiff > 10000) {
        message.ts = new Date();
      }
    } else {
      message.ts = new Date();
    }

    if (message.msg) {
      const adjustedMessage = RocketChat.messageProperties.messageWithoutEmojiShortnames(message.msg);

      if (RocketChat.messageProperties.length(adjustedMessage) > RocketChat.settings.get('Message_MaxAllowedSize')) {
        throw new Meteor.Error('error-message-size-exceeded', 'Message size exceeds Message_MaxAllowedSize', {
          method: 'sendMessage'
        });
      }
    }

    const user = RocketChat.models.Users.findOneById(Meteor.userId(), {
      fields: {
        username: 1,
        name: 1
      }
    });
    const room = Meteor.call('canAccessRoom', message.rid, user._id);

    if (!room) {
      return false;
    }

    const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(message.rid, Meteor.userId());

    if (subscription && (subscription.blocked || subscription.blocker)) {
      RocketChat.Notifications.notifyUser(Meteor.userId(), 'message', {
        _id: Random.id(),
        rid: room._id,
        ts: new Date(),
        msg: TAPi18n.__('room_is_blocked', {}, user.language)
      });
      throw new Meteor.Error('You can\'t send messages because you are blocked');
    }

    if ((room.muted || []).includes(user.username)) {
      RocketChat.Notifications.notifyUser(Meteor.userId(), 'message', {
        _id: Random.id(),
        rid: room._id,
        ts: new Date(),
        msg: TAPi18n.__('You_have_been_muted', {}, user.language)
      });
      throw new Meteor.Error('You can\'t send messages because you have been muted');
    }

    if (message.alias == null && RocketChat.settings.get('Message_SetNameToAliasEnabled')) {
      message.alias = user.name;
    }

    if (Meteor.settings.public.sandstorm) {
      message.sandstormSessionId = this.connection.sandstormSessionId();
    }

    RocketChat.metrics.messagesSent.inc(); // TODO This line needs to be moved to it's proper place. See the comments on: https://github.com/RocketChat/Rocket.Chat/pull/5736

    return RocketChat.sendMessage(user, message, room);
  }

}); // Limit a user, who does not have the "bot" role, to sending 5 msgs/second

RocketChat.RateLimiter.limitMethod('sendMessage', 5, 1000, {
  userId(userId) {
    return !RocketChat.authz.hasPermission(userId, 'send-many-messages');
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"sendSMTPTestEmail.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/sendSMTPTestEmail.js                                                         //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Mailer;
module.watch(require("meteor/rocketchat:mailer"), {
  "*"(v) {
    Mailer = v;
  }

}, 0);
Meteor.methods({
  sendSMTPTestEmail() {
    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'sendSMTPTestEmail'
      });
    }

    const user = Meteor.user();

    if (!user.emails && !user.emails[0] && user.emails[0].address) {
      throw new Meteor.Error('error-invalid-email', 'Invalid email', {
        method: 'sendSMTPTestEmail'
      });
    }

    try {
      Mailer.send({
        to: user.emails[0].address,
        from: RocketChat.settings.get('From_Email'),
        subject: 'SMTP Test Email',
        html: '<p>You have successfully sent an email</p>'
      });
    } catch ({
      message
    }) {
      throw new Meteor.Error('error-email-send-failed', `Error trying to send email: ${message}`, {
        method: 'sendSMTPTestEmail',
        message
      });
    }

    return {
      message: 'Your_mail_was_sent_to_s',
      params: [user.emails[0].address]
    };
  }

});
DDPRateLimiter.addRule({
  type: 'method',
  name: 'sendSMTPTestEmail',

  userId() {
    return true;
  }

}, 1, 1000);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setAdminStatus.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setAdminStatus.js                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  setAdminStatus(userId, admin) {
    check(userId, String);
    check(admin, Match.Optional(Boolean));

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'setAdminStatus'
      });
    }

    if (RocketChat.authz.hasPermission(Meteor.userId(), 'assign-admin-role') !== true) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'setAdminStatus'
      });
    }

    const user = Meteor.users.findOne({
      _id: userId
    }, {
      fields: {
        username: 1
      }
    });

    if (admin) {
      return Meteor.call('authorization:addUserToRole', 'admin', user.username);
    } else {
      return Meteor.call('authorization:removeUserFromRole', 'admin', user.username);
    }
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setRealName.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setRealName.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  setRealName(name) {
    check(name, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'setRealName'
      });
    }

    if (!RocketChat.settings.get('Accounts_AllowRealNameChange')) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'setRealName'
      });
    }

    if (!RocketChat.setRealName(Meteor.userId(), name)) {
      throw new Meteor.Error('error-could-not-change-name', 'Could not change name', {
        method: 'setRealName'
      });
    }

    return name;
  }

});
RocketChat.RateLimiter.limitMethod('setRealName', 1, 1000, {
  userId: () => true
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setUsername.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setUsername.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let _;

module.watch(require("underscore"), {
  default(v) {
    _ = v;
  }

}, 0);
Meteor.methods({
  setUsername(username, param = {}) {
    const {
      joinDefaultChannelsSilenced
    } = param;
    check(username, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'setUsername'
      });
    }

    const user = Meteor.user();

    if (user.username && !RocketChat.settings.get('Accounts_AllowUsernameChange')) {
      throw new Meteor.Error('error-not-allowed', 'Not allowed', {
        method: 'setUsername'
      });
    }

    if (user.username === username || user.username && user.username.toLowerCase() === username.toLowerCase()) {
      return username;
    }

    let nameValidation;

    try {
      nameValidation = new RegExp(`^${RocketChat.settings.get('UTF8_Names_Validation')}$`);
    } catch (error) {
      nameValidation = new RegExp('^[0-9a-zA-Z-_.]+$');
    }

    if (!nameValidation.test(username)) {
      throw new Meteor.Error('username-invalid', `${_.escape(username)} is not a valid username, use only letters, numbers, dots, hyphens and underscores`);
    }

    if (!RocketChat.checkUsernameAvailability(username)) {
      throw new Meteor.Error('error-field-unavailable', `<strong>${_.escape(username)}</strong> is already in use :(`, {
        method: 'setUsername',
        field: username
      });
    }

    if (!RocketChat.setUsername(user._id, username)) {
      throw new Meteor.Error('error-could-not-change-username', 'Could not change username', {
        method: 'setUsername'
      });
    }

    if (!user.username) {
      Meteor.runAsUser(user._id, () => Meteor.call('joinDefaultChannels', joinDefaultChannelsSilenced));
      Meteor.defer(function () {
        return RocketChat.callbacks.run('afterCreateUser', RocketChat.models.Users.findOneById(user._id));
      });
    }

    return username;
  }

});
RocketChat.RateLimiter.limitMethod('setUsername', 1, 1000, {
  userId() {
    return true;
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"setEmail.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/setEmail.js                                                                  //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  setEmail(email) {
    check(email, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'setEmail'
      });
    }

    const user = Meteor.user();

    if (!RocketChat.settings.get('Accounts_AllowEmailChange')) {
      throw new Meteor.Error('error-action-not-allowed', 'Changing email is not allowed', {
        method: 'setEmail',
        action: 'Changing_email'
      });
    }

    if (user.emails && user.emails[0] && user.emails[0].address === email) {
      return email;
    }

    if (!RocketChat.setEmail(user._id, email)) {
      throw new Meteor.Error('error-could-not-change-email', 'Could not change email', {
        method: 'setEmail'
      });
    }

    return email;
  }

});
RocketChat.RateLimiter.limitMethod('setEmail', 1, 1000, {
  userId()
  /* userId*/
  {
    return true;
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unarchiveRoom.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/unarchiveRoom.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  unarchiveRoom(rid) {
    check(rid, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'unarchiveRoom'
      });
    }

    const room = RocketChat.models.Rooms.findOneById(rid);

    if (!room) {
      throw new Meteor.Error('error-invalid-room', 'Invalid room', {
        method: 'unarchiveRoom'
      });
    }

    if (!RocketChat.authz.hasPermission(Meteor.userId(), 'unarchive-room', room._id)) {
      throw new Meteor.Error('error-not-authorized', 'Not authorized', {
        method: 'unarchiveRoom'
      });
    }

    return RocketChat.unarchiveRoom(rid);
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"unblockUser.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/unblockUser.js                                                               //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Meteor.methods({
  unblockUser({
    rid,
    blocked
  }) {
    check(rid, String);
    check(blocked, String);

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'blockUser'
      });
    }

    const subscription = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, Meteor.userId());
    const subscription2 = RocketChat.models.Subscriptions.findOneByRoomIdAndUserId(rid, blocked);

    if (!subscription || !subscription2) {
      throw new Meteor.Error('error-invalid-room', 'Invalid room', {
        method: 'blockUser'
      });
    }

    RocketChat.models.Subscriptions.unsetBlockedByRoomId(rid, blocked, Meteor.userId());
    return true;
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"updateMessage.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/server/methods/updateMessage.js                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let moment;
module.watch(require("moment"), {
  default(v) {
    moment = v;
  }

}, 0);
Meteor.methods({
  updateMessage(message) {
    check(message, Match.ObjectIncluding({
      _id: String
    }));

    if (!Meteor.userId()) {
      throw new Meteor.Error('error-invalid-user', 'Invalid user', {
        method: 'updateMessage'
      });
    }

    const originalMessage = RocketChat.models.Messages.findOneById(message._id);

    if (!originalMessage || !originalMessage._id) {
      return;
    }

    const hasPermission = RocketChat.authz.hasPermission(Meteor.userId(), 'edit-message', message.rid);
    const editAllowed = RocketChat.settings.get('Message_AllowEditing');
    const editOwn = originalMessage.u && originalMessage.u._id === Meteor.userId();

    if (!hasPermission && (!editAllowed || !editOwn)) {
      throw new Meteor.Error('error-action-not-allowed', 'Message editing not allowed', {
        method: 'updateMessage',
        action: 'Message_editing'
      });
    }

    const blockEditInMinutes = RocketChat.settings.get('Message_AllowEditing_BlockEditInMinutes');

    if (Match.test(blockEditInMinutes, Number) && blockEditInMinutes !== 0) {
      let currentTsDiff;
      let msgTs;

      if (Match.test(originalMessage.ts, Number)) {
        msgTs = moment(originalMessage.ts);
      }

      if (msgTs) {
        currentTsDiff = moment().diff(msgTs, 'minutes');
      }

      if (currentTsDiff > blockEditInMinutes) {
        throw new Meteor.Error('error-message-editing-blocked', 'Message editing is blocked', {
          method: 'updateMessage'
        });
      }
    } // It is possible to have an empty array as the attachments property, so ensure both things exist


    if (originalMessage.attachments && originalMessage.attachments.length > 0 && originalMessage.attachments[0].description !== undefined) {
      message.attachments = originalMessage.attachments;
      message.attachments[0].description = message.msg;
      message.msg = originalMessage.msg;
    }

    message.u = originalMessage.u;
    return RocketChat.updateMessage(message, Meteor.user(), originalMessage);
  }

});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}},"startup":{"defaultRoomTypes.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/startup/defaultRoomTypes.js                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let ConversationRoomType, DirectMessageRoomType, FavoriteRoomType, PrivateRoomType, PublicRoomType, UnreadRoomType;
module.watch(require("../lib/roomTypes"), {
  ConversationRoomType(v) {
    ConversationRoomType = v;
  },

  DirectMessageRoomType(v) {
    DirectMessageRoomType = v;
  },

  FavoriteRoomType(v) {
    FavoriteRoomType = v;
  },

  PrivateRoomType(v) {
    PrivateRoomType = v;
  },

  PublicRoomType(v) {
    PublicRoomType = v;
  },

  UnreadRoomType(v) {
    UnreadRoomType = v;
  }

}, 0);
RocketChat.roomTypes.add(new UnreadRoomType());
RocketChat.roomTypes.add(new FavoriteRoomType());
RocketChat.roomTypes.add(new ConversationRoomType());
RocketChat.roomTypes.add(new PublicRoomType());
RocketChat.roomTypes.add(new PrivateRoomType());
RocketChat.roomTypes.add(new DirectMessageRoomType());
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

},"index.js":function(require,exports,module){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/startup/index.js                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
let Mailer;
module.watch(require("meteor/rocketchat:mailer"), {
  "*"(v) {
    Mailer = v;
  }

}, 0);
Mailer.setSettings(RocketChat.settings);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}},"rocketchat.info.js":function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/rocketchat_lib/rocketchat.info.js                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
RocketChat.Info = {
    "version": "0.70.4",
    "build": {
        "date": "2018-10-09T21:33:11.014Z",
        "nodeVersion": "v8.11.3",
        "arch": "x64",
        "platform": "linux",
        "osRelease": "4.4.0-137-generic",
        "totalMemory": 73765937152,
        "freeMemory": 5452902400,
        "cpus": 36
    },
    "commit": {
        "hash": "dbff6ee20ff756d5654bc36da66de4999ff7cd9c",
        "date": "Tue Oct 9 18:22:00 2018 -0300",
        "author": "Diego Sampaio",
        "subject": "Merge pull request #12299 from RocketChat/release-0.70.4",
        "tag": "0.70.4",
        "branch": "HEAD"
    },
    "marketplaceApiVersion": "1.1.1"
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},{
  "extensions": [
    ".js",
    ".json",
    ".info"
  ]
});
require("/node_modules/meteor/rocketchat:lib/lib/core.js");
require("/node_modules/meteor/rocketchat:lib/lib/settings.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/debug.js");
require("/node_modules/meteor/rocketchat:lib/lib/RoomTypeConfig.js");
require("/node_modules/meteor/rocketchat:lib/lib/roomTypes/conversation.js");
require("/node_modules/meteor/rocketchat:lib/lib/roomTypes/direct.js");
require("/node_modules/meteor/rocketchat:lib/lib/roomTypes/favorite.js");
require("/node_modules/meteor/rocketchat:lib/lib/roomTypes/index.js");
require("/node_modules/meteor/rocketchat:lib/lib/roomTypes/private.js");
require("/node_modules/meteor/rocketchat:lib/lib/roomTypes/public.js");
require("/node_modules/meteor/rocketchat:lib/lib/roomTypes/unread.js");
require("/node_modules/meteor/rocketchat:lib/lib/getURL.js");
require("/node_modules/meteor/rocketchat:lib/lib/callbacks.js");
require("/node_modules/meteor/rocketchat:lib/lib/fileUploadRestrictions.js");
require("/node_modules/meteor/rocketchat:lib/lib/getAvatarColor.js");
require("/node_modules/meteor/rocketchat:lib/lib/getDefaultSubscriptionPref.js");
require("/node_modules/meteor/rocketchat:lib/lib/getValidRoomName.js");
require("/node_modules/meteor/rocketchat:lib/lib/placeholders.js");
require("/node_modules/meteor/rocketchat:lib/lib/promises.js");
require("/node_modules/meteor/rocketchat:lib/lib/RoomTypesCommon.js");
require("/node_modules/meteor/rocketchat:lib/lib/slashCommand.js");
require("/node_modules/meteor/rocketchat:lib/lib/Message.js");
require("/node_modules/meteor/rocketchat:lib/lib/MessageProperties.js");
require("/node_modules/meteor/rocketchat:lib/lib/messageBox.js");
require("/node_modules/meteor/rocketchat:lib/lib/MessageTypes.js");
require("/node_modules/meteor/rocketchat:lib/lib/templateVarHandler.js");
require("/node_modules/meteor/rocketchat:lib/lib/getUserNotificationPreference.js");
require("/node_modules/meteor/rocketchat:lib/lib/getUserPreference.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/bugsnag.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/metrics.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/RateLimiter.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/isDocker.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/addUserToDefaultChannels.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/addUserToRoom.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/archiveRoom.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/checkUsernameAvailability.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/checkEmailAvailability.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/createRoom.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/cleanRoomHistory.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/deleteMessage.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/deleteUser.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/getFullUserData.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/getRoomByNameOrIdWithOptionToJoin.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/loadMessageHistory.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/removeUserFromRoom.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/saveUser.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/saveCustomFields.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/saveCustomFieldsWithoutValidation.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/sendMessage.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/settings.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/setUserAvatar.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/setUsername.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/setRealName.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/setEmail.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/unarchiveRoom.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/updateMessage.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/validateCustomFields.js");
require("/node_modules/meteor/rocketchat:lib/server/functions/Notifications.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/configLogger.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/PushNotification.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/defaultBlockedDomainsList.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/interceptDirectReplyEmails.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/loginErrorMessageOverride.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/notifyUsersOnMessage.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/processDirectEmail.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/roomTypes.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/sendNotificationsOnMessage.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/validateEmailDomain.js");
require("/node_modules/meteor/rocketchat:lib/server/lib/passwordPolicy.js");
require("/node_modules/meteor/rocketchat:lib/server/models/_Base.js");
require("/node_modules/meteor/rocketchat:lib/server/models/Avatars.js");
require("/node_modules/meteor/rocketchat:lib/server/models/Messages.js");
require("/node_modules/meteor/rocketchat:lib/server/models/Reports.js");
require("/node_modules/meteor/rocketchat:lib/server/models/Rooms.js");
require("/node_modules/meteor/rocketchat:lib/server/models/Settings.js");
require("/node_modules/meteor/rocketchat:lib/server/models/Subscriptions.js");
require("/node_modules/meteor/rocketchat:lib/server/models/Uploads.js");
require("/node_modules/meteor/rocketchat:lib/server/models/Users.js");
require("/node_modules/meteor/rocketchat:lib/server/models/ExportOperations.js");
require("/node_modules/meteor/rocketchat:lib/server/models/UserDataFiles.js");
require("/node_modules/meteor/rocketchat:lib/server/oauth/oauth.js");
require("/node_modules/meteor/rocketchat:lib/server/oauth/facebook.js");
require("/node_modules/meteor/rocketchat:lib/server/oauth/twitter.js");
require("/node_modules/meteor/rocketchat:lib/server/oauth/google.js");
require("/node_modules/meteor/rocketchat:lib/server/oauth/proxy.js");
require("/node_modules/meteor/rocketchat:lib/server/startup/statsTracker.js");
require("/node_modules/meteor/rocketchat:lib/server/publications/settings.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/addOAuthService.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/refreshOAuthService.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/addUserToRoom.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/addUsersToRoom.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/archiveRoom.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/blockUser.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/checkRegistrationSecretURL.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/checkUsernameAvailability.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/cleanRoomHistory.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/createChannel.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/createToken.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/createPrivateGroup.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/deleteMessage.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/deleteUserOwnAccount.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/executeSlashCommandPreview.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/filterBadWords.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/filterATAllTag.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/filterATHereTag.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/getChannelHistory.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/getFullUserData.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/getRoomJoinCode.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/getRoomRoles.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/getServerInfo.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/getSingleMessage.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/getSlashCommandPreviews.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/getUserRoles.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/insertOrUpdateUser.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/joinDefaultChannels.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/joinRoom.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/leaveRoom.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/removeOAuthService.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/restartServer.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/robotMethods.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/saveSetting.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/sendInvitationEmail.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/sendMessage.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/sendSMTPTestEmail.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/setAdminStatus.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/setRealName.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/setUsername.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/setEmail.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/unarchiveRoom.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/unblockUser.js");
require("/node_modules/meteor/rocketchat:lib/server/methods/updateMessage.js");
require("/node_modules/meteor/rocketchat:lib/server/startup/settingsOnLoadCdnPrefix.js");
require("/node_modules/meteor/rocketchat:lib/server/startup/settingsOnLoadDirectReply.js");
require("/node_modules/meteor/rocketchat:lib/server/startup/settingsOnLoadSMTP.js");
require("/node_modules/meteor/rocketchat:lib/server/startup/oAuthServicesUpdate.js");
require("/node_modules/meteor/rocketchat:lib/server/startup/settings.js");
require("/node_modules/meteor/rocketchat:lib/lib/startup/settingsOnLoadSiteUrl.js");
require("/node_modules/meteor/rocketchat:lib/startup/defaultRoomTypes.js");
require("/node_modules/meteor/rocketchat:lib/startup/index.js");
require("/node_modules/meteor/rocketchat:lib/rocketchat.info.js");
var exports = require("/node_modules/meteor/rocketchat:lib/server/lib/index.js");

/* Exports */
Package._define("rocketchat:lib", exports, {
  RocketChat: RocketChat
});

})();

//# sourceURL=meteor://💻app/packages/rocketchat_lib.js
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL2NvcmUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9zZXR0aW5ncy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL1Jvb21UeXBlQ29uZmlnLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvcm9vbVR5cGVzL2NvbnZlcnNhdGlvbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL3Jvb21UeXBlcy9kaXJlY3QuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9yb29tVHlwZXMvZmF2b3JpdGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9yb29tVHlwZXMvaW5kZXguanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9yb29tVHlwZXMvcHJpdmF0ZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL3Jvb21UeXBlcy9wdWJsaWMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9yb29tVHlwZXMvdW5yZWFkLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvZ2V0VVJMLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvY2FsbGJhY2tzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvZmlsZVVwbG9hZFJlc3RyaWN0aW9ucy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL2dldEF2YXRhckNvbG9yLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvZ2V0RGVmYXVsdFN1YnNjcmlwdGlvblByZWYuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9nZXRWYWxpZFJvb21OYW1lLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvcGxhY2Vob2xkZXJzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvcHJvbWlzZXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9Sb29tVHlwZXNDb21tb24uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9zbGFzaENvbW1hbmQuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9NZXNzYWdlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvTWVzc2FnZVByb3BlcnRpZXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9tZXNzYWdlQm94LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvTWVzc2FnZVR5cGVzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvdGVtcGxhdGVWYXJIYW5kbGVyLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9saWIvZ2V0VXNlck5vdGlmaWNhdGlvblByZWZlcmVuY2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL2xpYi9nZXRVc2VyUHJlZmVyZW5jZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvbGliL3N0YXJ0dXAvc2V0dGluZ3NPbkxvYWRTaXRlVXJsLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbGliL2RlYnVnLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbGliL2J1Z3NuYWcuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9saWIvbWV0cmljcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2xpYi9SYXRlTGltaXRlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2xpYi9jb25maWdMb2dnZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9saWIvUHVzaE5vdGlmaWNhdGlvbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2xpYi9kZWZhdWx0QmxvY2tlZERvbWFpbnNMaXN0LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbGliL2ludGVyY2VwdERpcmVjdFJlcGx5RW1haWxzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbGliL2xvZ2luRXJyb3JNZXNzYWdlT3ZlcnJpZGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9saWIvbm90aWZ5VXNlcnNPbk1lc3NhZ2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9saWIvcHJvY2Vzc0RpcmVjdEVtYWlsLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbGliL3Jvb21UeXBlcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2xpYi9zZW5kTm90aWZpY2F0aW9uc09uTWVzc2FnZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2xpYi92YWxpZGF0ZUVtYWlsRG9tYWluLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbGliL3Bhc3N3b3JkUG9saWN5LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbGliL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbGliL1Bhc3N3b3JkUG9saWN5Q2xhc3MuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvaXNEb2NrZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvYWRkVXNlclRvRGVmYXVsdENoYW5uZWxzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL2FkZFVzZXJUb1Jvb20uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvYXJjaGl2ZVJvb20uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvY2hlY2tVc2VybmFtZUF2YWlsYWJpbGl0eS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9jaGVja0VtYWlsQXZhaWxhYmlsaXR5LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL2NyZWF0ZVJvb20uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvY2xlYW5Sb29tSGlzdG9yeS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9kZWxldGVNZXNzYWdlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL2RlbGV0ZVVzZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvZ2V0RnVsbFVzZXJEYXRhLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL2dldFJvb21CeU5hbWVPcklkV2l0aE9wdGlvblRvSm9pbi5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9sb2FkTWVzc2FnZUhpc3RvcnkuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvcmVtb3ZlVXNlckZyb21Sb29tLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL3NhdmVVc2VyLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL3NhdmVDdXN0b21GaWVsZHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvc2F2ZUN1c3RvbUZpZWxkc1dpdGhvdXRWYWxpZGF0aW9uLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL3NlbmRNZXNzYWdlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL3NldHRpbmdzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL3NldFVzZXJBdmF0YXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvc2V0VXNlcm5hbWUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvc2V0UmVhbE5hbWUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvc2V0RW1haWwuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvdW5hcmNoaXZlUm9vbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy91cGRhdGVNZXNzYWdlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL3ZhbGlkYXRlQ3VzdG9tRmllbGRzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL05vdGlmaWNhdGlvbnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvbm90aWZpY2F0aW9ucy9hdWRpby5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9ub3RpZmljYXRpb25zL2Rlc2t0b3AuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9mdW5jdGlvbnMvbm90aWZpY2F0aW9ucy9lbWFpbC5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL2Z1bmN0aW9ucy9ub3RpZmljYXRpb25zL2luZGV4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvZnVuY3Rpb25zL25vdGlmaWNhdGlvbnMvbW9iaWxlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbW9kZWxzL19CYXNlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbW9kZWxzL0F2YXRhcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tb2RlbHMvTWVzc2FnZXMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tb2RlbHMvUmVwb3J0cy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21vZGVscy9Sb29tcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21vZGVscy9TZXR0aW5ncy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21vZGVscy9TdWJzY3JpcHRpb25zLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbW9kZWxzL1VwbG9hZHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tb2RlbHMvVXNlcnMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tb2RlbHMvRXhwb3J0T3BlcmF0aW9ucy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21vZGVscy9Vc2VyRGF0YUZpbGVzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbW9kZWxzL19CYXNlRGIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9vYXV0aC9vYXV0aC5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL29hdXRoL2ZhY2Vib29rLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvb2F1dGgvdHdpdHRlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL29hdXRoL2dvb2dsZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL29hdXRoL3Byb3h5LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvc3RhcnR1cC9zdGF0c1RyYWNrZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9zdGFydHVwL3NldHRpbmdzT25Mb2FkQ2RuUHJlZml4LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvc3RhcnR1cC9zZXR0aW5nc09uTG9hZERpcmVjdFJlcGx5LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvc3RhcnR1cC9zZXR0aW5nc09uTG9hZFNNVFAuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9zdGFydHVwL29BdXRoU2VydmljZXNVcGRhdGUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9zdGFydHVwL3NldHRpbmdzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvc3RhcnR1cC9lbWFpbC5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL3B1YmxpY2F0aW9ucy9zZXR0aW5ncy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvYWRkT0F1dGhTZXJ2aWNlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9yZWZyZXNoT0F1dGhTZXJ2aWNlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9hZGRVc2VyVG9Sb29tLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9hZGRVc2Vyc1RvUm9vbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvYXJjaGl2ZVJvb20uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2Jsb2NrVXNlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvY2hlY2tSZWdpc3RyYXRpb25TZWNyZXRVUkwuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2NoZWNrVXNlcm5hbWVBdmFpbGFiaWxpdHkuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2NsZWFuUm9vbUhpc3RvcnkuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2NyZWF0ZUNoYW5uZWwuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2NyZWF0ZVRva2VuLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9jcmVhdGVQcml2YXRlR3JvdXAuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2RlbGV0ZU1lc3NhZ2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2RlbGV0ZVVzZXJPd25BY2NvdW50LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9leGVjdXRlU2xhc2hDb21tYW5kUHJldmlldy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvZmlsdGVyQmFkV29yZHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2ZpbHRlckFUQWxsVGFnLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9maWx0ZXJBVEhlcmVUYWcuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2dldENoYW5uZWxIaXN0b3J5LmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9nZXRGdWxsVXNlckRhdGEuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2dldFJvb21Kb2luQ29kZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvZ2V0Um9vbVJvbGVzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9nZXRTZXJ2ZXJJbmZvLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9nZXRTaW5nbGVNZXNzYWdlLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9nZXRTbGFzaENvbW1hbmRQcmV2aWV3cy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvZ2V0VXNlclJvbGVzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9pbnNlcnRPclVwZGF0ZVVzZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2pvaW5EZWZhdWx0Q2hhbm5lbHMuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL2pvaW5Sb29tLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9sZWF2ZVJvb20uanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL3JlbW92ZU9BdXRoU2VydmljZS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvcmVzdGFydFNlcnZlci5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvcm9ib3RNZXRob2RzLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9zYXZlU2V0dGluZy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvc2VuZEludml0YXRpb25FbWFpbC5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvc2VuZE1lc3NhZ2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL3NlbmRTTVRQVGVzdEVtYWlsLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9zZXRBZG1pblN0YXR1cy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvc2V0UmVhbE5hbWUuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL3NldFVzZXJuYW1lLmpzIiwibWV0ZW9yOi8v8J+Su2FwcC9wYWNrYWdlcy9yb2NrZXRjaGF0OmxpYi9zZXJ2ZXIvbWV0aG9kcy9zZXRFbWFpbC5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvdW5hcmNoaXZlUm9vbS5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc2VydmVyL21ldGhvZHMvdW5ibG9ja1VzZXIuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3NlcnZlci9tZXRob2RzL3VwZGF0ZU1lc3NhZ2UuanMiLCJtZXRlb3I6Ly/wn5K7YXBwL3BhY2thZ2VzL3JvY2tldGNoYXQ6bGliL3N0YXJ0dXAvZGVmYXVsdFJvb21UeXBlcy5qcyIsIm1ldGVvcjovL/CfkrthcHAvcGFja2FnZXMvcm9ja2V0Y2hhdDpsaWIvc3RhcnR1cC9pbmRleC5qcyJdLCJuYW1lcyI6WyJFdmVudEVtaXR0ZXIiLCJtb2R1bGUiLCJ3YXRjaCIsInJlcXVpcmUiLCJkZWZhdWx0IiwidiIsIlJvY2tldENoYXQiLCJtb2RlbHMiLCJfIiwic2V0dGluZ3MiLCJjYWxsYmFja3MiLCJyZWdleENhbGxiYWNrcyIsInRzIiwiRGF0ZSIsImdldCIsIl9pZCIsImNhbGxiYWNrIiwib25sb2FkIiwiTWV0ZW9yIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsImlzUmVnRXhwIiwidGVzdCIsInJlZHVjZSIsIml0ZW1zIiwicHVzaCIsInNldCIsImNhbGwiLCJiYXRjaFNldCIsInNhdmUiLCJzZXR0aW5nIiwiZWRpdG9yIiwiYWN0aW9ucyIsIm1hcCIsInJlZHVjZVJpZ2h0Iiwid3JhcCIsImVyciIsInN1Y2Nlc3MiLCJsb2FkIiwiaW5pdGlhbExvYWQiLCJpdGVtIiwiY2JLZXkiLCJjYlZhbHVlIiwicmVnZXgiLCJjb25jYXQiLCJrIiwibmFtZSIsInNvdXJjZSIsImV4cG9ydCIsIlJvb21TZXR0aW5nc0VudW0iLCJVaVRleHRDb250ZXh0IiwiUm9vbVR5cGVSb3V0ZUNvbmZpZyIsIlJvb21UeXBlQ29uZmlnIiwiTkFNRSIsIlRPUElDIiwiQU5OT1VOQ0VNRU5UIiwiREVTQ1JJUFRJT04iLCJSRUFEX09OTFkiLCJSRUFDVF9XSEVOX1JFQURfT05MWSIsIkFSQ0hJVkVfT1JfVU5BUkNISVZFIiwiSk9JTl9DT0RFIiwiQlJPQURDQVNUIiwiU1lTVEVNX01FU1NBR0VTIiwiRTJFIiwiQ0xPU0VfV0FSTklORyIsIkhJREVfV0FSTklORyIsIkxFQVZFX1dBUk5JTkciLCJOT19ST09NU19TVUJTQ1JJQkVEIiwiY29uc3RydWN0b3IiLCJwYXRoIiwibGVuZ3RoIiwiRXJyb3IiLCJfbmFtZSIsIl9wYXRoIiwiaWRlbnRpZmllciIsIlJhbmRvbSIsImlkIiwib3JkZXIiLCJpY29uIiwiaGVhZGVyIiwibGFiZWwiLCJyb3V0ZSIsIl9pZGVudGlmaWVyIiwiX29yZGVyIiwiX2ljb24iLCJfaGVhZGVyIiwiX2xhYmVsIiwiX3JvdXRlIiwiZ2V0RGlzcGxheU5hbWUiLCJyb29tIiwiYWxsb3dSb29tU2V0dGluZ0NoYW5nZSIsInJvb21OYW1lIiwiY2FuQmVDcmVhdGVkIiwiaXNTZXJ2ZXIiLCJhdXRoeiIsImhhc0F0TGVhc3RPbmVQZXJtaXNzaW9uIiwidXNlcklkIiwiY2FuQmVEZWxldGVkIiwidCIsInN1cHBvcnRNZW1iZXJzTGlzdCIsImlzR3JvdXBDaGF0IiwiY2FuQWRkVXNlciIsInVzZXJEZXRhaWxTaG93QWxsIiwidXNlckRldGFpbFNob3dBZG1pbiIsInByZXZlbnRSZW5hbWluZyIsImluY2x1ZGVJblJvb21TZWFyY2giLCJlbmFibGVNZW1iZXJzTGlzdFByb2ZpbGUiLCJnZXRVaVRleHQiLCJnZXRNc2dTZW5kZXIiLCJzZW5kZXJJZCIsIlVzZXJzIiwiZmluZE9uZUJ5SWQiLCJnZXROb3RpZmljYXRpb25EZXRhaWxzIiwidXNlciIsIm5vdGlmaWNhdGlvbk1lc3NhZ2UiLCJ0aXRsZSIsInRleHQiLCJ1c2VybmFtZSIsImNhbkFjY2Vzc1VwbG9hZGVkRmlsZSIsIkNvbnZlcnNhdGlvblJvb21UeXBlIiwiY29uZGl0aW9uIiwiZ2V0VXNlclByZWZlcmVuY2UiLCJEaXJlY3RNZXNzYWdlUm9vbVJvdXRlIiwiRGlyZWN0TWVzc2FnZVJvb21UeXBlIiwiYWN0aW9uIiwicGFyYW1zIiwib3BlblJvb20iLCJsaW5rIiwic3ViIiwiZmluZFJvb20iLCJxdWVyeSIsInN1YnNjcmlwdGlvbiIsIlN1YnNjcmlwdGlvbnMiLCJmaW5kT25lIiwicmlkIiwiQ2hhdFJvb20iLCJyb29tRGF0YSIsImZpZWxkcyIsImZuYW1lIiwic2Vjb25kYXJ5Um9vbU5hbWUiLCJncm91cEJ5VHlwZSIsImdldFVzZXJTdGF0dXMiLCJyb29tSWQiLCJTZXNzaW9uIiwidXNlcm5hbWVzIiwiam9pbiIsImNvbnRleHQiLCJGYXZvcml0ZVJvb21UeXBlIiwiUHJpdmF0ZVJvb21UeXBlIiwiUHVibGljUm9vbVR5cGUiLCJVbnJlYWRSb29tVHlwZSIsIlByaXZhdGVSb29tUm91dGUiLCJoYXNBbGxQZXJtaXNzaW9uIiwiYnJvYWRjYXN0Iiwicm8iLCJQdWJsaWNSb29tUm91dGUiLCJzaG93Sm9pbkxpbmsiLCJ1bnJlYWQiLCJzIiwiZ2V0VVJMIiwiY2RuIiwiZnVsbCIsImNkblByZWZpeCIsInJ0cmltIiwidHJpbSIsInBhdGhQcmVmaXgiLCJfX21ldGVvcl9ydW50aW1lX2NvbmZpZ19fIiwiUk9PVF9VUkxfUEFUSF9QUkVGSVgiLCJiYXNlUGF0aCIsImZpbmFsUGF0aCIsImx0cmltIiwiaXNDb3Jkb3ZhIiwiYWJzb2x1dGVVcmwiLCJzaG93VGltZSIsInNob3dUb3RhbFRpbWUiLCJwcmlvcml0eSIsIkhJR0giLCJNRURJVU0iLCJMT1ciLCJnZXRIb29rcyIsImhvb2tOYW1lIiwiYWRkIiwiaG9vayIsImlzTnVtYmVyIiwic3RhY2siLCJmaW5kIiwiY2IiLCJzb3J0QnkiLCJyZW1vdmUiLCJmaWx0ZXIiLCJydW4iLCJjb25zdGFudCIsInJvY2tldGNoYXRIb29rc0VuZCIsIm1ldHJpY3MiLCJyb2NrZXRjaGF0SG9va3MiLCJzdGFydFRpbWVyIiwiY2FsbGJhY2tzX2xlbmd0aCIsInRvdGFsVGltZSIsInJlc3VsdCIsInJvY2tldGNoYXRDYWxsYmFja3NFbmQiLCJyb2NrZXRjaGF0Q2FsbGJhY2tzIiwidGltZSIsIm5vdyIsImNhbGxiYWNrUmVzdWx0IiwiY3VycmVudFRpbWUiLCJzdGF0c1RyYWNrZXIiLCJ0aW1pbmciLCJzcGxpdCIsIm1hdGNoIiwiY29uc29sZSIsImxvZyIsIlN0cmluZyIsInJ1bkFzeW5jIiwiZGVmZXIiLCJmaWxlVXBsb2FkTWVkaWFXaGl0ZUxpc3QiLCJtZWRpYVR5cGVXaGl0ZUxpc3QiLCJmaWxlVXBsb2FkSXNWYWxpZENvbnRlbnRUeXBlIiwidHlwZSIsImxpc3QiLCJjb250YWlucyIsIndpbGRDYXJkR2xvYiIsIndpbGRjYXJkcyIsImluZGV4T2YiLCJyZXBsYWNlIiwiY29sb3JzIiwiZ2V0QXZhdGFyQ29sb3IiLCJnZXREZWZhdWx0U3Vic2NyaXB0aW9uUHJlZiIsIl9nZXREZWZhdWx0U3Vic2NyaXB0aW9uUHJlZiIsInVzZXJQcmVmIiwiZGVza3RvcE5vdGlmaWNhdGlvbnMiLCJtb2JpbGVOb3RpZmljYXRpb25zIiwiZW1haWxOb3RpZmljYXRpb25Nb2RlIiwiaGlnaGxpZ2h0cyIsInByZWZlcmVuY2VzIiwiQXJyYXkiLCJpc0FycmF5IiwidXNlckhpZ2hsaWdodHMiLCJkZXNrdG9wUHJlZk9yaWdpbiIsIm1vYmlsZVB1c2hOb3RpZmljYXRpb25zIiwibW9iaWxlUHJlZk9yaWdpbiIsImVtYWlsTm90aWZpY2F0aW9ucyIsImVtYWlsUHJlZk9yaWdpbiIsImdldFZhbGlkUm9vbU5hbWUiLCJkaXNwbGF5TmFtZSIsInNsdWdpZmllZE5hbWUiLCJSb29tcyIsImZpbmRPbmVCeURpc3BsYXlOYW1lIiwiYXJjaGl2ZWQiLCJmdW5jdGlvbiIsImNoYW5uZWxfbmFtZSIsInNsdWdpZnkiLCJuYW1lVmFsaWRhdGlvbiIsIlJlZ0V4cCIsImVycm9yIiwiZmluZE9uZUJ5TmFtZSIsInRtcE5hbWUiLCJuZXh0IiwiZmluZE9uZUJ5TmFtZUFuZE5vdElkIiwicGxhY2Vob2xkZXJzIiwic3RyIiwiZGF0YSIsInN0ckxlZnQiLCJzdHJSaWdodEJhY2siLCJlbWFpbCIsInBhc3N3b3JkIiwicmVhc29uIiwidW5zdWJzY3JpYmUiLCJwcm9taXNlcyIsImdldEhvb2siLCJwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJwcmV2aW91c1Byb21pc2UiLCJ0aGVuIiwiUm9vbVR5cGVzQ29tbW9uIiwicm9vbVR5cGVzIiwicm9vbVR5cGVzT3JkZXIiLCJtYWluT3JkZXIiLCJyb29tQ29uZmlnIiwicm91dGVDb25maWciLCJpc0NsaWVudCIsInRyaWdnZXJzRXhpdCIsInJvb21FeGl0IiwiRmxvd1JvdXRlciIsImhhc0N1c3RvbUxpbmsiLCJyb29tVHlwZSIsImdldFJvdXRlTGluayIsInN1YkRhdGEiLCJyb3V0ZURhdGEiLCJnZXRDb25maWciLCJhcmdzIiwic2xhc2hDb21tYW5kcyIsImNvbW1hbmRzIiwiX2FkZGluZ1NsYXNoQ29tbWFuZCIsImNvbW1hbmQiLCJvcHRpb25zIiwicHJvdmlkZXNQcmV2aWV3IiwicHJldmlld2VyIiwicHJldmlld0NhbGxiYWNrIiwiZGVzY3JpcHRpb24iLCJwZXJtaXNzaW9uIiwiY2xpZW50T25seSIsIl9ydW5uaW5nU2xhc2hDb21tYW5kIiwibWVzc2FnZSIsImdldFByZXZpZXdzIiwiX2dldHRpbmdTbGFzaENvbW1hbmRQcmV2aWV3cyIsInByZXZpZXdJbmZvIiwic2xpY2UiLCJleGVjdXRlUHJldmlldyIsIl9leGVjdXRlU2xhc2hDb21tYW5kUHJldmlldyIsInByZXZpZXciLCJtZXRob2RzIiwic2xhc2hDb21tYW5kIiwibWV0aG9kIiwiY21kIiwibXNnIiwiTWVzc2FnZSIsInBhcnNlIiwibGFuZ3VhZ2UiLCJtZXNzYWdlVHlwZSIsIk1lc3NhZ2VUeXBlcyIsImdldFR5cGUiLCJyZW5kZXIiLCJ0ZW1wbGF0ZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJUQVBpMThuIiwiX18iLCJ1IiwiaHRtbCIsImVzY2FwZUhUTUwiLCJtZXNzYWdlUHJvcGVydGllcyIsIkdyYXBoZW1lU3BsaXR0ZXIiLCJzcGxpdHRlciIsImNvdW50R3JhcGhlbWVzIiwibWVzc2FnZVdpdGhvdXRFbW9qaVNob3J0bmFtZXMiLCJlbW9qaSIsInVuZGVmaW5lZCIsIm1lc3NhZ2VCb3giLCJncm91cCIsImNvbmZpZyIsImFjdGlvbkV4aXN0cyIsImV4cHJlc3Npb24iLCJyZXQiLCJnZXRCeUlkIiwibWVzc2FnZUFjdGlvbnMiLCJ0eXBlcyIsInJlZ2lzdGVyVHlwZSIsImlzU3lzdGVtTWVzc2FnZSIsInN5c3RlbSIsInN0YXJ0dXAiLCJyb29tX25hbWUiLCJ1c2VyX2J5IiwidXNlcl9hZGRlZCIsInVzZXJfcmVtb3ZlZCIsInVzZXJfbGVmdCIsInVzZXJfbXV0ZWQiLCJ1c2VyX3VubXV0ZWQiLCJyb2xlIiwibG9nZ2VyIiwiTG9nZ2VyIiwidGVtcGxhdGVWYXJIYW5kbGVyIiwidmFyaWFibGUiLCJvYmplY3QiLCJ0ZW1wbGF0ZVJlZ2V4IiwiZXhlYyIsInRtcFZhcmlhYmxlIiwiaGFzT3duUHJvcGVydHkiLCJkZWJ1ZyIsInRtcGxWYXIiLCJ0bXBsQXR0ck5hbWUiLCJhdHRyVmFsIiwiZ2V0VXNlck5vdGlmaWNhdGlvblByZWZlcmVuY2UiLCJfZ2V0VXNlck5vdGlmaWNhdGlvblByZWZlcmVuY2UiLCJwcmVmIiwicHJlZmVyZW5jZUtleSIsIm9yaWdpbiIsInNlcnZlclZhbHVlIiwiZGVmYXVsdFZhbHVlIiwicHJlZmVyZW5jZSIsImhvc3QiLCJST09UX1VSTCIsImRlZmF1bHRPcHRpb25zIiwicm9vdFVybCIsImhvc3RuYW1lIiwicHJvY2VzcyIsImVudiIsIk1PQklMRV9ST09UX1VSTCIsIk1PQklMRV9ERFBfVVJMIiwiV2ViQXBwSW50ZXJuYWxzIiwiZ2VuZXJhdGVCb2lsZXJwbGF0ZSIsInB1Ymxpc2giLCJMb2dfVHJhY2VfTWV0aG9kcyIsIkxvZ19UcmFjZV9TdWJzY3JpcHRpb25zIiwiTG9nX1RyYWNlX01ldGhvZHNfRmlsdGVyIiwiTG9nX1RyYWNlX1N1YnNjcmlwdGlvbnNfRmlsdGVyIiwidHJhY2VDb25uZWN0aW9uIiwiZW5hYmxlIiwicHJlZml4IiwiY29ubmVjdGlvbiIsImNsaWVudEFkZHJlc3MiLCJodHRwSGVhZGVycyIsIndyYXBNZXRob2RzIiwib3JpZ2luYWxIYW5kbGVyIiwibWV0aG9kc01hcCIsIm9yaWdpbmFsQXJncyIsImVuZCIsIm1ldGVvck1ldGhvZHMiLCJoYXNfY29ubmVjdGlvbiIsImhhc191c2VyIiwicHJvdG90eXBlIiwidW5ibG9jayIsImFwcGx5Iiwib3JpZ2luYWxNZXRlb3JNZXRob2RzIiwibWV0aG9kTWFwIiwiZWFjaCIsImhhbmRsZXIiLCJvcmlnaW5hbE1ldGVvclB1Ymxpc2giLCJmdW5jIiwibWV0ZW9yU3Vic2NyaXB0aW9ucyIsIm9yaWdpbmFsUmVhZHkiLCJyZWFkeSIsIldlYkFwcCIsInJhd0Nvbm5lY3RIYW5kbGVycyIsInVzZSIsInJlcSIsInJlcyIsInNldEhlYWRlciIsIkluc3RhbmNlU3RhdHVzIiwiYnVnc25hZyIsInJlZ2lzdGVyIiwibm90aWZ5IiwiSW5mbyIsImFwcCIsInZlcnNpb24iLCJpbmZvIiwib24iLCJiaW5kRW52aXJvbm1lbnQiLCJvcmlnaW5hbE1ldGVvckRlYnVnIiwiX2RlYnVnIiwiY2xpZW50IiwiY29ubmVjdCIsImh0dHAiLCJwcm9tY2xpZW50IiwiY29sbGVjdERlZmF1bHRNZXRyaWNzIiwiU3VtbWFyeSIsImhlbHAiLCJsYWJlbE5hbWVzIiwicm9ja2V0Y2hhdFJlc3RBcGkiLCJtZXNzYWdlc1NlbnQiLCJDb3VudGVyIiwibm90aWZpY2F0aW9uc1NlbnQiLCJkZHBTZXNzaW9ucyIsIkdhdWdlIiwiZGRwQXRoZW50aWNhdGVkU2Vzc2lvbnMiLCJkZHBDb25uZWN0ZWRVc2VycyIsIm1pZ3JhdGlvbiIsImluc3RhbmNlQ291bnQiLCJvcGxvZ0VuYWJsZWQiLCJ0b3RhbFVzZXJzIiwiYWN0aXZlVXNlcnMiLCJub25BY3RpdmVVc2VycyIsIm9ubGluZVVzZXJzIiwiYXdheVVzZXJzIiwib2ZmbGluZVVzZXJzIiwidG90YWxSb29tcyIsInRvdGFsQ2hhbm5lbHMiLCJ0b3RhbFByaXZhdGVHcm91cHMiLCJ0b3RhbERpcmVjdCIsInRvdGFsTGl2ZWNoYXQiLCJ0b3RhbE1lc3NhZ2VzIiwidG90YWxDaGFubmVsTWVzc2FnZXMiLCJ0b3RhbFByaXZhdGVHcm91cE1lc3NhZ2VzIiwidG90YWxEaXJlY3RNZXNzYWdlcyIsInRvdGFsTGl2ZWNoYXRNZXNzYWdlcyIsInNldERlZmF1bHRMYWJlbHMiLCJ1bmlxdWVJZCIsInNpdGVVcmwiLCJzZXRQcm9tZXRoZXVzRGF0YSIsImRhdGUiLCJ1bmlxdWVfaWQiLCJzaXRlX3VybCIsInNlc3Npb25zIiwidmFsdWVzIiwic2VydmVyIiwiYXV0aGVudGljYXRlZFNlc3Npb25zIiwidW5pcXVlIiwiU3RhdGlzdGljcyIsInN0YXRpc3RpY3MiLCJmaW5kTGFzdCIsIk1pZ3JhdGlvbnMiLCJfZ2V0Q29udHJvbCIsImVuYWJsZWQiLCJ3cml0ZSIsImNyZWF0ZVNlcnZlciIsInRpbWVyIiwidXBkYXRlUHJvbWV0aGV1c0NvbmZpZyIsInBvcnQiLCJsaXN0ZW4iLCJCSU5EX0lQIiwic2V0SW50ZXJ2YWwiLCJjbG9zZSIsImNsZWFySW50ZXJ2YWwiLCJSYXRlTGltaXRlciIsImxpbWl0RnVuY3Rpb24iLCJmbiIsIm51bVJlcXVlc3RzIiwidGltZUludGVydmFsIiwibWF0Y2hlcnMiLCJURVNUX01PREUiLCJyYXRlTGltaXRlciIsImFkZFJ1bGUiLCJtYXRjaGVyIiwiaW5jcmVtZW50IiwicmF0ZUxpbWl0UmVzdWx0IiwiY2hlY2siLCJhbGxvd2VkIiwiTWF0aCIsImNlaWwiLCJ0aW1lVG9SZXNldCIsInNlY29uZHMiLCJsaW1pdE1ldGhvZCIsIm1ldGhvZE5hbWUiLCJERFBSYXRlTGltaXRlciIsIkxvZ2dlck1hbmFnZXIiLCJzaG93UGFja2FnZSIsInNob3dGaWxlQW5kTGluZSIsImxvZ0xldmVsIiwicGFyc2VJbnQiLCJzZXRUaW1lb3V0IiwiUHVzaE5vdGlmaWNhdGlvbiIsImdldE5vdGlmaWNhdGlvbklkIiwic2VydmVySWQiLCJoYXNoIiwiaSIsImNoYXJDb2RlQXQiLCJzZW5kIiwidXNlcnNUbyIsInBheWxvYWQiLCJiYWRnZSIsImNhdGVnb3J5IiwiZnJvbSIsInNvdW5kIiwibm90SWQiLCJnY20iLCJzdHlsZSIsInN1bW1hcnlUZXh0IiwiaW1hZ2UiLCJBc3NldHMiLCJhcG4iLCJpbmMiLCJub3RpZmljYXRpb25fdHlwZSIsIlB1c2giLCJlbWFpbERvbWFpbkRlZmF1bHRCbGFja0xpc3QiLCJJTUFQSW50ZXJjZXB0ZXIiLCJQT1AzSW50ZXJjZXB0ZXIiLCJQT1AzSGVscGVyIiwiSU1BUCIsIlBPUDMiLCJzaW1wbGVQYXJzZXIiLCJpbWFwIiwidGxzIiwiY29ublRpbWVvdXQiLCJrZWVwYWxpdmUiLCJkZWxldGUiLCJzdGF0ZSIsIm9wZW5JbmJveCIsImdldEVtYWlscyIsIm9wZW5Cb3giLCJzdGFydCIsImlzQWN0aXZlIiwic3RvcCIsIkZ1bmN0aW9uIiwib25jZSIsInJlc3RhcnQiLCJzZWFyY2giLCJuZXdFbWFpbHMiLCJmIiwiZmV0Y2giLCJib2RpZXMiLCJzdHJ1Y3QiLCJtYXJrU2VlbiIsInNlcW5vIiwic3RyZWFtIiwiaGVhZGVyQnVmZmVyIiwiYm9keUJ1ZmZlciIsImNodW5rIiwid2hpY2giLCJ0b1N0cmluZyIsImJvZHkiLCJoZWFkZXJzIiwicGFyc2VIZWFkZXIiLCJ0byIsInNlcSIsImFkZEZsYWdzIiwicHJvY2Vzc0RpcmVjdEVtYWlsIiwicG9wMyIsImVuYWJsZXRscyIsInRvdGFsTXNnQ291bnQiLCJjdXJyZW50TXNnQ291bnQiLCJsb2dpbiIsInN0YXR1cyIsIm1zZ2NvdW50IiwicmV0ciIsInF1aXQiLCJtc2dudW1iZXIiLCJtYWlsIiwiaW5pdGlhbFByb2Nlc3MiLCJkZWxlIiwibWVzc2FnZUlkIiwicnVubmluZyIsIm1heCIsIl9ydW5Mb2dpbkhhbmRsZXJzIiwiQWNjb3VudHMiLCJtZXRob2RJbnZvY2F0aW9uIiwibWVzc2FnZUNvbnRhaW5zSGlnaGxpZ2h0IiwibW9tZW50Iiwic29tZSIsImhpZ2hsaWdodCIsInJlZ2V4cCIsImVzY2FwZVJlZ0V4cCIsIm5vdGlmeVVzZXJzT25NZXNzYWdlIiwiZWRpdGVkQXQiLCJhYnMiLCJkaWZmIiwiaW5jTXNnQ291bnRCeUlkIiwibGFzdE1lc3NhZ2UiLCJzZXRMYXN0TWVzc2FnZUJ5SWQiLCJ0b0FsbCIsInRvSGVyZSIsIm1lbnRpb25JZHMiLCJoaWdobGlnaHRzSWRzIiwiZmluZEJ5Um9vbVdpdGhVc2VySGlnaGxpZ2h0cyIsIm1lbnRpb25zIiwibWVudGlvbiIsInVucmVhZENvdW50RE0iLCJpbmNVbnJlYWRGb3JSb29tSWRFeGNsdWRpbmdVc2VySWQiLCJpbmNHcm91cE1lbnRpb25zQW5kVW5yZWFkRm9yUm9vbUlkRXhjbHVkaW5nVXNlcklkIiwiaW5jVXNlck1lbnRpb25zQW5kVW5yZWFkRm9yUm9vbUlkQW5kVXNlcklkcyIsImNvbXBhY3QiLCJ1bnJlYWRDb3VudCIsImluY1VucmVhZCIsImluY2x1ZGVzIiwiaW5jTXNnQ291bnRBbmRTZXRMYXN0TWVzc2FnZUJ5SWQiLCJzZXRBbGVydEZvclJvb21JZEV4Y2x1ZGluZ1VzZXJJZCIsInNldE9wZW5Gb3JSb29tSWRFeGNsdWRpbmdVc2VySWQiLCJyZXBseSIsIkVtYWlsUmVwbHlQYXJzZXIiLCJzZW5kTWVzc2FnZSIsInNlbnRCeUVtYWlsIiwiZ3JvdXBhYmxlIiwidHNEaWZmIiwiZmluZE9uZUJ5RW1haWxBZGRyZXNzIiwicHJldk1lc3NhZ2UiLCJNZXNzYWdlcyIsIm1pZCIsInJvb21JbmZvIiwicHJldk1lc3NhZ2VMaW5rIiwiZmluZE9uZUJ5Um9vbUlkQW5kVXNlcklkIiwiYmxvY2tlZCIsImJsb2NrZXIiLCJtdXRlZCIsImFsaWFzIiwicGFyc2VfcmVwbHkiLCJyb29tVHlwZXNTZXJ2ZXIiLCJzZXRQdWJsaXNoIiwic2V0Um9vbUZpbmQiLCJyb29tRmluZCIsImdldFJvb21GaW5kIiwiZ2V0Um9vbU5hbWUiLCJydW5QdWJsaXNoIiwic2NvcGUiLCJzZW5kTm90aWZpY2F0aW9uIiwiY2FsbEpvaW5Sb29tIiwicGFyc2VNZXNzYWdlVGV4dFBlclVzZXIiLCJyZXBsYWNlTWVudGlvbmVkVXNlcm5hbWVzV2l0aEZ1bGxOYW1lcyIsInNlbmRFbWFpbCIsInNob3VsZE5vdGlmeUVtYWlsIiwic2VuZFNpbmdsZVB1c2giLCJzaG91bGROb3RpZnlNb2JpbGUiLCJub3RpZnlEZXNrdG9wVXNlciIsInNob3VsZE5vdGlmeURlc2t0b3AiLCJub3RpZnlBdWRpb1VzZXIiLCJzaG91bGROb3RpZnlBdWRpbyIsInNlbmRlciIsImhhc01lbnRpb25Ub0FsbCIsImhhc01lbnRpb25Ub0hlcmUiLCJkaXNhYmxlQWxsTWVzc2FnZU5vdGlmaWNhdGlvbnMiLCJkaXNhYmxlTm90aWZpY2F0aW9ucyIsImlnbm9yZWQiLCJoYXNNZW50aW9uVG9Vc2VyIiwibXV0ZUdyb3VwTWVudGlvbnMiLCJyZWNlaXZlciIsImFjdGl2ZSIsImhhc1Blcm1pc3Npb24iLCJpc0hpZ2hsaWdodGVkIiwiYXVkaW9Ob3RpZmljYXRpb25zIiwibm90aWZpY2F0aW9uU2VudCIsImR1cmF0aW9uIiwiZGVza3RvcE5vdGlmaWNhdGlvbkR1cmF0aW9uIiwic3RhdHVzQ29ubmVjdGlvbiIsInNlbmRlclVzZXJuYW1lIiwic2VuZGVyTmFtZSIsInJlY2VpdmVyVXNlcm5hbWUiLCJlbWFpbHMiLCJ2ZXJpZmllZCIsImVtYWlsQWRkcmVzcyIsImFkZHJlc3MiLCJTYW5kc3Rvcm0iLCJzZW5kQWxsTm90aWZpY2F0aW9ucyIsIm1lbnRpb25JZHNXaXRob3V0R3JvdXBzIiwibWF4TWVtYmVyc0Zvck5vdGlmaWNhdGlvbiIsInJvb21NZW1iZXJzQ291bnQiLCJmaW5kQnlSb29tSWQiLCJjb3VudCIsIiRvciIsIiRleGlzdHMiLCJraW5kIiwibm90aWZpY2F0aW9uRmllbGQiLCIkbmUiLCIkaW4iLCJzZXJ2ZXJGaWVsZCIsInNlcnZlclByZWZlcmVuY2UiLCJzdWJzY3JpcHRpb25zIiwiZmluZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzQnlSb29tIiwiZmluZEJ5Um9vbUlkQW5kVXNlcklkcyIsImluZGV4Iiwic3BsaWNlIiwiYWxsIiwidXNlcnMiLCJjYXRjaCIsImRucyIsImVtYWlsRG9tYWluQmxhY2tMaXN0IiwiZW1haWxEb21haW5XaGl0ZUxpc3QiLCJ1c2VEZWZhdWx0QmxhY2tMaXN0IiwidXNlRE5TRG9tYWluQ2hlY2siLCJkb21haW4iLCJ2YWxpZGF0ZUVtYWlsRG9tYWluIiwiZW1haWxWYWxpZGF0aW9uIiwiZW1haWxEb21haW4iLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsIndyYXBBc3luYyIsInJlc29sdmVNeCIsImUiLCJQYXNzd29yZFBvbGljeSIsInBhc3N3b3JkUG9saWN5IiwibWluTGVuZ3RoIiwibWF4TGVuZ3RoIiwiZm9yYmlkUmVwZWF0aW5nQ2hhcmFjdGVycyIsImZvcmJpZFJlcGVhdGluZ0NoYXJhY3RlcnNDb3VudCIsIm11c3RDb250YWluQXRMZWFzdE9uZUxvd2VyY2FzZSIsIm11c3RDb250YWluQXRMZWFzdE9uZVVwcGVyY2FzZSIsIm11c3RDb250YWluQXRMZWFzdE9uZU51bWJlciIsIm11c3RDb250YWluQXRMZWFzdE9uZVNwZWNpYWxDaGFyYWN0ZXIiLCJ0aHJvd0Vycm9yIiwiX2ZvcmJpZFJlcGVhdGluZ0NoYXJhY3RlcnNDb3VudCIsImZvcmJpZGRpbmdSZXBlYXRpbmdDaGFyYWN0ZXJzIiwidmFsaWRhdGUiLCJleHBvcnREZWZhdWx0IiwiZnMiLCJoYXNEb2NrZXJFbnYiLCJzdGF0U3luYyIsImhhc0RvY2tlckNHcm91cCIsInJlYWRGaWxlU3luYyIsImlzRG9ja2VyIiwiYWRkVXNlclRvRGVmYXVsdENoYW5uZWxzIiwic2lsZW5jZWQiLCJkZWZhdWx0Um9vbXMiLCJmaW5kQnlEZWZhdWx0QW5kVHlwZXMiLCJtdXRlVXNlcm5hbWVCeVJvb21JZCIsImNyZWF0ZVdpdGhSb29tQW5kVXNlciIsIm9wZW4iLCJhbGVydCIsInVzZXJNZW50aW9ucyIsImdyb3VwTWVudGlvbnMiLCJjcmVhdGVVc2VySm9pbldpdGhSb29tSWRBbmRVc2VyIiwiYWRkVXNlclRvUm9vbSIsImludml0ZXIiLCJjcmVhdGVVc2VyQWRkZWRXaXRoUm9vbUlkQW5kVXNlciIsImFyY2hpdmVSb29tIiwiYXJjaGl2ZUJ5SWQiLCJhcmNoaXZlQnlSb29tSWQiLCJ1c2VybmFtZUJsYWNrTGlzdCIsInRvUmVnRXhwIiwidXNlcm5hbWVJc0Jsb2NrZWQiLCJyZXN0cmljdGVkVXNlcm5hbWUiLCJjaGVja1VzZXJuYW1lQXZhaWxhYmlsaXR5IiwiJHJlZ2V4IiwiY2hlY2tFbWFpbEF2YWlsYWJpbGl0eSIsImNyZWF0ZVJvb20iLCJvd25lciIsIm1lbWJlcnMiLCJyZWFkT25seSIsImV4dHJhRGF0YSIsImZpbmRPbmVCeVVzZXJuYW1lIiwicmVhY3RXaGVuUmVhZE9ubHkiLCJhc3NpZ24iLCJtc2dzIiwidXNlcnNDb3VudCIsInN5c01lcyIsIkFwcHMiLCJpc0xvYWRlZCIsInByZXZlbnQiLCJhd2FpdCIsImdldEJyaWRnZXMiLCJnZXRMaXN0ZW5lckJyaWRnZSIsInJvb21FdmVudCIsImNyZWF0ZVdpdGhGdWxsUm9vbURhdGEiLCJtZW1iZXIiLCJpc1RoZU93bmVyIiwiZXh0cmEiLCJscyIsImFkZFVzZXJSb2xlcyIsImNsZWFuUm9vbUhpc3RvcnkiLCJsYXRlc3QiLCJvbGRlc3QiLCJpbmNsdXNpdmUiLCJsaW1pdCIsImV4Y2x1ZGVQaW5uZWQiLCJmaWxlc09ubHkiLCJmcm9tVXNlcnMiLCJndCIsImx0IiwiZmlsZUNvdW50IiwiZmluZEZpbGVzQnlSb29tSWRQaW5uZWRUaW1lc3RhbXBBbmRVc2VycyIsInBpbm5lZCIsImRvY3VtZW50IiwiRmlsZVVwbG9hZCIsImdldFN0b3JlIiwiZGVsZXRlQnlJZCIsImZpbGUiLCJ1cGRhdGUiLCIkdW5zZXQiLCIkc2V0IiwiYXR0YWNobWVudHMiLCJjb2xvciIsInJlbW92ZUJ5SWRQaW5uZWRUaW1lc3RhbXBMaW1pdEFuZFVzZXJzIiwicmVtb3ZlQnlJZFBpbm5lZFRpbWVzdGFtcEFuZFVzZXJzIiwicmVzZXRMYXN0TWVzc2FnZUJ5SWQiLCJOb3RpZmljYXRpb25zIiwibm90aWZ5Um9vbSIsImRlbGV0ZU1lc3NhZ2UiLCJrZWVwSGlzdG9yeSIsInNob3dEZWxldGVkU3RhdHVzIiwiZGVsZXRlZE1zZyIsIm1lc3NhZ2VFdmVudCIsImNsb25lQW5kU2F2ZUFzSGlzdG9yeUJ5SWQiLCJzZXRIaWRkZW5CeUlkIiwiVXBsb2FkcyIsIl9oaWRkZW4iLCJyZW1vdmVCeUlkIiwic2V0QXNEZWxldGVkQnlJZEFuZFVzZXIiLCJkZWxldGVVc2VyIiwiYXZhdGFyT3JpZ2luIiwicm9vbUNhY2hlIiwiZGIiLCJmaW5kQnlVc2VySWQiLCJzdWJzY3JpYmVycyIsImhhc1JvbGUiLCJudW1Pd25lcnMiLCJnZXRVc2Vyc0luUm9sZSIsIm1lc3NhZ2VFcmFzdXJlVHlwZSIsInN0b3JlIiwiZmluZEZpbGVzQnlVc2VySWQiLCJyZW1vdmVCeVVzZXJJZCIsInJvY2tldENhdCIsIm5hbWVBbGlhcyIsInVubGlua1VzZXJJZCIsInJlbW92ZUJ5Um9vbUlkIiwicmVtb3ZlRmlsZXNCeVJvb21JZCIsInJlbW92ZURpcmVjdFJvb21Db250YWluaW5nVXNlcm5hbWUiLCJkZWxldGVCeU5hbWUiLCJJbnRlZ3JhdGlvbnMiLCJkaXNhYmxlQnlVc2VySWQiLCJub3RpZnlMb2dnZWQiLCJkZWZhdWx0RmllbGRzIiwidXRjT2Zmc2V0IiwiZnVsbEZpZWxkcyIsInBob25lIiwiY3JlYXRlZEF0IiwibGFzdExvZ2luIiwic2VydmljZXMiLCJyZXF1aXJlUGFzc3dvcmRDaGFuZ2UiLCJyZXF1aXJlUGFzc3dvcmRDaGFuZ2VSZWFzb24iLCJyb2xlcyIsInB1YmxpY0N1c3RvbUZpZWxkcyIsImN1c3RvbUZpZWxkcyIsImN1c3RvbUZpZWxkc09uU2VydmVyIiwiSlNPTiIsImVsZW1lbnQiLCJwdWJsaWMiLCJ3YXJuIiwiZ2V0RnVsbFVzZXJEYXRhIiwibCIsInVzZXJUb1JldHJpZXZlRnVsbFVzZXJEYXRhIiwiaXNNeU93bkluZm8iLCJ2aWV3RnVsbE90aGVyVXNlckluZm8iLCJfY3VzdG9tRmllbGRzIiwic29ydCIsImZpbmRCeVVzZXJuYW1lIiwidXNlcm5hbWVSZWciLCJmaW5kQnlVc2VybmFtZU5hbWVPckVtYWlsQWRkcmVzcyIsImdldFJvb21CeU5hbWVPcklkV2l0aE9wdGlvblRvSm9pbiIsIl9nZXRSb29tQnlOYW1lT3JJZFdpdGhPcHRpb25Ub0pvaW4iLCJjdXJyZW50VXNlcklkIiwibmFtZU9ySWQiLCJ0cnlEaXJlY3RCeVVzZXJJZE9ubHkiLCJqb2luQ2hhbm5lbCIsImVycm9yT25FbXB0eSIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJmaW5kT25lQnlJZE9yTmFtZSIsInJvb21Vc2VyIiwiaXNPYmplY3QiLCJydW5Bc1VzZXIiLCJoaWRlTWVzc2FnZXNPZlR5cGUiLCJsb2FkTWVzc2FnZUhpc3RvcnkiLCJyZWNvcmRzIiwiZmluZFZpc2libGVCeVJvb21JZEJlZm9yZVRpbWVzdGFtcE5vdENvbnRhaW5pbmdUeXBlcyIsImZpbmRWaXNpYmxlQnlSb29tSWROb3RDb250YWluaW5nVHlwZXMiLCJVSV9Vc2VfUmVhbF9OYW1lIiwibWVzc2FnZXMiLCJzdGFycmVkIiwiZmluZFdoZXJlIiwidW5yZWFkTm90TG9hZGVkIiwiZmlyc3RVbnJlYWQiLCJmaXJzdE1lc3NhZ2UiLCJ1bnJlYWRNZXNzYWdlcyIsImZpbmRWaXNpYmxlQnlSb29tSWRCZXR3ZWVuVGltZXN0YW1wc05vdENvbnRhaW5pbmdUeXBlcyIsInJlbW92ZVVzZXJGcm9tUm9vbSIsInJlbW92ZWRVc2VyIiwiY3JlYXRlVXNlckxlYXZlV2l0aFJvb21JZEFuZFVzZXIiLCJjcmVhdGVDb21tYW5kV2l0aFJvb21JZEFuZFVzZXIiLCJyZW1vdmVCeVJvb21JZEFuZFVzZXJJZCIsIk1haWxlciIsImdldFRlbXBsYXRlIiwidmFsaWRhdGVVc2VyRGF0YSIsInVzZXJEYXRhIiwiZXhpc3RpbmdSb2xlcyIsInBsdWNrIiwiZ2V0Um9sZXMiLCJkaWZmZXJlbmNlIiwiZmllbGQiLCJlc2NhcGUiLCJpbnB1dCIsInNhdmVVc2VyIiwiY3JlYXRlVXNlciIsImpvaW5EZWZhdWx0Q2hhbm5lbHMiLCJ1cGRhdGVVc2VyIiwic2VuZFdlbGNvbWVFbWFpbCIsInN1YmplY3QiLCJncmF2YXRhclVybCIsIkdyYXZhdGFyIiwiaW1hZ2VVcmwiLCJzaXplIiwic2VjdXJlIiwic2V0VXNlckF2YXRhciIsInNldFVzZXJuYW1lIiwic2V0UmVhbE5hbWUiLCJzaG91bGRTZW5kVmVyaWZpY2F0aW9uRW1haWxUb1VzZXIiLCJzZXRFbWFpbCIsInNldFBhc3N3b3JkIiwic2F2ZUN1c3RvbUZpZWxkcyIsImZvcm1EYXRhIiwidmFsaWRhdGVDdXN0b21GaWVsZHMiLCJzYXZlQ3VzdG9tRmllbGRzV2l0aG91dFZhbGlkYXRpb24iLCJjdXN0b21GaWVsZHNNZXRhIiwic2V0Q3VzdG9tRmllbGRzIiwic2V0Q3VzdG9tRmllbGRzRGlyZWN0TWVzc2FnZXNCeVVzZXJJZCIsImZpZWxkTmFtZSIsIm1vZGlmeVJlY29yZEZpZWxkIiwiYXJyYXkiLCIkYWRkVG9TZXQiLCJvYmplY3RNYXliZUluY2x1ZGluZyIsIk1hdGNoIiwiV2hlcmUiLCJ2YWxpZGF0ZUF0dGFjaG1lbnRzRmllbGRzIiwiYXR0YWNobWVudEZpZWxkIiwic2hvcnQiLCJCb29sZWFuIiwiT25lT2YiLCJJbnRlZ2VyIiwidmFsaWRhdGVBdHRhY2htZW50c0FjdGlvbnMiLCJhdHRhY2htZW50QWN0aW9ucyIsInVybCIsImltYWdlX3VybCIsImlzX3dlYnZpZXciLCJ3ZWJ2aWV3X2hlaWdodF9yYXRpbyIsIm1zZ19pbl9jaGF0X3dpbmRvdyIsInZhbGlkYXRlQXR0YWNobWVudCIsImF0dGFjaG1lbnQiLCJ0aHVtYl91cmwiLCJidXR0b25fYWxpZ25tZW50IiwiQW55IiwibWVzc2FnZV9saW5rIiwiY29sbGFwc2VkIiwiYXV0aG9yX25hbWUiLCJhdXRob3JfbGluayIsImF1dGhvcl9pY29uIiwidGl0bGVfbGluayIsInRpdGxlX2xpbmtfZG93bmxvYWQiLCJhdWRpb191cmwiLCJ2aWRlb191cmwiLCJ2YWxpZGF0ZUJvZHlBdHRhY2htZW50cyIsInVwc2VydCIsImF2YXRhciIsInBhcnNlVXJscyIsIk1hcmtkb3duIiwiY29kZSIsInVybHMiLCJtb3VudFRva2Vuc0JhY2siLCJ0b2tlbnMiLCJzYW5kc3Rvcm1TZXNzaW9uSWQiLCJpbnNlcnQiLCJibG9ja2VkU2V0dGluZ3MiLCJTRVRUSU5HU19CTE9DS0VEIiwic2V0dGluZ0lkIiwiaGlkZGVuU2V0dGluZ3MiLCJTRVRUSU5HU19ISURERU4iLCJfc29ydGVyIiwicGFja2FnZVZhbHVlIiwidmFsdWVTb3VyY2UiLCJoaWRkZW4iLCJzb3J0ZXIiLCJlbmFibGVRdWVyeSIsInN0cmluZ2lmeSIsImkxOG5EZWZhdWx0UXVlcnkiLCJ0b0xvd2VyQ2FzZSIsInByb2Nlc3NFbnZWYWx1ZSIsIm1ldGVvclNldHRpbmdzVmFsdWUiLCJpMThuTGFiZWwiLCJpMThuRGVzY3JpcHRpb24iLCJhdXRvY29tcGxldGUiLCJ1cGRhdGVPcGVyYXRpb25zIiwiJHNldE9uSW5zZXJ0IiwiZm9yY2UiLCJleHRlbmQiLCJzZWN0aW9uIiwiZXhpc3RhbnRTZXR0aW5nIiwiU2V0dGluZ3MiLCJhZGRHcm91cCIsImlzRnVuY3Rpb24iLCJ1cGRhdGVCeUlkIiwidXBkYXRlVmFsdWVBbmRFZGl0b3JCeUlkIiwidXBkYXRlVmFsdWVCeUlkIiwidXBkYXRlT3B0aW9uc0J5SWQiLCJjbGVhckJ5SWQiLCJpbml0Iiwib2JzZXJ2ZSIsImFkZGVkIiwicmVjb3JkIiwiY2hhbmdlZCIsInJlbW92ZWQiLCJhZnRlckluaXRpYWxMb2FkIiwib25BZnRlckluaXRpYWxMb2FkIiwiZGF0YVVSSSIsImNvbnRlbnRUeXBlIiwic2VydmljZSIsImVuY29kaW5nIiwic2V0QXZhdGFyT3JpZ2luIiwiSFRUUCIsIm5wbVJlcXVlc3RPcHRpb25zIiwicmVzcG9uc2UiLCJzdGF0dXNDb2RlIiwiY29udGVudCIsImZpbGVEYXRhIiwiUm9ja2V0Q2hhdEZpbGUiLCJkYXRhVVJJUGFyc2UiLCJidWZmZXIiLCJCdWZmZXIiLCJmaWxlU3RvcmUiLCJfc2V0VXNlcm5hbWUiLCJwcmV2aW91c1VzZXJuYW1lIiwic2VuZEVucm9sbG1lbnRFbWFpbCIsImF2YXRhclN1Z2dlc3Rpb25zIiwiZ2V0QXZhdGFyU3VnZ2VzdGlvbkZvclVzZXIiLCJncmF2YXRhciIsImF2YXRhckRhdGEiLCJibG9iIiwidXBkYXRlQWxsVXNlcm5hbWVzQnlVc2VySWQiLCJ1cGRhdGVVc2VybmFtZU9mRWRpdEJ5VXNlcklkIiwiZmluZEJ5TWVudGlvbiIsInVwZGF0ZWRNc2ciLCJ1cGRhdGVVc2VybmFtZUFuZE1lc3NhZ2VPZk1lbnRpb25CeUlkQW5kT2xkVXNlcm5hbWUiLCJyZXBsYWNlVXNlcm5hbWUiLCJyZXBsYWNlTXV0ZWRVc2VybmFtZSIsInJlcGxhY2VVc2VybmFtZU9mVXNlckJ5VXNlcklkIiwic2V0VXNlclVzZXJuYW1lQnlVc2VySWQiLCJzZXROYW1lRm9yRGlyZWN0Um9vbXNXaXRoT2xkTmFtZSIsIkxpdmVjaGF0RGVwYXJ0bWVudEFnZW50cyIsInJlcGxhY2VVc2VybmFtZU9mQWdlbnRCeVVzZXJJZCIsIm1vZGVsIiwidXBkYXRlRmlsZU5hbWVCeUlkIiwiX3NldFJlYWxOYW1lIiwic2V0TmFtZSIsInVwZGF0ZURpcmVjdEZOYW1lQnlOYW1lIiwiX3NldEVtYWlsIiwic2hvdWxkU2VuZFZlcmlmaWNhdGlvbkVtYWlsIiwidW5hcmNoaXZlUm9vbSIsInVuYXJjaGl2ZUJ5SWQiLCJ1bmFyY2hpdmVCeVJvb21JZCIsInVwZGF0ZU1lc3NhZ2UiLCJvcmlnaW5hbE1lc3NhZ2UiLCJhcHBNZXNzYWdlIiwiZWRpdGVkQnkiLCJ0ZW1waWQiLCJmaWVsZFZhbHVlIiwicmVxdWlyZWQiLCJzdHJlYW1BbGwiLCJTdHJlYW1lciIsInN0cmVhbUxvZ2dlZCIsInN0cmVhbVJvb20iLCJzdHJlYW1Sb29tVXNlcnMiLCJzdHJlYW1Vc2VyIiwiYWxsb3dXcml0ZSIsImV2ZW50TmFtZSIsImZpbmRCeVJvb21JZEFuZE5vdFVzZXJJZCIsIm5vdGlmeVVzZXIiLCJhbGxvd1JlYWQiLCJ0b2tlbiIsIm5vdGlmeUFsbCIsInVuc2hpZnQiLCJlbWl0Iiwibm90aWZ5QWxsSW5UaGlzSW5zdGFuY2UiLCJlbWl0V2l0aG91dEJyb2FkY2FzdCIsIm5vdGlmeUxvZ2dlZEluVGhpc0luc3RhbmNlIiwibm90aWZ5Um9vbUluVGhpc0luc3RhbmNlIiwibm90aWZ5VXNlckluVGhpc0luc3RhbmNlIiwidHlwaW5nIiwiYWR2aWNlIiwiZ29Ub01lc3NhZ2UiLCJpbmxpbmVjc3MiLCJnZXRFbWFpbENvbnRlbnQiLCJsbmciLCJ1c2VyTmFtZSIsImNoYW5uZWwiLCJtZXNzYWdlQ29udGVudCIsImZpbGVIZWFkZXIiLCJzdWJqZWN0S2V5IiwiZW1haWxTdWJqZWN0Iiwicm9vbV9wYXRoIiwicmVwbHl0byIsIm1lc3NhZ2VUZXh0IiwiaW1hZ2VfdHlwZSIsInJlamVjdCIsIkNBVEVHT1JZX01FU1NBR0UiLCJDQVRFR09SWV9NRVNTQUdFX05PUkVQTFkiLCJhbHdheXNOb3RpZnlNb2JpbGVCb29sZWFuIiwiU3Vic2NyaXB0aW9uUmF3IiwicmF3Q29sbGVjdGlvbiIsImdldEJhZGdlQ291bnQiLCJhZ2dyZWdhdGUiLCIkbWF0Y2giLCIkZ3JvdXAiLCJ0b3RhbCIsIiRzdW0iLCJ0b0FycmF5IiwiY2FuU2VuZE1lc3NhZ2VUb1Jvb20iLCJNb2RlbHNCYXNlRGIiLCJvYmplY3RQYXRoIiwiTW9kZWxzQmFzZSIsIm5hbWVPck1vZGVsIiwiX2RiIiwiY29sbGVjdGlvbk5hbWUiLCJiaW5kIiwiYXJyYXlUb0N1cnNvciIsInNldFVwZGF0ZWRBdCIsImZpbmRPbmVCeUlkcyIsImlkcyIsImluc2VydE9yVXBzZXJ0IiwiYWxsb3ciLCJkZW55IiwiZW5zdXJlSW5kZXgiLCJkcm9wSW5kZXgiLCJ0cnlFbnN1cmVJbmRleCIsInRyeURyb3BJbmRleCIsInRyYXNoRmluZCIsInRyYXNoRmluZE9uZUJ5SWQiLCJ0cmFzaEZpbmREZWxldGVkQWZ0ZXIiLCJwcm9jZXNzUXVlcnlPcHRpb25zT25SZXN1bHQiLCJhIiwiYiIsInIiLCJkaXJlY3Rpb24iLCJ2YWx1ZUEiLCJ2YWx1ZUIiLCJza2lwIiwiZmllbGRzVG9SZW1vdmUiLCJmaWVsZHNUb0dldCIsInBpY2tGaWVsZHMiLCJvYmoiLCJwaWNrZWQiLCJvbWl0IiwiX0Jhc2UiLCJBdmF0YXJzIiwiYmVmb3JlIiwiZG9jIiwiaW5zdGFuY2VJZCIsImluc2VydEF2YXRhckZpbGVJbml0IiwiY29tcGxldGUiLCJ1cGxvYWRpbmciLCJwcm9ncmVzcyIsImV4dGVuc2lvbiIsInVwbG9hZGVkQXQiLCJ1cGRhdGVGaWxlQ29tcGxldGUiLCJmaWxlSWQiLCJkaXJlY3QiLCJ1cGRhdGVGaWxlQ29tcGxldGVCeU5hbWVBbmRVc2VySWQiLCJkZWxldGVGaWxlIiwic3BhcnNlIiwiZXhwaXJlQXQiLCJleHBpcmVBZnRlclNlY29uZHMiLCJzbmlwcGV0ZWQiLCJsb2NhdGlvbiIsInNsYWNrQm90SWQiLCJzbGFja1RzIiwiY291bnRWaXNpYmxlQnlSb29tSWRCZXR3ZWVuVGltZXN0YW1wc0luY2x1c2l2ZSIsImFmdGVyVGltZXN0YW1wIiwiYmVmb3JlVGltZXN0YW1wIiwiJGd0ZSIsIiRsdGUiLCJmaW5kVmlzaWJsZUJ5TWVudGlvbkFuZFJvb21JZCIsImZpbmRWaXNpYmxlQnlSb29tSWQiLCIkbmluIiwiZmluZEludmlzaWJsZUJ5Um9vbUlkIiwiZmluZFZpc2libGVCeVJvb21JZEFmdGVyVGltZXN0YW1wIiwidGltZXN0YW1wIiwiJGd0IiwiZmluZEZvclVwZGF0ZXMiLCJfdXBkYXRlZEF0IiwiZmluZFZpc2libGVCeVJvb21JZEJlZm9yZVRpbWVzdGFtcCIsIiRsdCIsImZpbmRWaXNpYmxlQnlSb29tSWRCZWZvcmVUaW1lc3RhbXBJbmNsdXNpdmUiLCJmaW5kVmlzaWJsZUJ5Um9vbUlkQmV0d2VlblRpbWVzdGFtcHMiLCJmaW5kVmlzaWJsZUJ5Um9vbUlkQmV0d2VlblRpbWVzdGFtcHNJbmNsdXNpdmUiLCJmaW5kVmlzaWJsZUNyZWF0ZWRPckVkaXRlZEFmdGVyVGltZXN0YW1wIiwiZmluZFN0YXJyZWRCeVVzZXJBdFJvb20iLCJmaW5kUGlubmVkQnlSb29tIiwiZmluZFNuaXBwZXRlZEJ5Um9vbSIsImdldExhc3RUaW1lc3RhbXAiLCJmaW5kQnlSb29tSWRBbmRNZXNzYWdlSWRzIiwibWVzc2FnZUlkcyIsImZpbmRPbmVCeVNsYWNrQm90SWRBbmRTbGFja1RzIiwiZmluZE9uZUJ5U2xhY2tUcyIsImZpbmRCeVJvb21JZEFuZFR5cGUiLCJnZXRMYXN0VmlzaWJsZU1lc3NhZ2VTZW50V2l0aE5vVHlwZUJ5Um9vbUlkIiwibWUiLCJwYXJlbnQiLCJyZWFjdGlvbnMiLCJzZXRQaW5uZWRCeUlkQW5kVXNlcklkIiwicGlubmVkQnkiLCJwaW5uZWRBdCIsInNldFNuaXBwZXRlZEJ5SWRBbmRVc2VySWQiLCJzbmlwcGV0TmFtZSIsInNuaXBwZXRlZEJ5Iiwic25pcHBldGVkQXQiLCJzZXRVcmxzQnlJZCIsIm11bHRpIiwib2xkVXNlcm5hbWUiLCJuZXdVc2VybmFtZSIsIm5ld01lc3NhZ2UiLCJ1cGRhdGVVc2VyU3RhckJ5SWQiLCIkcHVsbCIsInVwZ3JhZGVFdHNUb0VkaXRBdCIsImV0cyIsIiRyZW5hbWUiLCJzZXRNZXNzYWdlQXR0YWNobWVudHMiLCJzZXRTbGFja0JvdElkQW5kU2xhY2tUcyIsIm5ld1VzZXJJZCIsIm5ld05hbWVBbGlhcyIsImNyZWF0ZVdpdGhUeXBlUm9vbUlkTWVzc2FnZUFuZFVzZXIiLCJjcmVhdGVOYXZpZ2F0aW9uSGlzdG9yeVdpdGhSb29tSWRNZXNzYWdlQW5kVXNlciIsImNyZWF0ZVVzZXJSZW1vdmVkV2l0aFJvb21JZEFuZFVzZXIiLCJjcmVhdGVVc2VyTXV0ZWRXaXRoUm9vbUlkQW5kVXNlciIsImNyZWF0ZVVzZXJVbm11dGVkV2l0aFJvb21JZEFuZFVzZXIiLCJjcmVhdGVOZXdNb2RlcmF0b3JXaXRoUm9vbUlkQW5kVXNlciIsImNyZWF0ZU1vZGVyYXRvclJlbW92ZWRXaXRoUm9vbUlkQW5kVXNlciIsImNyZWF0ZU5ld093bmVyV2l0aFJvb21JZEFuZFVzZXIiLCJjcmVhdGVPd25lclJlbW92ZWRXaXRoUm9vbUlkQW5kVXNlciIsImNyZWF0ZU5ld0xlYWRlcldpdGhSb29tSWRBbmRVc2VyIiwiY3JlYXRlTGVhZGVyUmVtb3ZlZFdpdGhSb29tSWRBbmRVc2VyIiwiY3JlYXRlU3Vic2NyaXB0aW9uUm9sZUFkZGVkV2l0aFJvb21JZEFuZFVzZXIiLCJjcmVhdGVTdWJzY3JpcHRpb25Sb2xlUmVtb3ZlZFdpdGhSb29tSWRBbmRVc2VyIiwibWVzc2FnZXNUb0RlbGV0ZSIsImdldE1lc3NhZ2VCeUZpbGVJZCIsImZpbGVJRCIsInNldEFzUmVhZCIsInVudGlsIiwic2V0QXNSZWFkQnlJZCIsImZpbmRVbnJlYWRNZXNzYWdlc0J5Um9vbUFuZERhdGUiLCJhZnRlciIsIlJlcG9ydHMiLCJjcmVhdGVXaXRoTWVzc2FnZURlc2NyaXB0aW9uQW5kVXNlcklkIiwiTW9kZWxSb29tcyIsIl9pZE9yTmFtZSIsImZpbmRPbmVCeUltcG9ydElkIiwiaW1wb3J0SWRzIiwiZmluZE9uZUJ5TmFtZUFuZFR5cGUiLCJmaW5kQnlJZCIsImZpbmRCeUlkcyIsInJvb21JZHMiLCJmaW5kQnlUeXBlIiwiZmluZEJ5VHlwZUluSWRzIiwiZmluZEJ5VHlwZXMiLCJmaW5kQnlTdWJzY3JpcHRpb25Vc2VySWQiLCJmaW5kQnlTdWJzY3JpcHRpb25UeXBlQW5kVXNlcklkIiwiZmluZEJ5VXNlcklkQW5kVHlwZSIsImZpbmRCeVN1YnNjcmlwdGlvblVzZXJJZFVwZGF0ZWRBZnRlciIsImZpbmRCeU5hbWVDb250YWluaW5nIiwibmFtZVJlZ2V4IiwiZmluZEJ5TmFtZUNvbnRhaW5pbmdBbmRUeXBlcyIsImZpbmRCeU5hbWVBbmRUeXBlIiwiZmluZEJ5TmFtZUFuZFR5cGVOb3REZWZhdWx0IiwiZmluZEJ5TmFtZUFuZFR5cGVzTm90SW5JZHMiLCJmaW5kQ2hhbm5lbEFuZFByaXZhdGVCeU5hbWVTdGFydGluZyIsImZpbmREaXJlY3RSb29tQ29udGFpbmluZ1VzZXJuYW1lIiwiZmluZEJ5VHlwZUFuZE5hbWUiLCJmaW5kQnlUeXBlQW5kTmFtZUNvbnRhaW5pbmciLCJmaW5kQnlUeXBlSW5JZHNBbmROYW1lQ29udGFpbmluZyIsImZpbmRCeVR5cGVBbmRBcmNoaXZhdGlvblN0YXRlIiwiYXJjaGl2YXRpb25zdGF0ZSIsImFkZEltcG9ydElkcyIsIiRlYWNoIiwic2V0TmFtZUJ5SWQiLCJzZXRGbmFtZUJ5SWQiLCIkaW5jIiwibGFzdE1lc3NhZ2VUaW1lc3RhbXAiLCJsbSIsImluY1VzZXJzQ291bnRCeUlkIiwiaW5jVXNlcnNDb3VudEJ5SWRzIiwic2V0Sm9pbkNvZGVCeUlkIiwiam9pbkNvZGUiLCJqb2luQ29kZVJlcXVpcmVkIiwic2V0VXNlckJ5SWQiLCJzZXRUeXBlQnlJZCIsInNldFRvcGljQnlJZCIsInRvcGljIiwic2V0QW5ub3VuY2VtZW50QnlJZCIsImFubm91bmNlbWVudCIsImFubm91bmNlbWVudERldGFpbHMiLCJzZXRDdXN0b21GaWVsZHNCeUlkIiwidW5tdXRlVXNlcm5hbWVCeVJvb21JZCIsInNhdmVEZWZhdWx0QnlJZCIsInNhdmVSZXRlbnRpb25FbmFibGVkQnlJZCIsInNhdmVSZXRlbnRpb25NYXhBZ2VCeUlkIiwiTnVtYmVyIiwic2F2ZVJldGVudGlvbkV4Y2x1ZGVQaW5uZWRCeUlkIiwic2F2ZVJldGVudGlvbkZpbGVzT25seUJ5SWQiLCJzYXZlUmV0ZW50aW9uT3ZlcnJpZGVHbG9iYWxCeUlkIiwic2F2ZUVuY3J5cHRlZEJ5SWQiLCJlbmNyeXB0ZWQiLCJzZXRUb3BpY0FuZFRhZ3NCeUlkIiwidGFncyIsInNldERhdGEiLCJ1bnNldERhdGEiLCJpc0VtcHR5IiwidGFnIiwiY3JlYXRlV2l0aFR5cGVOYW1lVXNlckFuZFVzZXJuYW1lcyIsImNyZWF0ZVdpdGhJZFR5cGVBbmROYW1lIiwiTW9kZWxTZXR0aW5ncyIsImZpbmRPbmVOb3RIaWRkZW5CeUlkIiwiZmluZEJ5Um9sZSIsImZpbmRQdWJsaWMiLCJmaW5kTm90SGlkZGVuUHVibGljIiwiZmluZE5vdEhpZGRlblB1YmxpY1VwZGF0ZWRBZnRlciIsInVwZGF0ZWRBdCIsImZpbmROb3RIaWRkZW5Qcml2YXRlIiwiZmluZE5vdEhpZGRlbiIsImZpbmROb3RIaWRkZW5VcGRhdGVkQWZ0ZXIiLCJmaW5kU2V0dXBXaXphcmRTZXR0aW5ncyIsIndpemFyZCIsInVwZGF0ZVZhbHVlTm90SGlkZGVuQnlJZCIsImNyZWF0ZVdpdGhJZEFuZFZhbHVlIiwiX2NyZWF0ZWRBdCIsIk1vZGVsU3Vic2NyaXB0aW9ucyIsImF1dG9UcmFuc2xhdGUiLCJhdXRvVHJhbnNsYXRlTGFuZ3VhZ2UiLCJmaW5kT25lQnlSb29tSWRBbmRVc2VybmFtZSIsImZpbmRPbmVCeVJvb21OYW1lQW5kVXNlcklkIiwiZmluZEJ5VXNlcklkQW5kVHlwZXMiLCJmaW5kQnlVc2VySWRVcGRhdGVkQWZ0ZXIiLCJmaW5kQnlSb29tSWRBbmRSb2xlcyIsImZpbmRCeVR5cGVBbmRVc2VySWQiLCJnZXRMYXN0U2VlbiIsInVzZXJJZHMiLCJmaW5kQnlSb29tSWRBbmRVc2VySWRzT3JBbGxNZXNzYWdlcyIsImZpbmRCeVJvb21JZFdoZW5Vc2VySWRFeGlzdHMiLCJmaW5kQnlSb29tSWRXaGVuVXNlcm5hbWVFeGlzdHMiLCJmaW5kVW5yZWFkQnlVc2VySWQiLCJnZXRNaW5pbXVtTGFzdFNlZW5CeVJvb21JZCIsImhpZGVCeVJvb21JZEFuZFVzZXJJZCIsIm9wZW5CeVJvb21JZEFuZFVzZXJJZCIsInNldEFzUmVhZEJ5Um9vbUlkQW5kVXNlcklkIiwic2V0QXNVbnJlYWRCeVJvb21JZEFuZFVzZXJJZCIsImZpcnN0TWVzc2FnZVVucmVhZFRpbWVzdGFtcCIsInNldEZhdm9yaXRlQnlSb29tSWRBbmRVc2VySWQiLCJmYXZvcml0ZSIsInVwZGF0ZU5hbWVBbmRBbGVydEJ5Um9vbUlkIiwidXBkYXRlRGlzcGxheU5hbWVCeVJvb21JZCIsIm9sZE5hbWUiLCJpbmNHcm91cCIsImluY1VzZXIiLCJpZ25vcmVVc2VyIiwiaWdub3JlZFVzZXIiLCJpZ25vcmUiLCJzZXRCbG9ja2VkQnlSb29tSWQiLCJxdWVyeTIiLCJ1cGRhdGUyIiwidW5zZXRCbG9ja2VkQnlSb29tSWQiLCJ1cGRhdGVDdXN0b21GaWVsZHNCeVJvb21JZCIsImNmaWVsZHMiLCJ1cGRhdGVUeXBlQnlSb29tSWQiLCJhZGRSb2xlQnlJZCIsInJlbW92ZVJvbGVCeUlkIiwic2V0QXJjaGl2ZWRCeVVzZXJuYW1lIiwiY2xlYXJEZXNrdG9wTm90aWZpY2F0aW9uVXNlclByZWZlcmVuY2VzIiwidXBkYXRlRGVza3RvcE5vdGlmaWNhdGlvblVzZXJQcmVmZXJlbmNlcyIsImNsZWFyTW9iaWxlTm90aWZpY2F0aW9uVXNlclByZWZlcmVuY2VzIiwidXBkYXRlTW9iaWxlTm90aWZpY2F0aW9uVXNlclByZWZlcmVuY2VzIiwiY2xlYXJFbWFpbE5vdGlmaWNhdGlvblVzZXJQcmVmZXJlbmNlcyIsInVwZGF0ZUVtYWlsTm90aWZpY2F0aW9uVXNlclByZWZlcmVuY2VzIiwidXBkYXRlVXNlckhpZ2hsaWdodHMiLCJmaW5kTm90SGlkZGVuRmlsZXNPZlJvb20iLCJzZWFyY2hUZXh0IiwiZmlsZVF1ZXJ5IiwiZmlsZU9wdGlvbnMiLCJpbnNlcnRGaWxlSW5pdCIsIk1vZGVsVXNlcnMiLCJmaW5kT25lQWRtaW4iLCJhZG1pbiIsImZpbmRPbmVCeUlkQW5kTG9naW5Ub2tlbiIsIl9oYXNoTG9naW5Ub2tlbiIsImZpbmRVc2Vyc05vdE9mZmxpbmUiLCJmaW5kQWN0aXZlQnlVc2VybmFtZU9yTmFtZVJlZ2V4V2l0aEV4Y2VwdGlvbnMiLCJzZWFyY2hUZXJtIiwiZXhjZXB0aW9ucyIsInRlcm1SZWdleCIsIiRhbmQiLCJmaW5kQnlBY3RpdmVVc2Vyc0V4Y2VwdCIsIm9yU3RtdCIsImFjYyIsImVsIiwiZmluZFVzZXJzQnlOYW1lT3JVc2VybmFtZSIsIm5hbWVPclVzZXJuYW1lIiwidXNlcm5hbWVOYW1lT3JFbWFpbEFkZHJlc3MiLCJmaW5kTERBUFVzZXJzIiwibGRhcCIsImZpbmRDcm93ZFVzZXJzIiwiY3Jvd2QiLCJnZXRMYXN0TG9naW4iLCJmaW5kVXNlcnNCeVVzZXJuYW1lcyIsImZpbmRVc2Vyc0J5SWRzIiwiZmluZFVzZXJzV2l0aFVzZXJuYW1lQnlJZHMiLCJmaW5kVXNlcnNXaXRoVXNlcm5hbWVCeUlkc05vdE9mZmxpbmUiLCJnZXRPbGRlc3QiLCJ1cGRhdGVMYXN0TG9naW5CeUlkIiwic2V0U2VydmljZUlkIiwic2VydmljZU5hbWUiLCJzZXJ2aWNlSWQiLCJzZXJ2aWNlSWRLZXkiLCJzZXRFbWFpbFZlcmlmaWVkIiwiJGVsZW1NYXRjaCIsInVuc2V0QXZhdGFyT3JpZ2luIiwic2V0VXNlckFjdGl2ZSIsInNldEFsbFVzZXJzQWN0aXZlIiwidW5zZXRMb2dpblRva2VucyIsInVuc2V0UmVxdWlyZVBhc3N3b3JkQ2hhbmdlIiwicmVzZXRQYXNzd29yZEFuZFNldFJlcXVpcmVQYXNzd29yZENoYW5nZSIsInNldExhbmd1YWdlIiwic2V0UHJvZmlsZSIsInByb2ZpbGUiLCJjbGVhclNldHRpbmdzIiwic2V0UHJlZmVyZW5jZXMiLCJjbG9ja01vZGUiLCJzZXRVdGNPZmZzZXQiLCJzYXZlVXNlckJ5SWQiLCJwaG9uZU51bWJlciIsInNldFJlYXNvbiIsInVuc2V0UmVhc29uIiwiYWRkQmFubmVyQnlJZCIsImJhbm5lciIsInJlbW92ZUJhbm5lckJ5SWQiLCJjcmVhdGUiLCJnZXRVc2Vyc1RvU2VuZE9mZmxpbmVFbWFpbCIsInVzZXJzSWRzIiwiRXhwb3J0T3BlcmF0aW9ucyIsIk1vZGVsRXhwb3J0T3BlcmF0aW9ucyIsImZpbmRMYXN0T3BlcmF0aW9uQnlVc2VyIiwiZnVsbEV4cG9ydCIsImZpbmRQZW5kaW5nQnlVc2VyIiwiZmluZEFsbFBlbmRpbmciLCJ1cGRhdGVPcGVyYXRpb24iLCJyb29tTGlzdCIsImZpbGVMaXN0IiwiZ2VuZXJhdGVkRmlsZSIsImV4cG9ydE9wZXJhdGlvbiIsIlVzZXJEYXRhRmlsZXMiLCJNb2RlbFVzZXJEYXRhRmlsZXMiLCJmaW5kTGFzdEZpbGVCeVVzZXIiLCJ1c2VyRGF0YUZpbGUiLCJiYXNlTmFtZSIsInRyYXNoIiwiTW9uZ28iLCJDb2xsZWN0aW9uIiwiX2Vuc3VyZUluZGV4IiwiY29sbGVjdGlvbiIsIl9kZWxldGVkQXQiLCJpc09wbG9nQXZhaWxhYmxlIiwiTW9uZ29JbnRlcm5hbHMiLCJkZWZhdWx0UmVtb3RlQ29sbGVjdGlvbkRyaXZlciIsIm1vbmdvIiwiX29wbG9nSGFuZGxlIiwib25PcGxvZ0VudHJ5IiwiaXNPcGxvZ0VuYWJsZWQiLCJiYXNlTW9kZWwiLCJ3cmFwTW9kZWwiLCJhbHJlYWR5TGlzdGVuaW5nVG9PcGxvZyIsImV2ZW50IiwicHJvY2Vzc09wbG9nUmVjb3JkIiwiX2RlZmluZVRvb0ZhckJlaGluZCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJvcmlnaW5hbHMiLCJzZWxmIiwiX2RvTm90TWl4SW5jbHVzaW9uQW5kRXhjbHVzaW9uRmllbGRzIiwicmVtb3ZlS2V5cyIsInVwZGF0ZUhhc1Bvc2l0aW9uYWxPcGVyYXRvciIsIm9wIiwiY2xpZW50QWN0aW9uIiwibyIsIm9wbG9nIiwibGlzdGVuZXJDb3VudCIsImZpbmRPcHRpb25zIiwiaW5zZXJ0ZWRJZCIsIl9yZXR1cm5PYmplY3QiLCJfX2NvbGxlY3Rpb25fXyIsIl9kcm9wSW5kZXgiLCJkZWxldGVkQXQiLCJBY2Nlc3NUb2tlblNlcnZpY2VzIiwicmVnaXN0ZXJBY2Nlc3NUb2tlblNlcnZpY2UiLCJoYW5kbGVBY2Nlc3NUb2tlblJlcXVlc3QiLCJyZWdpc3RlckxvZ2luSGFuZGxlciIsImFjY2Vzc1Rva2VuIiwiT2JqZWN0SW5jbHVkaW5nIiwiU2VydmljZUNvbmZpZ3VyYXRpb24iLCJjb25maWd1cmF0aW9ucyIsIkNvbmZpZ0Vycm9yIiwib2F1dGgiLCJzZXJ2aWNlTmFtZXMiLCJMb2dpbkNhbmNlbGxlZEVycm9yIiwibnVtZXJpY0Vycm9yIiwib2F1dGhSZXN1bHQiLCJ1cGRhdGVPckNyZWF0ZVVzZXJGcm9tRXh0ZXJuYWxTZXJ2aWNlIiwic2VydmljZURhdGEiLCJPQXV0aCIsImNyeXB0byIsIk5wbSIsIndoaXRlbGlzdGVkIiwiRkJfQVBJX1ZFUlNJT04iLCJGQl9VUkwiLCJnZXRJZGVudGl0eSIsInNlY3JldCIsImhtYWMiLCJjcmVhdGVIbWFjIiwib3BlblNlY3JldCIsImFjY2Vzc190b2tlbiIsImFwcHNlY3JldF9wcm9vZiIsImRpZ2VzdCIsImV4cGlyZXNJbiIsImlkZW50aXR5IiwiTWF5YmUiLCJleHBpcmVzQXQiLCJwaWNrIiwiVHdpdCIsIndoaXRlbGlzdGVkRmllbGRzIiwiYXBwSWQiLCJhcHBTZWNyZXQiLCJhY2Nlc3NUb2tlblNlY3JldCIsIlR3aXR0ZXIiLCJjb25zdW1lcl9rZXkiLCJjb25zdW1lcl9zZWNyZXQiLCJhY2Nlc3NfdG9rZW5fc2VjcmV0Iiwic3luY1R3aXR0ZXIiLCJnZXRTY29wZXMiLCJpZFRva2VuIiwic2NvcGVzIiwiR29vZ2xlIiwicmVmcmVzaFRva2VuIiwiX3JlZGlyZWN0VXJpIiwicHJveHkiLCJTdGF0c0QiLCJTdGF0c1RyYWNrZXIiLCJkb2dzdGF0c2QiLCJ0cmFjayIsInN0YXRzIiwiaHJ0aW1lIiwiZGVjcmVtZW50IiwiaGlzdG9ncmFtIiwiZ2F1Z2UiLCJ0ZXN0V2ViQXBwSW50ZXJuYWxzIiwidXNlRm9yQWxsIiwiaXNTdHJpbmciLCJzZXRCdW5kbGVkSnNDc3NQcmVmaXgiLCJjZG5WYWx1ZSIsImNkbkpzQ3NzIiwic3RhcnRFbWFpbEludGVyY2VwdGVyIiwiZGVib3VuY2UiLCJidWlsZE1haWxVUkwiLCJNQUlMX1VSTCIsImVuY29kZVVSSUNvbXBvbmVudCIsIm9hdXRoX3VwZGF0ZWQiLCJfT0F1dGhTZXJ2aWNlc1VwZGF0ZSIsImNsaWVudElkIiwiY3VzdG9tIiwic2VydmVyVVJMIiwidG9rZW5QYXRoIiwiaWRlbnRpdHlQYXRoIiwiYXV0aG9yaXplUGF0aCIsImJ1dHRvbkxhYmVsVGV4dCIsImJ1dHRvbkxhYmVsQ29sb3IiLCJsb2dpblN0eWxlIiwiYnV0dG9uQ29sb3IiLCJ0b2tlblNlbnRWaWEiLCJpZGVudGl0eVRva2VuU2VudFZpYSIsInVzZXJuYW1lRmllbGQiLCJtZXJnZVVzZXJzIiwiQ3VzdG9tT0F1dGgiLCJjb25zdW1lcktleSIsIk9BdXRoU2VydmljZXNVcGRhdGUiLCJPQXV0aFNlcnZpY2VzUmVtb3ZlIiwiREVQTE9ZTUVOVF9JRCIsInJlYWRvbmx5Iiwic3RlcCIsImFjdGlvblRleHQiLCJtdWx0aWxpbmUiLCJwbGFjZWhvbGRlciIsInByb3BlcnRpZXMiLCJhZGRPQXV0aFNlcnZpY2UiLCJjYXBpdGFsaXplIiwicGVyc2lzdGVudCIsInJlZnJlc2hPQXV0aFNlcnZpY2UiLCJhZGRVc2Vyc1RvUm9vbSIsInVzZXJJblJvb20iLCJuZXdVc2VyIiwiYmxvY2tVc2VyIiwic3Vic2NyaXB0aW9uMiIsImNoZWNrUmVnaXN0cmF0aW9uU2VjcmV0VVJMIiwiY3JlYXRlQ2hhbm5lbCIsIk9wdGlvbmFsIiwiY3JlYXRlVG9rZW4iLCJfZ2VuZXJhdGVTdGFtcGVkTG9naW5Ub2tlbiIsIl9pbnNlcnRMb2dpblRva2VuIiwiYXV0aFRva2VuIiwiY3JlYXRlUHJpdmF0ZUdyb3VwIiwidG9rZW5wYXNzIiwiYmFsYW5jZSIsImZvcmNlRGVsZXRlIiwiZGVsZXRlQWxsb3dlZCIsImRlbGV0ZU93biIsImJsb2NrRGVsZXRlSW5NaW51dGVzIiwibXNnVHMiLCJjdXJyZW50VHNEaWZmIiwiZGVsZXRlVXNlck93bkFjY291bnQiLCJiY3J5cHQiLCJfY2hlY2tQYXNzd29yZCIsImFsZ29yaXRobSIsImV4ZWN1dGVTbGFzaENvbW1hbmRQcmV2aWV3IiwidGhlQ21kIiwiRmlsdGVyIiwiYmFkV29yZHNMaXN0IiwiY2xlYW4iLCJnZXRDaGFubmVsSGlzdG9yeSIsInVucmVhZHMiLCJmcm9tVXNlcklkIiwiaXNVbmRlZmluZWQiLCJpc0RhdGUiLCJmaXJzdE1zZyIsImdldFJvb21Kb2luQ29kZSIsImdldFJvb21Sb2xlcyIsIlJvbGVzIiwiZ2V0U2VydmVySW5mbyIsImdldFNpbmdsZU1lc3NhZ2UiLCJtc2dJZCIsImdldFNsYXNoQ29tbWFuZFByZXZpZXdzIiwiZ2V0VXNlclJvbGVzIiwicm9sZUlkcyIsImZpbmRVc2Vyc0luUm9sZXMiLCJpbnRlcnNlY3Rpb24iLCJpbnNlcnRPclVwZGF0ZVVzZXIiLCJqb2luUm9vbSIsImJhbGFuY2VzIiwidXBkYXRlVXNlclRva2VucGFzc0JhbGFuY2VzIiwiVG9rZW5wYXNzIiwidmFsaWRhdGVBY2Nlc3MiLCJjYW5BY2Nlc3NSb29tIiwibGVhdmVSb29tIiwicmVtb3ZlT0F1dGhTZXJ2aWNlIiwicmVzdGFydF9zZXJ2ZXIiLCJhYm9ydCIsImV4aXQiLCJtIiwiY3Vyc29yIiwic2F2ZVNldHRpbmciLCJzZW5kSW52aXRhdGlvbkVtYWlsIiwidmFsaWRFbWFpbHMiLCJjaGVja0FkZHJlc3NGb3JtYXQiLCJtZXNzYWdlX3RzIiwic2VydmVyX3RzIiwiZ2V0VGltZSIsImFkanVzdGVkTWVzc2FnZSIsInNhbmRzdG9ybSIsInNlbmRTTVRQVGVzdEVtYWlsIiwic2V0QWRtaW5TdGF0dXMiLCJwYXJhbSIsImpvaW5EZWZhdWx0Q2hhbm5lbHNTaWxlbmNlZCIsInVuYmxvY2tVc2VyIiwiZWRpdEFsbG93ZWQiLCJlZGl0T3duIiwiYmxvY2tFZGl0SW5NaW51dGVzIiwic2V0U2V0dGluZ3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsWUFBSjtBQUFpQkMsT0FBT0MsS0FBUCxDQUFhQyxRQUFRLHNCQUFSLENBQWIsRUFBNkM7QUFBQ0MsVUFBUUMsQ0FBUixFQUFVO0FBQUNMLG1CQUFhSyxDQUFiO0FBQWU7O0FBQTNCLENBQTdDLEVBQTBFLENBQTFFO0FBQ2pCQyxhQUFhLElBQUlOLFlBQUosRUFBYjtBQUNBOzs7OztBQUlBTSxXQUFXQyxNQUFYLEdBQW9CLEVBQXBCLEM7Ozs7Ozs7Ozs7O0FDTkEsSUFBSUMsQ0FBSjs7QUFBTVAsT0FBT0MsS0FBUCxDQUFhQyxRQUFRLFlBQVIsQ0FBYixFQUFtQztBQUFDQyxVQUFRQyxDQUFSLEVBQVU7QUFBQ0csUUFBRUgsQ0FBRjtBQUFJOztBQUFoQixDQUFuQyxFQUFxRCxDQUFyRDs7QUFFTjs7OztBQUlBQyxXQUFXRyxRQUFYLEdBQXNCO0FBQ3JCQyxhQUFXLEVBRFU7QUFFckJDLGtCQUFnQixFQUZLO0FBR3JCQyxNQUFJLElBQUlDLElBQUosRUFIaUI7O0FBSXJCQyxNQUFJQyxH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eUIsSUFBSWhDLGNBQUosRUFBekI7QUFDQWxKLFdBQVdnUixTQUFYLENBQXFCOUYsR0FBckIsQ0FBeUIsSUFBSWpDLGVBQUosRUFBekI7QUFDQWpKLFdBQVdnUixTQUFYLENBQXFCOUYsR0FBckIsQ0FBeUIsSUFBSTFELHFCQUFKLEVBQXpCLEU7Ozs7Ozs7Ozs7O0FDZEEsSUFBSTR5QixNQUFKO0FBQVd6NkIsT0FBT0MsS0FBUCxDQUFhQyxRQUFRLDBCQUFSLENBQWIsRUFBaUQ7QUFBQyxNQUFJRSxDQUFKLEVBQU07QUFBQ3E2QixhQUFPcjZCLENBQVA7QUFBUzs7QUFBakIsQ0FBakQsRUFBb0UsQ0FBcEU7QUFFWHE2QixPQUFPZ3hCLFdBQVAsQ0FBbUJwckQsV0FBV0csUUFBOUIsRSIsImZpbGUiOiIvcGFja2FnZXMvcm9ja2V0Y2hhdF9saWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ3dvbGZ5ODctZXZlbnRlbWl0dGVyJztcblJvY2tldENoYXQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4vKlxuKiBLaWNrIG9mZiB0aGUgZ2xvYmFsIG5hbWVzcGFjZSBmb3IgUm9ja2V0Q2hhdC5cbiogQG5hbWVzcGFjZSBSb2NrZXRDaGF0XG4qL1xuUm9ja2V0Q2hhdC5tb2RlbHMgPSB7fTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG4vKlxuKiBSb2NrZXRDaGF0LnNldHRpbmdzIGhvbGRzIGFsbCBwYWNrYWdlcyBzZXR0aW5nc1xuKiBAbmFtZXNwYWNlIFJvY2tldENoYXQuc2V0dGluZ3NcbiovXG5Sb2NrZXRDaGF0LnNldHRpbmdzID0ge1xuXHRjYWxsYmFja3M6IHt9LFxuXHRyZWdleENhbGxiYWNrczoge30sXG5cdHRzOiBuZXcgRGF0ZSxcblx0Z2V0KF9pZCwgY2FsbGJhY2spIHtcblx0XHRpZiAoY2FsbGJhY2sgIT0gbnVsbCkge1xuXHRcdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5vbmxvYWQoX2lkLCBjYWxsYmFjayk7XG5cdFx0XHRpZiAoIU1ldGVvci5zZXR0aW5ncykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAoX2lkID09PSAnKicpIHtcblx0XHRcdFx0cmV0dXJuIE9iamVjdC5rZXlzKE1ldGVvci5zZXR0aW5ncykuZm9yRWFjaCgoa2V5KSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSBNZXRlb3Iuc2V0dGluZ3Nba2V5XTtcblx0XHRcdFx0XHRjYWxsYmFjayhrZXksIHZhbHVlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoXy5pc1JlZ0V4cChfaWQpICYmIE1ldGVvci5zZXR0aW5ncykge1xuXHRcdFx0XHRyZXR1cm4gT2JqZWN0LmtleXMoTWV0ZW9yLnNldHRpbmdzKS5mb3JFYWNoKChrZXkpID0+IHtcblx0XHRcdFx0XHRpZiAoIV9pZC50ZXN0KGtleSkpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29uc3QgdmFsdWUgPSBNZXRlb3Iuc2V0dGluZ3Nba2V5XTtcblx0XHRcdFx0XHRjYWxsYmFjayhrZXksIHZhbHVlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gTWV0ZW9yLnNldHRpbmdzW19pZF0gIT0gbnVsbCAmJiBjYWxsYmFjayhfaWQsIE1ldGVvci5zZXR0aW5nc1tfaWRdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCFNZXRlb3Iuc2V0dGluZ3MpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKF8uaXNSZWdFeHAoX2lkKSkge1xuXHRcdFx0XHRyZXR1cm4gT2JqZWN0LmtleXMoTWV0ZW9yLnNldHRpbmdzKS5yZWR1Y2UoKGl0ZW1zLCBrZXkpID0+IHtcblx0XHRcdFx0XHRjb25zdCB2YWx1ZSA9IE1ldGVvci5zZXR0aW5nc1trZXldO1xuXHRcdFx0XHRcdGlmIChfaWQudGVzdChrZXkpKSB7XG5cdFx0XHRcdFx0XHRpdGVtcy5wdXNoKHtcblx0XHRcdFx0XHRcdFx0a2V5LFxuXHRcdFx0XHRcdFx0XHR2YWx1ZSxcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gaXRlbXM7XG5cdFx0XHRcdH0sIFtdKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBNZXRlb3Iuc2V0dGluZ3MgJiYgTWV0ZW9yLnNldHRpbmdzW19pZF07XG5cdFx0fVxuXHR9LFxuXHRzZXQoX2lkLCB2YWx1ZSwgY2FsbGJhY2spIHtcblx0XHRyZXR1cm4gTWV0ZW9yLmNhbGwoJ3NhdmVTZXR0aW5nJywgX2lkLCB2YWx1ZSwgY2FsbGJhY2spO1xuXHR9LFxuXHRiYXRjaFNldChzZXR0aW5ncywgY2FsbGJhY2spIHtcblx0XHQvLyBhc3luYyAtPiBzeW5jXG5cdFx0Ly8gaHR0cDovL2RhZW1vbi5jby56YS8yMDEyLzA0L3NpbXBsZS1hc3luYy13aXRoLW9ubHktdW5kZXJzY29yZS9cblx0XHRjb25zdCBzYXZlID0gZnVuY3Rpb24oc2V0dGluZykge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0XHRcdHJldHVybiBNZXRlb3IuY2FsbCgnc2F2ZVNldHRpbmcnLCBzZXR0aW5nLl9pZCwgc2V0dGluZy52YWx1ZSwgc2V0dGluZy5lZGl0b3IsIGNhbGxiYWNrKTtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRjb25zdCBhY3Rpb25zID0gXy5tYXAoc2V0dGluZ3MsIChzZXR0aW5nKSA9PiBzYXZlKHNldHRpbmcpKTtcblx0XHRyZXR1cm4gXyhhY3Rpb25zKS5yZWR1Y2VSaWdodChfLndyYXAsIChlcnIsIHN1Y2Nlc3MpID0+IGNhbGxiYWNrKGVyciwgc3VjY2VzcykpKCk7XG5cdH0sXG5cdGxvYWQoa2V5LCB2YWx1ZSwgaW5pdGlhbExvYWQpIHtcblx0XHRbJyonLCBrZXldLmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmNhbGxiYWNrc1tpdGVtXSkge1xuXHRcdFx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmNhbGxiYWNrc1tpdGVtXS5mb3JFYWNoKChjYWxsYmFjaykgPT4gY2FsbGJhY2soa2V5LCB2YWx1ZSwgaW5pdGlhbExvYWQpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3Qua2V5cyhSb2NrZXRDaGF0LnNldHRpbmdzLnJlZ2V4Q2FsbGJhY2tzKS5mb3JFYWNoKChjYktleSkgPT4ge1xuXHRcdFx0Y29uc3QgY2JWYWx1ZSA9IFJvY2tldENoYXQuc2V0dGluZ3MucmVnZXhDYWxsYmFja3NbY2JLZXldO1xuXHRcdFx0aWYgKCFjYlZhbHVlLnJlZ2V4LnRlc3Qoa2V5KSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRjYlZhbHVlLmNhbGxiYWNrcy5mb3JFYWNoKChjYWxsYmFjaykgPT4gY2FsbGJhY2soa2V5LCB2YWx1ZSwgaW5pdGlhbExvYWQpKTtcblx0XHR9KTtcblx0fSxcblx0b25sb2FkKGtleSwgY2FsbGJhY2spIHtcblx0XHQvLyBpZiBrZXkgaXMgJyonXG5cdFx0Ly8gXHRmb3Iga2V5LCB2YWx1ZSBpbiBNZXRlb3Iuc2V0dGluZ3Ncblx0XHQvLyBcdFx0Y2FsbGJhY2sga2V5LCB2YWx1ZSwgZmFsc2Vcblx0XHQvLyBlbHNlIGlmIE1ldGVvci5zZXR0aW5ncz9bX2lkXT9cblx0XHQvLyBcdGNhbGxiYWNrIGtleSwgTWV0ZW9yLnNldHRpbmdzW19pZF0sIGZhbHNlXG5cdFx0Y29uc3Qga2V5cyA9IFtdLmNvbmNhdChrZXkpO1xuXHRcdGtleXMuZm9yRWFjaCgoaykgPT4ge1xuXHRcdFx0aWYgKF8uaXNSZWdFeHAoaykpIHtcblx0XHRcdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZWdleENhbGxiYWNrc1tuYW1lID0gay5zb3VyY2VdID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5yZWdleENhbGxiYWNrc1tuYW1lID0gay5zb3VyY2VdIHx8IHtcblx0XHRcdFx0XHRyZWdleDogayxcblx0XHRcdFx0XHRjYWxsYmFja3M6IFtdLFxuXHRcdFx0XHR9O1xuXHRcdFx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnJlZ2V4Q2FsbGJhY2tzW2suc291cmNlXS5jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmNhbGxiYWNrc1trXSA9IFJvY2tldENoYXQuc2V0dGluZ3MuY2FsbGJhY2tzW2tdIHx8IFtdO1xuXHRcdFx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmNhbGxiYWNrc1trXS5wdXNoKGNhbGxiYWNrKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcbn07XG4iLCJleHBvcnQgY29uc3QgUm9vbVNldHRpbmdzRW51bSA9IHtcblx0TkFNRTogJ3Jvb21OYW1lJyxcblx0VE9QSUM6ICdyb29tVG9waWMnLFxuXHRBTk5PVU5DRU1FTlQ6ICdyb29tQW5ub3VuY2VtZW50Jyxcblx0REVTQ1JJUFRJT046ICdyb29tRGVzY3JpcHRpb24nLFxuXHRSRUFEX09OTFk6ICdyZWFkT25seScsXG5cdFJFQUNUX1dIRU5fUkVBRF9PTkxZOiAncmVhY3RXaGVuUmVhZE9ubHknLFxuXHRBUkNISVZFX09SX1VOQVJDSElWRTogJ2FyY2hpdmVPclVuYXJjaGl2ZScsXG5cdEpPSU5fQ09ERTogJ2pvaW5Db2RlJyxcblx0QlJPQURDQVNUOiAnYnJvYWRjYXN0Jyxcblx0U1lTVEVNX01FU1NBR0VTOiAnc3lzdGVtTWVzc2FnZXMnLFxuXHRFMkU6ICdlbmNyeXB0ZWQnLFxufTtcblxuZXhwb3J0IGNvbnN0IFVpVGV4dENvbnRleHQgPSB7XG5cdENMT1NFX1dBUk5JTkc6ICdjbG9zZVdhcm5pbmcnLFxuXHRISURFX1dBUk5JTkc6ICdoaWRlV2FybmluZycsXG5cdExFQVZFX1dBUk5JTkc6ICdsZWF2ZVdhcm5pbmcnLFxuXHROT19ST09NU19TVUJTQ1JJQkVEOiAnbm9Sb29tc1N1YnNjcmliZWQnLFxufTtcblxuZXhwb3J0IGNsYXNzIFJvb21UeXBlUm91dGVDb25maWcge1xuXHRjb25zdHJ1Y3Rvcih7IG5hbWUsIHBhdGggfSkge1xuXHRcdGlmICh0eXBlb2YgbmFtZSAhPT0gJ3VuZGVmaW5lZCcgJiYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCBuYW1lLmxlbmd0aCA9PT0gMCkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignVGhlIG5hbWUgbXVzdCBiZSBhIHN0cmluZy4nKTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIHBhdGggIT09ICd1bmRlZmluZWQnICYmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycgfHwgcGF0aC5sZW5ndGggPT09IDApKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcuJyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fbmFtZSA9IG5hbWU7XG5cdFx0dGhpcy5fcGF0aCA9IHBhdGg7XG5cdH1cblxuXHRnZXQgbmFtZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5fbmFtZTtcblx0fVxuXG5cdGdldCBwYXRoKCkge1xuXHRcdHJldHVybiB0aGlzLl9wYXRoO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBSb29tVHlwZUNvbmZpZyB7XG5cdGNvbnN0cnVjdG9yKHtcblx0XHRpZGVudGlmaWVyID0gUmFuZG9tLmlkKCksXG5cdFx0b3JkZXIsXG5cdFx0aWNvbixcblx0XHRoZWFkZXIsXG5cdFx0bGFiZWwsXG5cdFx0cm91dGUsXG5cdH0pIHtcblx0XHRpZiAodHlwZW9mIGlkZW50aWZpZXIgIT09ICdzdHJpbmcnIHx8IGlkZW50aWZpZXIubGVuZ3RoID09PSAwKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBpZGVudGlmaWVyIG11c3QgYmUgYSBzdHJpbmcuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiBvcmRlciAhPT0gJ251bWJlcicpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignVGhlIG9yZGVyIG11c3QgYmUgYSBudW1iZXIuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiBpY29uICE9PSAndW5kZWZpbmVkJyAmJiAodHlwZW9mIGljb24gIT09ICdzdHJpbmcnIHx8IGljb24ubGVuZ3RoID09PSAwKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgaWNvbiBtdXN0IGJlIGEgc3RyaW5nLicpO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgaGVhZGVyICE9PSAndW5kZWZpbmVkJyAmJiAodHlwZW9mIGhlYWRlciAhPT0gJ3N0cmluZycgfHwgaGVhZGVyLmxlbmd0aCA9PT0gMCkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignVGhlIGhlYWRlciBtdXN0IGJlIGEgc3RyaW5nLicpO1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgbGFiZWwgIT09ICd1bmRlZmluZWQnICYmICh0eXBlb2YgbGFiZWwgIT09ICdzdHJpbmcnIHx8IGxhYmVsLmxlbmd0aCA9PT0gMCkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignVGhlIGxhYmVsIG11c3QgYmUgYSBzdHJpbmcuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHR5cGVvZiByb3V0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgIShyb3V0ZSBpbnN0YW5jZW9mIFJvb21UeXBlUm91dGVDb25maWcpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1Jvb21cXCdzIHJvdXRlIGlzIG5vdCBhIHZhbGlkIHJvdXRlIGNvbmZpZ3VyYXRpb24uIE11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgXCJSb29tVHlwZVJvdXRlQ29uZmlnXCIuJyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5faWRlbnRpZmllciA9IGlkZW50aWZpZXI7XG5cdFx0dGhpcy5fb3JkZXIgPSBvcmRlcjtcblx0XHR0aGlzLl9pY29uID0gaWNvbjtcblx0XHR0aGlzLl9oZWFkZXIgPSBoZWFkZXI7XG5cdFx0dGhpcy5fbGFiZWwgPSBsYWJlbDtcblx0XHR0aGlzLl9yb3V0ZSA9IHJvdXRlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSByb29tIHR5cGUncyBpbnRlcm5hbCBpZGVudGlmaWVyLlxuXHQgKi9cblx0Z2V0IGlkZW50aWZpZXIoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2lkZW50aWZpZXI7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIG9yZGVyIG9mIHRoaXMgcm9vbSB0eXBlIGZvciB0aGUgZGlzcGxheS5cblx0ICovXG5cdGdldCBvcmRlcigpIHtcblx0XHRyZXR1cm4gdGhpcy5fb3JkZXI7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgb3JkZXIgb2YgdGhpcyByb29tIHR5cGUgZm9yIHRoZSBkaXNwbGF5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gb3JkZXIgdGhlIG51bWJlciB2YWx1ZSBmb3IgdGhlIG9yZGVyXG5cdCAqL1xuXHRzZXQgb3JkZXIob3JkZXIpIHtcblx0XHRpZiAodHlwZW9mIG9yZGVyICE9PSAnbnVtYmVyJykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgb3JkZXIgbXVzdCBiZSBhIG51bWJlci4nKTtcblx0XHR9XG5cblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBpY29uIGNsYXNzLCBjc3MsIHRvIHVzZSBhcyB0aGUgdmlzdWFsIGFpZC5cblx0ICovXG5cdGdldCBpY29uKCkge1xuXHRcdHJldHVybiB0aGlzLl9pY29uO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBoZWFkZXIgbmFtZSBvZiB0aGlzIHR5cGUuXG5cdCAqL1xuXHRnZXQgaGVhZGVyKCkge1xuXHRcdHJldHVybiB0aGlzLl9oZWFkZXI7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGkxOG4gbGFiZWwgZm9yIHRoaXMgcm9vbSB0eXBlLlxuXHQgKi9cblx0Z2V0IGxhYmVsKCkge1xuXHRcdHJldHVybiB0aGlzLl9sYWJlbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgcm91dGUgY29uZmlnIGZvciB0aGlzIHJvb20gdHlwZS5cblx0ICovXG5cdGdldCByb3V0ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5fcm91dGU7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGUgcm9vbSdzIG5hbWUgdG8gZGlzcGxheSBpbiB0aGUgVUkuXG5cdCAqXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSByb29tXG5cdCAqL1xuXHRnZXREaXNwbGF5TmFtZShyb29tKSB7XG5cdFx0cmV0dXJuIHJvb20ubmFtZTtcblx0fVxuXG5cdGFsbG93Um9vbVNldHRpbmdDaGFuZ2UoLyogcm9vbSwgc2V0dGluZyAqLykge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybiBhIHJvb20ncyBuYW1lXG5cdCAqXG5cdCAqIEBhYnN0cmFjdFxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFJvb20ncyBuYW1lIGFjY29yZGluZyB0byBpdCdzIHR5cGVcblx0ICovXG5cdHJvb21OYW1lKC8qIHJvb20gKi8pIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRjYW5CZUNyZWF0ZWQoKSB7XG5cdFx0cmV0dXJuIE1ldGVvci5pc1NlcnZlciA/XG5cdFx0XHRSb2NrZXRDaGF0LmF1dGh6Lmhhc0F0TGVhc3RPbmVQZXJtaXNzaW9uKE1ldGVvci51c2VySWQoKSwgW2BjcmVhdGUtJHsgdGhpcy5faWRlbnRpZmllciB9YF0pIDpcblx0XHRcdFJvY2tldENoYXQuYXV0aHouaGFzQXRMZWFzdE9uZVBlcm1pc3Npb24oW2BjcmVhdGUtJHsgdGhpcy5faWRlbnRpZmllciB9YF0pO1xuXHR9XG5cblx0Y2FuQmVEZWxldGVkKHJvb20pIHtcblx0XHRyZXR1cm4gTWV0ZW9yLmlzU2VydmVyID9cblx0XHRcdFJvY2tldENoYXQuYXV0aHouaGFzQXRMZWFzdE9uZVBlcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCBbYGRlbGV0ZS0keyByb29tLnQgfWBdLCByb29tLl9pZCkgOlxuXHRcdFx0Um9ja2V0Q2hhdC5hdXRoei5oYXNBdExlYXN0T25lUGVybWlzc2lvbihbYGRlbGV0ZS0keyByb29tLnQgfWBdLCByb29tLl9pZCk7XG5cdH1cblxuXHRzdXBwb3J0TWVtYmVyc0xpc3QoLyogcm9vbSAqLykge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aXNHcm91cENoYXQoKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Y2FuQWRkVXNlcigvKiB1c2VySWQsIHJvb20gKi8pIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR1c2VyRGV0YWlsU2hvd0FsbCgvKiByb29tICovKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHR1c2VyRGV0YWlsU2hvd0FkbWluKC8qIHJvb20gKi8pIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHByZXZlbnRSZW5hbWluZygvKiByb29tICovKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aW5jbHVkZUluUm9vbVNlYXJjaCgpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRlbmFibGVNZW1iZXJzTGlzdFByb2ZpbGUoKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSB0ZXh0IHdoaWNoIGNhbiBiZSB1c2VkIGluIGdlbmVyaWMgVUlzLlxuXHQgKiBAcGFyYW0gY29udGV4dCBUaGUgcm9sZSBvZiB0aGUgdGV4dCBpbiB0aGUgVUktRWxlbWVudFxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IEEgdGV4dCBvciBhIHRyYW5zbGF0aW9uIGtleSAtIHRoZSBjb25zdW1lcnMgb2YgdGhpcyBtZXRob2Qgd2lsbCBwYXNzIHRoZVxuXHQgKiByZXR1cm5lZCB2YWx1ZSB0byBhbiBpbnRlcm5hdGlvbmFsaXphdGlvbiBsaWJyYXJ5XG5cdCAqL1xuXHRnZXRVaVRleHQoLyogY29udGV4dCAqLykge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBmdWxsIG9iamVjdCBvZiBtZXNzYWdlIHNlbmRlclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gc2VuZGVySWQgU2VuZGVyJ3MgX2lkXG5cdCAqIEByZXR1cm4ge29iamVjdH0gU2VuZGVyJ3Mgb2JqZWN0IGZyb20gZGJcblx0ICovXG5cdGdldE1zZ1NlbmRlcihzZW5kZXJJZCkge1xuXHRcdHJldHVybiBNZXRlb3IuaXNTZXJ2ZXIgPyBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlJZChzZW5kZXJJZCkgOiB7fTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGRldGFpbHMgdG8gdXNlIG9uIG5vdGlmaWNhdGlvbnNcblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R9IHJvb21cblx0ICogQHBhcmFtIHtvYmplY3R9IHVzZXJcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5vdGlmaWNhdGlvbk1lc3NhZ2Vcblx0ICogQHJldHVybiB7b2JqZWN0fSBOb3RpZmljYXRpb24gZGV0YWlsc1xuXHQgKi9cblx0Z2V0Tm90aWZpY2F0aW9uRGV0YWlscyhyb29tLCB1c2VyLCBub3RpZmljYXRpb25NZXNzYWdlKSB7XG5cdFx0aWYgKCFNZXRlb3IuaXNTZXJ2ZXIpIHtcblx0XHRcdHJldHVybiB7fTtcblx0XHR9XG5cblx0XHRjb25zdCB0aXRsZSA9IGAjJHsgdGhpcy5yb29tTmFtZShyb29tKSB9YDtcblxuXHRcdGNvbnN0IHRleHQgPSBgJHsgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1VJX1VzZV9SZWFsX05hbWUnKSA/IHVzZXIubmFtZSA6IHVzZXIudXNlcm5hbWUgfTogJHsgbm90aWZpY2F0aW9uTWVzc2FnZSB9YDtcblxuXHRcdHJldHVybiB7IHRpdGxlLCB0ZXh0IH07XG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2sgaWYgdGhlcmUgaXMgYW4gdXNlciB3aXRoIHRoZSBzYW1lIGlkIGFuZCBsb2dpblRva2VuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBhbGxvd0RhdGFcblx0ICogQHJldHVybiB7b2JqZWN0fSBVc2VyJ3Mgb2JqZWN0IGZyb20gZGJcblx0ICovXG5cdGNhbkFjY2Vzc1VwbG9hZGVkRmlsZSgvKiBhY2Nlc3NEYXRhICovKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cbn1cbiIsImltcG9ydCB7IFJvb21UeXBlQ29uZmlnIH0gZnJvbSAnLi4vUm9vbVR5cGVDb25maWcnO1xuXG5leHBvcnQgY2xhc3MgQ29udmVyc2F0aW9uUm9vbVR5cGUgZXh0ZW5kcyBSb29tVHlwZUNvbmZpZyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKHtcblx0XHRcdGlkZW50aWZpZXI6ICdtZXJnZWQnLFxuXHRcdFx0b3JkZXI6IDMwLFxuXHRcdFx0bGFiZWw6ICdDb252ZXJzYXRpb25zJyxcblx0XHR9KTtcblx0fVxuXG5cdGNvbmRpdGlvbigpIHtcblx0XHQvLyByZXR1cm5zIHRydWUgb25seSBpZiBzaWRlYmFyR3JvdXBCeVR5cGUgaXMgbm90IHNldFxuXHRcdHJldHVybiAhUm9ja2V0Q2hhdC5nZXRVc2VyUHJlZmVyZW5jZShNZXRlb3IudXNlcklkKCksICdzaWRlYmFyR3JvdXBCeVR5cGUnKTtcblx0fVxufVxuIiwiLyogZ2xvYmFscyBvcGVuUm9vbSAqL1xuaW1wb3J0IHsgUm9vbVR5cGVDb25maWcsIFJvb21UeXBlUm91dGVDb25maWcsIFJvb21TZXR0aW5nc0VudW0sIFVpVGV4dENvbnRleHQgfSBmcm9tICcuLi9Sb29tVHlwZUNvbmZpZyc7XG5cbmV4cG9ydCBjbGFzcyBEaXJlY3RNZXNzYWdlUm9vbVJvdXRlIGV4dGVuZHMgUm9vbVR5cGVSb3V0ZUNvbmZpZyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKHtcblx0XHRcdG5hbWU6ICdkaXJlY3QnLFxuXHRcdFx0cGF0aDogJy9kaXJlY3QvOnVzZXJuYW1lJyxcblx0XHR9KTtcblx0fVxuXG5cdGFjdGlvbihwYXJhbXMpIHtcblx0XHRyZXR1cm4gb3BlblJvb20oJ2QnLCBwYXJhbXMudXNlcm5hbWUpO1xuXHR9XG5cblx0bGluayhzdWIpIHtcblx0XHRyZXR1cm4geyB1c2VybmFtZTogc3ViLm5hbWUgfTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgRGlyZWN0TWVzc2FnZVJvb21UeXBlIGV4dGVuZHMgUm9vbVR5cGVDb25maWcge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcih7XG5cdFx0XHRpZGVudGlmaWVyOiAnZCcsXG5cdFx0XHRvcmRlcjogNTAsXG5cdFx0XHRsYWJlbDogJ0RpcmVjdF9NZXNzYWdlcycsXG5cdFx0XHRyb3V0ZTogbmV3IERpcmVjdE1lc3NhZ2VSb29tUm91dGUoKSxcblx0XHR9KTtcblx0fVxuXG5cdGZpbmRSb29tKGlkZW50aWZpZXIpIHtcblx0XHRpZiAoIVJvY2tldENoYXQuYXV0aHouaGFzQXRMZWFzdE9uZVBlcm1pc3Npb24oJ3ZpZXctZC1yb29tJykpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dDogJ2QnLFxuXHRcdFx0bmFtZTogaWRlbnRpZmllcixcblx0XHR9O1xuXG5cdFx0Y29uc3Qgc3Vic2NyaXB0aW9uID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kT25lKHF1ZXJ5KTtcblx0XHRpZiAoc3Vic2NyaXB0aW9uICYmIHN1YnNjcmlwdGlvbi5yaWQpIHtcblx0XHRcdHJldHVybiBDaGF0Um9vbS5maW5kT25lKHN1YnNjcmlwdGlvbi5yaWQpO1xuXHRcdH1cblx0fVxuXG5cdHJvb21OYW1lKHJvb21EYXRhKSB7XG5cdFx0Y29uc3Qgc3Vic2NyaXB0aW9uID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kT25lKHsgcmlkOiByb29tRGF0YS5faWQgfSwgeyBmaWVsZHM6IHsgbmFtZTogMSwgZm5hbWU6IDEgfSB9KTtcblx0XHRpZiAoIXN1YnNjcmlwdGlvbikge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblxuXHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfVXNlX1JlYWxfTmFtZScpICYmIHN1YnNjcmlwdGlvbi5mbmFtZSkge1xuXHRcdFx0cmV0dXJuIHN1YnNjcmlwdGlvbi5mbmFtZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gc3Vic2NyaXB0aW9uLm5hbWU7XG5cdH1cblxuXHRzZWNvbmRhcnlSb29tTmFtZShyb29tRGF0YSkge1xuXHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfVXNlX1JlYWxfTmFtZScpKSB7XG5cdFx0XHRjb25zdCBzdWJzY3JpcHRpb24gPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRPbmUoeyByaWQ6IHJvb21EYXRhLl9pZCB9LCB7IGZpZWxkczogeyBuYW1lOiAxIH0gfSk7XG5cdFx0XHRyZXR1cm4gc3Vic2NyaXB0aW9uICYmIHN1YnNjcmlwdGlvbi5uYW1lO1xuXHRcdH1cblx0fVxuXG5cdGNvbmRpdGlvbigpIHtcblx0XHRjb25zdCBncm91cEJ5VHlwZSA9IFJvY2tldENoYXQuZ2V0VXNlclByZWZlcmVuY2UoTWV0ZW9yLnVzZXJJZCgpLCAnc2lkZWJhckdyb3VwQnlUeXBlJyk7XG5cdFx0cmV0dXJuIGdyb3VwQnlUeXBlICYmIFJvY2tldENoYXQuYXV0aHouaGFzQXRMZWFzdE9uZVBlcm1pc3Npb24oWyd2aWV3LWQtcm9vbScsICd2aWV3LWpvaW5lZC1yb29tJ10pO1xuXHR9XG5cblx0Z2V0VXNlclN0YXR1cyhyb29tSWQpIHtcblx0XHRjb25zdCBzdWJzY3JpcHRpb24gPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRPbmUoeyByaWQ6IHJvb21JZCB9KTtcblx0XHRpZiAoc3Vic2NyaXB0aW9uID09IG51bGwpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRyZXR1cm4gU2Vzc2lvbi5nZXQoYHVzZXJfJHsgc3Vic2NyaXB0aW9uLm5hbWUgfV9zdGF0dXNgKTtcblx0fVxuXG5cdGdldERpc3BsYXlOYW1lKHJvb20pIHtcblx0XHRyZXR1cm4gcm9vbS51c2VybmFtZXMuam9pbignIHggJyk7XG5cdH1cblxuXHRhbGxvd1Jvb21TZXR0aW5nQ2hhbmdlKHJvb20sIHNldHRpbmcpIHtcblx0XHRzd2l0Y2ggKHNldHRpbmcpIHtcblx0XHRcdGNhc2UgUm9vbVNldHRpbmdzRW51bS5OQU1FOlxuXHRcdFx0Y2FzZSBSb29tU2V0dGluZ3NFbnVtLlNZU1RFTV9NRVNTQUdFUzpcblx0XHRcdGNhc2UgUm9vbVNldHRpbmdzRW51bS5ERVNDUklQVElPTjpcblx0XHRcdGNhc2UgUm9vbVNldHRpbmdzRW51bS5SRUFEX09OTFk6XG5cdFx0XHRjYXNlIFJvb21TZXR0aW5nc0VudW0uUkVBQ1RfV0hFTl9SRUFEX09OTFk6XG5cdFx0XHRjYXNlIFJvb21TZXR0aW5nc0VudW0uQVJDSElWRV9PUl9VTkFSQ0hJVkU6XG5cdFx0XHRjYXNlIFJvb21TZXR0aW5nc0VudW0uSk9JTl9DT0RFOlxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRjYXNlIFJvb21TZXR0aW5nc0VudW0uRTJFOlxuXHRcdFx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0UyRV9FbmFibGUnKSA9PT0gdHJ1ZTtcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdGVuYWJsZU1lbWJlcnNMaXN0UHJvZmlsZSgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHVzZXJEZXRhaWxTaG93QWxsKC8qIHJvb20gKi8pIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRnZXRVaVRleHQoY29udGV4dCkge1xuXHRcdHN3aXRjaCAoY29udGV4dCkge1xuXHRcdFx0Y2FzZSBVaVRleHRDb250ZXh0LkhJREVfV0FSTklORzpcblx0XHRcdFx0cmV0dXJuICdIaWRlX1ByaXZhdGVfV2FybmluZyc7XG5cdFx0XHRjYXNlIFVpVGV4dENvbnRleHQuTEVBVkVfV0FSTklORzpcblx0XHRcdFx0cmV0dXJuICdMZWF2ZV9Qcml2YXRlX1dhcm5pbmcnO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGRldGFpbHMgdG8gdXNlIG9uIG5vdGlmaWNhdGlvbnNcblx0ICpcblx0ICogQHBhcmFtIHtvYmplY3R9IHJvb21cblx0ICogQHBhcmFtIHtvYmplY3R9IHVzZXJcblx0ICogQHBhcmFtIHtzdHJpbmd9IG5vdGlmaWNhdGlvbk1lc3NhZ2Vcblx0ICogQHJldHVybiB7b2JqZWN0fSBOb3RpZmljYXRpb24gZGV0YWlsc1xuXHQgKi9cblx0Z2V0Tm90aWZpY2F0aW9uRGV0YWlscyhyb29tLCB1c2VyLCBub3RpZmljYXRpb25NZXNzYWdlKSB7XG5cdFx0aWYgKCFNZXRlb3IuaXNTZXJ2ZXIpIHtcblx0XHRcdHJldHVybiB7fTtcblx0XHR9XG5cblx0XHRjb25zdCB0aXRsZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVSV9Vc2VfUmVhbF9OYW1lJykgPyB1c2VyLm5hbWUgOiBgQCR7IHVzZXIudXNlcm5hbWUgfWA7XG5cdFx0Y29uc3QgdGV4dCA9IG5vdGlmaWNhdGlvbk1lc3NhZ2U7XG5cblx0XHRyZXR1cm4geyB0aXRsZSwgdGV4dCB9O1xuXHR9XG59XG4iLCJpbXBvcnQgeyBSb29tVHlwZUNvbmZpZyB9IGZyb20gJy4uL1Jvb21UeXBlQ29uZmlnJztcblxuZXhwb3J0IGNsYXNzIEZhdm9yaXRlUm9vbVR5cGUgZXh0ZW5kcyBSb29tVHlwZUNvbmZpZyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKHtcblx0XHRcdGlkZW50aWZpZXI6ICdmJyxcblx0XHRcdG9yZGVyOiAyMCxcblx0XHRcdGhlYWRlcjogJ2Zhdm9yaXRlJyxcblx0XHRcdGljb246ICdzdGFyJyxcblx0XHRcdGxhYmVsOiAnRmF2b3JpdGVzJyxcblx0XHR9KTtcblx0fVxuXHRjb25kaXRpb24oKSB7XG5cdFx0cmV0dXJuIFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdGYXZvcml0ZV9Sb29tcycpICYmIFJvY2tldENoYXQuZ2V0VXNlclByZWZlcmVuY2UoTWV0ZW9yLnVzZXJJZCgpLCAnc2lkZWJhclNob3dGYXZvcml0ZXMnKTtcblx0fVxufVxuIiwiaW1wb3J0IHsgQ29udmVyc2F0aW9uUm9vbVR5cGUgfSBmcm9tICcuL2NvbnZlcnNhdGlvbic7XG5pbXBvcnQgeyBEaXJlY3RNZXNzYWdlUm9vbVR5cGUgfSBmcm9tICcuL2RpcmVjdCc7XG5pbXBvcnQgeyBGYXZvcml0ZVJvb21UeXBlIH0gZnJvbSAnLi9mYXZvcml0ZSc7XG5pbXBvcnQgeyBQcml2YXRlUm9vbVR5cGUgfSBmcm9tICcuL3ByaXZhdGUnO1xuaW1wb3J0IHsgUHVibGljUm9vbVR5cGUgfSBmcm9tICcuL3B1YmxpYyc7XG5pbXBvcnQgeyBVbnJlYWRSb29tVHlwZSB9IGZyb20gJy4vdW5yZWFkJztcblxuZXhwb3J0IHtcblx0Q29udmVyc2F0aW9uUm9vbVR5cGUsXG5cdERpcmVjdE1lc3NhZ2VSb29tVHlwZSxcblx0RmF2b3JpdGVSb29tVHlwZSxcblx0UHJpdmF0ZVJvb21UeXBlLFxuXHRQdWJsaWNSb29tVHlwZSxcblx0VW5yZWFkUm9vbVR5cGUsXG59O1xuIiwiLyogZ2xvYmFscyBvcGVuUm9vbSAqL1xuaW1wb3J0IHsgUm9vbVNldHRpbmdzRW51bSwgUm9vbVR5cGVDb25maWcsIFJvb21UeXBlUm91dGVDb25maWcsIFVpVGV4dENvbnRleHQgfSBmcm9tICcuLi9Sb29tVHlwZUNvbmZpZyc7XG5cbmV4cG9ydCBjbGFzcyBQcml2YXRlUm9vbVJvdXRlIGV4dGVuZHMgUm9vbVR5cGVSb3V0ZUNvbmZpZyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKHtcblx0XHRcdG5hbWU6ICdncm91cCcsXG5cdFx0XHRwYXRoOiAnL2dyb3VwLzpuYW1lJyxcblx0XHR9KTtcblx0fVxuXG5cdGFjdGlvbihwYXJhbXMpIHtcblx0XHRyZXR1cm4gb3BlblJvb20oJ3AnLCBwYXJhbXMubmFtZSk7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFByaXZhdGVSb29tVHlwZSBleHRlbmRzIFJvb21UeXBlQ29uZmlnIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0aWRlbnRpZmllcjogJ3AnLFxuXHRcdFx0b3JkZXI6IDQwLFxuXHRcdFx0aWNvbjogJ2xvY2snLFxuXHRcdFx0bGFiZWw6ICdQcml2YXRlX0dyb3VwcycsXG5cdFx0XHRyb3V0ZTogbmV3IFByaXZhdGVSb29tUm91dGUoKSxcblx0XHR9KTtcblx0fVxuXG5cdGZpbmRSb29tKGlkZW50aWZpZXIpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHQ6ICdwJyxcblx0XHRcdG5hbWU6IGlkZW50aWZpZXIsXG5cdFx0fTtcblxuXHRcdHJldHVybiBDaGF0Um9vbS5maW5kT25lKHF1ZXJ5KTtcblx0fVxuXG5cdHJvb21OYW1lKHJvb21EYXRhKSB7XG5cdFx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVSV9BbGxvd19yb29tX25hbWVzX3dpdGhfc3BlY2lhbF9jaGFycycpKSB7XG5cdFx0XHRyZXR1cm4gcm9vbURhdGEuZm5hbWUgfHwgcm9vbURhdGEubmFtZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcm9vbURhdGEubmFtZTtcblx0fVxuXG5cdGNvbmRpdGlvbigpIHtcblx0XHRjb25zdCBncm91cEJ5VHlwZSA9IFJvY2tldENoYXQuZ2V0VXNlclByZWZlcmVuY2UoTWV0ZW9yLnVzZXJJZCgpLCAnc2lkZWJhckdyb3VwQnlUeXBlJyk7XG5cdFx0cmV0dXJuIGdyb3VwQnlUeXBlICYmIFJvY2tldENoYXQuYXV0aHouaGFzQWxsUGVybWlzc2lvbigndmlldy1wLXJvb20nKTtcblx0fVxuXG5cdGlzR3JvdXBDaGF0KCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Y2FuQWRkVXNlcihyb29tKSB7XG5cdFx0cmV0dXJuIFJvY2tldENoYXQuYXV0aHouaGFzQXRMZWFzdE9uZVBlcm1pc3Npb24oWydhZGQtdXNlci10by1hbnktcC1yb29tJywgJ2FkZC11c2VyLXRvLWpvaW5lZC1yb29tJ10sIHJvb20uX2lkKTtcblx0fVxuXG5cdGFsbG93Um9vbVNldHRpbmdDaGFuZ2Uocm9vbSwgc2V0dGluZykge1xuXHRcdHN3aXRjaCAoc2V0dGluZykge1xuXHRcdFx0Y2FzZSBSb29tU2V0dGluZ3NFbnVtLkpPSU5fQ09ERTpcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0Y2FzZSBSb29tU2V0dGluZ3NFbnVtLkJST0FEQ0FTVDpcblx0XHRcdFx0cmV0dXJuIHJvb20uYnJvYWRjYXN0O1xuXHRcdFx0Y2FzZSBSb29tU2V0dGluZ3NFbnVtLlJFQURfT05MWTpcblx0XHRcdFx0cmV0dXJuICFyb29tLmJyb2FkY2FzdDtcblx0XHRcdGNhc2UgUm9vbVNldHRpbmdzRW51bS5SRUFDVF9XSEVOX1JFQURfT05MWTpcblx0XHRcdFx0cmV0dXJuICFyb29tLmJyb2FkY2FzdCAmJiByb29tLnJvO1xuXHRcdFx0Y2FzZSBSb29tU2V0dGluZ3NFbnVtLlNZU1RFTV9NRVNTQUdFUzpcblx0XHRcdGNhc2UgUm9vbVNldHRpbmdzRW51bS5FMkU6XG5cdFx0XHRcdHJldHVybiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRTJFX0VuYWJsZScpID09PSB0cnVlO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHR9XG5cblx0ZW5hYmxlTWVtYmVyc0xpc3RQcm9maWxlKCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Z2V0VWlUZXh0KGNvbnRleHQpIHtcblx0XHRzd2l0Y2ggKGNvbnRleHQpIHtcblx0XHRcdGNhc2UgVWlUZXh0Q29udGV4dC5ISURFX1dBUk5JTkc6XG5cdFx0XHRcdHJldHVybiAnSGlkZV9Hcm91cF9XYXJuaW5nJztcblx0XHRcdGNhc2UgVWlUZXh0Q29udGV4dC5MRUFWRV9XQVJOSU5HOlxuXHRcdFx0XHRyZXR1cm4gJ0xlYXZlX0dyb3VwX1dhcm5pbmcnO1xuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblx0fVxufVxuIiwiLyogZ2xvYmFscyBvcGVuUm9vbSAqL1xuaW1wb3J0IHsgUm9vbVR5cGVDb25maWcsIFJvb21UeXBlUm91dGVDb25maWcsIFJvb21TZXR0aW5nc0VudW0sIFVpVGV4dENvbnRleHQgfSBmcm9tICcuLi9Sb29tVHlwZUNvbmZpZyc7XG5cbmV4cG9ydCBjbGFzcyBQdWJsaWNSb29tUm91dGUgZXh0ZW5kcyBSb29tVHlwZVJvdXRlQ29uZmlnIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoe1xuXHRcdFx0bmFtZTogJ2NoYW5uZWwnLFxuXHRcdFx0cGF0aDogJy9jaGFubmVsLzpuYW1lJyxcblx0XHR9KTtcblx0fVxuXG5cdGFjdGlvbihwYXJhbXMpIHtcblx0XHRyZXR1cm4gb3BlblJvb20oJ2MnLCBwYXJhbXMubmFtZSk7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFB1YmxpY1Jvb21UeXBlIGV4dGVuZHMgUm9vbVR5cGVDb25maWcge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcih7XG5cdFx0XHRpZGVudGlmaWVyOiAnYycsXG5cdFx0XHRvcmRlcjogMzAsXG5cdFx0XHRpY29uOiAnaGFzaHRhZycsXG5cdFx0XHRsYWJlbDogJ0NoYW5uZWxzJyxcblx0XHRcdHJvdXRlOiBuZXcgUHVibGljUm9vbVJvdXRlKCksXG5cdFx0fSk7XG5cdH1cblxuXHRmaW5kUm9vbShpZGVudGlmaWVyKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiAnYycsXG5cdFx0XHRuYW1lOiBpZGVudGlmaWVyLFxuXHRcdH07XG5cdFx0cmV0dXJuIENoYXRSb29tLmZpbmRPbmUocXVlcnkpO1xuXHR9XG5cblx0cm9vbU5hbWUocm9vbURhdGEpIHtcblx0XHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1VJX0FsbG93X3Jvb21fbmFtZXNfd2l0aF9zcGVjaWFsX2NoYXJzJykpIHtcblx0XHRcdHJldHVybiByb29tRGF0YS5mbmFtZSB8fCByb29tRGF0YS5uYW1lO1xuXHRcdH1cblx0XHRyZXR1cm4gcm9vbURhdGEubmFtZTtcblx0fVxuXG5cdGNvbmRpdGlvbigpIHtcblx0XHRjb25zdCBncm91cEJ5VHlwZSA9IFJvY2tldENoYXQuZ2V0VXNlclByZWZlcmVuY2UoTWV0ZW9yLnVzZXJJZCgpLCAnc2lkZWJhckdyb3VwQnlUeXBlJyk7XG5cdFx0cmV0dXJuIGdyb3VwQnlUeXBlICYmIChSb2NrZXRDaGF0LmF1dGh6Lmhhc0F0TGVhc3RPbmVQZXJtaXNzaW9uKFsndmlldy1jLXJvb20nLCAndmlldy1qb2luZWQtcm9vbSddKSB8fCBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfQWxsb3dBbm9ueW1vdXNSZWFkJykgPT09IHRydWUpO1xuXHR9XG5cblx0c2hvd0pvaW5MaW5rKHJvb21JZCkge1xuXHRcdHJldHVybiAhIUNoYXRSb29tLmZpbmRPbmUoeyBfaWQ6IHJvb21JZCwgdDogJ2MnIH0pO1xuXHR9XG5cblx0aW5jbHVkZUluUm9vbVNlYXJjaCgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlzR3JvdXBDaGF0KCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Y2FuQWRkVXNlcihyb29tKSB7XG5cdFx0cmV0dXJuIFJvY2tldENoYXQuYXV0aHouaGFzQXRMZWFzdE9uZVBlcm1pc3Npb24oWydhZGQtdXNlci10by1hbnktYy1yb29tJywgJ2FkZC11c2VyLXRvLWpvaW5lZC1yb29tJ10sIHJvb20uX2lkKTtcblx0fVxuXG5cdGVuYWJsZU1lbWJlcnNMaXN0UHJvZmlsZSgpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGFsbG93Um9vbVNldHRpbmdDaGFuZ2Uocm9vbSwgc2V0dGluZykge1xuXHRcdHN3aXRjaCAoc2V0dGluZykge1xuXHRcdFx0Y2FzZSBSb29tU2V0dGluZ3NFbnVtLkJST0FEQ0FTVDpcblx0XHRcdFx0cmV0dXJuIHJvb20uYnJvYWRjYXN0O1xuXHRcdFx0Y2FzZSBSb29tU2V0dGluZ3NFbnVtLlJFQURfT05MWTpcblx0XHRcdFx0cmV0dXJuICFyb29tLmJyb2FkY2FzdDtcblx0XHRcdGNhc2UgUm9vbVNldHRpbmdzRW51bS5SRUFDVF9XSEVOX1JFQURfT05MWTpcblx0XHRcdFx0cmV0dXJuICFyb29tLmJyb2FkY2FzdCAmJiByb29tLnJvO1xuXHRcdFx0Y2FzZSBSb29tU2V0dGluZ3NFbnVtLlNZU1RFTV9NRVNTQUdFUzpcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdGdldFVpVGV4dChjb250ZXh0KSB7XG5cdFx0c3dpdGNoIChjb250ZXh0KSB7XG5cdFx0XHRjYXNlIFVpVGV4dENvbnRleHQuSElERV9XQVJOSU5HOlxuXHRcdFx0XHRyZXR1cm4gJ0hpZGVfUm9vbV9XYXJuaW5nJztcblx0XHRcdGNhc2UgVWlUZXh0Q29udGV4dC5MRUFWRV9XQVJOSU5HOlxuXHRcdFx0XHRyZXR1cm4gJ0xlYXZlX1Jvb21fV2FybmluZyc7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXHR9XG59XG4iLCJpbXBvcnQgeyBSb29tVHlwZUNvbmZpZyB9IGZyb20gJy4uL1Jvb21UeXBlQ29uZmlnJztcblxuZXhwb3J0IGNsYXNzIFVucmVhZFJvb21UeXBlIGV4dGVuZHMgUm9vbVR5cGVDb25maWcge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcih7XG5cdFx0XHRpZGVudGlmaWVyOiAndW5yZWFkJyxcblx0XHRcdG9yZGVyOiAxMCxcblx0XHRcdGxhYmVsOiAnVW5yZWFkJyxcblx0XHR9KTtcblxuXHRcdHRoaXMudW5yZWFkID0gdHJ1ZTtcblx0fVxuXG5cdGNvbmRpdGlvbigpIHtcblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5nZXRVc2VyUHJlZmVyZW5jZShNZXRlb3IudXNlcklkKCksICdzaWRlYmFyU2hvd1VucmVhZCcpO1xuXHR9XG59XG4iLCJpbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5cblJvY2tldENoYXQuZ2V0VVJMID0gKHBhdGgsIHsgY2RuID0gdHJ1ZSwgZnVsbCA9IGZhbHNlIH0gPSB7fSkgPT4ge1xuXHRjb25zdCBjZG5QcmVmaXggPSBzLnJ0cmltKHMudHJpbShSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQ0ROX1BSRUZJWCcpIHx8ICcnKSwgJy8nKTtcblx0Y29uc3QgcGF0aFByZWZpeCA9IHMucnRyaW0ocy50cmltKF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18uUk9PVF9VUkxfUEFUSF9QUkVGSVggfHwgJycpLCAnLycpO1xuXG5cdGxldCBiYXNlUGF0aDtcblxuXHRjb25zdCBmaW5hbFBhdGggPSBzLmx0cmltKHMudHJpbShwYXRoKSwgJy8nKTtcblxuXHRpZiAoY2RuICYmIGNkblByZWZpeCAhPT0gJycpIHtcblx0XHRiYXNlUGF0aCA9IGNkblByZWZpeCArIHBhdGhQcmVmaXg7XG5cdH0gZWxzZSBpZiAoZnVsbCB8fCBNZXRlb3IuaXNDb3Jkb3ZhKSB7XG5cdFx0cmV0dXJuIE1ldGVvci5hYnNvbHV0ZVVybChmaW5hbFBhdGgpO1xuXHR9IGVsc2Uge1xuXHRcdGJhc2VQYXRoID0gcGF0aFByZWZpeDtcblx0fVxuXG5cdHJldHVybiBgJHsgYmFzZVBhdGggfS8keyBmaW5hbFBhdGggfWA7XG59O1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbi8qXG4qIENhbGxiYWNrIGhvb2tzIHByb3ZpZGUgYW4gZWFzeSB3YXkgdG8gYWRkIGV4dHJhIHN0ZXBzIHRvIGNvbW1vbiBvcGVyYXRpb25zLlxuKiBAbmFtZXNwYWNlIFJvY2tldENoYXQuY2FsbGJhY2tzXG4qL1xuXG5Sb2NrZXRDaGF0LmNhbGxiYWNrcyA9IHt9O1xuXG5pZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG5cdFJvY2tldENoYXQuY2FsbGJhY2tzLnNob3dUaW1lID0gdHJ1ZTtcblx0Um9ja2V0Q2hhdC5jYWxsYmFja3Muc2hvd1RvdGFsVGltZSA9IHRydWU7XG59IGVsc2Uge1xuXHRSb2NrZXRDaGF0LmNhbGxiYWNrcy5zaG93VGltZSA9IGZhbHNlO1xuXHRSb2NrZXRDaGF0LmNhbGxiYWNrcy5zaG93VG90YWxUaW1lID0gZmFsc2U7XG59XG5cblxuLypcbiogQ2FsbGJhY2sgcHJpb3JpdGllc1xuKi9cblxuUm9ja2V0Q2hhdC5jYWxsYmFja3MucHJpb3JpdHkgPSB7XG5cdEhJR0g6IC0xMDAwLFxuXHRNRURJVU06IDAsXG5cdExPVzogMTAwMCxcbn07XG5cbmNvbnN0IGdldEhvb2tzID0gKGhvb2tOYW1lKSA9PiBSb2NrZXRDaGF0LmNhbGxiYWNrc1tob29rTmFtZV0gfHwgW107XG5cbi8qXG4qIEFkZCBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGEgaG9va1xuKiBAcGFyYW0ge1N0cmluZ30gaG9vayAtIFRoZSBuYW1lIG9mIHRoZSBob29rXG4qIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG4qL1xuXG5Sb2NrZXRDaGF0LmNhbGxiYWNrcy5hZGQgPSBmdW5jdGlvbihob29rLCBjYWxsYmFjaywgcHJpb3JpdHksIGlkID0gUmFuZG9tLmlkKCkpIHtcblx0aWYgKCFfLmlzTnVtYmVyKHByaW9yaXR5KSkge1xuXHRcdHByaW9yaXR5ID0gUm9ja2V0Q2hhdC5jYWxsYmFja3MucHJpb3JpdHkuTUVESVVNO1xuXHR9XG5cdGNhbGxiYWNrLnByaW9yaXR5ID0gcHJpb3JpdHk7XG5cdGNhbGxiYWNrLmlkID0gaWQ7XG5cdFJvY2tldENoYXQuY2FsbGJhY2tzW2hvb2tdID0gZ2V0SG9va3MoaG9vayk7XG5cblx0aWYgKFJvY2tldENoYXQuY2FsbGJhY2tzLnNob3dUaW1lID09PSB0cnVlKSB7XG5cdFx0Y29uc3QgZXJyID0gbmV3IEVycm9yO1xuXHRcdGNhbGxiYWNrLnN0YWNrID0gZXJyLnN0YWNrO1xuXHR9XG5cblx0aWYgKFJvY2tldENoYXQuY2FsbGJhY2tzW2hvb2tdLmZpbmQoKGNiKSA9PiBjYi5pZCA9PT0gY2FsbGJhY2suaWQpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdFJvY2tldENoYXQuY2FsbGJhY2tzW2hvb2tdLnB1c2goY2FsbGJhY2spO1xuXHRSb2NrZXRDaGF0LmNhbGxiYWNrc1tob29rXSA9IF8uc29ydEJ5KFJvY2tldENoYXQuY2FsbGJhY2tzW2hvb2tdLCBmdW5jdGlvbihjYWxsYmFjaykge1xuXHRcdHJldHVybiBjYWxsYmFjay5wcmlvcml0eSB8fCBSb2NrZXRDaGF0LmNhbGxiYWNrcy5wcmlvcml0eS5NRURJVU07XG5cdH0pO1xufTtcblxuXG4vKlxuKiBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIGEgaG9va1xuKiBAcGFyYW0ge3N0cmluZ30gaG9vayAtIFRoZSBuYW1lIG9mIHRoZSBob29rXG4qIEBwYXJhbSB7c3RyaW5nfSBpZCAtIFRoZSBjYWxsYmFjaydzIGlkXG4qL1xuXG5Sb2NrZXRDaGF0LmNhbGxiYWNrcy5yZW1vdmUgPSBmdW5jdGlvbihob29rLCBpZCkge1xuXHRSb2NrZXRDaGF0LmNhbGxiYWNrc1tob29rXSA9IGdldEhvb2tzKGhvb2spLmZpbHRlcigoY2FsbGJhY2spID0+IGNhbGxiYWNrLmlkICE9PSBpZCk7XG59O1xuXG5cbi8qXG4qIFN1Y2Nlc3NpdmVseSBydW4gYWxsIG9mIGEgaG9vaydzIGNhbGxiYWNrcyBvbiBhbiBpdGVtXG4qIEBwYXJhbSB7U3RyaW5nfSBob29rIC0gVGhlIG5hbWUgb2YgdGhlIGhvb2tcbiogQHBhcmFtIHtPYmplY3R9IGl0ZW0gLSBUaGUgcG9zdCwgY29tbWVudCwgbW9kaWZpZXIsIGV0Yy4gb24gd2hpY2ggdG8gcnVuIHRoZSBjYWxsYmFja3NcbiogQHBhcmFtIHtPYmplY3R9IFtjb25zdGFudF0gLSBBbiBvcHRpb25hbCBjb25zdGFudCB0aGF0IHdpbGwgYmUgcGFzc2VkIGFsb25nIHRvIGVhY2ggY2FsbGJhY2tcbiogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaXRlbSBhZnRlciBpdCdzIGJlZW4gdGhyb3VnaCBhbGwgdGhlIGNhbGxiYWNrcyBmb3IgdGhpcyBob29rXG4qL1xuXG5Sb2NrZXRDaGF0LmNhbGxiYWNrcy5ydW4gPSBmdW5jdGlvbihob29rLCBpdGVtLCBjb25zdGFudCkge1xuXHRjb25zdCBjYWxsYmFja3MgPSBSb2NrZXRDaGF0LmNhbGxiYWNrc1tob29rXTtcblx0aWYgKCFjYWxsYmFja3MgfHwgIWNhbGxiYWNrcy5sZW5ndGgpIHtcblx0XHRyZXR1cm4gaXRlbTtcblx0fVxuXG5cdGxldCByb2NrZXRjaGF0SG9va3NFbmQ7XG5cdGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcblx0XHRyb2NrZXRjaGF0SG9va3NFbmQgPSBSb2NrZXRDaGF0Lm1ldHJpY3Mucm9ja2V0Y2hhdEhvb2tzLnN0YXJ0VGltZXIoeyBob29rLCBjYWxsYmFja3NfbGVuZ3RoOiBjYWxsYmFja3MubGVuZ3RoIH0pO1xuXHR9XG5cblx0bGV0IHRvdGFsVGltZSA9IDA7XG5cdGNvbnN0IHJlc3VsdCA9IGNhbGxiYWNrcy5yZWR1Y2UoZnVuY3Rpb24ocmVzdWx0LCBjYWxsYmFjaykge1xuXHRcdGxldCByb2NrZXRjaGF0Q2FsbGJhY2tzRW5kO1xuXHRcdGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcblx0XHRcdHJvY2tldGNoYXRDYWxsYmFja3NFbmQgPSBSb2NrZXRDaGF0Lm1ldHJpY3Mucm9ja2V0Y2hhdENhbGxiYWNrcy5zdGFydFRpbWVyKHsgaG9vaywgY2FsbGJhY2s6IGNhbGxiYWNrLmlkIH0pO1xuXHRcdH1cblx0XHRjb25zdCB0aW1lID0gUm9ja2V0Q2hhdC5jYWxsYmFja3Muc2hvd1RpbWUgPT09IHRydWUgfHwgUm9ja2V0Q2hhdC5jYWxsYmFja3Muc2hvd1RvdGFsVGltZSA9PT0gdHJ1ZSA/IERhdGUubm93KCkgOiAwO1xuXG5cdFx0Y29uc3QgY2FsbGJhY2tSZXN1bHQgPSBjYWxsYmFjayhyZXN1bHQsIGNvbnN0YW50KTtcblxuXHRcdGlmIChSb2NrZXRDaGF0LmNhbGxiYWNrcy5zaG93VGltZSA9PT0gdHJ1ZSB8fCBSb2NrZXRDaGF0LmNhbGxiYWNrcy5zaG93VG90YWxUaW1lID09PSB0cnVlKSB7XG5cdFx0XHRjb25zdCBjdXJyZW50VGltZSA9IERhdGUubm93KCkgLSB0aW1lO1xuXHRcdFx0dG90YWxUaW1lICs9IGN1cnJlbnRUaW1lO1xuXHRcdFx0aWYgKFJvY2tldENoYXQuY2FsbGJhY2tzLnNob3dUaW1lID09PSB0cnVlKSB7XG5cdFx0XHRcdGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcblx0XHRcdFx0XHRyb2NrZXRjaGF0Q2FsbGJhY2tzRW5kKCk7XG5cdFx0XHRcdFx0Um9ja2V0Q2hhdC5zdGF0c1RyYWNrZXIudGltaW5nKCdjYWxsYmFja3MudGltZScsIGN1cnJlbnRUaW1lLCBbYGhvb2s6JHsgaG9vayB9YCwgYGNhbGxiYWNrOiR7IGNhbGxiYWNrLmlkIH1gXSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGV0IHN0YWNrID0gY2FsbGJhY2suc3RhY2sgJiYgdHlwZW9mIGNhbGxiYWNrLnN0YWNrLnNwbGl0ID09PSAnZnVuY3Rpb24nICYmIGNhbGxiYWNrLnN0YWNrLnNwbGl0KCdcXG4nKTtcblx0XHRcdFx0XHRzdGFjayA9IHN0YWNrICYmIHN0YWNrWzJdICYmIChzdGFja1syXS5tYXRjaCgvXFwoLitcXCkvKSB8fCBbXSlbMF07XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coU3RyaW5nKGN1cnJlbnRUaW1lKSwgaG9vaywgY2FsbGJhY2suaWQsIHN0YWNrKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gKHR5cGVvZiBjYWxsYmFja1Jlc3VsdCA9PT0gJ3VuZGVmaW5lZCcpID8gcmVzdWx0IDogY2FsbGJhY2tSZXN1bHQ7XG5cdH0sIGl0ZW0pO1xuXG5cdGlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcblx0XHRyb2NrZXRjaGF0SG9va3NFbmQoKTtcblx0fVxuXG5cdGlmIChSb2NrZXRDaGF0LmNhbGxiYWNrcy5zaG93VG90YWxUaW1lID09PSB0cnVlKSB7XG5cdFx0aWYgKE1ldGVvci5pc1NlcnZlcikge1xuXHRcdFx0Um9ja2V0Q2hhdC5zdGF0c1RyYWNrZXIudGltaW5nKCdjYWxsYmFja3MudG90YWxUaW1lJywgdG90YWxUaW1lLCBbYGhvb2s6JHsgaG9vayB9YF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLmxvZyhgJHsgaG9vayB9OmAsIHRvdGFsVGltZSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcblxufTtcblxuXG4vKlxuKiBTdWNjZXNzaXZlbHkgcnVuIGFsbCBvZiBhIGhvb2sncyBjYWxsYmFja3Mgb24gYW4gaXRlbSwgaW4gYXN5bmMgbW9kZSAob25seSB3b3JrcyBvbiBzZXJ2ZXIpXG4qIEBwYXJhbSB7U3RyaW5nfSBob29rIC0gVGhlIG5hbWUgb2YgdGhlIGhvb2tcbiogQHBhcmFtIHtPYmplY3R9IGl0ZW0gLSBUaGUgcG9zdCwgY29tbWVudCwgbW9kaWZpZXIsIGV0Yy4gb24gd2hpY2ggdG8gcnVuIHRoZSBjYWxsYmFja3NcbiogQHBhcmFtIHtPYmplY3R9IFtjb25zdGFudF0gLSBBbiBvcHRpb25hbCBjb25zdGFudCB0aGF0IHdpbGwgYmUgcGFzc2VkIGFsb25nIHRvIGVhY2ggY2FsbGJhY2tcbiovXG5cblJvY2tldENoYXQuY2FsbGJhY2tzLnJ1bkFzeW5jID0gZnVuY3Rpb24oaG9vaywgaXRlbSwgY29uc3RhbnQpIHtcblx0Y29uc3QgY2FsbGJhY2tzID0gUm9ja2V0Q2hhdC5jYWxsYmFja3NbaG9va107XG5cdGlmIChNZXRlb3IuaXNTZXJ2ZXIgJiYgY2FsbGJhY2tzICYmIGNhbGxiYWNrcy5sZW5ndGgpIHtcblx0XHRNZXRlb3IuZGVmZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRjYWxsYmFja3MuZm9yRWFjaCgoY2FsbGJhY2spID0+IGNhbGxiYWNrKGl0ZW0sIGNvbnN0YW50KSk7XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGl0ZW07XG59O1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cblJvY2tldENoYXQuZmlsZVVwbG9hZE1lZGlhV2hpdGVMaXN0ID0gZnVuY3Rpb24oKSB7XG5cdGNvbnN0IG1lZGlhVHlwZVdoaXRlTGlzdCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdGaWxlVXBsb2FkX01lZGlhVHlwZVdoaXRlTGlzdCcpO1xuXG5cdGlmICghbWVkaWFUeXBlV2hpdGVMaXN0IHx8IG1lZGlhVHlwZVdoaXRlTGlzdCA9PT0gJyonKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHJldHVybiBfLm1hcChtZWRpYVR5cGVXaGl0ZUxpc3Quc3BsaXQoJywnKSwgZnVuY3Rpb24oaXRlbSkge1xuXHRcdHJldHVybiBpdGVtLnRyaW0oKTtcblx0fSk7XG59O1xuXG5Sb2NrZXRDaGF0LmZpbGVVcGxvYWRJc1ZhbGlkQ29udGVudFR5cGUgPSBmdW5jdGlvbih0eXBlKSB7XG5cdGNvbnN0IGxpc3QgPSBSb2NrZXRDaGF0LmZpbGVVcGxvYWRNZWRpYVdoaXRlTGlzdCgpO1xuXHRpZiAoIWxpc3QpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICghdHlwZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmIChfLmNvbnRhaW5zKGxpc3QsIHR5cGUpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc3Qgd2lsZENhcmRHbG9iID0gJy8qJztcblx0XHRjb25zdCB3aWxkY2FyZHMgPSBfLmZpbHRlcihsaXN0LCBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRyZXR1cm4gaXRlbS5pbmRleE9mKHdpbGRDYXJkR2xvYikgPiAwO1xuXHRcdH0pO1xuXHRcdGlmIChfLmNvbnRhaW5zKHdpbGRjYXJkcywgdHlwZS5yZXBsYWNlKC8oXFwvLiopJC8sIHdpbGRDYXJkR2xvYikpKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcbiIsImNvbnN0IGNvbG9ycyA9IFsnI0Y0NDMzNicsICcjRTkxRTYzJywgJyM5QzI3QjAnLCAnIzY3M0FCNycsICcjM0Y1MUI1JywgJyMyMTk2RjMnLCAnIzAzQTlGNCcsICcjMDBCQ0Q0JywgJyMwMDk2ODgnLCAnIzRDQUY1MCcsICcjOEJDMzRBJywgJyNDRERDMzknLCAnI0ZGQzEwNycsICcjRkY5ODAwJywgJyNGRjU3MjInLCAnIzc5NTU0OCcsICcjOUU5RTlFJywgJyM2MDdEOEInXTtcblxuUm9ja2V0Q2hhdC5nZXRBdmF0YXJDb2xvciA9IGZ1bmN0aW9uKG5hbWUpIHtcblx0cmV0dXJuIGNvbG9yc1tuYW1lLmxlbmd0aCAlIGNvbG9ycy5sZW5ndGhdO1xufTtcbiIsIlJvY2tldENoYXQuZ2V0RGVmYXVsdFN1YnNjcmlwdGlvblByZWYgPSBmdW5jdGlvbiBfZ2V0RGVmYXVsdFN1YnNjcmlwdGlvblByZWYodXNlclByZWYpIHtcblx0Y29uc3Qgc3Vic2NyaXB0aW9uID0ge307XG5cblx0Y29uc3Qge1xuXHRcdGRlc2t0b3BOb3RpZmljYXRpb25zLFxuXHRcdG1vYmlsZU5vdGlmaWNhdGlvbnMsXG5cdFx0ZW1haWxOb3RpZmljYXRpb25Nb2RlLFxuXHRcdGhpZ2hsaWdodHMsXG5cdH0gPSAodXNlclByZWYuc2V0dGluZ3MgJiYgdXNlclByZWYuc2V0dGluZ3MucHJlZmVyZW5jZXMpIHx8IHt9O1xuXG5cdGlmIChBcnJheS5pc0FycmF5KGhpZ2hsaWdodHMpICYmIGhpZ2hsaWdodHMubGVuZ3RoKSB7XG5cdFx0c3Vic2NyaXB0aW9uLnVzZXJIaWdobGlnaHRzID0gaGlnaGxpZ2h0cztcblx0fVxuXG5cdGlmIChkZXNrdG9wTm90aWZpY2F0aW9ucyAmJiBkZXNrdG9wTm90aWZpY2F0aW9ucyAhPT0gJ2RlZmF1bHQnKSB7XG5cdFx0c3Vic2NyaXB0aW9uLmRlc2t0b3BOb3RpZmljYXRpb25zID0gZGVza3RvcE5vdGlmaWNhdGlvbnM7XG5cdFx0c3Vic2NyaXB0aW9uLmRlc2t0b3BQcmVmT3JpZ2luID0gJ3VzZXInO1xuXHR9XG5cblx0aWYgKG1vYmlsZU5vdGlmaWNhdGlvbnMgJiYgbW9iaWxlTm90aWZpY2F0aW9ucyAhPT0gJ2RlZmF1bHQnKSB7XG5cdFx0c3Vic2NyaXB0aW9uLm1vYmlsZVB1c2hOb3RpZmljYXRpb25zID0gbW9iaWxlTm90aWZpY2F0aW9ucztcblx0XHRzdWJzY3JpcHRpb24ubW9iaWxlUHJlZk9yaWdpbiA9ICd1c2VyJztcblx0fVxuXG5cdGlmIChlbWFpbE5vdGlmaWNhdGlvbk1vZGUgJiYgZW1haWxOb3RpZmljYXRpb25Nb2RlICE9PSAnZGVmYXVsdCcpIHtcblx0XHRzdWJzY3JpcHRpb24uZW1haWxOb3RpZmljYXRpb25zID0gZW1haWxOb3RpZmljYXRpb25Nb2RlO1xuXHRcdHN1YnNjcmlwdGlvbi5lbWFpbFByZWZPcmlnaW4gPSAndXNlcic7XG5cdH1cblxuXHRyZXR1cm4gc3Vic2NyaXB0aW9uO1xufTtcbiIsImltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcblxuUm9ja2V0Q2hhdC5nZXRWYWxpZFJvb21OYW1lID0gZnVuY3Rpb24gZ2V0VmFsaWRSb29tTmFtZShkaXNwbGF5TmFtZSwgcmlkID0gJycpIHtcblx0bGV0IHNsdWdpZmllZE5hbWUgPSBkaXNwbGF5TmFtZTtcblxuXHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1VJX0FsbG93X3Jvb21fbmFtZXNfd2l0aF9zcGVjaWFsX2NoYXJzJykpIHtcblx0XHRjb25zdCByb29tID0gUm9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuZmluZE9uZUJ5RGlzcGxheU5hbWUoZGlzcGxheU5hbWUpO1xuXHRcdGlmIChyb29tICYmIHJvb20uX2lkICE9PSByaWQpIHtcblx0XHRcdGlmIChyb29tLmFyY2hpdmVkKSB7XG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFyY2hpdmVkLWR1cGxpY2F0ZS1uYW1lJywgYFRoZXJlJ3MgYW4gYXJjaGl2ZWQgY2hhbm5lbCB3aXRoIG5hbWUgJHsgZGlzcGxheU5hbWUgfWAsIHsgZnVuY3Rpb246ICdSb2NrZXRDaGF0LmdldFZhbGlkUm9vbU5hbWUnLCBjaGFubmVsX25hbWU6IGRpc3BsYXlOYW1lIH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItZHVwbGljYXRlLWNoYW5uZWwtbmFtZScsIGBBIGNoYW5uZWwgd2l0aCBuYW1lICckeyBkaXNwbGF5TmFtZSB9JyBleGlzdHNgLCB7IGZ1bmN0aW9uOiAnUm9ja2V0Q2hhdC5nZXRWYWxpZFJvb21OYW1lJywgY2hhbm5lbF9uYW1lOiBkaXNwbGF5TmFtZSB9KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0c2x1Z2lmaWVkTmFtZSA9IHMuc2x1Z2lmeShkaXNwbGF5TmFtZSk7XG5cdH1cblxuXHRsZXQgbmFtZVZhbGlkYXRpb247XG5cdHRyeSB7XG5cdFx0bmFtZVZhbGlkYXRpb24gPSBuZXcgUmVnRXhwKGBeJHsgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1VURjhfTmFtZXNfVmFsaWRhdGlvbicpIH0kYCk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0bmFtZVZhbGlkYXRpb24gPSBuZXcgUmVnRXhwKCdeWzAtOWEtekEtWi1fLl0rJCcpO1xuXHR9XG5cdGlmICghbmFtZVZhbGlkYXRpb24udGVzdChzbHVnaWZpZWROYW1lKSkge1xuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtcm9vbS1uYW1lJywgYCR7IHNsdWdpZmllZE5hbWUgfSBpcyBub3QgYSB2YWxpZCByb29tIG5hbWUuYCwge1xuXHRcdFx0ZnVuY3Rpb246ICdSb2NrZXRDaGF0LmdldFZhbGlkUm9vbU5hbWUnLFxuXHRcdFx0Y2hhbm5lbF9uYW1lOiBzbHVnaWZpZWROYW1lLFxuXHRcdH0pO1xuXHR9XG5cblx0Y29uc3Qgcm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeU5hbWUoc2x1Z2lmaWVkTmFtZSk7XG5cdGlmIChyb29tICYmIHJvb20uX2lkICE9PSByaWQpIHtcblx0XHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1VJX0FsbG93X3Jvb21fbmFtZXNfd2l0aF9zcGVjaWFsX2NoYXJzJykpIHtcblx0XHRcdGxldCB0bXBOYW1lID0gc2x1Z2lmaWVkTmFtZTtcblx0XHRcdGxldCBuZXh0ID0gMDtcblx0XHRcdHdoaWxlIChSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlOYW1lQW5kTm90SWQodG1wTmFtZSwgcmlkKSkge1xuXHRcdFx0XHR0bXBOYW1lID0gYCR7IHNsdWdpZmllZE5hbWUgfS0keyArK25leHQgfWA7XG5cdFx0XHR9XG5cdFx0XHRzbHVnaWZpZWROYW1lID0gdG1wTmFtZTtcblx0XHR9IGVsc2UgaWYgKHJvb20uYXJjaGl2ZWQpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFyY2hpdmVkLWR1cGxpY2F0ZS1uYW1lJywgYFRoZXJlJ3MgYW4gYXJjaGl2ZWQgY2hhbm5lbCB3aXRoIG5hbWUgJHsgc2x1Z2lmaWVkTmFtZSB9YCwgeyBmdW5jdGlvbjogJ1JvY2tldENoYXQuZ2V0VmFsaWRSb29tTmFtZScsIGNoYW5uZWxfbmFtZTogc2x1Z2lmaWVkTmFtZSB9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItZHVwbGljYXRlLWNoYW5uZWwtbmFtZScsIGBBIGNoYW5uZWwgd2l0aCBuYW1lICckeyBzbHVnaWZpZWROYW1lIH0nIGV4aXN0c2AsIHsgZnVuY3Rpb246ICdSb2NrZXRDaGF0LmdldFZhbGlkUm9vbU5hbWUnLCBjaGFubmVsX25hbWU6IHNsdWdpZmllZE5hbWUgfSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHNsdWdpZmllZE5hbWU7XG59O1xuIiwiaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5Sb2NrZXRDaGF0LnBsYWNlaG9sZGVycyA9IHt9O1xuXG5Sb2NrZXRDaGF0LnBsYWNlaG9sZGVycy5yZXBsYWNlID0gZnVuY3Rpb24oc3RyLCBkYXRhKSB7XG5cdGlmICghc3RyKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0c3RyID0gc3RyLnJlcGxhY2UoL1xcW1NpdGVfTmFtZVxcXS9nLCBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU2l0ZV9OYW1lJykgfHwgJycpO1xuXHRzdHIgPSBzdHIucmVwbGFjZSgvXFxbU2l0ZV9VUkxcXF0vZywgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1NpdGVfVXJsJykgfHwgJycpO1xuXG5cdGlmIChkYXRhKSB7XG5cdFx0c3RyID0gc3RyLnJlcGxhY2UoL1xcW25hbWVcXF0vZywgZGF0YS5uYW1lIHx8ICcnKTtcblx0XHRzdHIgPSBzdHIucmVwbGFjZSgvXFxbZm5hbWVcXF0vZywgcy5zdHJMZWZ0KGRhdGEubmFtZSwgJyAnKSB8fCAnJyk7XG5cdFx0c3RyID0gc3RyLnJlcGxhY2UoL1xcW2xuYW1lXFxdL2csIHMuc3RyUmlnaHRCYWNrKGRhdGEubmFtZSwgJyAnKSB8fCAnJyk7XG5cdFx0c3RyID0gc3RyLnJlcGxhY2UoL1xcW2VtYWlsXFxdL2csIGRhdGEuZW1haWwgfHwgJycpO1xuXHRcdHN0ciA9IHN0ci5yZXBsYWNlKC9cXFtwYXNzd29yZFxcXS9nLCBkYXRhLnBhc3N3b3JkIHx8ICcnKTtcblx0XHRzdHIgPSBzdHIucmVwbGFjZSgvXFxbcmVhc29uXFxdL2csIGRhdGEucmVhc29uIHx8ICcnKTtcblx0XHRzdHIgPSBzdHIucmVwbGFjZSgvXFxbVXNlclxcXS9nLCBkYXRhLnVzZXIgfHwgJycpO1xuXHRcdHN0ciA9IHN0ci5yZXBsYWNlKC9cXFtSb29tXFxdL2csIGRhdGEucm9vbSB8fCAnJyk7XG5cblx0XHRpZiAoZGF0YS51bnN1YnNjcmliZSkge1xuXHRcdFx0c3RyID0gc3RyLnJlcGxhY2UoL1xcW3Vuc3Vic2NyaWJlXFxdL2csIGRhdGEudW5zdWJzY3JpYmUpO1xuXHRcdH1cblx0fVxuXG5cdHN0ciA9IHN0ci5yZXBsYWNlKC8oW14+XFxyXFxuXT8pKFxcclxcbnxcXG5cXHJ8XFxyfFxcbikvZywgJyQxJyArICc8YnI+JyArICckMicpO1xuXG5cblx0cmV0dXJuIHN0cjtcbn07XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuLypcbiogQ2FsbGJhY2sgaG9va3MgcHJvdmlkZSBhbiBlYXN5IHdheSB0byBhZGQgZXh0cmEgc3RlcHMgdG8gY29tbW9uIG9wZXJhdGlvbnMuXG4qIEBuYW1lc3BhY2UgUm9ja2V0Q2hhdC5wcm9taXNlc1xuKi9cblxuUm9ja2V0Q2hhdC5wcm9taXNlcyA9IHt9O1xuXG5cbi8qXG4qIENhbGxiYWNrIHByaW9yaXRpZXNcbiovXG5cblJvY2tldENoYXQucHJvbWlzZXMucHJpb3JpdHkgPSB7XG5cdEhJR0g6IC0xMDAwLFxuXHRNRURJVU06IDAsXG5cdExPVzogMTAwMCxcbn07XG5cbmNvbnN0IGdldEhvb2sgPSAoaG9va05hbWUpID0+IFJvY2tldENoYXQucHJvbWlzZXNbaG9va05hbWVdIHx8IFtdO1xuXG4vKlxuKiBBZGQgYSBjYWxsYmFjayBmdW5jdGlvbiB0byBhIGhvb2tcbiogQHBhcmFtIHtTdHJpbmd9IGhvb2sgLSBUaGUgbmFtZSBvZiB0aGUgaG9va1xuKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayBmdW5jdGlvblxuKi9cblxuUm9ja2V0Q2hhdC5wcm9taXNlcy5hZGQgPSBmdW5jdGlvbihob29rLCBjYWxsYmFjaywgcCA9IFJvY2tldENoYXQucHJvbWlzZXMucHJpb3JpdHkuTUVESVVNLCBpZCkge1xuXHRjYWxsYmFjay5wcmlvcml0eSA9IF8uaXNOdW1iZXIocCkgPyBwIDogUm9ja2V0Q2hhdC5wcm9taXNlcy5wcmlvcml0eS5NRURJVU07XG5cdGNhbGxiYWNrLmlkID0gaWQgfHwgUmFuZG9tLmlkKCk7XG5cdFJvY2tldENoYXQucHJvbWlzZXNbaG9va10gPSBnZXRIb29rKGhvb2spO1xuXHRpZiAoUm9ja2V0Q2hhdC5wcm9taXNlc1tob29rXS5maW5kKChjYikgPT4gY2IuaWQgPT09IGNhbGxiYWNrLmlkKSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRSb2NrZXRDaGF0LnByb21pc2VzW2hvb2tdLnB1c2goY2FsbGJhY2spO1xuXHRSb2NrZXRDaGF0LnByb21pc2VzW2hvb2tdID0gXy5zb3J0QnkoUm9ja2V0Q2hhdC5wcm9taXNlc1tob29rXSwgKGNhbGxiYWNrKSA9PiBjYWxsYmFjay5wcmlvcml0eSB8fCBSb2NrZXRDaGF0LnByb21pc2VzLnByaW9yaXR5Lk1FRElVTSk7XG59O1xuXG5cbi8qXG4qIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gYSBob29rXG4qIEBwYXJhbSB7c3RyaW5nfSBob29rIC0gVGhlIG5hbWUgb2YgdGhlIGhvb2tcbiogQHBhcmFtIHtzdHJpbmd9IGlkIC0gVGhlIGNhbGxiYWNrJ3MgaWRcbiovXG5cblJvY2tldENoYXQucHJvbWlzZXMucmVtb3ZlID0gZnVuY3Rpb24oaG9vaywgaWQpIHtcblx0Um9ja2V0Q2hhdC5wcm9taXNlc1tob29rXSA9IGdldEhvb2soaG9vaykuZmlsdGVyKChjYWxsYmFjaykgPT4gY2FsbGJhY2suaWQgIT09IGlkKTtcbn07XG5cblxuLypcbiogU3VjY2Vzc2l2ZWx5IHJ1biBhbGwgb2YgYSBob29rJ3MgY2FsbGJhY2tzIG9uIGFuIGl0ZW1cbiogQHBhcmFtIHtTdHJpbmd9IGhvb2sgLSBUaGUgbmFtZSBvZiB0aGUgaG9va1xuKiBAcGFyYW0ge09iamVjdH0gaXRlbSAtIFRoZSBwb3N0LCBjb21tZW50LCBtb2RpZmllciwgZXRjLiBvbiB3aGljaCB0byBydW4gdGhlIGNhbGxiYWNrc1xuKiBAcGFyYW0ge09iamVjdH0gW2NvbnN0YW50XSAtIEFuIG9wdGlvbmFsIGNvbnN0YW50IHRoYXQgd2lsbCBiZSBwYXNzZWQgYWxvbmcgdG8gZWFjaCBjYWxsYmFja1xuKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBpdGVtIGFmdGVyIGl0J3MgYmVlbiB0aHJvdWdoIGFsbCB0aGUgY2FsbGJhY2tzIGZvciB0aGlzIGhvb2tcbiovXG5cblJvY2tldENoYXQucHJvbWlzZXMucnVuID0gZnVuY3Rpb24oaG9vaywgaXRlbSwgY29uc3RhbnQpIHtcblx0Y29uc3QgY2FsbGJhY2tzID0gUm9ja2V0Q2hhdC5wcm9taXNlc1tob29rXTtcblx0aWYgKGNhbGxiYWNrcyA9PSBudWxsIHx8IGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGl0ZW0pO1xuXHR9XG5cdHJldHVybiBjYWxsYmFja3MucmVkdWNlKChwcmV2aW91c1Byb21pc2UsIGNhbGxiYWNrKSA9PiBwcmV2aW91c1Byb21pc2UudGhlbigocmVzdWx0KSA9PiBjYWxsYmFjayhyZXN1bHQsIGNvbnN0YW50KSksIFByb21pc2UucmVzb2x2ZShpdGVtKSk7XG59O1xuXG5cbi8qXG4qIFN1Y2Nlc3NpdmVseSBydW4gYWxsIG9mIGEgaG9vaydzIGNhbGxiYWNrcyBvbiBhbiBpdGVtLCBpbiBhc3luYyBtb2RlIChvbmx5IHdvcmtzIG9uIHNlcnZlcilcbiogQHBhcmFtIHtTdHJpbmd9IGhvb2sgLSBUaGUgbmFtZSBvZiB0aGUgaG9va1xuKiBAcGFyYW0ge09iamVjdH0gaXRlbSAtIFRoZSBwb3N0LCBjb21tZW50LCBtb2RpZmllciwgZXRjLiBvbiB3aGljaCB0byBydW4gdGhlIGNhbGxiYWNrc1xuKiBAcGFyYW0ge09iamVjdH0gW2NvbnN0YW50XSAtIEFuIG9wdGlvbmFsIGNvbnN0YW50IHRoYXQgd2lsbCBiZSBwYXNzZWQgYWxvbmcgdG8gZWFjaCBjYWxsYmFja1xuKi9cblxuUm9ja2V0Q2hhdC5wcm9taXNlcy5ydW5Bc3luYyA9IGZ1bmN0aW9uKGhvb2ssIGl0ZW0sIGNvbnN0YW50KSB7XG5cdGNvbnN0IGNhbGxiYWNrcyA9IFJvY2tldENoYXQucHJvbWlzZXNbaG9va107XG5cdGlmICghTWV0ZW9yLmlzU2VydmVyIHx8IGNhbGxiYWNrcyA9PSBudWxsIHx8IGNhbGxiYWNrcy5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gaXRlbTtcblx0fVxuXHRNZXRlb3IuZGVmZXIoKCkgPT4gY2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrKSA9PiBjYWxsYmFjayhpdGVtLCBjb25zdGFudCkpKTtcbn07XG4iLCIvKiBnbG9iYWxzIHJvb21FeGl0ICovXG5pbXBvcnQgeyBSb29tVHlwZUNvbmZpZyB9IGZyb20gJy4vUm9vbVR5cGVDb25maWcnO1xuXG5leHBvcnQgY2xhc3MgUm9vbVR5cGVzQ29tbW9uIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5yb29tVHlwZXMgPSB7fTtcblx0XHR0aGlzLnJvb21UeXBlc09yZGVyID0gW107XG5cdFx0dGhpcy5tYWluT3JkZXIgPSAxO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSByb29tIHR5cGUgdG8gdGhlIGFwcGxpY2F0aW9uLlxuXHQgKlxuXHQgKiBAcGFyYW0ge1Jvb21UeXBlQ29uZmlnfSByb29tQ29uZmlnXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKi9cblx0YWRkKHJvb21Db25maWcpIHtcblx0XHRpZiAoIShyb29tQ29uZmlnIGluc3RhbmNlb2YgUm9vbVR5cGVDb25maWcpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgUm9vbSBDb25maWd1cmF0aW9uIG9iamVjdCwgaXQgbXVzdCBleHRlbmQgXCJSb29tVHlwZUNvbmZpZ1wiJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMucm9vbVR5cGVzW3Jvb21Db25maWcuaWRlbnRpZmllcl0pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoIXJvb21Db25maWcub3JkZXIpIHtcblx0XHRcdHJvb21Db25maWcub3JkZXIgPSB0aGlzLm1haW5PcmRlciArIDEwO1xuXHRcdFx0dGhpcy5tYWluT3JkZXIgKz0gMTA7XG5cdFx0fVxuXG5cdFx0dGhpcy5yb29tVHlwZXNPcmRlci5wdXNoKHtcblx0XHRcdGlkZW50aWZpZXI6IHJvb21Db25maWcuaWRlbnRpZmllcixcblx0XHRcdG9yZGVyOiByb29tQ29uZmlnLm9yZGVyLFxuXHRcdH0pO1xuXG5cdFx0dGhpcy5yb29tVHlwZXNbcm9vbUNvbmZpZy5pZGVudGlmaWVyXSA9IHJvb21Db25maWc7XG5cblx0XHRpZiAocm9vbUNvbmZpZy5yb3V0ZSAmJiByb29tQ29uZmlnLnJvdXRlLnBhdGggJiYgcm9vbUNvbmZpZy5yb3V0ZS5uYW1lICYmIHJvb21Db25maWcucm91dGUuYWN0aW9uKSB7XG5cdFx0XHRjb25zdCByb3V0ZUNvbmZpZyA9IHtcblx0XHRcdFx0bmFtZTogcm9vbUNvbmZpZy5yb3V0ZS5uYW1lLFxuXHRcdFx0XHRhY3Rpb246IHJvb21Db25maWcucm91dGUuYWN0aW9uLFxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKE1ldGVvci5pc0NsaWVudCkge1xuXHRcdFx0XHRyb3V0ZUNvbmZpZy50cmlnZ2Vyc0V4aXQgPSBbcm9vbUV4aXRdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gRmxvd1JvdXRlci5yb3V0ZShyb29tQ29uZmlnLnJvdXRlLnBhdGgsIHJvdXRlQ29uZmlnKTtcblx0XHR9XG5cdH1cblxuXHRoYXNDdXN0b21MaW5rKHJvb21UeXBlKSB7XG5cdFx0cmV0dXJuIHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXSAmJiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucm91dGUgJiYgdGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdLnJvdXRlLmxpbmsgIT0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcm9vbVR5cGUgcm9vbSB0eXBlIChlLmcuOiBjIChmb3IgY2hhbm5lbHMpLCBkIChmb3IgZGlyZWN0IGNoYW5uZWxzKSlcblx0ICogQHBhcmFtIHtvYmplY3R9IHN1YkRhdGEgdGhlIHVzZXIncyBzdWJzY3JpcHRpb24gZGF0YVxuXHQgKi9cblx0Z2V0Um91dGVMaW5rKHJvb21UeXBlLCBzdWJEYXRhKSB7XG5cdFx0aWYgKCF0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRsZXQgcm91dGVEYXRhID0ge307XG5cdFx0aWYgKHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXSAmJiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucm91dGUgJiYgdGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdLnJvdXRlLmxpbmspIHtcblx0XHRcdHJvdXRlRGF0YSA9IHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXS5yb3V0ZS5saW5rKHN1YkRhdGEpO1xuXHRcdH0gZWxzZSBpZiAoc3ViRGF0YSAmJiBzdWJEYXRhLm5hbWUpIHtcblx0XHRcdHJvdXRlRGF0YSA9IHtcblx0XHRcdFx0bmFtZTogc3ViRGF0YS5uYW1lLFxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRyZXR1cm4gRmxvd1JvdXRlci5wYXRoKHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXS5yb3V0ZS5uYW1lLCByb3V0ZURhdGEpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSByb29tVHlwZSByb29tIHR5cGUgKGUuZy46IGMgKGZvciBjaGFubmVscyksIGQgKGZvciBkaXJlY3QgY2hhbm5lbHMpKVxuXHQgKiBAcGFyYW0ge1Jvb21UeXBlQ29uZmlnfSByb29tQ29uZmlnIHJvb20ncyB0eXBlIGNvbmZpZ3VyYXRpb25cblx0ICovXG5cdGdldENvbmZpZyhyb29tVHlwZSkge1xuXHRcdHJldHVybiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV07XG5cdH1cblxuXHRnZXRVUkwoLi4uYXJncykge1xuXHRcdGNvbnN0IHBhdGggPSB0aGlzLmdldFJvdXRlTGluayguLi5hcmdzKTtcblx0XHRpZiAoIXBhdGgpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIE1ldGVvci5hYnNvbHV0ZVVybChwYXRoLnJlcGxhY2UoL15cXC8vLCAnJykpO1xuXHR9XG59XG4iLCJSb2NrZXRDaGF0LnNsYXNoQ29tbWFuZHMgPSB7XG5cdGNvbW1hbmRzOiB7fSxcbn07XG5cblJvY2tldENoYXQuc2xhc2hDb21tYW5kcy5hZGQgPSBmdW5jdGlvbiBfYWRkaW5nU2xhc2hDb21tYW5kKGNvbW1hbmQsIGNhbGxiYWNrLCBvcHRpb25zID0ge30sIHJlc3VsdCwgcHJvdmlkZXNQcmV2aWV3ID0gZmFsc2UsIHByZXZpZXdlciwgcHJldmlld0NhbGxiYWNrKSB7XG5cdFJvY2tldENoYXQuc2xhc2hDb21tYW5kcy5jb21tYW5kc1tjb21tYW5kXSA9IHtcblx0XHRjb21tYW5kLFxuXHRcdGNhbGxiYWNrLFxuXHRcdHBhcmFtczogb3B0aW9ucy5wYXJhbXMsXG5cdFx0ZGVzY3JpcHRpb246IG9wdGlvbnMuZGVzY3JpcHRpb24sXG5cdFx0cGVybWlzc2lvbjogb3B0aW9ucy5wZXJtaXNzaW9uLFxuXHRcdGNsaWVudE9ubHk6IG9wdGlvbnMuY2xpZW50T25seSB8fCBmYWxzZSxcblx0XHRyZXN1bHQsXG5cdFx0cHJvdmlkZXNQcmV2aWV3LFxuXHRcdHByZXZpZXdlcixcblx0XHRwcmV2aWV3Q2FsbGJhY2ssXG5cdH07XG59O1xuXG5Sb2NrZXRDaGF0LnNsYXNoQ29tbWFuZHMucnVuID0gZnVuY3Rpb24gX3J1bm5pbmdTbGFzaENvbW1hbmQoY29tbWFuZCwgcGFyYW1zLCBtZXNzYWdlKSB7XG5cdGlmIChSb2NrZXRDaGF0LnNsYXNoQ29tbWFuZHMuY29tbWFuZHNbY29tbWFuZF0gJiYgdHlwZW9mIFJvY2tldENoYXQuc2xhc2hDb21tYW5kcy5jb21tYW5kc1tjb21tYW5kXS5jYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdGlmICghbWVzc2FnZSB8fCAhbWVzc2FnZS5yaWQpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ludmFsaWQtY29tbWFuZC11c2FnZScsICdFeGVjdXRpbmcgYSBjb21tYW5kIHJlcXVpcmVzIGF0IGxlYXN0IGEgbWVzc2FnZSB3aXRoIGEgcm9vbSBpZC4nKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zbGFzaENvbW1hbmRzLmNvbW1hbmRzW2NvbW1hbmRdLmNhbGxiYWNrKGNvbW1hbmQsIHBhcmFtcywgbWVzc2FnZSk7XG5cdH1cbn07XG5cblJvY2tldENoYXQuc2xhc2hDb21tYW5kcy5nZXRQcmV2aWV3cyA9IGZ1bmN0aW9uIF9nZXR0aW5nU2xhc2hDb21tYW5kUHJldmlld3MoY29tbWFuZCwgcGFyYW1zLCBtZXNzYWdlKSB7XG5cdGlmIChSb2NrZXRDaGF0LnNsYXNoQ29tbWFuZHMuY29tbWFuZHNbY29tbWFuZF0gJiYgdHlwZW9mIFJvY2tldENoYXQuc2xhc2hDb21tYW5kcy5jb21tYW5kc1tjb21tYW5kXS5wcmV2aWV3ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoIW1lc3NhZ2UgfHwgIW1lc3NhZ2UucmlkKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdpbnZhbGlkLWNvbW1hbmQtdXNhZ2UnLCAnRXhlY3V0aW5nIGEgY29tbWFuZCByZXF1aXJlcyBhdCBsZWFzdCBhIG1lc3NhZ2Ugd2l0aCBhIHJvb20gaWQuJyk7XG5cdFx0fVxuXG5cdFx0Ly8geyBpMThuVGl0bGUsIGl0ZW1zOiBbeyBpZCwgdHlwZSwgdmFsdWUgfV0gfVxuXHRcdGNvbnN0IHByZXZpZXdJbmZvID0gUm9ja2V0Q2hhdC5zbGFzaENvbW1hbmRzLmNvbW1hbmRzW2NvbW1hbmRdLnByZXZpZXdlcihjb21tYW5kLCBwYXJhbXMsIG1lc3NhZ2UpO1xuXG5cdFx0aWYgKHR5cGVvZiBwcmV2aWV3SW5mbyAhPT0gJ29iamVjdCcgfHwgIUFycmF5LmlzQXJyYXkocHJldmlld0luZm8uaXRlbXMpIHx8IHByZXZpZXdJbmZvLml0ZW1zLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEEgbGltaXQgb2YgdGVuIHJlc3VsdHMsIHRvIHNhdmUgdGltZSBhbmQgYmFuZHdpZHRoXG5cdFx0aWYgKHByZXZpZXdJbmZvLml0ZW1zLmxlbmd0aCA+PSAxMCkge1xuXHRcdFx0cHJldmlld0luZm8uaXRlbXMgPSBwcmV2aWV3SW5mby5pdGVtcy5zbGljZSgwLCAxMCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByZXZpZXdJbmZvO1xuXHR9XG59O1xuXG5Sb2NrZXRDaGF0LnNsYXNoQ29tbWFuZHMuZXhlY3V0ZVByZXZpZXcgPSBmdW5jdGlvbiBfZXhlY3V0ZVNsYXNoQ29tbWFuZFByZXZpZXcoY29tbWFuZCwgcGFyYW1zLCBtZXNzYWdlLCBwcmV2aWV3KSB7XG5cdGlmIChSb2NrZXRDaGF0LnNsYXNoQ29tbWFuZHMuY29tbWFuZHNbY29tbWFuZF0gJiYgdHlwZW9mIFJvY2tldENoYXQuc2xhc2hDb21tYW5kcy5jb21tYW5kc1tjb21tYW5kXS5wcmV2aWV3Q2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoIW1lc3NhZ2UgfHwgIW1lc3NhZ2UucmlkKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdpbnZhbGlkLWNvbW1hbmQtdXNhZ2UnLCAnRXhlY3V0aW5nIGEgY29tbWFuZCByZXF1aXJlcyBhdCBsZWFzdCBhIG1lc3NhZ2Ugd2l0aCBhIHJvb20gaWQuJyk7XG5cdFx0fVxuXG5cdFx0Ly8geyBpZCwgdHlwZSwgdmFsdWUgfVxuXHRcdGlmICghcHJldmlldy5pZCB8fCAhcHJldmlldy50eXBlIHx8ICFwcmV2aWV3LnZhbHVlKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXByZXZpZXcnLCAnUHJldmlldyBJdGVtIG11c3QgaGF2ZSBhbiBpZCwgdHlwZSwgYW5kIHZhbHVlLicpO1xuXHRcdH1cblxuXHRcdHJldHVybiBSb2NrZXRDaGF0LnNsYXNoQ29tbWFuZHMuY29tbWFuZHNbY29tbWFuZF0ucHJldmlld0NhbGxiYWNrKGNvbW1hbmQsIHBhcmFtcywgbWVzc2FnZSwgcHJldmlldyk7XG5cdH1cbn07XG5cbk1ldGVvci5tZXRob2RzKHtcblx0c2xhc2hDb21tYW5kKGNvbW1hbmQpIHtcblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHtcblx0XHRcdFx0bWV0aG9kOiAnc2xhc2hDb21tYW5kJyxcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICghY29tbWFuZCB8fCAhY29tbWFuZC5jbWQgfHwgIVJvY2tldENoYXQuc2xhc2hDb21tYW5kcy5jb21tYW5kc1tjb21tYW5kLmNtZF0pIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtY29tbWFuZCcsICdJbnZhbGlkIENvbW1hbmQgUHJvdmlkZWQnLCB7XG5cdFx0XHRcdG1ldGhvZDogJ2V4ZWN1dGVTbGFzaENvbW1hbmRQcmV2aWV3Jyxcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBSb2NrZXRDaGF0LnNsYXNoQ29tbWFuZHMucnVuKGNvbW1hbmQuY21kLCBjb21tYW5kLnBhcmFtcywgY29tbWFuZC5tc2cpO1xuXHR9LFxufSk7XG4iLCJpbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5cblJvY2tldENoYXQuTWVzc2FnZSA9IHtcblx0cGFyc2UobXNnLCBsYW5ndWFnZSkge1xuXHRcdGNvbnN0IG1lc3NhZ2VUeXBlID0gUm9ja2V0Q2hhdC5NZXNzYWdlVHlwZXMuZ2V0VHlwZShtc2cpO1xuXHRcdGlmIChtZXNzYWdlVHlwZSkge1xuXHRcdFx0aWYgKG1lc3NhZ2VUeXBlLnJlbmRlcikge1xuXHRcdFx0XHRyZXR1cm4gbWVzc2FnZVR5cGUucmVuZGVyKG1zZyk7XG5cdFx0XHR9IGVsc2UgaWYgKG1lc3NhZ2VUeXBlLnRlbXBsYXRlKSB7XG5cdFx0XHRcdC8vIFJlbmRlciBtZXNzYWdlXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAobWVzc2FnZVR5cGUubWVzc2FnZSkge1xuXHRcdFx0XHRpZiAoIWxhbmd1YWdlICYmIHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0bGFuZ3VhZ2UgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlckxhbmd1YWdlJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29uc3QgZGF0YSA9ICh0eXBlb2YgbWVzc2FnZVR5cGUuZGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiBtZXNzYWdlVHlwZS5kYXRhKG1zZykpIHx8IHt9O1xuXHRcdFx0XHRyZXR1cm4gVEFQaTE4bi5fXyhtZXNzYWdlVHlwZS5tZXNzYWdlLCBkYXRhLCBsYW5ndWFnZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChtc2cudSAmJiBtc2cudS51c2VybmFtZSA9PT0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0NoYXRvcHNfVXNlcm5hbWUnKSkge1xuXHRcdFx0bXNnLmh0bWwgPSBtc2cubXNnO1xuXHRcdFx0cmV0dXJuIG1zZy5odG1sO1xuXHRcdH1cblx0XHRtc2cuaHRtbCA9IG1zZy5tc2c7XG5cdFx0aWYgKHMudHJpbShtc2cuaHRtbCkgIT09ICcnKSB7XG5cdFx0XHRtc2cuaHRtbCA9IHMuZXNjYXBlSFRNTChtc2cuaHRtbCk7XG5cdFx0fVxuXHRcdG1zZy5odG1sID0gbXNnLmh0bWwucmVwbGFjZSgvXFxuL2dtLCAnPGJyLz4nKTtcblx0XHRyZXR1cm4gbXNnLmh0bWw7XG5cdH0sXG59O1xuIiwiaW1wb3J0IEdyYXBoZW1lU3BsaXR0ZXIgZnJvbSAnZ3JhcGhlbWUtc3BsaXR0ZXInO1xuXG5jb25zdCBzcGxpdHRlciA9IG5ldyBHcmFwaGVtZVNwbGl0dGVyKCk7XG5cbmV4cG9ydCBjb25zdCBtZXNzYWdlUHJvcGVydGllcyA9IHtcblxuXHRsZW5ndGg6ICgobWVzc2FnZSkgPT4gc3BsaXR0ZXIuY291bnRHcmFwaGVtZXMobWVzc2FnZSkpLFxuXG5cdG1lc3NhZ2VXaXRob3V0RW1vamlTaG9ydG5hbWVzOiAoKG1lc3NhZ2UpID0+IG1lc3NhZ2UucmVwbGFjZSgvOlxcdys6L2dtLCAobWF0Y2gpID0+IHtcblx0XHRpZiAoUm9ja2V0Q2hhdC5lbW9qaS5saXN0W21hdGNoXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gJyAnO1xuXHRcdH1cblx0XHRyZXR1cm4gbWF0Y2g7XG5cdH0pKSxcbn07XG5cbi8vIGNoZWNrIGZvciB0ZXN0c1xuaWYgKHR5cGVvZiBSb2NrZXRDaGF0ICE9PSAndW5kZWZpbmVkJykge1xuXHRSb2NrZXRDaGF0Lm1lc3NhZ2VQcm9wZXJ0aWVzID0gbWVzc2FnZVByb3BlcnRpZXM7XG59XG4iLCJpbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJ3dvbGZ5ODctZXZlbnRlbWl0dGVyJztcblxuUm9ja2V0Q2hhdC5tZXNzYWdlQm94ID0gbmV3IEV2ZW50RW1pdHRlcjtcblxuUm9ja2V0Q2hhdC5tZXNzYWdlQm94LmFjdGlvbnMgPSBuZXcgY2xhc3Mge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmFjdGlvbnMgPSB7fTtcblx0fVxuXG5cdC8qIEFkZCBhIGFjdGlvbiB0byBtZXNzYWdlYm94XG5cdEBwYXJhbSBncm91cFxuXHRAcGFyYW0gbGFiZWxcblx0QHBhcmFtIGNvbmZpZ1xuXHRpY29uOiBpY29uIGNsYXNzXG5cdGFjdGlvbjogYWN0aW9uIGZ1bmN0aW9uXG5cdGNvbmRpdGlvbjogY29uZGl0aW9uIHRvIGRpc3BsYXkgdGhlIGFjdGlvblxuXHQqL1xuXG5cdGFkZChncm91cCwgbGFiZWwsIGNvbmZpZykge1xuXHRcdGlmICghZ3JvdXAgJiYgIWxhYmVsICYmICFjb25maWcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuYWN0aW9uc1tncm91cF0pIHtcblx0XHRcdHRoaXMuYWN0aW9uc1tncm91cF0gPSBbXTtcblx0XHR9XG5cblx0XHRjb25zdCBhY3Rpb25FeGlzdHMgPSB0aGlzLmFjdGlvbnNbZ3JvdXBdLmZpbmQoKGFjdGlvbikgPT4gYWN0aW9uLmxhYmVsID09PSBsYWJlbCk7XG5cblx0XHRpZiAoYWN0aW9uRXhpc3RzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5hY3Rpb25zW2dyb3VwXS5wdXNoKHsgLi4uY29uZmlnLCBsYWJlbCB9KTtcblx0fVxuXHRyZW1vdmUoZ3JvdXAsIGV4cHJlc3Npb24pIHtcblx0XHRpZiAoIWdyb3VwIHx8ICF0aGlzLmFjdGlvbnNbZ3JvdXBdKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiAodGhpcy5hY3Rpb25zW2dyb3VwXSA9IHRoaXMuYWN0aW9uc1tncm91cF0uZmlsdGVyKChhY3Rpb24pID0+IGV4cHJlc3Npb24udGVzdChhY3Rpb24uaWQpKSk7XG5cdH1cblx0Z2V0KGdyb3VwKSB7XG5cdFx0aWYgKCFncm91cCkge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuYWN0aW9ucykucmVkdWNlKChyZXQsIGtleSkgPT4ge1xuXHRcdFx0XHRjb25zdCBhY3Rpb25zID0gdGhpcy5hY3Rpb25zW2tleV0uZmlsdGVyKChhY3Rpb24pID0+ICFhY3Rpb24uY29uZGl0aW9uIHx8IGFjdGlvbi5jb25kaXRpb24oKSk7XG5cdFx0XHRcdGlmIChhY3Rpb25zLmxlbmd0aCkge1xuXHRcdFx0XHRcdHJldFtrZXldID0gYWN0aW9ucztcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fSwge30pO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmFjdGlvbnNbZ3JvdXBdLmZpbHRlcigoYWN0aW9uKSA9PiAhYWN0aW9uLmNvbmRpdGlvbiB8fCBhY3Rpb24uY29uZGl0aW9uKCkpO1xuXHR9XG5cblx0Z2V0QnlJZChpZCkge1xuXHRcdGNvbnN0IG1lc3NhZ2VBY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuXHRcdGxldCBhY3Rpb25zID0gW107XG5cdFx0T2JqZWN0LmtleXMobWVzc2FnZUFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24oYWN0aW9uKSB7XG5cdFx0XHRhY3Rpb25zID0gYWN0aW9ucy5jb25jYXQobWVzc2FnZUFjdGlvbnNbYWN0aW9uXSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gYWN0aW9ucy5maWx0ZXIoKGFjdGlvbikgPT4gYWN0aW9uLmlkID09PSBpZCk7XG5cdH1cbn07XG4iLCJSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcyA9IG5ldyBjbGFzcyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMudHlwZXMgPSB7fTtcblx0fVxuXG5cdHJlZ2lzdGVyVHlwZShvcHRpb25zKSB7XG5cdFx0cmV0dXJuIHRoaXMudHlwZXNbb3B0aW9ucy5pZF0gPSBvcHRpb25zO1xuXHR9XG5cblx0Z2V0VHlwZShtZXNzYWdlKSB7XG5cdFx0cmV0dXJuIHRoaXMudHlwZXNbbWVzc2FnZSAmJiBtZXNzYWdlLnRdO1xuXHR9XG5cblx0aXNTeXN0ZW1NZXNzYWdlKG1lc3NhZ2UpIHtcblx0XHRjb25zdCB0eXBlID0gdGhpcy50eXBlc1ttZXNzYWdlICYmIG1lc3NhZ2UudF07XG5cdFx0cmV0dXJuIHR5cGUgJiYgdHlwZS5zeXN0ZW07XG5cdH1cblxufTtcblxuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG5cdFJvY2tldENoYXQuTWVzc2FnZVR5cGVzLnJlZ2lzdGVyVHlwZSh7XG5cdFx0aWQ6ICdyJyxcblx0XHRzeXN0ZW06IHRydWUsXG5cdFx0bWVzc2FnZTogJ1Jvb21fbmFtZV9jaGFuZ2VkJyxcblx0XHRkYXRhKG1lc3NhZ2UpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHJvb21fbmFtZTogbWVzc2FnZS5tc2csXG5cdFx0XHRcdHVzZXJfYnk6IG1lc3NhZ2UudS51c2VybmFtZSxcblx0XHRcdH07XG5cdFx0fSxcblx0fSk7XG5cdFJvY2tldENoYXQuTWVzc2FnZVR5cGVzLnJlZ2lzdGVyVHlwZSh7XG5cdFx0aWQ6ICdhdScsXG5cdFx0c3lzdGVtOiB0cnVlLFxuXHRcdG1lc3NhZ2U6ICdVc2VyX2FkZGVkX2J5Jyxcblx0XHRkYXRhKG1lc3NhZ2UpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHVzZXJfYWRkZWQ6IG1lc3NhZ2UubXNnLFxuXHRcdFx0XHR1c2VyX2J5OiBtZXNzYWdlLnUudXNlcm5hbWUsXG5cdFx0XHR9O1xuXHRcdH0sXG5cdH0pO1xuXHRSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcy5yZWdpc3RlclR5cGUoe1xuXHRcdGlkOiAncnUnLFxuXHRcdHN5c3RlbTogdHJ1ZSxcblx0XHRtZXNzYWdlOiAnVXNlcl9yZW1vdmVkX2J5Jyxcblx0XHRkYXRhKG1lc3NhZ2UpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHVzZXJfcmVtb3ZlZDogbWVzc2FnZS5tc2csXG5cdFx0XHRcdHVzZXJfYnk6IG1lc3NhZ2UudS51c2VybmFtZSxcblx0XHRcdH07XG5cdFx0fSxcblx0fSk7XG5cdFJvY2tldENoYXQuTWVzc2FnZVR5cGVzLnJlZ2lzdGVyVHlwZSh7XG5cdFx0aWQ6ICd1bCcsXG5cdFx0c3lzdGVtOiB0cnVlLFxuXHRcdG1lc3NhZ2U6ICdVc2VyX2xlZnQnLFxuXHRcdGRhdGEobWVzc2FnZSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dXNlcl9sZWZ0OiBtZXNzYWdlLnUudXNlcm5hbWUsXG5cdFx0XHR9O1xuXHRcdH0sXG5cdH0pO1xuXHRSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcy5yZWdpc3RlclR5cGUoe1xuXHRcdGlkOiAndWonLFxuXHRcdHN5c3RlbTogdHJ1ZSxcblx0XHRtZXNzYWdlOiAnVXNlcl9qb2luZWRfY2hhbm5lbCcsXG5cdFx0ZGF0YShtZXNzYWdlKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR1c2VyOiBtZXNzYWdlLnUudXNlcm5hbWUsXG5cdFx0XHR9O1xuXHRcdH0sXG5cdH0pO1xuXHRSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcy5yZWdpc3RlclR5cGUoe1xuXHRcdGlkOiAnd20nLFxuXHRcdHN5c3RlbTogdHJ1ZSxcblx0XHRtZXNzYWdlOiAnV2VsY29tZScsXG5cdFx0ZGF0YShtZXNzYWdlKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR1c2VyOiBtZXNzYWdlLnUudXNlcm5hbWUsXG5cdFx0XHR9O1xuXHRcdH0sXG5cdH0pO1xuXHRSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcy5yZWdpc3RlclR5cGUoe1xuXHRcdGlkOiAncm0nLFxuXHRcdHN5c3RlbTogdHJ1ZSxcblx0XHRtZXNzYWdlOiAnTWVzc2FnZV9yZW1vdmVkJyxcblx0XHRkYXRhKG1lc3NhZ2UpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHVzZXI6IG1lc3NhZ2UudS51c2VybmFtZSxcblx0XHRcdH07XG5cdFx0fSxcblx0fSk7XG5cdFJvY2tldENoYXQuTWVzc2FnZVR5cGVzLnJlZ2lzdGVyVHlwZSh7XG5cdFx0aWQ6ICdydGMnLFxuXHRcdHJlbmRlcihtZXNzYWdlKSB7XG5cdFx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdyZW5kZXJSdGNNZXNzYWdlJywgbWVzc2FnZSk7XG5cdFx0fSxcblx0fSk7XG5cdFJvY2tldENoYXQuTWVzc2FnZVR5cGVzLnJlZ2lzdGVyVHlwZSh7XG5cdFx0aWQ6ICd1c2VyLW11dGVkJyxcblx0XHRzeXN0ZW06IHRydWUsXG5cdFx0bWVzc2FnZTogJ1VzZXJfbXV0ZWRfYnknLFxuXHRcdGRhdGEobWVzc2FnZSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dXNlcl9tdXRlZDogbWVzc2FnZS5tc2csXG5cdFx0XHRcdHVzZXJfYnk6IG1lc3NhZ2UudS51c2VybmFtZSxcblx0XHRcdH07XG5cdFx0fSxcblx0fSk7XG5cdFJvY2tldENoYXQuTWVzc2FnZVR5cGVzLnJlZ2lzdGVyVHlwZSh7XG5cdFx0aWQ6ICd1c2VyLXVubXV0ZWQnLFxuXHRcdHN5c3RlbTogdHJ1ZSxcblx0XHRtZXNzYWdlOiAnVXNlcl91bm11dGVkX2J5Jyxcblx0XHRkYXRhKG1lc3NhZ2UpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHVzZXJfdW5tdXRlZDogbWVzc2FnZS5tc2csXG5cdFx0XHRcdHVzZXJfYnk6IG1lc3NhZ2UudS51c2VybmFtZSxcblx0XHRcdH07XG5cdFx0fSxcblx0fSk7XG5cdFJvY2tldENoYXQuTWVzc2FnZVR5cGVzLnJlZ2lzdGVyVHlwZSh7XG5cdFx0aWQ6ICdzdWJzY3JpcHRpb24tcm9sZS1hZGRlZCcsXG5cdFx0c3lzdGVtOiB0cnVlLFxuXHRcdG1lc3NhZ2U6ICdfX3VzZXJuYW1lX193YXNfc2V0X19yb2xlX19ieV9fdXNlcl9ieV8nLFxuXHRcdGRhdGEobWVzc2FnZSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dXNlcm5hbWU6IG1lc3NhZ2UubXNnLFxuXHRcdFx0XHRyb2xlOiBtZXNzYWdlLnJvbGUsXG5cdFx0XHRcdHVzZXJfYnk6IG1lc3NhZ2UudS51c2VybmFtZSxcblx0XHRcdH07XG5cdFx0fSxcblx0fSk7XG5cdFJvY2tldENoYXQuTWVzc2FnZVR5cGVzLnJlZ2lzdGVyVHlwZSh7XG5cdFx0aWQ6ICdzdWJzY3JpcHRpb24tcm9sZS1yZW1vdmVkJyxcblx0XHRzeXN0ZW06IHRydWUsXG5cdFx0bWVzc2FnZTogJ19fdXNlcm5hbWVfX2lzX25vX2xvbmdlcl9fcm9sZV9fZGVmaW5lZF9ieV9fdXNlcl9ieV8nLFxuXHRcdGRhdGEobWVzc2FnZSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dXNlcm5hbWU6IG1lc3NhZ2UubXNnLFxuXHRcdFx0XHRyb2xlOiBtZXNzYWdlLnJvbGUsXG5cdFx0XHRcdHVzZXJfYnk6IG1lc3NhZ2UudS51c2VybmFtZSxcblx0XHRcdH07XG5cdFx0fSxcblx0fSk7XG5cdFJvY2tldENoYXQuTWVzc2FnZVR5cGVzLnJlZ2lzdGVyVHlwZSh7XG5cdFx0aWQ6ICdyb29tLWFyY2hpdmVkJyxcblx0XHRzeXN0ZW06IHRydWUsXG5cdFx0bWVzc2FnZTogJ1RoaXNfcm9vbV9oYXNfYmVlbl9hcmNoaXZlZF9ieV9fdXNlcm5hbWVfJyxcblx0XHRkYXRhKG1lc3NhZ2UpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHVzZXJuYW1lOiBtZXNzYWdlLnUudXNlcm5hbWUsXG5cdFx0XHR9O1xuXHRcdH0sXG5cdH0pO1xuXHRSb2NrZXRDaGF0Lk1lc3NhZ2VUeXBlcy5yZWdpc3RlclR5cGUoe1xuXHRcdGlkOiAncm9vbS11bmFyY2hpdmVkJyxcblx0XHRzeXN0ZW06IHRydWUsXG5cdFx0bWVzc2FnZTogJ1RoaXNfcm9vbV9oYXNfYmVlbl91bmFyY2hpdmVkX2J5X191c2VybmFtZV8nLFxuXHRcdGRhdGEobWVzc2FnZSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dXNlcm5hbWU6IG1lc3NhZ2UudS51c2VybmFtZSxcblx0XHRcdH07XG5cdFx0fSxcblx0fSk7XG59KTtcbiIsImxldCBsb2dnZXI7XG5cbmlmIChNZXRlb3IuaXNTZXJ2ZXIpIHtcblx0bG9nZ2VyID0gbmV3IExvZ2dlcignVGVtcGxhdGVWYXJIYW5kbGVyJywge30pO1xufVxuXG5Sb2NrZXRDaGF0LnRlbXBsYXRlVmFySGFuZGxlciA9IGZ1bmN0aW9uKHZhcmlhYmxlLCBvYmplY3QpIHtcblxuXHRjb25zdCB0ZW1wbGF0ZVJlZ2V4ID0gLyN7KFtcXHdcXC1dKyl9L2dpO1xuXHRsZXQgbWF0Y2ggPSB0ZW1wbGF0ZVJlZ2V4LmV4ZWModmFyaWFibGUpO1xuXHRsZXQgdG1wVmFyaWFibGUgPSB2YXJpYWJsZTtcblxuXHRpZiAobWF0Y2ggPT0gbnVsbCkge1xuXHRcdGlmICghb2JqZWN0Lmhhc093blByb3BlcnR5KHZhcmlhYmxlKSkge1xuXHRcdFx0bG9nZ2VyICYmIGxvZ2dlci5kZWJ1ZyhgdXNlciBkb2VzIG5vdCBoYXZlIGF0dHJpYnV0ZTogJHsgdmFyaWFibGUgfWApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRyZXR1cm4gb2JqZWN0W3ZhcmlhYmxlXTtcblx0fSBlbHNlIHtcblx0XHRsb2dnZXIgJiYgbG9nZ2VyLmRlYnVnKCd0ZW1wbGF0ZSBmb3VuZC4gcmVwbGFjaW5nIHZhbHVlcycpO1xuXHRcdHdoaWxlIChtYXRjaCAhPSBudWxsKSB7XG5cdFx0XHRjb25zdCB0bXBsVmFyID0gbWF0Y2hbMF07XG5cdFx0XHRjb25zdCB0bXBsQXR0ck5hbWUgPSBtYXRjaFsxXTtcblxuXHRcdFx0aWYgKCFvYmplY3QuaGFzT3duUHJvcGVydHkodG1wbEF0dHJOYW1lKSkge1xuXHRcdFx0XHRsb2dnZXIgJiYgbG9nZ2VyLmRlYnVnKGB1c2VyIGRvZXMgbm90IGhhdmUgYXR0cmlidXRlOiAkeyB0bXBsQXR0ck5hbWUgfWApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGF0dHJWYWwgPSBvYmplY3RbdG1wbEF0dHJOYW1lXTtcblx0XHRcdGxvZ2dlciAmJiBsb2dnZXIuZGVidWcoYHJlcGxhY2luZyB0ZW1wbGF0ZSB2YXI6ICR7IHRtcGxWYXIgfSB3aXRoIHZhbHVlOiAkeyBhdHRyVmFsIH1gKTtcblx0XHRcdHRtcFZhcmlhYmxlID0gdG1wVmFyaWFibGUucmVwbGFjZSh0bXBsVmFyLCBhdHRyVmFsKTtcblx0XHRcdG1hdGNoID0gdGVtcGxhdGVSZWdleC5leGVjKHZhcmlhYmxlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRtcFZhcmlhYmxlO1xuXHR9XG59O1xuIiwiUm9ja2V0Q2hhdC5nZXRVc2VyTm90aWZpY2F0aW9uUHJlZmVyZW5jZSA9IGZ1bmN0aW9uIF9nZXRVc2VyTm90aWZpY2F0aW9uUHJlZmVyZW5jZSh1c2VyLCBwcmVmKSB7XG5cdGlmICh0eXBlb2YgdXNlciA9PT0gJ3N0cmluZycpIHtcblx0XHR1c2VyID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQodXNlcik7XG5cdH1cblxuXHRsZXQgcHJlZmVyZW5jZUtleTtcblx0c3dpdGNoIChwcmVmKSB7XG5cdFx0Y2FzZSAnZGVza3RvcCc6IHByZWZlcmVuY2VLZXkgPSAnZGVza3RvcE5vdGlmaWNhdGlvbnMnOyBicmVhaztcblx0XHRjYXNlICdtb2JpbGUnOiBwcmVmZXJlbmNlS2V5ID0gJ21vYmlsZU5vdGlmaWNhdGlvbnMnOyBicmVhaztcblx0XHRjYXNlICdlbWFpbCc6IHByZWZlcmVuY2VLZXkgPSAnZW1haWxOb3RpZmljYXRpb25Nb2RlJzsgYnJlYWs7XG5cdH1cblxuXHRpZiAodXNlciAmJiB1c2VyLnNldHRpbmdzICYmIHVzZXIuc2V0dGluZ3MucHJlZmVyZW5jZXMgJiYgdXNlci5zZXR0aW5ncy5wcmVmZXJlbmNlc1twcmVmZXJlbmNlS2V5XSAhPT0gJ2RlZmF1bHQnKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHZhbHVlOiB1c2VyLnNldHRpbmdzLnByZWZlcmVuY2VzW3ByZWZlcmVuY2VLZXldLFxuXHRcdFx0b3JpZ2luOiAndXNlcicsXG5cdFx0fTtcblx0fVxuXHRjb25zdCBzZXJ2ZXJWYWx1ZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KGBBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfJHsgcHJlZmVyZW5jZUtleSB9YCk7XG5cdGlmIChzZXJ2ZXJWYWx1ZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHR2YWx1ZTogc2VydmVyVmFsdWUsXG5cdFx0XHRvcmlnaW46ICdzZXJ2ZXInLFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gbnVsbDtcbn07XG4iLCIvKipcbiAqIFRyaWVzIHRvIHJldHJpZXZlIHRoZSB1c2VyIHByZWZlcmVuY2UgZmFsbGluZyBiYWNrIHRvIGEgZGVmYXVsdCBzeXN0ZW1cbiAqIHZhbHVlIG9yIHRvIGEgZGVmYXVsdCB2YWx1ZSBpZiBpdCBpcyBwYXNzZWQgYXMgYXJndW1lbnRcbiovXG5Sb2NrZXRDaGF0LmdldFVzZXJQcmVmZXJlbmNlID0gZnVuY3Rpb24odXNlciwga2V5LCBkZWZhdWx0VmFsdWUgPSB1bmRlZmluZWQpIHtcblx0bGV0IHByZWZlcmVuY2U7XG5cdGlmICh0eXBlb2YgdXNlciA9PT0gdHlwZW9mICcnKSB7XG5cdFx0dXNlciA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmUodXNlciwgeyBmaWVsZHM6IHsgW2BzZXR0aW5ncy5wcmVmZXJlbmNlcy4keyBrZXkgfWBdOiAxIH0gfSk7XG5cdH1cblx0aWYgKHVzZXIgJiYgdXNlci5zZXR0aW5ncyAmJiB1c2VyLnNldHRpbmdzLnByZWZlcmVuY2VzICYmXG5cdFx0dXNlci5zZXR0aW5ncy5wcmVmZXJlbmNlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0cHJlZmVyZW5jZSA9IHVzZXIuc2V0dGluZ3MucHJlZmVyZW5jZXNba2V5XTtcblx0fSBlbHNlIGlmIChkZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuXHRcdHByZWZlcmVuY2UgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzXyR7IGtleSB9YCk7XG5cdH1cblxuXHRyZXR1cm4gcHJlZmVyZW5jZSAhPT0gdW5kZWZpbmVkID8gcHJlZmVyZW5jZSA6IGRlZmF1bHRWYWx1ZTtcbn07XG4iLCIvKiBnbG9iYWxzIFdlYkFwcEludGVybmFscyAqL1xuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1NpdGVfVXJsJywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZS50cmltKCkgPT09ICcnKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGxldCBob3N0ID0gdmFsdWUucmVwbGFjZSgvXFwvJC8sICcnKTtcblx0Ly8gbGV0IHByZWZpeCA9ICcnO1xuXHRjb25zdCBtYXRjaCA9IHZhbHVlLm1hdGNoKC8oW15cXC9dK1xcL3syfVteXFwvXSspKFxcLy4rKS8pO1xuXHRpZiAobWF0Y2ggIT0gbnVsbCkge1xuXHRcdGhvc3QgPSBtYXRjaFsxXTtcblx0XHQvLyBwcmVmaXggPSBtYXRjaFsyXS5yZXBsYWNlKC9cXC8kLywgJycpO1xuXHR9XG5cdF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18uUk9PVF9VUkwgPSB2YWx1ZTtcblxuXHRpZiAoTWV0ZW9yLmFic29sdXRlVXJsLmRlZmF1bHRPcHRpb25zICYmIE1ldGVvci5hYnNvbHV0ZVVybC5kZWZhdWx0T3B0aW9ucy5yb290VXJsKSB7XG5cdFx0TWV0ZW9yLmFic29sdXRlVXJsLmRlZmF1bHRPcHRpb25zLnJvb3RVcmwgPSB2YWx1ZTtcblx0fVxuXHRpZiAoTWV0ZW9yLmlzU2VydmVyKSB7XG5cdFx0Um9ja2V0Q2hhdC5ob3N0bmFtZSA9IGhvc3QucmVwbGFjZSgvXmh0dHBzPzpcXC9cXC8vLCAnJyk7XG5cdFx0cHJvY2Vzcy5lbnYuTU9CSUxFX1JPT1RfVVJMID0gaG9zdDtcblx0XHRwcm9jZXNzLmVudi5NT0JJTEVfRERQX1VSTCA9IGhvc3Q7XG5cdFx0aWYgKHR5cGVvZiBXZWJBcHBJbnRlcm5hbHMgIT09ICd1bmRlZmluZWQnICYmIFdlYkFwcEludGVybmFscy5nZW5lcmF0ZUJvaWxlcnBsYXRlKSB7XG5cdFx0XHRyZXR1cm4gV2ViQXBwSW50ZXJuYWxzLmdlbmVyYXRlQm9pbGVycGxhdGUoKTtcblx0XHR9XG5cdH1cbn0pO1xuIiwiLyogZ2xvYmFsIEluc3RhbmNlU3RhdHVzICovXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignTWV0ZW9yJywge1xuXHRtZXRob2RzOiB7XG5cdFx0bWV0aG9kOiB7XG5cdFx0XHR0eXBlOiAnZGVidWcnLFxuXHRcdH0sXG5cdFx0cHVibGlzaDoge1xuXHRcdFx0dHlwZTogJ2RlYnVnJyxcblx0XHR9LFxuXHR9LFxufSk7XG5cbmxldCBMb2dfVHJhY2VfTWV0aG9kcztcbmxldCBMb2dfVHJhY2VfU3Vic2NyaXB0aW9ucztcblJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdMb2dfVHJhY2VfTWV0aG9kcycsIChrZXksIHZhbHVlKSA9PiBMb2dfVHJhY2VfTWV0aG9kcyA9IHZhbHVlKTtcblJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdMb2dfVHJhY2VfU3Vic2NyaXB0aW9ucycsIChrZXksIHZhbHVlKSA9PiBMb2dfVHJhY2VfU3Vic2NyaXB0aW9ucyA9IHZhbHVlKTtcblxubGV0IExvZ19UcmFjZV9NZXRob2RzX0ZpbHRlcjtcbmxldCBMb2dfVHJhY2VfU3Vic2NyaXB0aW9uc19GaWx0ZXI7XG5Sb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTG9nX1RyYWNlX01ldGhvZHNfRmlsdGVyJywgKGtleSwgdmFsdWUpID0+IExvZ19UcmFjZV9NZXRob2RzX0ZpbHRlciA9IHZhbHVlID8gbmV3IFJlZ0V4cCh2YWx1ZSkgOiB1bmRlZmluZWQpO1xuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0xvZ19UcmFjZV9TdWJzY3JpcHRpb25zX0ZpbHRlcicsIChrZXksIHZhbHVlKSA9PiBMb2dfVHJhY2VfU3Vic2NyaXB0aW9uc19GaWx0ZXIgPSB2YWx1ZSA/IG5ldyBSZWdFeHAodmFsdWUpIDogdW5kZWZpbmVkKTtcblxuY29uc3QgdHJhY2VDb25uZWN0aW9uID0gKGVuYWJsZSwgZmlsdGVyLCBwcmVmaXgsIG5hbWUsIGNvbm5lY3Rpb24sIHVzZXJJZCkgPT4ge1xuXHRpZiAoIWVuYWJsZSkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmIChmaWx0ZXIgJiYgIWZpbHRlci50ZXN0KG5hbWUpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKGNvbm5lY3Rpb24pIHtcblx0XHRjb25zb2xlLmxvZyhuYW1lLCB7XG5cdFx0XHRpZDogY29ubmVjdGlvbi5pZCxcblx0XHRcdGNsaWVudEFkZHJlc3M6IGNvbm5lY3Rpb24uY2xpZW50QWRkcmVzcyxcblx0XHRcdGh0dHBIZWFkZXJzOiBjb25uZWN0aW9uLmh0dHBIZWFkZXJzLFxuXHRcdFx0dXNlcklkLFxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdGNvbnNvbGUubG9nKG5hbWUsICduby1jb25uZWN0aW9uJyk7XG5cdH1cbn07XG5cbmNvbnN0IHdyYXBNZXRob2RzID0gZnVuY3Rpb24obmFtZSwgb3JpZ2luYWxIYW5kbGVyLCBtZXRob2RzTWFwKSB7XG5cdG1ldGhvZHNNYXBbbmFtZV0gPSBmdW5jdGlvbiguLi5vcmlnaW5hbEFyZ3MpIHtcblx0XHR0cmFjZUNvbm5lY3Rpb24oTG9nX1RyYWNlX01ldGhvZHMsIExvZ19UcmFjZV9NZXRob2RzX0ZpbHRlciwgJ21ldGhvZCcsIG5hbWUsIHRoaXMuY29ubmVjdGlvbiwgdGhpcy51c2VySWQpO1xuXHRcdGNvbnN0IGVuZCA9IFJvY2tldENoYXQubWV0cmljcy5tZXRlb3JNZXRob2RzLnN0YXJ0VGltZXIoe1xuXHRcdFx0bWV0aG9kOiBuYW1lLFxuXHRcdFx0aGFzX2Nvbm5lY3Rpb246IHRoaXMuY29ubmVjdGlvbiAhPSBudWxsLFxuXHRcdFx0aGFzX3VzZXI6IHRoaXMudXNlcklkICE9IG51bGwsXG5cdFx0fSk7XG5cdFx0Y29uc3QgYXJncyA9IG5hbWUgPT09ICd1ZnNXcml0ZScgPyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvcmlnaW5hbEFyZ3MsIDEpIDogb3JpZ2luYWxBcmdzO1xuXHRcdGxvZ2dlci5tZXRob2QobmFtZSwgJy0+IHVzZXJJZDonLCBNZXRlb3IudXNlcklkKCksICcsIGFyZ3VtZW50czogJywgYXJncyk7XG5cblx0XHR0aGlzLnVuYmxvY2soKTtcblx0XHRjb25zdCByZXN1bHQgPSBvcmlnaW5hbEhhbmRsZXIuYXBwbHkodGhpcywgb3JpZ2luYWxBcmdzKTtcblx0XHRlbmQoKTtcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xufTtcblxuY29uc3Qgb3JpZ2luYWxNZXRlb3JNZXRob2RzID0gTWV0ZW9yLm1ldGhvZHM7XG5cbk1ldGVvci5tZXRob2RzID0gZnVuY3Rpb24obWV0aG9kTWFwKSB7XG5cdF8uZWFjaChtZXRob2RNYXAsIGZ1bmN0aW9uKGhhbmRsZXIsIG5hbWUpIHtcblx0XHR3cmFwTWV0aG9kcyhuYW1lLCBoYW5kbGVyLCBtZXRob2RNYXApO1xuXHR9KTtcblx0b3JpZ2luYWxNZXRlb3JNZXRob2RzKG1ldGhvZE1hcCk7XG59O1xuXG5jb25zdCBvcmlnaW5hbE1ldGVvclB1Ymxpc2ggPSBNZXRlb3IucHVibGlzaDtcblxuTWV0ZW9yLnB1Ymxpc2ggPSBmdW5jdGlvbihuYW1lLCBmdW5jKSB7XG5cdHJldHVybiBvcmlnaW5hbE1ldGVvclB1Ymxpc2gobmFtZSwgZnVuY3Rpb24oLi4uYXJncykge1xuXHRcdHRyYWNlQ29ubmVjdGlvbihMb2dfVHJhY2VfU3Vic2NyaXB0aW9ucywgTG9nX1RyYWNlX1N1YnNjcmlwdGlvbnNfRmlsdGVyLCAnc3Vic2NyaXB0aW9uJywgbmFtZSwgdGhpcy5jb25uZWN0aW9uLCB0aGlzLnVzZXJJZCk7XG5cdFx0bG9nZ2VyLnB1Ymxpc2gobmFtZSwgJy0+IHVzZXJJZDonLCB0aGlzLnVzZXJJZCwgJywgYXJndW1lbnRzOiAnLCBhcmdzKTtcblx0XHRjb25zdCBlbmQgPSBSb2NrZXRDaGF0Lm1ldHJpY3MubWV0ZW9yU3Vic2NyaXB0aW9ucy5zdGFydFRpbWVyKHsgc3Vic2NyaXB0aW9uOiBuYW1lIH0pO1xuXG5cdFx0Y29uc3Qgb3JpZ2luYWxSZWFkeSA9IHRoaXMucmVhZHk7XG5cdFx0dGhpcy5yZWFkeSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0ZW5kKCk7XG5cdFx0XHRyZXR1cm4gb3JpZ2luYWxSZWFkeS5hcHBseSh0aGlzLCBhcmdzKTtcblx0XHR9O1xuXG5cdFx0cmV0dXJuIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG5cdH0pO1xufTtcblxuV2ViQXBwLnJhd0Nvbm5lY3RIYW5kbGVycy51c2UoZnVuY3Rpb24ocmVxLCByZXMsIG5leHQpIHtcblx0cmVzLnNldEhlYWRlcignWC1JbnN0YW5jZS1JRCcsIEluc3RhbmNlU3RhdHVzLmlkKCkpO1xuXHRyZXR1cm4gbmV4dCgpO1xufSk7XG4iLCJpbXBvcnQgYnVnc25hZyBmcm9tICdidWdzbmFnJztcblxuUm9ja2V0Q2hhdC5idWdzbmFnID0gYnVnc25hZztcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0J1Z3NuYWdfYXBpX2tleScsIChrZXksIHZhbHVlKSA9PiB7XG5cdGlmICh2YWx1ZSkge1xuXHRcdGJ1Z3NuYWcucmVnaXN0ZXIodmFsdWUpO1xuXHR9XG59KTtcblxuY29uc3Qgbm90aWZ5ID0gZnVuY3Rpb24obWVzc2FnZSwgc3RhY2spIHtcblx0aWYgKHR5cGVvZiBzdGFjayA9PT0gJ3N0cmluZycpIHtcblx0XHRtZXNzYWdlICs9IGAgJHsgc3RhY2sgfWA7XG5cdH1cblx0bGV0IG9wdGlvbnMgPSB7fTtcblx0aWYgKFJvY2tldENoYXQuSW5mbykge1xuXHRcdG9wdGlvbnMgPSB7IGFwcDogeyB2ZXJzaW9uOiBSb2NrZXRDaGF0LkluZm8udmVyc2lvbiwgaW5mbzogUm9ja2V0Q2hhdC5JbmZvIH0gfTtcblx0fVxuXHRjb25zdCBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcblx0ZXJyb3Iuc3RhY2sgPSBzdGFjaztcblx0Um9ja2V0Q2hhdC5idWdzbmFnLm5vdGlmeShlcnJvciwgb3B0aW9ucyk7XG59O1xuXG5wcm9jZXNzLm9uKCd1bmNhdWdodEV4Y2VwdGlvbicsIE1ldGVvci5iaW5kRW52aXJvbm1lbnQoKGVycm9yKSA9PiB7XG5cdG5vdGlmeShlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjayk7XG5cdHRocm93IGVycm9yO1xufSkpO1xuXG5jb25zdCBvcmlnaW5hbE1ldGVvckRlYnVnID0gTWV0ZW9yLl9kZWJ1Zztcbk1ldGVvci5fZGVidWcgPSBmdW5jdGlvbiguLi5hcmdzKSB7XG5cdG5vdGlmeSguLi5hcmdzKTtcblx0cmV0dXJuIG9yaWdpbmFsTWV0ZW9yRGVidWcoLi4uYXJncyk7XG59O1xuIiwiaW1wb3J0IGNsaWVudCBmcm9tICdwcm9tLWNsaWVudCc7XG5pbXBvcnQgY29ubmVjdCBmcm9tICdjb25uZWN0JztcbmltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cblJvY2tldENoYXQucHJvbWNsaWVudCA9IGNsaWVudDtcbmNsaWVudC5jb2xsZWN0RGVmYXVsdE1ldHJpY3MoKTtcblxuUm9ja2V0Q2hhdC5tZXRyaWNzID0ge307XG5cbi8vIG9uZSBzYW1wbGUgbWV0cmljcyBvbmx5IC0gYSBjb3VudGVyXG5cblJvY2tldENoYXQubWV0cmljcy5tZXRlb3JNZXRob2RzID0gbmV3IGNsaWVudC5TdW1tYXJ5KHtcblx0bmFtZTogJ3JvY2tldGNoYXRfbWV0ZW9yX21ldGhvZHMnLFxuXHRoZWxwOiAnc3VtbWFyeSBvZiBtZXRlb3IgbWV0aG9kcyBjb3VudCBhbmQgdGltZScsXG5cdGxhYmVsTmFtZXM6IFsnbWV0aG9kJywgJ2hhc19jb25uZWN0aW9uJywgJ2hhc191c2VyJ10sXG59KTtcblxuUm9ja2V0Q2hhdC5tZXRyaWNzLnJvY2tldGNoYXRDYWxsYmFja3MgPSBuZXcgY2xpZW50LlN1bW1hcnkoe1xuXHRuYW1lOiAncm9ja2V0Y2hhdF9jYWxsYmFja3MnLFxuXHRoZWxwOiAnc3VtbWFyeSBvZiByb2NrZXRjaGF0IGNhbGxiYWNrcyBjb3VudCBhbmQgdGltZScsXG5cdGxhYmVsTmFtZXM6IFsnaG9vaycsICdjYWxsYmFjayddLFxufSk7XG5cblJvY2tldENoYXQubWV0cmljcy5yb2NrZXRjaGF0SG9va3MgPSBuZXcgY2xpZW50LlN1bW1hcnkoe1xuXHRuYW1lOiAncm9ja2V0Y2hhdF9ob29rcycsXG5cdGhlbHA6ICdzdW1tYXJ5IG9mIHJvY2tldGNoYXQgaG9va3MgY291bnQgYW5kIHRpbWUnLFxuXHRsYWJlbE5hbWVzOiBbJ2hvb2snLCAnY2FsbGJhY2tzX2xlbmd0aCddLFxufSk7XG5cblJvY2tldENoYXQubWV0cmljcy5yb2NrZXRjaGF0UmVzdEFwaSA9IG5ldyBjbGllbnQuU3VtbWFyeSh7XG5cdG5hbWU6ICdyb2NrZXRjaGF0X3Jlc3RfYXBpJyxcblx0aGVscDogJ3N1bW1hcnkgb2Ygcm9ja2V0Y2hhdCByZXN0IGFwaSBjb3VudCBhbmQgdGltZScsXG5cdGxhYmVsTmFtZXM6IFsnbWV0aG9kJywgJ2VudHJ5cG9pbnQnLCAndXNlcl9hZ2VudCcsICdzdGF0dXMnLCAndmVyc2lvbiddLFxufSk7XG5cblJvY2tldENoYXQubWV0cmljcy5tZXRlb3JTdWJzY3JpcHRpb25zID0gbmV3IGNsaWVudC5TdW1tYXJ5KHtcblx0bmFtZTogJ3JvY2tldGNoYXRfbWV0ZW9yX3N1YnNjcmlwdGlvbnMnLFxuXHRoZWxwOiAnc3VtbWFyeSBvZiBtZXRlb3Igc3Vic2NyaXB0aW9ucyBjb3VudCBhbmQgdGltZScsXG5cdGxhYmVsTmFtZXM6IFsnc3Vic2NyaXB0aW9uJ10sXG59KTtcblxuUm9ja2V0Q2hhdC5tZXRyaWNzLm1lc3NhZ2VzU2VudCA9IG5ldyBjbGllbnQuQ291bnRlcih7IG5hbWU6ICdyb2NrZXRjaGF0X21lc3NhZ2Vfc2VudCcsIGhlbHA6ICdjdW11bGF0ZWQgbnVtYmVyIG9mIG1lc3NhZ2VzIHNlbnQnIH0pO1xuUm9ja2V0Q2hhdC5tZXRyaWNzLm5vdGlmaWNhdGlvbnNTZW50ID0gbmV3IGNsaWVudC5Db3VudGVyKHsgbmFtZTogJ3JvY2tldGNoYXRfbm90aWZpY2F0aW9uX3NlbnQnLCBsYWJlbE5hbWVzOiBbJ25vdGlmaWNhdGlvbl90eXBlJ10sIGhlbHA6ICdjdW11bGF0ZWQgbnVtYmVyIG9mIG5vdGlmaWNhdGlvbnMgc2VudCcgfSk7XG5cblJvY2tldENoYXQubWV0cmljcy5kZHBTZXNzaW9ucyA9IG5ldyBjbGllbnQuR2F1Z2UoeyBuYW1lOiAncm9ja2V0Y2hhdF9kZHBfc2Vzc2lvbnNfY291bnQnLCBoZWxwOiAnbnVtYmVyIG9mIG9wZW4gZGRwIHNlc3Npb25zJyB9KTtcblJvY2tldENoYXQubWV0cmljcy5kZHBBdGhlbnRpY2F0ZWRTZXNzaW9ucyA9IG5ldyBjbGllbnQuR2F1Z2UoeyBuYW1lOiAncm9ja2V0Y2hhdF9kZHBfc2Vzc2lvbnNfYXV0aCcsIGhlbHA6ICdudW1iZXIgb2YgYXV0aGVudGljYXRlZCBvcGVuIGRkcCBzZXNzaW9ucycgfSk7XG5Sb2NrZXRDaGF0Lm1ldHJpY3MuZGRwQ29ubmVjdGVkVXNlcnMgPSBuZXcgY2xpZW50LkdhdWdlKHsgbmFtZTogJ3JvY2tldGNoYXRfZGRwX2Nvbm5lY3RlZF91c2VycycsIGhlbHA6ICdudW1iZXIgb2YgdW5pcXVlIGNvbm5lY3RlZCB1c2VycycgfSk7XG5cblJvY2tldENoYXQubWV0cmljcy52ZXJzaW9uID0gbmV3IGNsaWVudC5HYXVnZSh7IG5hbWU6ICdyb2NrZXRjaGF0X3ZlcnNpb24nLCBsYWJlbE5hbWVzOiBbJ3ZlcnNpb24nXSwgaGVscDogJ1JvY2tldC5DaGF0IHZlcnNpb24nIH0pO1xuUm9ja2V0Q2hhdC5tZXRyaWNzLm1pZ3JhdGlvbiA9IG5ldyBjbGllbnQuR2F1Z2UoeyBuYW1lOiAncm9ja2V0Y2hhdF9taWdyYXRpb24nLCBoZWxwOiAnbWlncmF0aW9uIHZlcnNvaW4nIH0pO1xuUm9ja2V0Q2hhdC5tZXRyaWNzLmluc3RhbmNlQ291bnQgPSBuZXcgY2xpZW50LkdhdWdlKHsgbmFtZTogJ3JvY2tldGNoYXRfaW5zdGFuY2VfY291bnQnLCBoZWxwOiAnaW5zdGFuY2VzIHJ1bm5pbmcnIH0pO1xuUm9ja2V0Q2hhdC5tZXRyaWNzLm9wbG9nRW5hYmxlZCA9IG5ldyBjbGllbnQuR2F1Z2UoeyBuYW1lOiAncm9ja2V0Y2hhdF9vcGxvZ19lbmFibGVkJywgbGFiZWxOYW1lczogWydlbmFibGVkJ10sIGhlbHA6ICdvcGxvZyBlbmFibGVkJyB9KTtcblxuLy8gVXNlciBzdGF0aXN0aWNzXG5Sb2NrZXRDaGF0Lm1ldHJpY3MudG90YWxVc2VycyA9IG5ldyBjbGllbnQuR2F1Z2UoeyBuYW1lOiAncm9ja2V0Y2hhdF91c2Vyc190b3RhbCcsIGhlbHA6ICd0b3RhbCBvZiB1c2VycycgfSk7XG5Sb2NrZXRDaGF0Lm1ldHJpY3MuYWN0aXZlVXNlcnMgPSBuZXcgY2xpZW50LkdhdWdlKHsgbmFtZTogJ3JvY2tldGNoYXRfdXNlcnNfYWN0aXZlJywgaGVscDogJ3RvdGFsIG9mIGFjdGl2ZSB1c2VycycgfSk7XG5Sb2NrZXRDaGF0Lm1ldHJpY3Mubm9uQWN0aXZlVXNlcnMgPSBuZXcgY2xpZW50LkdhdWdlKHsgbmFtZTogJ3JvY2tldGNoYXRfdXNlcnNfbm9uX2FjdGl2ZScsIGhlbHA6ICd0b3RhbCBvZiBub24gYWN0aXZlIHVzZXJzJyB9KTtcblJvY2tldENoYXQubWV0cmljcy5vbmxpbmVVc2VycyA9IG5ldyBjbGllbnQuR2F1Z2UoeyBuYW1lOiAncm9ja2V0Y2hhdF91c2Vyc19vbmxpbmUnLCBoZWxwOiAndG90YWwgb2YgdXNlcnMgb25saW5lJyB9KTtcblJvY2tldENoYXQubWV0cmljcy5hd2F5VXNlcnMgPSBuZXcgY2xpZW50LkdhdWdlKHsgbmFtZTogJ3JvY2tldGNoYXRfdXNlcnNfYXdheScsIGhlbHA6ICd0b3RhbCBvZiB1c2VycyBhd2F5JyB9KTtcblJvY2tldENoYXQubWV0cmljcy5vZmZsaW5lVXNlcnMgPSBuZXcgY2xpZW50LkdhdWdlKHsgbmFtZTogJ3JvY2tldGNoYXRfdXNlcnNfb2ZmbGluZScsIGhlbHA6ICd0b3RhbCBvZiB1c2VycyBvZmZsaW5lJyB9KTtcblxuLy8gUm9vbSBzdGF0aXN0aWNzXG5Sb2NrZXRDaGF0Lm1ldHJpY3MudG90YWxSb29tcyA9IG5ldyBjbGllbnQuR2F1Z2UoeyBuYW1lOiAncm9ja2V0Y2hhdF9yb29tc190b3RhbCcsIGhlbHA6ICd0b3RhbCBvZiByb29tcycgfSk7XG5Sb2NrZXRDaGF0Lm1ldHJpY3MudG90YWxDaGFubmVscyA9IG5ldyBjbGllbnQuR2F1Z2UoeyBuYW1lOiAncm9ja2V0Y2hhdF9jaGFubmVsc190b3RhbCcsIGhlbHA6ICd0b3RhbCBvZiBwdWJsaWMgcm9vbXMvY2hhbm5lbHMnIH0pO1xuUm9ja2V0Q2hhdC5tZXRyaWNzLnRvdGFsUHJpdmF0ZUdyb3VwcyA9IG5ldyBjbGllbnQuR2F1Z2UoeyBuYW1lOiAncm9ja2V0Y2hhdF9wcml2YXRlX2dyb3Vwc190b3RhbCcsIGhlbHA6ICd0b3RhbCBvZiBwcml2YXRlIHJvb21zJyB9KTtcblJvY2tldENoYXQubWV0cmljcy50b3RhbERpcmVjdCA9IG5ldyBjbGllbnQuR2F1Z2UoeyBuYW1lOiAncm9ja2V0Y2hhdF9kaXJlY3RfdG90YWwnLCBoZWxwOiAndG90YWwgb2YgZGlyZWN0IHJvb21zJyB9KTtcblJvY2tldENoYXQubWV0cmljcy50b3RhbExpdmVjaGF0ID0gbmV3IGNsaWVudC5HYXVnZSh7IG5hbWU6ICdyb2NrZXRjaGF0X2xpdmVjaGF0X3RvdGFsJywgaGVscDogJ3RvdGFsIG9mIGxpdmVjaGF0IHJvb21zJyB9KTtcblxuLy8gTWVzc2FnZSBzdGF0aXN0aWNzXG5Sb2NrZXRDaGF0Lm1ldHJpY3MudG90YWxNZXNzYWdlcyA9IG5ldyBjbGllbnQuR2F1Z2UoeyBuYW1lOiAncm9ja2V0Y2hhdF9tZXNzYWdlc190b3RhbCcsIGhlbHA6ICd0b3RhbCBvZiBtZXNzYWdlcycgfSk7XG5Sb2NrZXRDaGF0Lm1ldHJpY3MudG90YWxDaGFubmVsTWVzc2FnZXMgPSBuZXcgY2xpZW50LkdhdWdlKHsgbmFtZTogJ3JvY2tldGNoYXRfY2hhbm5lbF9tZXNzYWdlc190b3RhbCcsIGhlbHA6ICd0b3RhbCBvZiBtZXNzYWdlcyBpbiBwdWJsaWMgcm9vbXMnIH0pO1xuUm9ja2V0Q2hhdC5tZXRyaWNzLnRvdGFsUHJpdmF0ZUdyb3VwTWVzc2FnZXMgPSBuZXcgY2xpZW50LkdhdWdlKHsgbmFtZTogJ3JvY2tldGNoYXRfcHJpdmF0ZV9ncm91cF9tZXNzYWdlc190b3RhbCcsIGhlbHA6ICd0b3RhbCBvZiBtZXNzYWdlcyBpbiBwcml2YXRlIHJvb21zJyB9KTtcblJvY2tldENoYXQubWV0cmljcy50b3RhbERpcmVjdE1lc3NhZ2VzID0gbmV3IGNsaWVudC5HYXVnZSh7IG5hbWU6ICdyb2NrZXRjaGF0X2RpcmVjdF9tZXNzYWdlc190b3RhbCcsIGhlbHA6ICd0b3RhbCBvZiBtZXNzYWdlcyBpbiBkaXJlY3Qgcm9vbXMnIH0pO1xuUm9ja2V0Q2hhdC5tZXRyaWNzLnRvdGFsTGl2ZWNoYXRNZXNzYWdlcyA9IG5ldyBjbGllbnQuR2F1Z2UoeyBuYW1lOiAncm9ja2V0Y2hhdF9saXZlY2hhdF9tZXNzYWdlc190b3RhbCcsIGhlbHA6ICd0b3RhbCBvZiBtZXNzYWdlcyBpbiBsaXZlY2hhdCByb29tcycgfSk7XG5cbmNsaWVudC5yZWdpc3Rlci5zZXREZWZhdWx0TGFiZWxzKHtcblx0dW5pcXVlSWQ6IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCd1bmlxdWVJRCcpLFxuXHRzaXRlVXJsOiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU2l0ZV9VcmwnKSxcbn0pO1xuXG5jb25zdCBzZXRQcm9tZXRoZXVzRGF0YSA9ICgpID0+IHtcblx0Y29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cblx0Y2xpZW50LnJlZ2lzdGVyLnNldERlZmF1bHRMYWJlbHMoe1xuXHRcdHVuaXF1ZV9pZDogUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ3VuaXF1ZUlEJyksXG5cdFx0c2l0ZV91cmw6IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdTaXRlX1VybCcpLFxuXHRcdHZlcnNpb246IFJvY2tldENoYXQuSW5mby52ZXJzaW9uLFxuXHR9KTtcblxuXHRjb25zdCBzZXNzaW9ucyA9IE9iamVjdC52YWx1ZXMoTWV0ZW9yLnNlcnZlci5zZXNzaW9ucyk7XG5cdGNvbnN0IGF1dGhlbnRpY2F0ZWRTZXNzaW9ucyA9IHNlc3Npb25zLmZpbHRlcigocykgPT4gcy51c2VySWQpO1xuXHRSb2NrZXRDaGF0Lm1ldHJpY3MuZGRwU2Vzc2lvbnMuc2V0KHNlc3Npb25zLmxlbmd0aCwgZGF0ZSk7XG5cdFJvY2tldENoYXQubWV0cmljcy5kZHBBdGhlbnRpY2F0ZWRTZXNzaW9ucy5zZXQoYXV0aGVudGljYXRlZFNlc3Npb25zLmxlbmd0aCwgZGF0ZSk7XG5cdFJvY2tldENoYXQubWV0cmljcy5kZHBDb25uZWN0ZWRVc2Vycy5zZXQoXy51bmlxdWUoYXV0aGVudGljYXRlZFNlc3Npb25zLm1hcCgocykgPT4gcy51c2VySWQpKS5sZW5ndGgsIGRhdGUpO1xuXG5cdGlmICghUm9ja2V0Q2hhdC5tb2RlbHMuU3RhdGlzdGljcykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IHN0YXRpc3RpY3MgPSBSb2NrZXRDaGF0Lm1vZGVscy5TdGF0aXN0aWNzLmZpbmRMYXN0KCk7XG5cdGlmICghc3RhdGlzdGljcykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdFJvY2tldENoYXQubWV0cmljcy52ZXJzaW9uLnNldCh7IHZlcnNpb246IHN0YXRpc3RpY3MudmVyc2lvbiB9LCAxLCBkYXRlKTtcblx0Um9ja2V0Q2hhdC5tZXRyaWNzLm1pZ3JhdGlvbi5zZXQoUm9ja2V0Q2hhdC5NaWdyYXRpb25zLl9nZXRDb250cm9sKCkudmVyc2lvbiwgZGF0ZSk7XG5cdFJvY2tldENoYXQubWV0cmljcy5pbnN0YW5jZUNvdW50LnNldChzdGF0aXN0aWNzLmluc3RhbmNlQ291bnQsIGRhdGUpO1xuXHRSb2NrZXRDaGF0Lm1ldHJpY3Mub3Bsb2dFbmFibGVkLnNldCh7IGVuYWJsZWQ6IHN0YXRpc3RpY3Mub3Bsb2dFbmFibGVkIH0sIDEsIGRhdGUpO1xuXG5cdC8vIFVzZXIgc3RhdGlzdGljc1xuXHRSb2NrZXRDaGF0Lm1ldHJpY3MudG90YWxVc2Vycy5zZXQoc3RhdGlzdGljcy50b3RhbFVzZXJzLCBkYXRlKTtcblx0Um9ja2V0Q2hhdC5tZXRyaWNzLmFjdGl2ZVVzZXJzLnNldChzdGF0aXN0aWNzLmFjdGl2ZVVzZXJzLCBkYXRlKTtcblx0Um9ja2V0Q2hhdC5tZXRyaWNzLm5vbkFjdGl2ZVVzZXJzLnNldChzdGF0aXN0aWNzLm5vbkFjdGl2ZVVzZXJzLCBkYXRlKTtcblx0Um9ja2V0Q2hhdC5tZXRyaWNzLm9ubGluZVVzZXJzLnNldChzdGF0aXN0aWNzLm9ubGluZVVzZXJzLCBkYXRlKTtcblx0Um9ja2V0Q2hhdC5tZXRyaWNzLmF3YXlVc2Vycy5zZXQoc3RhdGlzdGljcy5hd2F5VXNlcnMsIGRhdGUpO1xuXHRSb2NrZXRDaGF0Lm1ldHJpY3Mub2ZmbGluZVVzZXJzLnNldChzdGF0aXN0aWNzLm9mZmxpbmVVc2VycywgZGF0ZSk7XG5cblx0Ly8gUm9vbSBzdGF0aXN0aWNzXG5cdFJvY2tldENoYXQubWV0cmljcy50b3RhbFJvb21zLnNldChzdGF0aXN0aWNzLnRvdGFsUm9vbXMsIGRhdGUpO1xuXHRSb2NrZXRDaGF0Lm1ldHJpY3MudG90YWxDaGFubmVscy5zZXQoc3RhdGlzdGljcy50b3RhbENoYW5uZWxzLCBkYXRlKTtcblx0Um9ja2V0Q2hhdC5tZXRyaWNzLnRvdGFsUHJpdmF0ZUdyb3Vwcy5zZXQoc3RhdGlzdGljcy50b3RhbFByaXZhdGVHcm91cHMsIGRhdGUpO1xuXHRSb2NrZXRDaGF0Lm1ldHJpY3MudG90YWxEaXJlY3Quc2V0KHN0YXRpc3RpY3MudG90YWxEaXJlY3QsIGRhdGUpO1xuXHRSb2NrZXRDaGF0Lm1ldHJpY3MudG90YWxMaXZlY2hhdC5zZXQoc3RhdGlzdGljcy50b3RhbExpdmVjaGF0LCBkYXRlKTtcblxuXHQvLyBNZXNzYWdlIHN0YXRpc3RpY3Ncblx0Um9ja2V0Q2hhdC5tZXRyaWNzLnRvdGFsTWVzc2FnZXMuc2V0KHN0YXRpc3RpY3MudG90YWxNZXNzYWdlcywgZGF0ZSk7XG5cdFJvY2tldENoYXQubWV0cmljcy50b3RhbENoYW5uZWxNZXNzYWdlcy5zZXQoc3RhdGlzdGljcy50b3RhbENoYW5uZWxNZXNzYWdlcywgZGF0ZSk7XG5cdFJvY2tldENoYXQubWV0cmljcy50b3RhbFByaXZhdGVHcm91cE1lc3NhZ2VzLnNldChzdGF0aXN0aWNzLnRvdGFsUHJpdmF0ZUdyb3VwTWVzc2FnZXMsIGRhdGUpO1xuXHRSb2NrZXRDaGF0Lm1ldHJpY3MudG90YWxEaXJlY3RNZXNzYWdlcy5zZXQoc3RhdGlzdGljcy50b3RhbERpcmVjdE1lc3NhZ2VzLCBkYXRlKTtcblx0Um9ja2V0Q2hhdC5tZXRyaWNzLnRvdGFsTGl2ZWNoYXRNZXNzYWdlcy5zZXQoc3RhdGlzdGljcy50b3RhbExpdmVjaGF0TWVzc2FnZXMsIGRhdGUpO1xufTtcblxuY29uc3QgYXBwID0gY29ubmVjdCgpO1xuXG4vLyBjb25zdCBjb21wcmVzc2lvbiA9IHJlcXVpcmUoJ2NvbXByZXNzaW9uJyk7XG4vLyBhcHAudXNlKGNvbXByZXNzaW9uKCkpO1xuXG5hcHAudXNlKCcvbWV0cmljcycsIChyZXEsIHJlcykgPT4ge1xuXHRyZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAndGV4dC9wbGFpbicpO1xuXHRyZXMuZW5kKFJvY2tldENoYXQucHJvbWNsaWVudC5yZWdpc3Rlci5tZXRyaWNzKCkpO1xufSk7XG5cbmFwcC51c2UoJy8nLCAocmVxLCByZXMpID0+IHtcblx0Y29uc3QgaHRtbCA9IGA8aHRtbD5cblx0XHQ8aGVhZD5cblx0XHRcdDx0aXRsZT5Sb2NrZXQuQ2hhdCBQcm9tZXRoZXVzIEV4cG9ydGVyPC90aXRsZT5cblx0XHQ8L2hlYWQ+XG5cdFx0PGJvZHk+XG5cdFx0XHQ8aDE+Um9ja2V0LkNoYXQgUHJvbWV0aGV1cyBFeHBvcnRlcjwvaDE+XG5cdFx0XHQ8cD48YSBocmVmPVwiL21ldHJpY3NcIj5NZXRyaWNzPC9hPjwvcD5cblx0XHQ8L2JvZHk+XG5cdDwvaHRtbD5gO1xuXG5cdHJlcy53cml0ZShodG1sKTtcblx0cmVzLmVuZCgpO1xufSk7XG5cbmNvbnN0IHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGFwcCk7XG5cbmxldCB0aW1lcjtcbmNvbnN0IHVwZGF0ZVByb21ldGhldXNDb25maWcgPSAoKSA9PiB7XG5cdGNvbnN0IHBvcnQgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnUHJvbWV0aGV1c19Qb3J0Jyk7XG5cdGNvbnN0IGVuYWJsZWQgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnUHJvbWV0aGV1c19FbmFibGVkJyk7XG5cblx0aWYgKHBvcnQgPT0gbnVsbCB8fCBlbmFibGVkID09IG51bGwpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpZiAoZW5hYmxlZCA9PT0gdHJ1ZSkge1xuXHRcdHNlcnZlci5saXN0ZW4oe1xuXHRcdFx0cG9ydCxcblx0XHRcdGhvc3Q6IHByb2Nlc3MuZW52LkJJTkRfSVAgfHwgJzAuMC4wLjAnLFxuXHRcdH0pO1xuXHRcdHRpbWVyID0gTWV0ZW9yLnNldEludGVydmFsKHNldFByb21ldGhldXNEYXRhLCA1MDAwKTtcblx0fSBlbHNlIHtcblx0XHRzZXJ2ZXIuY2xvc2UoKTtcblx0XHRNZXRlb3IuY2xlYXJJbnRlcnZhbCh0aW1lcik7XG5cdH1cbn07XG5cblJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdQcm9tZXRoZXVzX0VuYWJsZWQnLCB1cGRhdGVQcm9tZXRoZXVzQ29uZmlnKTtcblJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdQcm9tZXRoZXVzX1BvcnQnLCB1cGRhdGVQcm9tZXRoZXVzQ29uZmlnKTtcbiIsIi8qIGdsb2JhbHMgUmF0ZUxpbWl0ZXIgKi9cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5Sb2NrZXRDaGF0LlJhdGVMaW1pdGVyID0gbmV3IGNsYXNzIHtcblx0bGltaXRGdW5jdGlvbihmbiwgbnVtUmVxdWVzdHMsIHRpbWVJbnRlcnZhbCwgbWF0Y2hlcnMpIHtcblx0XHRpZiAocHJvY2Vzcy5lbnYuVEVTVF9NT0RFID09PSAndHJ1ZScpIHtcblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdFx0Y29uc3QgcmF0ZUxpbWl0ZXIgPSBuZXcgUmF0ZUxpbWl0ZXIoKTtcblx0XHRyYXRlTGltaXRlci5hZGRSdWxlKG1hdGNoZXJzLCBudW1SZXF1ZXN0cywgdGltZUludGVydmFsKTtcblx0XHRyZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuXHRcdFx0Y29uc3QgbWF0Y2ggPSB7fTtcblx0XHRcdF8uZWFjaChtYXRjaGVycywgZnVuY3Rpb24obWF0Y2hlciwga2V5KSB7XG5cdFx0XHRcdHJldHVybiBtYXRjaFtrZXldID0gYXJnc1trZXldO1xuXHRcdFx0fSk7XG5cdFx0XHRyYXRlTGltaXRlci5pbmNyZW1lbnQobWF0Y2gpO1xuXHRcdFx0Y29uc3QgcmF0ZUxpbWl0UmVzdWx0ID0gcmF0ZUxpbWl0ZXIuY2hlY2sobWF0Y2gpO1xuXHRcdFx0aWYgKHJhdGVMaW1pdFJlc3VsdC5hbGxvd2VkKSB7XG5cdFx0XHRcdHJldHVybiBmbi5hcHBseShudWxsLCBhcmdzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLXRvby1tYW55LXJlcXVlc3RzJywgYEVycm9yLCB0b28gbWFueSByZXF1ZXN0cy4gUGxlYXNlIHNsb3cgZG93bi4gWW91IG11c3Qgd2FpdCAkeyBNYXRoLmNlaWwocmF0ZUxpbWl0UmVzdWx0LnRpbWVUb1Jlc2V0IC8gMTAwMCkgfSBzZWNvbmRzIGJlZm9yZSB0cnlpbmcgYWdhaW4uYCwge1xuXHRcdFx0XHRcdHRpbWVUb1Jlc2V0OiByYXRlTGltaXRSZXN1bHQudGltZVRvUmVzZXQsXG5cdFx0XHRcdFx0c2Vjb25kczogTWF0aC5jZWlsKHJhdGVMaW1pdFJlc3VsdC50aW1lVG9SZXNldCAvIDEwMDApLFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0bGltaXRNZXRob2QobWV0aG9kTmFtZSwgbnVtUmVxdWVzdHMsIHRpbWVJbnRlcnZhbCwgbWF0Y2hlcnMpIHtcblx0XHRpZiAocHJvY2Vzcy5lbnYuVEVTVF9NT0RFID09PSAndHJ1ZScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgbWF0Y2ggPSB7XG5cdFx0XHR0eXBlOiAnbWV0aG9kJyxcblx0XHRcdG5hbWU6IG1ldGhvZE5hbWUsXG5cdFx0fTtcblx0XHRfLmVhY2gobWF0Y2hlcnMsIGZ1bmN0aW9uKG1hdGNoZXIsIGtleSkge1xuXHRcdFx0cmV0dXJuIG1hdGNoW2tleV0gPSBtYXRjaGVyc1trZXldO1xuXHRcdH0pO1xuXHRcdHJldHVybiBERFBSYXRlTGltaXRlci5hZGRSdWxlKG1hdGNoLCBudW1SZXF1ZXN0cywgdGltZUludGVydmFsKTtcblx0fVxuXG59O1xuIiwiLyogZ2xvYmFscyBMb2dnZXJNYW5hZ2VyICovXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTG9nX1BhY2thZ2UnLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdHJldHVybiBMb2dnZXJNYW5hZ2VyLnNob3dQYWNrYWdlID0gdmFsdWU7XG59KTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0xvZ19GaWxlJywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRyZXR1cm4gTG9nZ2VyTWFuYWdlci5zaG93RmlsZUFuZExpbmUgPSB2YWx1ZTtcbn0pO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTG9nX0xldmVsJywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRpZiAodmFsdWUgIT0gbnVsbCkge1xuXHRcdExvZ2dlck1hbmFnZXIubG9nTGV2ZWwgPSBwYXJzZUludCh2YWx1ZSk7XG5cdFx0TWV0ZW9yLnNldFRpbWVvdXQoKCkgPT4gTG9nZ2VyTWFuYWdlci5lbmFibGUodHJ1ZSksIDIwMCk7XG5cdH1cbn0pO1xuIiwiLyogZ2xvYmFscyBQdXNoICovXG5jbGFzcyBQdXNoTm90aWZpY2F0aW9uIHtcblx0Z2V0Tm90aWZpY2F0aW9uSWQocm9vbUlkKSB7XG5cdFx0Y29uc3Qgc2VydmVySWQgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgndW5pcXVlSUQnKTtcblx0XHRyZXR1cm4gdGhpcy5oYXNoKGAkeyBzZXJ2ZXJJZCB9fCR7IHJvb21JZCB9YCk7IC8vIGhhc2hcblx0fVxuXG5cdGhhc2goc3RyKSB7XG5cdFx0bGV0IGhhc2ggPSAwO1xuXHRcdGxldCBpID0gc3RyLmxlbmd0aDtcblxuXHRcdHdoaWxlIChpKSB7XG5cdFx0XHRoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBzdHIuY2hhckNvZGVBdCgtLWkpO1xuXHRcdFx0aGFzaCA9IGhhc2ggJiBoYXNoOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcblx0XHR9XG5cdFx0cmV0dXJuIGhhc2g7XG5cdH1cblxuXHRzZW5kKHsgcm9vbU5hbWUsIHJvb21JZCwgdXNlcm5hbWUsIG1lc3NhZ2UsIHVzZXJzVG8sIHBheWxvYWQsIGJhZGdlID0gMSwgY2F0ZWdvcnkgfSkge1xuXHRcdGxldCB0aXRsZTtcblx0XHRpZiAocm9vbU5hbWUgJiYgcm9vbU5hbWUgIT09ICcnKSB7XG5cdFx0XHR0aXRsZSA9IGAkeyByb29tTmFtZSB9YDtcblx0XHRcdG1lc3NhZ2UgPSBgJHsgdXNlcm5hbWUgfTogJHsgbWVzc2FnZSB9YDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGl0bGUgPSBgJHsgdXNlcm5hbWUgfWA7XG5cdFx0fVxuXHRcdGNvbnN0IGNvbmZpZyA9IHtcblx0XHRcdGZyb206ICdwdXNoJyxcblx0XHRcdGJhZGdlLFxuXHRcdFx0c291bmQ6ICdkZWZhdWx0Jyxcblx0XHRcdHRpdGxlLFxuXHRcdFx0dGV4dDogbWVzc2FnZSxcblx0XHRcdHBheWxvYWQsXG5cdFx0XHRxdWVyeTogdXNlcnNUbyxcblx0XHRcdG5vdElkOiB0aGlzLmdldE5vdGlmaWNhdGlvbklkKHJvb21JZCksXG5cdFx0XHRnY206IHtcblx0XHRcdFx0c3R5bGU6ICdpbmJveCcsXG5cdFx0XHRcdHN1bW1hcnlUZXh0OiAnJW4lIG5ldyBtZXNzYWdlcycsXG5cdFx0XHRcdGltYWdlOiBSb2NrZXRDaGF0LkFzc2V0cy5nZXRVUkwoJ0Fzc2V0c19mYXZpY29uXzE5MicpLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0aWYgKGNhdGVnb3J5ICE9PSAnJykge1xuXHRcdFx0Y29uZmlnLmFwbiA9IHtcblx0XHRcdFx0Y2F0ZWdvcnksXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdFJvY2tldENoYXQubWV0cmljcy5ub3RpZmljYXRpb25zU2VudC5pbmMoeyBub3RpZmljYXRpb25fdHlwZTogJ21vYmlsZScgfSk7XG5cdFx0cmV0dXJuIFB1c2guc2VuZChjb25maWcpO1xuXHR9XG59XG5cblJvY2tldENoYXQuUHVzaE5vdGlmaWNhdGlvbiA9IG5ldyBQdXNoTm90aWZpY2F0aW9uKCk7XG4iLCJSb2NrZXRDaGF0LmVtYWlsRG9tYWluRGVmYXVsdEJsYWNrTGlzdCA9IFtcblx0JzAtbWFpbC5jb20nLFxuXHQnMDgxNS5ydScsXG5cdCcwODE1LnN1Jyxcblx0JzBjbGlja2VtYWlsLmNvbScsXG5cdCcwd25kLm5ldCcsXG5cdCcwd25kLm9yZycsXG5cdCcxMG1haWwub3JnJyxcblx0JzEwbWludXQuY29tLnBsJyxcblx0JzEwbWludXRlbWFpbC5jby56YScsXG5cdCcxMG1pbnV0ZW1haWwuY29tJyxcblx0JzEwbWludXRlbWFpbC5kZScsXG5cdCcxMjMtbS5jb20nLFxuXHQnMWNodWFuLmNvbScsXG5cdCcxZnNkZmRzZnNkZi50aycsXG5cdCcxcGFkLmRlJyxcblx0JzF6aHVhbi5jb20nLFxuXHQnMjBlbWFpbC5ldScsXG5cdCcyMG1haWwuZXUnLFxuXHQnMjBtYWlsLml0Jyxcblx0JzIwbWludXRlbWFpbC5jb20nLFxuXHQnMjFjbi5jb20nLFxuXHQnMmZkZ2RmZ2RmZ2RmLnRrJyxcblx0JzJwcm9uZy5jb20nLFxuXHQnMzBtaW51dGVtYWlsLmNvbScsXG5cdCczM21haWwuY29tJyxcblx0JzNkLXBhaW50aW5nLmNvbScsXG5cdCczdHJ0cmV0Z2ZyZmUudGsnLFxuXHQnNGdmZHNnZmRnZmQudGsnLFxuXHQnNHdhcmRpbmcuY29tJyxcblx0JzR3YXJkaW5nLm5ldCcsXG5cdCc0d2FyZGluZy5vcmcnLFxuXHQnNWdoZ2ZoZmdoZmdoLnRrJyxcblx0JzYwbWludXRlbWFpbC5jb20nLFxuXHQnNjc1aG9zdGluZy5jb20nLFxuXHQnNjc1aG9zdGluZy5uZXQnLFxuXHQnNjc1aG9zdGluZy5vcmcnLFxuXHQnNmhqZ2poZ2tpbGtqLnRrJyxcblx0JzZpcC51cycsXG5cdCc2cGFxLmNvbScsXG5cdCc2dXJsLmNvbScsXG5cdCc3NWhvc3RpbmcuY29tJyxcblx0Jzc1aG9zdGluZy5uZXQnLFxuXHQnNzVob3N0aW5nLm9yZycsXG5cdCc3ZGF5cy1wcmludGluZy5jb20nLFxuXHQnN3RhZ3MuY29tJyxcblx0Jzk5ZXhwZXJ0cy5jb20nLFxuXHQnOW94Lm5ldCcsXG5cdCdhLWJjLm5ldCcsXG5cdCdhNDUuaW4nLFxuXHQnYWJjbWFpbC5lbWFpbCcsXG5cdCdhYnlzc21haWwuY29tJyxcblx0J2FjZW50cmkuY29tJyxcblx0J2FkdmFudGltby5jb20nLFxuXHQnYWZyb2JhY29uLmNvbScsXG5cdCdhZy51cy50bycsXG5cdCdhZ2VkbWFpbC5jb20nLFxuXHQnYWhrLmpwJyxcblx0J2FqYXhhcHAubmV0Jyxcblx0J2FsaXZhbmNlLmNvbScsXG5cdCdhbWEtdHJhZGUuZGUnLFxuXHQnYW1haWwuY29tJyxcblx0J2FtaWxlZ2l0LmNvbScsXG5cdCdhbWlyaS5uZXQnLFxuXHQnYW1pcmlpbmR1c3RyaWVzLmNvbScsXG5cdCdhbmFwcHRoYXQuY29tJyxcblx0J2Fuby1tYWlsLm5ldCcsXG5cdCdhbm9uYm94Lm5ldCcsXG5cdCdhbm9ubWFpbHMuZGUnLFxuXHQnYW5vbnltYWlsLmRrJyxcblx0J2Fub255bWJveC5jb20nLFxuXHQnYW50aWNoZWYuY29tJyxcblx0J2FudGljaGVmLm5ldCcsXG5cdCdhbnRpcmVnLnJ1Jyxcblx0J2FudGlzcGFtLmRlJyxcblx0J2FudGlzcGFtbWFpbC5kZScsXG5cdCdhcHBpeGllLmNvbScsXG5cdCdhcm15c3B5LmNvbScsXG5cdCdhcnRtYW4tY29uY2VwdGlvbi5jb20nLFxuXHQnYXZlci5jb20nLFxuXHQnYXptZWlsLnRrJyxcblx0J2JheG9tYWxlLmh0LmN4Jyxcblx0J2JlZGRseS5jb20nLFxuXHQnYmVlZm1pbGsuY29tJyxcblx0J2JpZ3Byb2Zlc3Nvci5zbycsXG5cdCdiaWdzdHJpbmcuY29tJyxcblx0J2JpbmttYWlsLmNvbScsXG5cdCdiaW8tbXVlc2xpLm5ldCcsXG5cdCdibG9nbXl3YXkub3JnJyxcblx0J2JvYm1haWwuaW5mbycsXG5cdCdib2Z0aGV3LmNvbScsXG5cdCdib290eWJheS5kZScsXG5cdCdib3VuLmNyJyxcblx0J2JvdW5jci5jb20nLFxuXHQnYm94Zm9ybWFpbC5pbicsXG5cdCdicmVha3RocnUuY29tJyxcblx0J2JyZWZtYWlsLmNvbScsXG5cdCdicmVubmVuZGVzcmVpY2guZGUnLFxuXHQnYnJvYWRiYW5kbmluamEuY29tJyxcblx0J2Jzbm93Lm5ldCcsXG5cdCdic3BhbWZyZWUub3JnJyxcblx0J2J1Lm1pbnRlbWFpbC5jb20nLFxuXHQnYnVmZmVtYWlsLmNvbScsXG5cdCdidWdtZW5vdC5jb20nLFxuXHQnYnVtcHltYWlsLmNvbScsXG5cdCdidW5kLnVzJyxcblx0J2J1bmRlcy1saS5nYScsXG5cdCdidXJudGhlc3BhbS5pbmZvJyxcblx0J2J1cnN0bWFpbC5pbmZvJyxcblx0J2J1eW1vcmVwbGF5cy5jb20nLFxuXHQnYnV5dXNlZGxpYnJhcnlib29rcy5vcmcnLFxuXHQnYnlvbS5kZScsXG5cdCdjMi5odScsXG5cdCdjYWNoZWRvdC5uZXQnLFxuXHQnY2FyZC56cC51YScsXG5cdCdjYXN1YWxkeC5jb20nLFxuXHQnY2JhaXIuY29tJyxcblx0J2Nlay5wbScsXG5cdCdjZWxsdXJsLmNvbScsXG5cdCdjZW50ZXJtYWlsLmNvbScsXG5cdCdjZW50ZXJtYWlsLm5ldCcsXG5cdCdjaGFtbXkuaW5mbycsXG5cdCdjaGVhdG1haWwuZGUnLFxuXHQnY2hpbGRzYXZldHJ1c3Qub3JnJyxcblx0J2Nob2dtYWlsLmNvbScsXG5cdCdjaG9pY2VtYWlsMS5jb20nLFxuXHQnY2hvbmctbWFpbC5jb20nLFxuXHQnY2hvbmctbWFpbC5uZXQnLFxuXHQnY2hvbmctbWFpbC5vcmcnLFxuXHQnY2xpeHNlci5jb20nLFxuXHQnY21haWwuY29tJyxcblx0J2NtYWlsLm5ldCcsXG5cdCdjbWFpbC5vcmcnLFxuXHQnY29sZGVtYWlsLmluZm8nLFxuXHQnY29uc3VtZXJyaW90LmNvbScsXG5cdCdjb29sLmZyLm5mJyxcblx0J2NvcnJlby5ibG9nb3MubmV0Jyxcblx0J2Nvc21vcnBoLmNvbScsXG5cdCdjb3VycmllbC5mci5uZicsXG5cdCdjb3VycmllbHRlbXBvcmFpcmUuY29tJyxcblx0J2NyYXBtYWlsLm9yZycsXG5cdCdjcmF6eW1haWxpbmcuY29tJyxcblx0J2N1YmljbGluay5jb20nLFxuXHQnY3Vycnl3b3JsZC5kZScsXG5cdCdjdXN0LmluJyxcblx0J2N1dm94LmRlJyxcblx0J2QzcC5kaycsXG5cdCdkYWNvb2xlc3QuY29tJyxcblx0J2RhaW50bHkuY29tJyxcblx0J2RhbmRpa21haWwuY29tJyxcblx0J2RheXJlcC5jb20nLFxuXHQnZGJ1bmtlci5jb20nLFxuXHQnZGNlbWFpbC5jb20nLFxuXHQnZGVhZGFkZHJlc3MuY29tJyxcblx0J2RlYWRzcGFtLmNvbScsXG5cdCdkZWFnb3QuY29tJyxcblx0J2RlYWxqYS5jb20nLFxuXHQnZGVsaWtrdC5kZScsXG5cdCdkZXNwYW0uaXQnLFxuXHQnZGVzcGFtbWVkLmNvbScsXG5cdCdkZXZudWxsbWFpbC5jb20nLFxuXHQnZGZnaC5uZXQnLFxuXHQnZGlnaXRhbHNhbmN0dWFyeS5jb20nLFxuXHQnZGluZ2JvbmUuY29tJyxcblx0J2Rpc2NhcmQuZW1haWwnLFxuXHQnZGlzY2FyZG1haWwuY29tJyxcblx0J2Rpc2NhcmRtYWlsLmRlJyxcblx0J2Rpc3Bvc2FibGVhZGRyZXNzLmNvbScsXG5cdCdkaXNwb3NhYmxlZW1haWxhZGRyZXNzZXMuY29tJyxcblx0J2Rpc3Bvc2FibGVlbWFpbGFkZHJlc3Nlcy5lbWFpbG1pc2VyLmNvbScsXG5cdCdkaXNwb3NhYmxlaW5ib3guY29tJyxcblx0J2Rpc3Bvc2UuaXQnLFxuXHQnZGlzcG9zZWFtYWlsLmNvbScsXG5cdCdkaXNwb3NlbWFpbC5jb20nLFxuXHQnZGlzcG9zdGFibGUuY29tJyxcblx0J2RsZW1haWwucnUnLFxuXHQnZG0udzNpbnRlcm5ldC5jby51aycsXG5cdCdkbS53M2ludGVybmV0LmNvLnVrZXhhbXBsZS5jb20nLFxuXHQnZG9kZ2VpdC5jb20nLFxuXHQnZG9kZ2l0LmNvbScsXG5cdCdkb2RnaXQub3JnJyxcblx0J2RvaWVhLmNvbScsXG5cdCdkb21vem1haWwuY29tJyxcblx0J2RvbmVtYWlsLnJ1Jyxcblx0J2RvbnRyZWcuY29tJyxcblx0J2RvbnRzZW5kbWVzcGFtLmRlJyxcblx0J2RvdG1zZy5jb20nLFxuXHQnZHJkcmIuY29tJyxcblx0J2RyZHJiLm5ldCcsXG5cdCdkcm9wbGFyLmNvbScsXG5cdCdkcm9wbWFpbC5tZScsXG5cdCdkdC5jb20nLFxuXHQnZHVhbS5uZXQnLFxuXHQnZHVkbWFpbC5jb20nLFxuXHQnZHVtcC1lbWFpbC5pbmZvJyxcblx0J2R1bXBhbmRqdW5rLmNvbScsXG5cdCdkdW1wbWFpbC5kZScsXG5cdCdkdW1weWVtYWlsLmNvbScsXG5cdCdkdXNrbWFpbC5jb20nLFxuXHQnZS1tYWlsLmNvbScsXG5cdCdlLW1haWwub3JnJyxcblx0J2U0d2FyZC5jb20nLFxuXHQnZWFzeXRyYXNobWFpbC5jb20nLFxuXHQnZWlubWFsbWFpbC5kZScsXG5cdCdlaW5yb3QuY29tJyxcblx0J2VpbnJvdC5kZScsXG5cdCdlaW50YWdzbWFpbC5kZScsXG5cdCdlbWFpbDYwLmNvbScsXG5cdCdlbWFpbGRpZW5zdC5kZScsXG5cdCdlbWFpbGdvLmRlJyxcblx0J2VtYWlsaWFzLmNvbScsXG5cdCdlbWFpbGlnby5kZScsXG5cdCdlbWFpbGluZml2ZS5jb20nLFxuXHQnZW1haWxsaW1lLmNvbScsXG5cdCdlbWFpbG1pc2VyLmNvbScsXG5cdCdlbWFpbHByb3hzeS5jb20nLFxuXHQnZW1haWxzZW5zZWkuY29tJyxcblx0J2VtYWlsdGVtcG9yYW5lYS5jb20nLFxuXHQnZW1haWx0ZW1wb3JhbmVhLm5ldCcsXG5cdCdlbWFpbHRlbXBvcmFyLnJvJyxcblx0J2VtYWlsdGVtcG9yYXJpby5jb20uYnInLFxuXHQnZW1haWx0aGUubmV0Jyxcblx0J2VtYWlsdG1wLmNvbScsXG5cdCdlbWFpbHRvLmRlJyxcblx0J2VtYWlsd2FyZGVuLmNvbScsXG5cdCdlbWFpbHguYXQuaG0nLFxuXHQnZW1haWx4ZmVyLmNvbScsXG5cdCdlbWVpbC5pbicsXG5cdCdlbWVpbC5pcicsXG5cdCdlbWlsLmNvbScsXG5cdCdlbXoubmV0Jyxcblx0J2VudGVydG8uY29tJyxcblx0J2VwaGVtYWlsLm5ldCcsXG5cdCdlcm8tdHViZS5vcmcnLFxuXHQnZXRyYW5xdWlsLmNvbScsXG5cdCdldHJhbnF1aWwubmV0Jyxcblx0J2V0cmFucXVpbC5vcmcnLFxuXHQnZXZvcG8uY29tJyxcblx0J2V4cGxvZGVtYWlsLmNvbScsXG5cdCdleHByZXNzLm5ldC51YScsXG5cdCdleWVwYXN0ZS5jb20nLFxuXHQnZmFrZWluYm94LmNvbScsXG5cdCdmYWtlaW5mb3JtYXRpb24uY29tJyxcblx0J2Zha2VtYWlsLmZyJyxcblx0J2Zha2VtYWlsei5jb20nLFxuXHQnZmFtbWl4LmNvbScsXG5cdCdmYW5zd29ybGR3aWRlLmRlJyxcblx0J2ZhbnRhc3ltYWlsLmRlJyxcblx0J2Zhc3RhY3VyYS5jb20nLFxuXHQnZmFzdGNoZXZ5LmNvbScsXG5cdCdmYXN0Y2hyeXNsZXIuY29tJyxcblx0J2Zhc3RrYXdhc2FraS5jb20nLFxuXHQnZmFzdG1hemRhLmNvbScsXG5cdCdmYXN0bWl0c3ViaXNoaS5jb20nLFxuXHQnZmFzdG5pc3Nhbi5jb20nLFxuXHQnZmFzdHN1YmFydS5jb20nLFxuXHQnZmFzdHN1enVraS5jb20nLFxuXHQnZmFzdHRveW90YS5jb20nLFxuXHQnZmFzdHlhbWFoYS5jb20nLFxuXHQnZmF0ZmxhcC5jb20nLFxuXHQnZmRmZHNmZHMuY29tJyxcblx0J2ZpZ2h0YWxsc3BhbS5jb20nLFxuXHQnZmlnanMuY29tJyxcblx0J2ZpaWZrZS5kZScsXG5cdCdmaWx6bWFpbC5jb20nLFxuXHQnZml2ZW1haWwuZGUnLFxuXHQnZml4bWFpbC50aycsXG5cdCdmaXptYWlsLmNvbScsXG5cdCdmbGVja2Vucy5odScsXG5cdCdmbGVtYWlsLnJ1Jyxcblx0J2ZseXNwYW0uY29tJyxcblx0J2Zvb3RhcmQuY29tJyxcblx0J2ZvcmdldG1haWwuY29tJyxcblx0J2ZyMzNtYWlsLmluZm8nLFxuXHQnZnJhcG1haWwuY29tJyxcblx0J2ZyZXVuZGluLnJ1Jyxcblx0J2ZyaWVuZGx5bWFpbC5jby51aycsXG5cdCdmcm9udDE0Lm9yZycsXG5cdCdmdWNraW5nZHVoLmNvbScsXG5cdCdmdWRnZXJ1Yi5jb20nLFxuXHQnZnV4MHJpbmdkdWguY29tJyxcblx0J2Z5aWkuZGUnLFxuXHQnZ2FybGljbGlmZS5jb20nLFxuXHQnZ2VoZW5zaWVtaXJuaWNodGF1ZmRlbnNhY2suZGUnLFxuXHQnZ2VsaXRpay5pbicsXG5cdCdnZXQxbWFpbC5jb20nLFxuXHQnZ2V0Mm1haWwuZnInLFxuXHQnZ2V0YWlybWFpbC5jb20nLFxuXHQnZ2V0bWFpbHMuZXUnLFxuXHQnZ2V0b25lbWFpbC5jb20nLFxuXHQnZ2V0b25lbWFpbC5uZXQnLFxuXHQnZ2hvc3R0ZXh0ZXIuZGUnLFxuXHQnZ2lhbnRtYWlsLmRlJyxcblx0J2dpcmxzdW5kZXJ0aGVpbmZsdWVuY2UuY29tJyxcblx0J2dpc2hwdXBweS5jb20nLFxuXHQnZ21pYWwuY29tJyxcblx0J2dvZW1haWxnby5jb20nLFxuXHQnZ29yaWxsYXN3aXRoZGlydHlhcm1waXRzLmNvbScsXG5cdCdnb3RtYWlsLmNvbScsXG5cdCdnb3RtYWlsLm5ldCcsXG5cdCdnb3RtYWlsLm9yZycsXG5cdCdnb3R0aS5vdGhlcmluYm94LmNvbScsXG5cdCdnb3dpa2lib29rcy5jb20nLFxuXHQnZ293aWtpY2FtcHVzLmNvbScsXG5cdCdnb3dpa2ljYXJzLmNvbScsXG5cdCdnb3dpa2lmaWxtcy5jb20nLFxuXHQnZ293aWtpZ2FtZXMuY29tJyxcblx0J2dvd2lraW11c2ljLmNvbScsXG5cdCdnb3dpa2ltdXNpYy5ncmVhdC1ob3N0LmluJyxcblx0J2dvd2lraW5ldHdvcmsuY29tJyxcblx0J2dvd2lraXRyYXZlbC5jb20nLFxuXHQnZ293aWtpdHYuY29tJyxcblx0J2dyYW5kbWFtYWlsLmNvbScsXG5cdCdncmFuZG1hc21haWwuY29tJyxcblx0J2dyZWF0LWhvc3QuaW4nLFxuXHQnZ3JlZW5zbG90aC5jb20nLFxuXHQnZ3JyLmxhJyxcblx0J2dzcnYuY28udWsnLFxuXHQnZ3VlcmlsbGFtYWlsLmJpeicsXG5cdCdndWVyaWxsYW1haWwuY29tJyxcblx0J2d1ZXJpbGxhbWFpbC5uZXQnLFxuXHQnZ3VlcmlsbGFtYWlsLm9yZycsXG5cdCdndWVycmlsbGFtYWlsLmJpeicsXG5cdCdndWVycmlsbGFtYWlsLmNvbScsXG5cdCdndWVycmlsbGFtYWlsLmRlJyxcblx0J2d1ZXJyaWxsYW1haWwuaW5mbycsXG5cdCdndWVycmlsbGFtYWlsLm5ldCcsXG5cdCdndWVycmlsbGFtYWlsLm9yZycsXG5cdCdndWVycmlsbGFtYWlsYmxvY2suY29tJyxcblx0J2d1c3RyLmNvbScsXG5cdCdoLm1pbnRlbWFpbC5jb20nLFxuXHQnaDhzLm9yZycsXG5cdCdoYWNjY2MuY29tJyxcblx0J2hhbHRvc3BhbS5jb20nLFxuXHQnaGFyYWtpcmltYWlsLmNvbScsXG5cdCdoYXJ0Ym90LmRlJyxcblx0J2hhdC1nZWxkLmRlJyxcblx0J2hhdGVzcGFtLm9yZycsXG5cdCdoZWxsb2RyZWFtLm1vYmknLFxuXHQnaGVycC5pbicsXG5cdCdoaWRlbWFpbC5kZScsXG5cdCdoaWR6ei5jb20nLFxuXHQnaG1hbWFpbC5jb20nLFxuXHQnaG9jaHNpdHplLmNvbScsXG5cdCdob3BlbWFpbC5iaXonLFxuXHQnaG90cG9wLmNvbScsXG5cdCdodWxhcGxhLmRlJyxcblx0J2lhb3NzLmNvbScsXG5cdCdpZWF0c3BhbS5ldScsXG5cdCdpZWF0c3BhbS5pbmZvJyxcblx0J2llaC1tYWlsLmRlJyxcblx0J2loYXRleW91YWxvdC5pbmZvJyxcblx0J2loZWFydHNwYW0ub3JnJyxcblx0J2lrYmVuc3BhbXZyaWoubmwnLFxuXHQnaW1haWxzLmluZm8nLFxuXHQnaW1nb2YuY29tJyxcblx0J2ltc3RhdGlvbnMuY29tJyxcblx0J2luYmF4LnRrJyxcblx0J2luYm94LnNpJyxcblx0J2luYm94YWxpYXMuY29tJyxcblx0J2luYm94Y2xlYW4uY29tJyxcblx0J2luYm94Y2xlYW4ub3JnJyxcblx0J2luYm94cHJveHkuY29tJyxcblx0J2luY29nbml0b21haWwuY29tJyxcblx0J2luY29nbml0b21haWwubmV0Jyxcblx0J2luY29nbml0b21haWwub3JnJyxcblx0J2luZm9jb20uenAudWEnLFxuXHQnaW5vdXRtYWlsLmRlJyxcblx0J2lub3V0bWFpbC5ldScsXG5cdCdpbm91dG1haWwuaW5mbycsXG5cdCdpbm91dG1haWwubmV0Jyxcblx0J2luc29yZy1tYWlsLmluZm8nLFxuXHQnaW5zdGFudC1tYWlsLmRlJyxcblx0J2lwNi5saScsXG5cdCdpcG9vLm9yZycsXG5cdCdpcmlzaDJtZS5jb20nLFxuXHQnaXdpLm5ldCcsXG5cdCdqYW1pdC5jb20uYXUnLFxuXHQnamV0YWJsZS5jb20nLFxuXHQnamV0YWJsZS5mci5uZicsXG5cdCdqZXRhYmxlLm5ldCcsXG5cdCdqZXRhYmxlLm9yZycsXG5cdCdqbnhqbi5jb20nLFxuXHQnam91cnJhcGlkZS5jb20nLFxuXHQnanNyc29sdXRpb25zLmNvbScsXG5cdCdqdW5rMWUuY29tJyxcblx0J2thc21haWwuY29tJyxcblx0J2thc3BvcC5jb20nLFxuXHQna2VlcG15bWFpbC5jb20nLFxuXHQna2lsbG1haWwuY29tJyxcblx0J2tpbGxtYWlsLm5ldCcsXG5cdCdraW1zZGlzay5jb20nLFxuXHQna2luZ3NxLmdhJyxcblx0J2tpci5jaC50YycsXG5cdCdrbGFzc21hc3Rlci5jb20nLFxuXHQna2xhc3NtYXN0ZXIubmV0Jyxcblx0J2tsemxrLmNvbScsXG5cdCdrb29rLm1sJyxcblx0J2tvc3ptYWlsLnBsJyxcblx0J2t1bHR1cmJldHJpZWIuaW5mbycsXG5cdCdrdXJ6ZXBvc3QuZGUnLFxuXHQnbDMzci5ldScsXG5cdCdsYWNrbWFpbC5uZXQnLFxuXHQnbGFncy51cycsXG5cdCdsYXdsaXRhLmNvbScsXG5cdCdsYXp5aW5ib3guY29tJyxcblx0J2xldHRoZW1lYXRzcGFtLmNvbScsXG5cdCdsaHNkdi5jb20nLFxuXHQnbGlmZWJ5Zm9vZC5jb20nLFxuXHQnbGluazJtYWlsLm5ldCcsXG5cdCdsaXRlZHJvcC5jb20nLFxuXHQnbG9hZGJ5LnVzJyxcblx0J2xvZ2luLWVtYWlsLm1sJyxcblx0J2xvbC5vdnBuLnRvJyxcblx0J2xvbGZyZWFrLm5ldCcsXG5cdCdsb29rdWdseS5jb20nLFxuXHQnbG9wbC5jby5jYycsXG5cdCdsb3J0ZW1haWwuZGsnLFxuXHQnbG92ZW1lbGVhdmVtZS5jb20nLFxuXHQnbHI3OC5jb20nLFxuXHQnbHJvaWQuY29tJyxcblx0J2x1a29wLmRrJyxcblx0J20yMS5jYycsXG5cdCdtNGlsd2ViLmluZm8nLFxuXHQnbWFib2FyZC5jb20nLFxuXHQnbWFpbC1maWx0ZXIuY29tJyxcblx0J21haWwtdGVtcG9yYWlyZS5mcicsXG5cdCdtYWlsLmJ5Jyxcblx0J21haWwubWV6aW1hZ2VzLm5ldCcsXG5cdCdtYWlsLnpwLnVhJyxcblx0J21haWwxMTQubmV0Jyxcblx0J21haWwxYS5kZScsXG5cdCdtYWlsMjEuY2MnLFxuXHQnbWFpbDJyc3Mub3JnJyxcblx0J21haWwzMzMuY29tJyxcblx0J21haWw0dHJhc2guY29tJyxcblx0J21haWxiaWRvbi5jb20nLFxuXHQnbWFpbGJpei5iaXonLFxuXHQnbWFpbGJsb2Nrcy5jb20nLFxuXHQnbWFpbGJ1Y2tldC5vcmcnLFxuXHQnbWFpbGNhdC5iaXonLFxuXHQnbWFpbGNhdGNoLmNvbScsXG5cdCdtYWlsZGUuZGUnLFxuXHQnbWFpbGRlLmluZm8nLFxuXHQnbWFpbGRyb3AuY2MnLFxuXHQnbWFpbGR4LmNvbScsXG5cdCdtYWlsZWF0ZXIuY29tJyxcblx0J21haWxlZC5ybycsXG5cdCdtYWlsZWltZXIuZGUnLFxuXHQnbWFpbGV4cGlyZS5jb20nLFxuXHQnbWFpbGZhLnRrJyxcblx0J21haWxmb3JzcGFtLmNvbScsXG5cdCdtYWlsZnJlZW9ubGluZS5jb20nLFxuXHQnbWFpbGZzLmNvbScsXG5cdCdtYWlsZ3VhcmQubWUnLFxuXHQnbWFpbGltYXRlLmNvbScsXG5cdCdtYWlsaW44ci5jb20nLFxuXHQnbWFpbGluYXRlci5jb20nLFxuXHQnbWFpbGluYXRvci5jb20nLFxuXHQnbWFpbGluYXRvci5uZXQnLFxuXHQnbWFpbGluYXRvci5vcmcnLFxuXHQnbWFpbGluYXRvci51cycsXG5cdCdtYWlsaW5hdG9yMi5jb20nLFxuXHQnbWFpbGluY3ViYXRvci5jb20nLFxuXHQnbWFpbGlzbWFnaWMuY29tJyxcblx0J21haWxtYXRlLmNvbScsXG5cdCdtYWlsbWUuaXInLFxuXHQnbWFpbG1lLmx2Jyxcblx0J21haWxtZTI0LmNvbScsXG5cdCdtYWlsbWV0cmFzaC5jb20nLFxuXHQnbWFpbG1ldHJhc2guY29taWx6aWxsYS5vcmcnLFxuXHQnbWFpbG1vYXQuY29tJyxcblx0J21haWxtcy5jb20nLFxuXHQnbWFpbG5hdG9yLmNvbScsXG5cdCdtYWlsbmVzaWEuY29tJyxcblx0J21haWxudWxsLmNvbScsXG5cdCdtYWlsb3JnLm9yZycsXG5cdCdtYWlscGljay5iaXonLFxuXHQnbWFpbHByb3hzeS5jb20nLFxuXHQnbWFpbHF1YWNrLmNvbScsXG5cdCdtYWlscm9jay5iaXonLFxuXHQnbWFpbHNjcmFwLmNvbScsXG5cdCdtYWlsc2hlbGwuY29tJyxcblx0J21haWxzaXBob24uY29tJyxcblx0J21haWxzbGFwcGluZy5jb20nLFxuXHQnbWFpbHNsaXRlLmNvbScsXG5cdCdtYWlsdGVtcC5pbmZvJyxcblx0J21haWx0b21lLmRlJyxcblx0J21haWx0b3RoaXMuY29tJyxcblx0J21haWx0cmFzaC5uZXQnLFxuXHQnbWFpbHR2Lm5ldCcsXG5cdCdtYWlsdHYudHYnLFxuXHQnbWFpbHppbGxhLmNvbScsXG5cdCdtYWlsemlsbGEub3JnJyxcblx0J21haWx6aWxsYS5vcmdtYnguY2MnLFxuXHQnbWFrZW1ldGhla2luZy5jb20nLFxuXHQnbWFuaWZlc3RnZW5lcmF0b3IuY29tJyxcblx0J21hbnlicmFpbi5jb20nLFxuXHQnbWJ4LmNjJyxcblx0J21lZ2EuemlrLmRqJyxcblx0J21laW5zcGFtc2NodXR6LmRlJyxcblx0J21lbHRtYWlsLmNvbScsXG5cdCdtZXNzYWdlYmVhbWVyLmRlJyxcblx0J21lemltYWdlcy5uZXQnLFxuXHQnbWllcmRhbWFpbC5jb20nLFxuXHQnbWlndW1haWwuY29tJyxcblx0J21pbmlzdHJ5LW9mLXNpbGx5LXdhbGtzLmRlJyxcblx0J21pbnRlbWFpbC5jb20nLFxuXHQnbWlzdGVycGluYmFsbC5kZScsXG5cdCdtanVrZ2xhc3MubnUnLFxuXHQnbW1haWxpbmF0ZXIuY29tJyxcblx0J21vYWt0LmNvbScsXG5cdCdtb2JpLndlYi5pZCcsXG5cdCdtb2JpbGVuaW5qYS5jby51aycsXG5cdCdtb2J1cmwuY29tJyxcblx0J21vaG1hbC5jb20nLFxuXHQnbW9uY291cnJpZXIuZnIubmYnLFxuXHQnbW9uZW1haWwuZnIubmYnLFxuXHQnbW9ubWFpbC5mci5uZicsXG5cdCdtb251bWVudG1haWwuY29tJyxcblx0J21zYS5taW5zbWFpbC5jb20nLFxuXHQnbXQyMDA5LmNvbScsXG5cdCdtdDIwMTQuY29tJyxcblx0J214MC53d3duZXcuZXUnLFxuXHQnbXkxMG1pbnV0ZW1haWwuY29tJyxcblx0J215Y2FyZC5uZXQudWEnLFxuXHQnbXljbGVhbmluYm94Lm5ldCcsXG5cdCdteWVtYWlsYm94eS5jb20nLFxuXHQnbXltYWlsLWluLm5ldCcsXG5cdCdteW1haWxvYXNpcy5jb20nLFxuXHQnbXluZXRzdG9yZS5kZScsXG5cdCdteXBhY2tzLm5ldCcsXG5cdCdteXBhcnR5Y2xpcC5kZScsXG5cdCdteXBoYW50b21lbWFpbC5jb20nLFxuXHQnbXlzYW1wLmRlJyxcblx0J215c3BhY2VpbmMuY29tJyxcblx0J215c3BhY2VpbmMubmV0Jyxcblx0J215c3BhY2VpbmMub3JnJyxcblx0J215c3BhY2VwaW1wZWR1cC5jb20nLFxuXHQnbXlzcGFtbGVzcy5jb20nLFxuXHQnbXl0ZW1wLmVtYWlsJyxcblx0J215dGVtcGVtYWlsLmNvbScsXG5cdCdteXRlbXBtYWlsLmNvbScsXG5cdCdteXRyYXNobWFpbC5jb20nLFxuXHQnbmFidW1hLmNvbScsXG5cdCduZW9tYWlsYm94LmNvbScsXG5cdCduZXB3ay5jb20nLFxuXHQnbmVydm1pY2gubmV0Jyxcblx0J25lcnZ0bWljaC5uZXQnLFxuXHQnbmV0bWFpbHMuY29tJyxcblx0J25ldG1haWxzLm5ldCcsXG5cdCduZXR6aWRpb3QuZGUnLFxuXHQnbmV2ZXJib3guY29tJyxcblx0J25pY2UtNHUuY29tJyxcblx0J25pbmNzbWFpbC5jb20nLFxuXHQnbmluY3NtYWlsLmh1Jyxcblx0J25uaC5jb20nLFxuXHQnbm8tc3BhbS53cycsXG5cdCdub2JsZXBpb25lZXIuY29tJyxcblx0J25vYnVsay5jb20nLFxuXHQnbm9jbGlja2VtYWlsLmNvbScsXG5cdCdub2dtYWlsc3BhbS5pbmZvJyxcblx0J25vbWFpbC5wdycsXG5cdCdub21haWwueGwuY3gnLFxuXHQnbm9tYWlsMm1lLmNvbScsXG5cdCdub21vcmVzcGFtZW1haWxzLmNvbScsXG5cdCdub25zcGFtLmV1Jyxcblx0J25vbnNwYW1tZXIuZGUnLFxuXHQnbm9yZWYuaW4nLFxuXHQnbm9zcGFtLnplLnRjJyxcblx0J25vc3BhbTQudXMnLFxuXHQnbm9zcGFtZm9yLnVzJyxcblx0J25vc3BhbW1haWwubmV0Jyxcblx0J25vc3BhbXRoYW5rcy5pbmZvJyxcblx0J25vdG1haWxpbmF0b3IuY29tJyxcblx0J25vdHNoYXJpbmdteS5pbmZvJyxcblx0J25vd2hlcmUub3JnJyxcblx0J25vd215bWFpbC5jb20nLFxuXHQnbnVyZnVlcnNwYW0uZGUnLFxuXHQnbnVzLmVkdS5zZycsXG5cdCdud2xkeC5jb20nLFxuXHQnb2JqZWN0bWFpbC5jb20nLFxuXHQnb2JvYmJvLmNvbScsXG5cdCdvZGF5bWFpbC5jb20nLFxuXHQnb2Rub3Jhem92b2UucnUnLFxuXHQnb25lLXRpbWUuZW1haWwnLFxuXHQnb25lb2ZmZW1haWwuY29tJyxcblx0J29uZW9mZm1haWwuY29tJyxcblx0J29uZTJtYWlsLmluZm8nLFxuXHQnb25ld2F5bWFpbC5jb20nLFxuXHQnb25sYXRlZG90Y29tLmluZm8nLFxuXHQnb25saW5lLm1zJyxcblx0J29vcGkub3JnJyxcblx0J29wYXlxLmNvbScsXG5cdCdvcmRpbmFyeWFtZXJpY2FuLm5ldCcsXG5cdCdvdGhlcmluYm94LmNvZHVwbXlzcGFjZS5jb20nLFxuXHQnb3RoZXJpbmJveC5jb20nLFxuXHQnb3Vya2xpcHMuY29tJyxcblx0J291dGxhd3NwYW0uY29tJyxcblx0J292cG4udG8nLFxuXHQnb3dscGljLmNvbScsXG5cdCdwYW5jYWtlbWFpbC5jb20nLFxuXHQncGFwbGVhc2UuY29tJyxcblx0J3BjdXNlcnMub3RoZXJpbmJveC5jb20nLFxuXHQncGVwYm90LmNvbScsXG5cdCdwZnVpLnJ1Jyxcblx0J3BpbXBlZHVwbXlzcGFjZS5jb20nLFxuXHQncGpqa3AuY29tJyxcblx0J3BsZXhvbGFuLmRlJyxcblx0J3BvY3p0YS5vbmV0LnBsJyxcblx0J3BvbGl0aWtlcmNsdWIuZGUnLFxuXHQncG9vYWUuY29tJyxcblx0J3Bvb2Z5Lm9yZycsXG5cdCdwb29rbWFpbC5jb20nLFxuXHQncHJpdmFjeS5uZXQnLFxuXHQncHJpdmF0ZGVtYWlsLm5ldCcsXG5cdCdwcml2eS1tYWlsLmNvbScsXG5cdCdwcml2eW1haWwuZGUnLFxuXHQncHJveHltYWlsLmV1Jyxcblx0J3BydG54LmNvbScsXG5cdCdwcnR6LmV1Jyxcblx0J3B1bmthc3MuY29tJyxcblx0J3B1dHRoaXNpbnlvdXJzcGFtZGF0YWJhc2UuY29tJyxcblx0J3B3cmJ5LmNvbScsXG5cdCdxdWlja2luYm94LmNvbScsXG5cdCdxdWlja21haWwubmwnLFxuXHQncmNwdC5hdCcsXG5cdCdyZWFsbHlteW1haWwuY29tJyxcblx0J3JlYWx0eWFsZXJ0cy5jYScsXG5cdCdyZWNvZGUubWUnLFxuXHQncmVjdXJzb3IubmV0Jyxcblx0J3JlY3ljbGVtYWlsLmRrJyxcblx0J3JlZ2J5cGFzcy5jb20nLFxuXHQncmVnYnlwYXNzLmNvbXNhZmUtbWFpbC5uZXQnLFxuXHQncmVqZWN0bWFpbC5jb20nLFxuXHQncmVsaWFibGUtbWFpbC5jb20nLFxuXHQncmh5dGEuY29tJyxcblx0J3JrbGlwcy5jb20nLFxuXHQncm1xa3IubmV0Jyxcblx0J3JveWFsLm5ldCcsXG5cdCdycHBrbi5jb20nLFxuXHQncnRydHIuY29tJyxcblx0J3MwbnkubmV0Jyxcblx0J3NhZmUtbWFpbC5uZXQnLFxuXHQnc2FmZXJzaWdudXAuZGUnLFxuXHQnc2FmZXR5bWFpbC5pbmZvJyxcblx0J3NhZmV0eXBvc3QuZGUnLFxuXHQnc2FuZGVsZi5kZScsXG5cdCdzYXlub3Rvc3BhbXMuY29tJyxcblx0J3NjaGFmbWFpbC5kZScsXG5cdCdzY2hyb3R0LWVtYWlsLmRlJyxcblx0J3NlY3JldGVtYWlsLmRlJyxcblx0J3NlY3VyZS1tYWlsLmJpeicsXG5cdCdzZWxmZGVzdHJ1Y3RpbmdtYWlsLmNvbScsXG5cdCdzZWxmZGVzdHJ1Y3RpbmdtYWlsLm9yZycsXG5cdCdzZW5kc3BhbWhlcmUuY29tJyxcblx0J3NlbmRzcGFtaGVyZS5jb20nLFxuXHQnc2Vuc2VsZXNzLWVudGVydGFpbm1lbnQuY29tJyxcblx0J3NlcnZpY2VzMzkxLmNvbScsXG5cdCdzaGFyZWRtYWlsYm94Lm9yZycsXG5cdCdzaGFya2xhc2Vycy5jb20nLFxuXHQnc2hpZWxkZWRtYWlsLmNvbScsXG5cdCdzaGllbGRlbWFpbC5jb20nLFxuXHQnc2hpZnRtYWlsLmNvbScsXG5cdCdzaGl0bWFpbC5tZScsXG5cdCdzaGl0bWFpbC5vcmcnLFxuXHQnc2hpdHdhcmUubmwnLFxuXHQnc2htZXJpb3VzbHkuY29tJyxcblx0J3Nob3J0bWFpbC5uZXQnLFxuXHQnc2hvdG1haWwucnUnLFxuXHQnc2hvd3Nsb3cuZGUnLFxuXHQnc2libWFpbC5jb20nLFxuXHQnc2lubmxvcy1tYWlsLmRlJyxcblx0J3NpdGVwb3N0ZXIubmV0Jyxcblx0J3NrZWVmbWFpbC5jb20nLFxuXHQnc2xhcHNmcm9tbGFzdG5pZ2h0LmNvbScsXG5cdCdzbGFza3Bvc3Quc2UnLFxuXHQnc2xpcHJ5Lm5ldCcsXG5cdCdzbG9wc2JveC5jb20nLFxuXHQnc2x1c2htYWlsLmNvbScsXG5cdCdzbWFzaG1haWwuZGUnLFxuXHQnc21lbGxmZWFyLmNvbScsXG5cdCdzbWVsbHJlYXIuY29tJyxcblx0J3NuYWtlbWFpbC5jb20nLFxuXHQnc25lYWtlbWFpbC5jb20nLFxuXHQnc25lYWttYWlsLmRlJyxcblx0J3Nua21haWwuY29tJyxcblx0J3NvZmltYWlsLmNvbScsXG5cdCdzb2ZvcnQtbWFpbC5kZScsXG5cdCdzb2Z0cGxzLmFzaWEnLFxuXHQnc29nZXR0aGlzLmNvbScsXG5cdCdzb2h1LmNvbScsXG5cdCdzb2x2ZW1haWwuaW5mbycsXG5cdCdzb29kb25pbXMuY29tJyxcblx0J3NwYS5jb20nLFxuXHQnc3BhZXJlcGxlYXNlLmNvbScsXG5cdCdzcGFtLmxhJyxcblx0J3NwYW0uc3UnLFxuXHQnc3BhbTQubWUnLFxuXHQnc3BhbWFpbC5kZScsXG5cdCdzcGFtYXJyZXN0LmNvbScsXG5cdCdzcGFtYXZlcnQuY29tJyxcblx0J3NwYW1ib2IuY29tJyxcblx0J3NwYW1ib2IubmV0Jyxcblx0J3NwYW1ib2Iub3JnJyxcblx0J3NwYW1ib2cuY29tJyxcblx0J3NwYW1ib2cuZGUnLFxuXHQnc3BhbWJvZy5uZXQnLFxuXHQnc3BhbWJvZy5ydScsXG5cdCdzcGFtYm94LmluZm8nLFxuXHQnc3BhbWJveC5pcmlzaHNwcmluZ3JlYWx0eS5jb20nLFxuXHQnc3BhbWJveC51cycsXG5cdCdzcGFtY2Fubm9uLmNvbScsXG5cdCdzcGFtY2Fubm9uLm5ldCcsXG5cdCdzcGFtY2Vyby5jb20nLFxuXHQnc3BhbWNvbi5vcmcnLFxuXHQnc3BhbWNvcnB0YXN0aWMuY29tJyxcblx0J3NwYW1jb3dib3kuY29tJyxcblx0J3NwYW1jb3dib3kubmV0Jyxcblx0J3NwYW1jb3dib3kub3JnJyxcblx0J3NwYW1kYXkuY29tJyxcblx0J3NwYW1leC5jb20nLFxuXHQnc3BhbWZyZWUuZXUnLFxuXHQnc3BhbWZyZWUyNC5jb20nLFxuXHQnc3BhbWZyZWUyNC5kZScsXG5cdCdzcGFtZnJlZTI0LmV1Jyxcblx0J3NwYW1mcmVlMjQuaW5mbycsXG5cdCdzcGFtZnJlZTI0Lm5ldCcsXG5cdCdzcGFtZnJlZTI0Lm9yZycsXG5cdCdzcGFtZ29lcy5pbicsXG5cdCdzcGFtZ291cm1ldC5jb20nLFxuXHQnc3BhbWdvdXJtZXQubmV0Jyxcblx0J3NwYW1nb3VybWV0Lm9yZycsXG5cdCdzcGFtaGVyZWxvdHMuY29tJyxcblx0J3NwYW1oZXJlcGxlYXNlLmNvbScsXG5cdCdzcGFtaG9sZS5jb20nLFxuXHQnc3BhbWlmeS5jb20nLFxuXHQnc3BhbWluYXRvci5kZScsXG5cdCdzcGFta2lsbC5pbmZvJyxcblx0J3NwYW1sLmNvbScsXG5cdCdzcGFtbC5kZScsXG5cdCdzcGFtbW90ZWwuY29tJyxcblx0J3NwYW1vYm94LmNvbScsXG5cdCdzcGFtb2ZmLmRlJyxcblx0J3NwYW1zYWxhZC5pbicsXG5cdCdzcGFtc2xpY2VyLmNvbScsXG5cdCdzcGFtc3BvdC5jb20nLFxuXHQnc3BhbXN0YWNrLm5ldCcsXG5cdCdzcGFtdGhpcy5jby51aycsXG5cdCdzcGFtdGhpc3BsZWFzZS5jb20nLFxuXHQnc3BhbXRyYWlsLmNvbScsXG5cdCdzcGFtdHJvbGwubmV0Jyxcblx0J3NwZWVkLjFzLmZyJyxcblx0J3NwaWtpby5jb20nLFxuXHQnc3Bvb2ZtYWlsLmRlJyxcblx0J3NxdWl6enkuZGUnLFxuXHQnc3NvaWEuY29tJyxcblx0J3N0YXJ0a2V5cy5jb20nLFxuXHQnc3RpbmtlZmluZ2VyLm5ldCcsXG5cdCdzdG9wLW15LXNwYW0uY29tJyxcblx0J3N0dWZmbWFpbC5kZScsXG5cdCdzdXBlci1hdXN3YWhsLmRlJyxcblx0J3N1cGVyZ3JlYXRtYWlsLmNvbScsXG5cdCdzdXBlcm1haWxlci5qcCcsXG5cdCdzdXBlcnJpdG8uY29tJyxcblx0J3N1cGVyc3RhY2hlbC5kZScsXG5cdCdzdXJlbWFpbC5pbmZvJyxcblx0J3N2ay5qcCcsXG5cdCdzd2VldHh4eC5kZScsXG5cdCd0YWd5b3Vyc2VsZi5jb20nLFxuXHQndGFsa2luYXRvci5jb20nLFxuXHQndGFwY2hpY3VvaWhvaS5jb20nLFxuXHQndGVld2Fycy5vcmcnLFxuXHQndGVsZW9zYXVycy54eXonLFxuXHQndGVsZXdvcm0uY29tJyxcblx0J3RlbGV3b3JtLnVzJyxcblx0J3RlbXAtbWFpbC5vcmcnLFxuXHQndGVtcC1tYWlsLnJ1Jyxcblx0J3RlbXAuZW1lcmFsZHdlYm1haWwuY29tJyxcblx0J3RlbXAuaGVhZHN0cm9uZy5kZScsXG5cdCd0ZW1wYWxpYXMuY29tJyxcblx0J3RlbXBlLW1haWwuY29tJyxcblx0J3RlbXBlbWFpbC5iaXonLFxuXHQndGVtcGVtYWlsLmNvLnphJyxcblx0J3RlbXBlbWFpbC5jb20nLFxuXHQndGVtcGVtYWlsLm5ldCcsXG5cdCd0ZW1wZW1haWwubmV0Jyxcblx0J3RlbXBpbmJveC5jby51aycsXG5cdCd0ZW1waW5ib3guY29tJyxcblx0J3RlbXBtYWlsLmV1Jyxcblx0J3RlbXBtYWlsLml0Jyxcblx0J3RlbXBtYWlsMi5jb20nLFxuXHQndGVtcG1haWxkZW1vLmNvbScsXG5cdCd0ZW1wbWFpbGVyLmNvbScsXG5cdCd0ZW1wbWFpbGVyLmRlJyxcblx0J3RlbXBvbWFpbC5mcicsXG5cdCd0ZW1wb3JhcmlseS5kZScsXG5cdCd0ZW1wb3JhcmlvZW1haWwuY29tLmJyJyxcblx0J3RlbXBvcmFyeWVtYWlsLm5ldCcsXG5cdCd0ZW1wb3JhcnllbWFpbC51cycsXG5cdCd0ZW1wb3Jhcnlmb3J3YXJkaW5nLmNvbScsXG5cdCd0ZW1wb3JhcnlpbmJveC5jb20nLFxuXHQndGVtcG9yYXJ5bWFpbGFkZHJlc3MuY29tJyxcblx0J3RlbXBza3kuY29tJyxcblx0J3RlbXB0aGUubmV0Jyxcblx0J3RlbXB5bWFpbC5jb20nLFxuXHQndGhhbmtzbm9zcGFtLmluZm8nLFxuXHQndGhhbmt5b3UyMDEwLmNvbScsXG5cdCd0aGMuc3QnLFxuXHQndGhlY2xvdWRpbmRleC5jb20nLFxuXHQndGhlbGltZXN0b25lcy5jb20nLFxuXHQndGhpc2lzbm90bXlyZWFsZW1haWwuY29tJyxcblx0J3RoaXNtYWlsLm5ldCcsXG5cdCd0aHJtYS5jb20nLFxuXHQndGhyb3dhd2F5ZW1haWxhZGRyZXNzLmNvbScsXG5cdCd0aWxpZW4uY29tJyxcblx0J3RpdHRiaXQuaW4nLFxuXHQndGl6aS5jb20nLFxuXHQndG1haWwud3MnLFxuXHQndG1haWxpbmF0b3IuY29tJyxcblx0J3RvaWVhLmNvbScsXG5cdCd0b29tYWlsLmJpeicsXG5cdCd0b3ByYW5rbGlzdC5kZScsXG5cdCd0cmFkZXJtYWlsLmluZm8nLFxuXHQndHJhc2gtYW1pbC5jb20nLFxuXHQndHJhc2gtbWFpbC5hdCcsXG5cdCd0cmFzaC1tYWlsLmNvbScsXG5cdCd0cmFzaC1tYWlsLmRlJyxcblx0J3RyYXNoMjAwOS5jb20nLFxuXHQndHJhc2gyMDEwLmNvbScsXG5cdCd0cmFzaDIwMTEuY29tJyxcblx0J3RyYXNoZGV2aWwuY29tJyxcblx0J3RyYXNoZGV2aWwuZGUnLFxuXHQndHJhc2hlbWFpbC5kZScsXG5cdCd0cmFzaG1haWwuYXQnLFxuXHQndHJhc2htYWlsLmNvbScsXG5cdCd0cmFzaG1haWwuZGUnLFxuXHQndHJhc2htYWlsLm1lJyxcblx0J3RyYXNobWFpbC5uZXQnLFxuXHQndHJhc2htYWlsLm9yZycsXG5cdCd0cmFzaG1haWwud3MnLFxuXHQndHJhc2htYWlsZXIuY29tJyxcblx0J3RyYXNoeW1haWwuY29tJyxcblx0J3RyYXNoeW1haWwubmV0Jyxcblx0J3RyYnZtLmNvbScsXG5cdCd0cmJ2bi5jb20nLFxuXHQndHJpYWxtYWlsLmRlJyxcblx0J3RyaWxsaWFucHJvLmNvbScsXG5cdCd0cnlhbGVydC5jb20nLFxuXHQndHVydWFsLmNvbScsXG5cdCd0d2lubWFpbC5kZScsXG5cdCd0d293ZWlyZHRyaWNrcy5jb20nLFxuXHQndHlsZGQuY29tJyxcblx0J3VnZ3Nyb2NrLmNvbScsXG5cdCd1bWFpbC5uZXQnLFxuXHQndXBsaWZ0bm93LmNvbScsXG5cdCd1cGxpcGh0LmNvbScsXG5cdCd1cm9pZC5jb20nLFxuXHQndXMuYWYnLFxuXHQndXNlcm5hbWUuZTR3YXJkLmNvbScsXG5cdCd2ZW5vbXBlbi5jb20nLFxuXHQndmVyeXJlYWxlbWFpbC5jb20nLFxuXHQndmlkY2hhcnQuY29tJyxcblx0J3ZpZGl0YWcuY29tJyxcblx0J3ZpZXdjYXN0bWVkaWEuY29tJyxcblx0J3ZpZXdjYXN0bWVkaWEubmV0Jyxcblx0J3ZpZXdjYXN0bWVkaWEub3JnJyxcblx0J3ZpZXdjYXN0bWVkaWFlJyxcblx0J3ZpcmFscGxheXMuY29tJyxcblx0J3ZrY29kZS5ydScsXG5cdCd2b21vdG8uY29tJyxcblx0J3Zwbi5zdCcsXG5cdCd2c2ltY2FyZC5jb20nLFxuXHQndnViYnkuY29tJyxcblx0J3dhbGFsYS5vcmcnLFxuXHQnd2Fsa21haWwubmV0Jyxcblx0J3dhbGttYWlsLnJ1Jyxcblx0J3dhc3RlbGFuZC5yZmM4MjIub3JnJyxcblx0J3dlYmVtYWlsLm1lJyxcblx0J3dlYm00aWwuaW5mbycsXG5cdCd3ZWJ1c2VyLmluJyxcblx0J3dlZS5teScsXG5cdCd3ZWctd2VyZi1lbWFpbC5kZScsXG5cdCd3ZWd3ZXJmLWVtYWlsLWFkZHJlc3Nlbi5kZScsXG5cdCd3ZWd3ZXJmLWVtYWlscy5kZScsXG5cdCd3ZWd3ZXJmYWRyZXNzZS5kZScsXG5cdCd3ZWd3ZXJmZW1haWwuY29tJyxcblx0J3dlZ3dlcmZlbWFpbC5kZScsXG5cdCd3ZWd3ZXJmbWFpbC5kZScsXG5cdCd3ZWd3ZXJmbWFpbC5pbmZvJyxcblx0J3dlZ3dlcmZtYWlsLm5ldCcsXG5cdCd3ZWd3ZXJmbWFpbC5vcmcnLFxuXHQnd2V0cmFpbmJheWFyZWEuY29tJyxcblx0J3dldHJhaW5iYXlhcmVhLm9yZycsXG5cdCd3aDRmLm9yZycsXG5cdCd3aGF0aWFhcy5jb20nLFxuXHQnd2hhdHBhYXMuY29tJyxcblx0J3doYXRzYWFzLmNvbScsXG5cdCd3aG9weS5jb20nLFxuXHQnd2h0amRkbi4zM21haWwuY29tJyxcblx0J3doeXNwYW0ubWUnLFxuXHQnd2lsZW1haWwuY29tJyxcblx0J3dpbGxoYWNrZm9yZm9vZC5iaXonLFxuXHQnd2lsbHNlbGZkZXN0cnVjdC5jb20nLFxuXHQnd2luZW1hdmVuLmluZm8nLFxuXHQnd3JvbmdoZWFkLmNvbScsXG5cdCd3dXp1cC5uZXQnLFxuXHQnd3V6dXBtYWlsLm5ldCcsXG5cdCd3d3cuZTR3YXJkLmNvbScsXG5cdCd3d3cuZ2lzaHB1cHB5LmNvbScsXG5cdCd3d3cubWFpbGluYXRvci5jb20nLFxuXHQnd3d3bmV3LmV1Jyxcblx0J3guaXA2LmxpJyxcblx0J3hhZ2xvby5jb20nLFxuXHQneGVtYXBzLmNvbScsXG5cdCd4ZW50cy5jb20nLFxuXHQneG1haWx5LmNvbScsXG5cdCd4b3h5Lm5ldCcsXG5cdCd4eXpmcmVlLm5ldCcsXG5cdCd5YXBwZWQubmV0Jyxcblx0J3llYWgubmV0Jyxcblx0J3llcC5pdCcsXG5cdCd5b2dhbWF2ZW4uY29tJyxcblx0J3lvbWFpbC5pbmZvJyxcblx0J3lvcG1haWwuY29tJyxcblx0J3lvcG1haWwuZnInLFxuXHQneW9wbWFpbC5uZXQnLFxuXHQneW91cmRvbWFpbi5jb20nLFxuXHQneXBtYWlsLndlYmFybmFrLmZyLmV1Lm9yZycsXG5cdCd5dXVyb2suY29tJyxcblx0J3oxcC5iaXonLFxuXHQnemEuY29tJyxcblx0J3plaG5taW51dGVuLmRlJyxcblx0J3plaG5taW51dGVubWFpbC5kZScsXG5cdCd6ZXRtYWlsLmNvbScsXG5cdCd6aXBweW1haWwuaW5mbycsXG5cdCd6b2F4ZS5jb20nLFxuXHQnem9lbWFpbC5jb20nLFxuXHQnem9lbWFpbC5uZXQnLFxuXHQnem9lbWFpbC5vcmcnLFxuXHQnem9tZy5pbmZvJyxcblx0J3p4Y3YuY29tJyxcblx0J3p4Y3Zibm0uY29tJyxcblx0J3p6ei5jb20nLFxuXTtcblxuIiwiaW1wb3J0IElNQVAgZnJvbSAnaW1hcCc7XG5pbXBvcnQgUE9QMyBmcm9tICdwb3BsaWInO1xuaW1wb3J0IHsgc2ltcGxlUGFyc2VyIH0gZnJvbSAnbWFpbHBhcnNlcic7XG5cbmV4cG9ydCBjbGFzcyBJTUFQSW50ZXJjZXB0ZXIge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLmltYXAgPSBuZXcgSU1BUCh7XG5cdFx0XHR1c2VyOiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X1VzZXJuYW1lJyksXG5cdFx0XHRwYXNzd29yZDogUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9QYXNzd29yZCcpLFxuXHRcdFx0aG9zdDogUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9Ib3N0JyksXG5cdFx0XHRwb3J0OiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X1BvcnQnKSxcblx0XHRcdGRlYnVnOiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X0RlYnVnJykgPyBjb25zb2xlLmxvZyA6IGZhbHNlLFxuXHRcdFx0dGxzOiAhUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9JZ25vcmVUTFMnKSxcblx0XHRcdGNvbm5UaW1lb3V0OiAzMDAwMCxcblx0XHRcdGtlZXBhbGl2ZTogdHJ1ZSxcblx0XHR9KTtcblxuXHRcdHRoaXMuZGVsZXRlID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9EZWxldGUnKSA/IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfRGVsZXRlJykgOiB0cnVlO1xuXG5cdFx0Ly8gT24gc3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZC5cblx0XHR0aGlzLmltYXAub24oJ3JlYWR5JywgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCgoKSA9PiB7XG5cdFx0XHRpZiAodGhpcy5pbWFwLnN0YXRlICE9PSAnZGlzY29ubmVjdGVkJykge1xuXHRcdFx0XHR0aGlzLm9wZW5JbmJveChNZXRlb3IuYmluZEVudmlyb25tZW50KChlcnIpID0+IHtcblx0XHRcdFx0XHRpZiAoZXJyKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlcnI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGZldGNoIG5ldyBlbWFpbHMgJiB3YWl0IFtJRExFXVxuXHRcdFx0XHRcdHRoaXMuZ2V0RW1haWxzKCk7XG5cblx0XHRcdFx0XHQvLyBJZiBuZXcgbWVzc2FnZSBhcnJpdmVkLCBmZXRjaCB0aGVtXG5cdFx0XHRcdFx0dGhpcy5pbWFwLm9uKCdtYWlsJywgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCgoKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLmdldEVtYWlscygpO1xuXHRcdFx0XHRcdH0pKTtcblx0XHRcdFx0fSkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ0lNQVAgZGlkbm90IGNvbm5lY3RlZC4nKTtcblx0XHRcdFx0dGhpcy5pbWFwLmVuZCgpO1xuXHRcdFx0fVxuXHRcdH0pKTtcblxuXHRcdHRoaXMuaW1hcC5vbignZXJyb3InLCAoZXJyKSA9PiB7XG5cdFx0XHRjb25zb2xlLmxvZygnRXJyb3Igb2NjdXJyZWQgLi4uJyk7XG5cdFx0XHR0aHJvdyBlcnI7XG5cdFx0fSk7XG5cdH1cblxuXHRvcGVuSW5ib3goY2IpIHtcblx0XHR0aGlzLmltYXAub3BlbkJveCgnSU5CT1gnLCBmYWxzZSwgY2IpO1xuXHR9XG5cblx0c3RhcnQoKSB7XG5cdFx0dGhpcy5pbWFwLmNvbm5lY3QoKTtcblx0fVxuXG5cdGlzQWN0aXZlKCkge1xuXHRcdGlmICh0aGlzLmltYXAgJiYgdGhpcy5pbWFwLnN0YXRlICYmIHRoaXMuaW1hcC5zdGF0ZSA9PT0gJ2Rpc2Nvbm5lY3RlZCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHN0b3AoY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24pIHtcblx0XHR0aGlzLmltYXAuZW5kKCk7XG5cdFx0dGhpcy5pbWFwLm9uY2UoJ2VuZCcsIGNhbGxiYWNrKTtcblx0fVxuXG5cdHJlc3RhcnQoKSB7XG5cdFx0dGhpcy5zdG9wKCgpID0+IHtcblx0XHRcdGNvbnNvbGUubG9nKCdSZXN0YXJ0aW5nIElNQVAgLi4uLicpO1xuXHRcdFx0dGhpcy5zdGFydCgpO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gRmV0Y2ggYWxsIFVOU0VFTiBtZXNzYWdlcyBhbmQgcGFzcyB0aGVtIGZvciBmdXJ0aGVyIHByb2Nlc3Npbmdcblx0Z2V0RW1haWxzKCkge1xuXHRcdHRoaXMuaW1hcC5zZWFyY2goWydVTlNFRU4nXSwgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCgoZXJyLCBuZXdFbWFpbHMpID0+IHtcblx0XHRcdGlmIChlcnIpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coZXJyKTtcblx0XHRcdFx0dGhyb3cgZXJyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBuZXdFbWFpbHMgPT4gYXJyYXkgY29udGFpbmluZyBzZXJpYWxzIG9mIHVuc2VlbiBtZXNzYWdlc1xuXHRcdFx0aWYgKG5ld0VtYWlscy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGNvbnN0IGYgPSB0aGlzLmltYXAuZmV0Y2gobmV3RW1haWxzLCB7XG5cdFx0XHRcdFx0Ly8gZmV0Y2ggaGVhZGVycyAmIGZpcnN0IGJvZHkgcGFydC5cblx0XHRcdFx0XHRib2RpZXM6IFsnSEVBREVSLkZJRUxEUyAoRlJPTSBUTyBEQVRFIE1FU1NBR0UtSUQpJywgJzEnXSxcblx0XHRcdFx0XHRzdHJ1Y3Q6IHRydWUsXG5cdFx0XHRcdFx0bWFya1NlZW46IHRydWUsXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGYub24oJ21lc3NhZ2UnLCBNZXRlb3IuYmluZEVudmlyb25tZW50KChtc2csIHNlcW5vKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgZW1haWwgPSB7fTtcblxuXHRcdFx0XHRcdG1zZy5vbignYm9keScsIChzdHJlYW0sIGluZm8pID0+IHtcblx0XHRcdFx0XHRcdGxldCBoZWFkZXJCdWZmZXIgPSAnJztcblx0XHRcdFx0XHRcdGxldCBib2R5QnVmZmVyID0gJyc7XG5cblx0XHRcdFx0XHRcdHN0cmVhbS5vbignZGF0YScsIChjaHVuaykgPT4ge1xuXHRcdFx0XHRcdFx0XHRpZiAoaW5mby53aGljaCA9PT0gJzEnKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ym9keUJ1ZmZlciArPSBjaHVuay50b1N0cmluZygndXRmOCcpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGhlYWRlckJ1ZmZlciArPSBjaHVuay50b1N0cmluZygndXRmOCcpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdFx0c3RyZWFtLm9uY2UoJ2VuZCcsICgpID0+IHtcblx0XHRcdFx0XHRcdFx0aWYgKGluZm8ud2hpY2ggPT09ICcxJykge1xuXHRcdFx0XHRcdFx0XHRcdGVtYWlsLmJvZHkgPSBib2R5QnVmZmVyO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdC8vIHBhcnNlIGhlYWRlcnNcblx0XHRcdFx0XHRcdFx0XHRlbWFpbC5oZWFkZXJzID0gSU1BUC5wYXJzZUhlYWRlcihoZWFkZXJCdWZmZXIpO1xuXG5cdFx0XHRcdFx0XHRcdFx0ZW1haWwuaGVhZGVycy50byA9IGVtYWlsLmhlYWRlcnMudG9bMF07XG5cdFx0XHRcdFx0XHRcdFx0ZW1haWwuaGVhZGVycy5kYXRlID0gZW1haWwuaGVhZGVycy5kYXRlWzBdO1xuXHRcdFx0XHRcdFx0XHRcdGVtYWlsLmhlYWRlcnMuZnJvbSA9IGVtYWlsLmhlYWRlcnMuZnJvbVswXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHQvLyBPbiBmZXRjaGVkIGVhY2ggbWVzc2FnZSwgcGFzcyBpdCBmdXJ0aGVyXG5cdFx0XHRcdFx0bXNnLm9uY2UoJ2VuZCcsIE1ldGVvci5iaW5kRW52aXJvbm1lbnQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gZGVsZXRlIG1lc3NhZ2UgZnJvbSBpbmJveFxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuZGVsZXRlKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuaW1hcC5zZXEuYWRkRmxhZ3Moc2Vxbm8sICdEZWxldGVkJywgKGVycikgPT4ge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChlcnIpIHsgY29uc29sZS5sb2coYE1hcmsgZGVsZXRlZCBlcnJvcjogJHsgZXJyIH1gKTsgfVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFJvY2tldENoYXQucHJvY2Vzc0RpcmVjdEVtYWlsKGVtYWlsKTtcblx0XHRcdFx0XHR9KSk7XG5cdFx0XHRcdH0pKTtcblx0XHRcdFx0Zi5vbmNlKCdlcnJvcicsIChlcnIpID0+IHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhgRmV0Y2ggZXJyb3I6ICR7IGVyciB9YCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pKTtcblx0fVxufVxuXG5leHBvcnQgY2xhc3MgUE9QM0ludGVyY2VwdGVyIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5wb3AzID0gbmV3IFBPUDMoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9Qb3J0JyksIFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfSG9zdCcpLCB7XG5cdFx0XHRlbmFibGV0bHM6ICFSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X0lnbm9yZVRMUycpLFxuXHRcdFx0ZGVidWc6IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfRGVidWcnKSA/IGNvbnNvbGUubG9nIDogZmFsc2UsXG5cdFx0fSk7XG5cblx0XHR0aGlzLnRvdGFsTXNnQ291bnQgPSAwO1xuXHRcdHRoaXMuY3VycmVudE1zZ0NvdW50ID0gMDtcblxuXHRcdHRoaXMucG9wMy5vbignY29ubmVjdCcsIE1ldGVvci5iaW5kRW52aXJvbm1lbnQoKCkgPT4ge1xuXHRcdFx0dGhpcy5wb3AzLmxvZ2luKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfVXNlcm5hbWUnKSwgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9QYXNzd29yZCcpKTtcblx0XHR9KSk7XG5cblx0XHR0aGlzLnBvcDMub24oJ2xvZ2luJywgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCgoc3RhdHVzKSA9PiB7XG5cdFx0XHRpZiAoc3RhdHVzKSB7XG5cdFx0XHRcdC8vIHJ1biBvbiBzdGFydFxuXHRcdFx0XHR0aGlzLnBvcDMubGlzdCgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ1VuYWJsZSB0byBMb2ctaW4gLi4uLicpO1xuXHRcdFx0fVxuXHRcdH0pKTtcblxuXHRcdC8vIG9uIGdldHRpbmcgbGlzdCBvZiBhbGwgZW1haWxzXG5cdFx0dGhpcy5wb3AzLm9uKCdsaXN0JywgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCgoc3RhdHVzLCBtc2djb3VudCkgPT4ge1xuXHRcdFx0aWYgKHN0YXR1cykge1xuXHRcdFx0XHRpZiAobXNnY291bnQgPiAwKSB7XG5cdFx0XHRcdFx0dGhpcy50b3RhbE1zZ0NvdW50ID0gbXNnY291bnQ7XG5cdFx0XHRcdFx0dGhpcy5jdXJyZW50TXNnQ291bnQgPSAxO1xuXHRcdFx0XHRcdC8vIFJldHJpZXZlIGVtYWlsXG5cdFx0XHRcdFx0dGhpcy5wb3AzLnJldHIodGhpcy5jdXJyZW50TXNnQ291bnQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMucG9wMy5xdWl0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdDYW5ub3QgR2V0IEVtYWlscyAuLi4uJyk7XG5cdFx0XHR9XG5cdFx0fSkpO1xuXG5cdFx0Ly8gb24gcmV0cmlldmVkIGVtYWlsXG5cdFx0dGhpcy5wb3AzLm9uKCdyZXRyJywgTWV0ZW9yLmJpbmRFbnZpcm9ubWVudCgoc3RhdHVzLCBtc2dudW1iZXIsIGRhdGEpID0+IHtcblx0XHRcdGlmIChzdGF0dXMpIHtcblx0XHRcdFx0Ly8gcGFyc2UgcmF3IGVtYWlsIGRhdGEgdG8gIEpTT04gb2JqZWN0XG5cdFx0XHRcdHNpbXBsZVBhcnNlcihkYXRhLCBNZXRlb3IuYmluZEVudmlyb25tZW50KChlcnIsIG1haWwpID0+IHtcblx0XHRcdFx0XHR0aGlzLmluaXRpYWxQcm9jZXNzKG1haWwpO1xuXHRcdFx0XHR9KSk7XG5cblx0XHRcdFx0dGhpcy5jdXJyZW50TXNnQ291bnQgKz0gMTtcblxuXHRcdFx0XHQvLyBkZWxldGUgZW1haWxcblx0XHRcdFx0dGhpcy5wb3AzLmRlbGUobXNnbnVtYmVyKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdDYW5ub3QgUmV0cmlldmUgTWVzc2FnZSAuLi4uJyk7XG5cdFx0XHR9XG5cdFx0fSkpO1xuXG5cdFx0Ly8gb24gZW1haWwgZGVsZXRlZFxuXHRcdHRoaXMucG9wMy5vbignZGVsZScsIE1ldGVvci5iaW5kRW52aXJvbm1lbnQoKHN0YXR1cykgPT4ge1xuXHRcdFx0aWYgKHN0YXR1cykge1xuXHRcdFx0XHQvLyBnZXQgbmV4dCBlbWFpbFxuXHRcdFx0XHRpZiAodGhpcy5jdXJyZW50TXNnQ291bnQgPD0gdGhpcy50b3RhbE1zZ0NvdW50KSB7XG5cdFx0XHRcdFx0dGhpcy5wb3AzLnJldHIodGhpcy5jdXJyZW50TXNnQ291bnQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHBhcnNlZCBhbGwgbWVzc2FnZXMuLiBzbyBxdWl0dGluZ1xuXHRcdFx0XHRcdHRoaXMucG9wMy5xdWl0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdDYW5ub3QgRGVsZXRlIE1lc3NhZ2UuLi4uJyk7XG5cdFx0XHR9XG5cdFx0fSkpO1xuXG5cdFx0Ly8gaW52YWxpZCBzZXJ2ZXIgc3RhdGVcblx0XHR0aGlzLnBvcDMub24oJ2ludmFsaWQtc3RhdGUnLCBmdW5jdGlvbihjbWQpIHtcblx0XHRcdGNvbnNvbGUubG9nKGBJbnZhbGlkIHN0YXRlLiBZb3UgdHJpZWQgY2FsbGluZyAkeyBjbWQgfWApO1xuXHRcdH0pO1xuXG5cdFx0Ly8gbG9ja2VkID0+IGNvbW1hbmQgYWxyZWFkeSBydW5uaW5nLCBub3QgZmluaXNoZWQgeWV0XG5cdFx0dGhpcy5wb3AzLm9uKCdsb2NrZWQnLCBmdW5jdGlvbihjbWQpIHtcblx0XHRcdGNvbnNvbGUubG9nKGBDdXJyZW50IGNvbW1hbmQgaGFzIG5vdCBmaW5pc2hlZCB5ZXQuIFlvdSB0cmllZCBjYWxsaW5nICR7IGNtZCB9YCk7XG5cdFx0fSk7XG5cdH1cblxuXHRpbml0aWFsUHJvY2VzcyhtYWlsKSB7XG5cdFx0Y29uc3QgZW1haWwgPSB7XG5cdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdGZyb206IG1haWwuZnJvbS50ZXh0LFxuXHRcdFx0XHR0bzogbWFpbC50by50ZXh0LFxuXHRcdFx0XHRkYXRlOiBtYWlsLmRhdGUsXG5cdFx0XHRcdCdtZXNzYWdlLWlkJzogbWFpbC5tZXNzYWdlSWQsXG5cdFx0XHR9LFxuXHRcdFx0Ym9keTogbWFpbC50ZXh0LFxuXHRcdH07XG5cblx0XHRSb2NrZXRDaGF0LnByb2Nlc3NEaXJlY3RFbWFpbChlbWFpbCk7XG5cdH1cbn1cblxuZXhwb3J0IGNsYXNzIFBPUDNIZWxwZXIge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcblx0fVxuXG5cdHN0YXJ0KCkge1xuXHRcdC8vIHJ1biBldmVyeSB4LW1pbnV0ZXNcblx0XHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9GcmVxdWVuY3knKSkge1xuXHRcdFx0Um9ja2V0Q2hhdC5QT1AzID0gbmV3IFBPUDNJbnRlcmNlcHRlcigpO1xuXG5cdFx0XHR0aGlzLnJ1bm5pbmcgPSBNZXRlb3Iuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0XHQvLyBnZXQgbmV3IGVtYWlscyBhbmQgcHJvY2Vzc1xuXHRcdFx0XHRSb2NrZXRDaGF0LlBPUDMgPSBuZXcgUE9QM0ludGVyY2VwdGVyKCk7XG5cdFx0XHR9LCBNYXRoLm1heChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X0ZyZXF1ZW5jeScpICogNjAgKiAxMDAwLCAyICogNjAgKiAxMDAwKSk7XG5cdFx0fVxuXHR9XG5cblx0aXNBY3RpdmUoKSB7XG5cdFx0cmV0dXJuIHRoaXMucnVubmluZztcblx0fVxuXG5cdHN0b3AoY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24pIHtcblx0XHRpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XG5cdFx0XHRNZXRlb3IuY2xlYXJJbnRlcnZhbCh0aGlzLnJ1bm5pbmcpO1xuXHRcdH1cblx0XHRjYWxsYmFjaygpO1xuXHR9XG59XG4iLCIvLyBEbyBub3QgZGlzY2xvc2UgaWYgdXNlciBleGlzdHMgd2hlbiBwYXNzd29yZCBpcyBpbnZhbGlkXG5jb25zdCB7IF9ydW5Mb2dpbkhhbmRsZXJzIH0gPSBBY2NvdW50cztcbkFjY291bnRzLl9ydW5Mb2dpbkhhbmRsZXJzID0gZnVuY3Rpb24obWV0aG9kSW52b2NhdGlvbiwgb3B0aW9ucykge1xuXHRjb25zdCByZXN1bHQgPSBfcnVuTG9naW5IYW5kbGVycy5jYWxsKEFjY291bnRzLCBtZXRob2RJbnZvY2F0aW9uLCBvcHRpb25zKTtcblxuXHRpZiAocmVzdWx0LmVycm9yICYmIHJlc3VsdC5lcnJvci5yZWFzb24gPT09ICdJbmNvcnJlY3QgcGFzc3dvcmQnKSB7XG5cdFx0cmVzdWx0LmVycm9yID0gbmV3IE1ldGVvci5FcnJvcig0MDMsICdVc2VyIG5vdCBmb3VuZCcpO1xuXHR9XG5cblx0cmV0dXJuIHJlc3VsdDtcbn07XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuLyoqXG4gKiBDaGVjaHMgaWYgYSBtZXNzYWdlcyBjb250YWlucyBhIHVzZXIgaGlnaGxpZ2h0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7YXJyYXl8dW5kZWZpbmVkfSBoaWdobGlnaHRzXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1lc3NhZ2VDb250YWluc0hpZ2hsaWdodChtZXNzYWdlLCBoaWdobGlnaHRzKSB7XG5cdGlmICghIGhpZ2hsaWdodHMgfHwgaGlnaGxpZ2h0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhpZ2hsaWdodHMuc29tZShmdW5jdGlvbihoaWdobGlnaHQpIHtcblx0XHRjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKHMuZXNjYXBlUmVnRXhwKGhpZ2hsaWdodCksICdpJyk7XG5cdFx0cmV0dXJuIHJlZ2V4cC50ZXN0KG1lc3NhZ2UubXNnKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIG5vdGlmeVVzZXJzT25NZXNzYWdlKG1lc3NhZ2UsIHJvb20pIHtcblx0Ly8gc2tpcHMgdGhpcyBjYWxsYmFjayBpZiB0aGUgbWVzc2FnZSB3YXMgZWRpdGVkIGFuZCBpbmNyZW1lbnRzIGl0IGlmIHRoZSBlZGl0IHdhcyB3YXkgaW4gdGhlIHBhc3QgKGFrYSBpbXBvcnRlZClcblx0aWYgKG1lc3NhZ2UuZWRpdGVkQXQgJiYgTWF0aC5hYnMobW9tZW50KG1lc3NhZ2UuZWRpdGVkQXQpLmRpZmYoKSkgPiA2MDAwMCkge1xuXHRcdC8vIFRPRE86IFJldmlldyBhcyBJIGFtIG5vdCBzdXJlIGhvdyBlbHNlIHRvIGdldCBhcm91bmQgdGhpcyBhcyB0aGUgaW5jcmVtZW50aW5nIG9mIHRoZSBtc2dzIGNvdW50IHNob3VsZG4ndCBiZSBpbiB0aGlzIGNhbGxiYWNrXG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuaW5jTXNnQ291bnRCeUlkKG1lc3NhZ2UucmlkLCAxKTtcblx0XHRyZXR1cm4gbWVzc2FnZTtcblx0fSBlbHNlIGlmIChtZXNzYWdlLmVkaXRlZEF0KSB7XG5cblx0XHQvLyBvbmx5IHVwZGF0ZXMgbGFzdCBtZXNzYWdlIGlmIGl0IHdhcyBlZGl0ZWQgKHNraXAgcmVzdCBvZiBjYWxsYmFjaylcblx0XHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1N0b3JlX0xhc3RfTWVzc2FnZScpICYmICghcm9vbS5sYXN0TWVzc2FnZSB8fCByb29tLmxhc3RNZXNzYWdlLl9pZCA9PT0gbWVzc2FnZS5faWQpKSB7XG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5zZXRMYXN0TWVzc2FnZUJ5SWQobWVzc2FnZS5yaWQsIG1lc3NhZ2UpO1xuXHRcdH1cblx0XHRyZXR1cm4gbWVzc2FnZTtcblx0fVxuXG5cdGlmIChtZXNzYWdlLnRzICYmIE1hdGguYWJzKG1vbWVudChtZXNzYWdlLnRzKS5kaWZmKCkpID4gNjAwMDApIHtcblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5pbmNNc2dDb3VudEJ5SWQobWVzc2FnZS5yaWQsIDEpO1xuXHRcdHJldHVybiBtZXNzYWdlO1xuXHR9XG5cblx0aWYgKHJvb20gIT0gbnVsbCkge1xuXHRcdGxldCB0b0FsbCA9IGZhbHNlO1xuXHRcdGxldCB0b0hlcmUgPSBmYWxzZTtcblx0XHRjb25zdCBtZW50aW9uSWRzID0gW107XG5cdFx0Y29uc3QgaGlnaGxpZ2h0c0lkcyA9IFtdO1xuXHRcdGNvbnN0IGhpZ2hsaWdodHMgPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRCeVJvb21XaXRoVXNlckhpZ2hsaWdodHMocm9vbS5faWQsIHsgZmllbGRzOiB7IHVzZXJIaWdobGlnaHRzOiAxLCAndS5faWQnOiAxIH0gfSkuZmV0Y2goKTtcblx0XHRpZiAobWVzc2FnZS5tZW50aW9ucyAhPSBudWxsKSB7XG5cdFx0XHRtZXNzYWdlLm1lbnRpb25zLmZvckVhY2goZnVuY3Rpb24obWVudGlvbikge1xuXHRcdFx0XHRpZiAoIXRvQWxsICYmIG1lbnRpb24uX2lkID09PSAnYWxsJykge1xuXHRcdFx0XHRcdHRvQWxsID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXRvSGVyZSAmJiBtZW50aW9uLl9pZCA9PT0gJ2hlcmUnKSB7XG5cdFx0XHRcdFx0dG9IZXJlID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobWVudGlvbi5faWQgIT09IG1lc3NhZ2UudS5faWQpIHtcblx0XHRcdFx0XHRtZW50aW9uSWRzLnB1c2gobWVudGlvbi5faWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRoaWdobGlnaHRzLmZvckVhY2goZnVuY3Rpb24oc3Vic2NyaXB0aW9uKSB7XG5cdFx0XHRpZiAoc3Vic2NyaXB0aW9uLnVzZXJIaWdobGlnaHRzICYmIG1lc3NhZ2VDb250YWluc0hpZ2hsaWdodChtZXNzYWdlLCBzdWJzY3JpcHRpb24udXNlckhpZ2hsaWdodHMpKSB7XG5cdFx0XHRcdGlmIChzdWJzY3JpcHRpb24udS5faWQgIT09IG1lc3NhZ2UudS5faWQpIHtcblx0XHRcdFx0XHRoaWdobGlnaHRzSWRzLnB1c2goc3Vic2NyaXB0aW9uLnUuX2lkKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYgKHJvb20udCA9PT0gJ2QnKSB7XG5cdFx0XHRjb25zdCB1bnJlYWRDb3VudERNID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1VucmVhZF9Db3VudF9ETScpO1xuXG5cdFx0XHRpZiAodW5yZWFkQ291bnRETSA9PT0gJ2FsbF9tZXNzYWdlcycpIHtcblx0XHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5pbmNVbnJlYWRGb3JSb29tSWRFeGNsdWRpbmdVc2VySWQocm9vbS5faWQsIG1lc3NhZ2UudS5faWQpO1xuXHRcdFx0fSBlbHNlIGlmICh0b0FsbCB8fCB0b0hlcmUpIHtcblx0XHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5pbmNHcm91cE1lbnRpb25zQW5kVW5yZWFkRm9yUm9vbUlkRXhjbHVkaW5nVXNlcklkKHJvb20uX2lkLCBtZXNzYWdlLnUuX2lkLCAxLCAxKTtcblx0XHRcdH0gZWxzZSBpZiAoKG1lbnRpb25JZHMgJiYgbWVudGlvbklkcy5sZW5ndGggPiAwKSB8fCAoaGlnaGxpZ2h0c0lkcyAmJiBoaWdobGlnaHRzSWRzLmxlbmd0aCA+IDApKSB7XG5cdFx0XHRcdFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuaW5jVXNlck1lbnRpb25zQW5kVW5yZWFkRm9yUm9vbUlkQW5kVXNlcklkcyhyb29tLl9pZCwgXy5jb21wYWN0KF8udW5pcXVlKG1lbnRpb25JZHMuY29uY2F0KGhpZ2hsaWdodHNJZHMpKSksIDEsIDEpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCB1bnJlYWRDb3VudCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVbnJlYWRfQ291bnQnKTtcblxuXHRcdFx0aWYgKHRvQWxsIHx8IHRvSGVyZSkge1xuXHRcdFx0XHRsZXQgaW5jVW5yZWFkID0gMDtcblx0XHRcdFx0aWYgKFsnYWxsX21lc3NhZ2VzJywgJ2dyb3VwX21lbnRpb25zX29ubHknLCAndXNlcl9hbmRfZ3JvdXBfbWVudGlvbnNfb25seSddLmluY2x1ZGVzKHVucmVhZENvdW50KSkge1xuXHRcdFx0XHRcdGluY1VucmVhZCA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5pbmNHcm91cE1lbnRpb25zQW5kVW5yZWFkRm9yUm9vbUlkRXhjbHVkaW5nVXNlcklkKHJvb20uX2lkLCBtZXNzYWdlLnUuX2lkLCAxLCBpbmNVbnJlYWQpO1xuXG5cdFx0XHR9IGVsc2UgaWYgKChtZW50aW9uSWRzICYmIG1lbnRpb25JZHMubGVuZ3RoID4gMCkgfHwgKGhpZ2hsaWdodHNJZHMgJiYgaGlnaGxpZ2h0c0lkcy5sZW5ndGggPiAwKSkge1xuXHRcdFx0XHRsZXQgaW5jVW5yZWFkID0gMDtcblx0XHRcdFx0aWYgKFsnYWxsX21lc3NhZ2VzJywgJ3VzZXJfbWVudGlvbnNfb25seScsICd1c2VyX2FuZF9ncm91cF9tZW50aW9uc19vbmx5J10uaW5jbHVkZXModW5yZWFkQ291bnQpKSB7XG5cdFx0XHRcdFx0aW5jVW5yZWFkID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmluY1VzZXJNZW50aW9uc0FuZFVucmVhZEZvclJvb21JZEFuZFVzZXJJZHMocm9vbS5faWQsIF8uY29tcGFjdChfLnVuaXF1ZShtZW50aW9uSWRzLmNvbmNhdChoaWdobGlnaHRzSWRzKSkpLCAxLCBpbmNVbnJlYWQpO1xuXHRcdFx0fSBlbHNlIGlmICh1bnJlYWRDb3VudCA9PT0gJ2FsbF9tZXNzYWdlcycpIHtcblx0XHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5pbmNVbnJlYWRGb3JSb29tSWRFeGNsdWRpbmdVc2VySWQocm9vbS5faWQsIG1lc3NhZ2UudS5faWQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFVwZGF0ZSBhbGwgdGhlIHJvb20gYWN0aXZpdHkgdHJhY2tlciBmaWVsZHNcblx0Ly8gVGhpcyBtZXRob2QgdGFrZSBzbyBsb25nIHRvIGV4ZWN1dGUgb24gZ2llbnQgcm9vbXMgY3V6IGl0IHdpbGwgdHJ1Z2dlciB0aGUgY2FjaGUgcmVidWlsZCBmb3IgdGhlIHJlbGVhdGlvbnMgb2YgdGhhdCByb29tXG5cdFJvY2tldENoYXQubW9kZWxzLlJvb21zLmluY01zZ0NvdW50QW5kU2V0TGFzdE1lc3NhZ2VCeUlkKG1lc3NhZ2UucmlkLCAxLCBtZXNzYWdlLnRzLCBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU3RvcmVfTGFzdF9NZXNzYWdlJykgJiYgbWVzc2FnZSk7XG5cdC8vIFVwZGF0ZSBhbGwgb3RoZXIgc3Vic2NyaXB0aW9ucyB0byBhbGVydCB0aGVpciBvd25lcnMgYnV0IHdpdG91dCBpbmNyZW1lbnRpbmdcblx0Ly8gdGhlIHVucmVhZCBjb3VudGVyLCBhcyBpdCBpcyBvbmx5IGZvciBtZW50aW9ucyBhbmQgZGlyZWN0IG1lc3NhZ2VzXG5cdC8vIFdlIG5vdyBzZXQgYWxlcnQgYW5kIG9wZW4gcHJvcGVydGllcyBpbiB0d28gc2VwYXJhdGUgdXBkYXRlIGNvbW1hbmRzLiBUaGlzIHByb3ZlZCB0byBiZSBtb3JlIGVmZmljaWVudCBvbiBNb25nb0RCIC0gYmVjYXVzZSBpdCB1c2VzIGEgbW9yZSBlZmZpY2llbnQgaW5kZXguXG5cdFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuc2V0QWxlcnRGb3JSb29tSWRFeGNsdWRpbmdVc2VySWQobWVzc2FnZS5yaWQsIG1lc3NhZ2UudS5faWQpO1xuXHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLnNldE9wZW5Gb3JSb29tSWRFeGNsdWRpbmdVc2VySWQobWVzc2FnZS5yaWQsIG1lc3NhZ2UudS5faWQpO1xuXG5cdHJldHVybiBtZXNzYWdlO1xufVxuXG5Sb2NrZXRDaGF0LmNhbGxiYWNrcy5hZGQoJ2FmdGVyU2F2ZU1lc3NhZ2UnLCBub3RpZnlVc2Vyc09uTWVzc2FnZSwgUm9ja2V0Q2hhdC5jYWxsYmFja3MucHJpb3JpdHkuTE9XLCAnbm90aWZ5VXNlcnNPbk1lc3NhZ2UnKTtcbiIsImltcG9ydCB7IEVtYWlsUmVwbHlQYXJzZXIgYXMgcmVwbHkgfSBmcm9tICdlbWFpbHJlcGx5cGFyc2VyJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuUm9ja2V0Q2hhdC5wcm9jZXNzRGlyZWN0RW1haWwgPSBmdW5jdGlvbihlbWFpbCkge1xuXHRmdW5jdGlvbiBzZW5kTWVzc2FnZShlbWFpbCkge1xuXHRcdGNvbnN0IG1lc3NhZ2UgPSB7XG5cdFx0XHR0czogbmV3IERhdGUoZW1haWwuaGVhZGVycy5kYXRlKSxcblx0XHRcdG1zZzogZW1haWwuYm9keSxcblx0XHRcdHNlbnRCeUVtYWlsOiB0cnVlLFxuXHRcdFx0Z3JvdXBhYmxlOiBmYWxzZSxcblx0XHR9O1xuXG5cdFx0aWYgKG1lc3NhZ2UudHMpIHtcblx0XHRcdGNvbnN0IHRzRGlmZiA9IE1hdGguYWJzKG1vbWVudChtZXNzYWdlLnRzKS5kaWZmKCkpO1xuXHRcdFx0aWYgKHRzRGlmZiA+IDEwMDAwKSB7XG5cdFx0XHRcdG1lc3NhZ2UudHMgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZXNzYWdlLnRzID0gbmV3IERhdGUoKTtcblx0XHR9XG5cblx0XHRpZiAobWVzc2FnZS5tc2cgJiYgbWVzc2FnZS5tc2cubGVuZ3RoID4gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ01lc3NhZ2VfTWF4QWxsb3dlZFNpemUnKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIHJlZHVjZSBuZXcgbGluZXMgaW4gbXVsdGlsaW5lIG1lc3NhZ2Vcblx0XHRtZXNzYWdlLm1zZyA9IG1lc3NhZ2UubXNnLnNwbGl0KCdcXG5cXG4nKS5qb2luKCdcXG4nKTtcblxuXHRcdGNvbnN0IHVzZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlFbWFpbEFkZHJlc3MoZW1haWwuaGVhZGVycy5mcm9tLCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0dXNlcm5hbWU6IDEsXG5cdFx0XHRcdG5hbWU6IDEsXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHRcdGlmICghdXNlcikge1xuXHRcdFx0Ly8gdXNlciBub3QgZm91bmRcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRjb25zdCBwcmV2TWVzc2FnZSA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRPbmVCeUlkKGVtYWlsLmhlYWRlcnMubWlkLCB7XG5cdFx0XHRyaWQ6IDEsXG5cdFx0XHR1OiAxLFxuXHRcdH0pO1xuXHRcdGlmICghcHJldk1lc3NhZ2UpIHtcblx0XHRcdC8vIG1lc3NhZ2UgZG9lc24ndCBleGlzdCBhbnltb3JlXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdG1lc3NhZ2UucmlkID0gcHJldk1lc3NhZ2UucmlkO1xuXG5cdFx0Y29uc3Qgcm9vbSA9IE1ldGVvci5jYWxsKCdjYW5BY2Nlc3NSb29tJywgbWVzc2FnZS5yaWQsIHVzZXIuX2lkKTtcblx0XHRpZiAoIXJvb20pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRjb25zdCByb29tSW5mbyA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkKG1lc3NhZ2UucmlkLCB7XG5cdFx0XHR0OiAxLFxuXHRcdFx0bmFtZTogMSxcblx0XHR9KTtcblxuXHRcdC8vIGNoZWNrIG1lbnRpb25cblx0XHRpZiAobWVzc2FnZS5tc2cuaW5kZXhPZihgQCR7IHByZXZNZXNzYWdlLnUudXNlcm5hbWUgfWApID09PSAtMSAmJiByb29tSW5mby50ICE9PSAnZCcpIHtcblx0XHRcdG1lc3NhZ2UubXNnID0gYEAkeyBwcmV2TWVzc2FnZS51LnVzZXJuYW1lIH0gJHsgbWVzc2FnZS5tc2cgfWA7XG5cdFx0fVxuXG5cdFx0Ly8gcmVwbHkgbWVzc2FnZSBsaW5rXG5cdFx0bGV0IHByZXZNZXNzYWdlTGluayA9IGBbIF0oJHsgTWV0ZW9yLmFic29sdXRlVXJsKCkucmVwbGFjZSgvXFwvJC8sICcnKSB9YDtcblx0XHRpZiAocm9vbUluZm8udCA9PT0gJ2MnKSB7XG5cdFx0XHRwcmV2TWVzc2FnZUxpbmsgKz0gYC9jaGFubmVsLyR7IHJvb21JbmZvLm5hbWUgfT9tc2c9JHsgZW1haWwuaGVhZGVycy5taWQgfSkgYDtcblx0XHR9IGVsc2UgaWYgKHJvb21JbmZvLnQgPT09ICdkJykge1xuXHRcdFx0cHJldk1lc3NhZ2VMaW5rICs9IGAvZGlyZWN0LyR7IHByZXZNZXNzYWdlLnUudXNlcm5hbWUgfT9tc2c9JHsgZW1haWwuaGVhZGVycy5taWQgfSkgYDtcblx0XHR9IGVsc2UgaWYgKHJvb21JbmZvLnQgPT09ICdwJykge1xuXHRcdFx0cHJldk1lc3NhZ2VMaW5rICs9IGAvZ3JvdXAvJHsgcm9vbUluZm8ubmFtZSB9P21zZz0keyBlbWFpbC5oZWFkZXJzLm1pZCB9KSBgO1xuXHRcdH1cblx0XHQvLyBhZGQgcmVwbHkgbWVzc2FnZSBsaW5rXG5cdFx0bWVzc2FnZS5tc2cgPSBwcmV2TWVzc2FnZUxpbmsgKyBtZXNzYWdlLm1zZztcblxuXHRcdGNvbnN0IHN1YnNjcmlwdGlvbiA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZE9uZUJ5Um9vbUlkQW5kVXNlcklkKG1lc3NhZ2UucmlkLCB1c2VyLl9pZCk7XG5cdFx0aWYgKHN1YnNjcmlwdGlvbiAmJiAoc3Vic2NyaXB0aW9uLmJsb2NrZWQgfHwgc3Vic2NyaXB0aW9uLmJsb2NrZXIpKSB7XG5cdFx0XHQvLyByb29tIGlzIGJsb2NrZWRcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAoKHJvb20ubXV0ZWQgfHwgW10pLmluY2x1ZGVzKHVzZXIudXNlcm5hbWUpKSB7XG5cdFx0XHQvLyByb29tIGlzIG11dGVkXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKG1lc3NhZ2UuYWxpYXMgPT0gbnVsbCAmJiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTWVzc2FnZV9TZXROYW1lVG9BbGlhc0VuYWJsZWQnKSkge1xuXHRcdFx0bWVzc2FnZS5hbGlhcyA9IHVzZXIubmFtZTtcblx0XHR9XG5cblx0XHRSb2NrZXRDaGF0Lm1ldHJpY3MubWVzc2FnZXNTZW50LmluYygpOyAvLyBUT0RPIFRoaXMgbGluZSBuZWVkcyB0byBiZSBtb3ZlZCB0byBpdCdzIHByb3BlciBwbGFjZS4gU2VlIHRoZSBjb21tZW50cyBvbjogaHR0cHM6Ly9naXRodWIuY29tL1JvY2tldENoYXQvUm9ja2V0LkNoYXQvcHVsbC81NzM2XG5cblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zZW5kTWVzc2FnZSh1c2VyLCBtZXNzYWdlLCByb29tKTtcblx0fVxuXG5cdC8vIEV4dHJhY3QvcGFyc2UgcmVwbHkgZnJvbSBlbWFpbCBib2R5XG5cdGVtYWlsLmJvZHkgPSByZXBseS5wYXJzZV9yZXBseShlbWFpbC5ib2R5KTtcblxuXHQvLyBpZiAnVG8nIGVtYWlsIGZvcm1hdCBpcyBcIk5hbWUgPHVzZXJuYW1lQGRvbWFpbj5cIlxuXHRpZiAoZW1haWwuaGVhZGVycy50by5pbmRleE9mKCc8JykgPj0gMCAmJiBlbWFpbC5oZWFkZXJzLnRvLmluZGV4T2YoJz4nKSA+PSAwKSB7XG5cdFx0ZW1haWwuaGVhZGVycy50byA9IGVtYWlsLmhlYWRlcnMudG8uc3BsaXQoJzwnKVsxXS5zcGxpdCgnPicpWzBdO1xuXHR9XG5cblx0Ly8gaWYgJ0Zyb20nIGVtYWlsIGZvcm1hdCBpcyBcIk5hbWUgPHVzZXJuYW1lQGRvbWFpbj5cIlxuXHRpZiAoZW1haWwuaGVhZGVycy5mcm9tLmluZGV4T2YoJzwnKSA+PSAwICYmIGVtYWlsLmhlYWRlcnMuZnJvbS5pbmRleE9mKCc+JykgPj0gMCkge1xuXHRcdGVtYWlsLmhlYWRlcnMuZnJvbSA9IGVtYWlsLmhlYWRlcnMuZnJvbS5zcGxpdCgnPCcpWzFdLnNwbGl0KCc+JylbMF07XG5cdH1cblxuXHQvLyAnVG8nIGVtYWlsIGZvcm1hdCBcInVzZXJuYW1lK21lc3NhZ2VJZEBkb21haW5cIlxuXHRpZiAoZW1haWwuaGVhZGVycy50by5pbmRleE9mKCcrJykgPj0gMCkge1xuXHRcdC8vIFZhbGlkICdUbycgZm9ybWF0XG5cdFx0ZW1haWwuaGVhZGVycy5taWQgPSBlbWFpbC5oZWFkZXJzLnRvLnNwbGl0KCdAJylbMF0uc3BsaXQoJysnKVsxXTtcblx0XHRzZW5kTWVzc2FnZShlbWFpbCk7XG5cdH0gZWxzZSB7XG5cdFx0Y29uc29sZS5sb2coJ0ludmFsaWQgRW1haWwuLi4uSWYgbm90LiBQbGVhc2UgcmVwb3J0IGl0LicpO1xuXHR9XG59O1xuIiwiaW1wb3J0IHsgUm9vbVR5cGVzQ29tbW9uIH0gZnJvbSAnLi4vLi4vbGliL1Jvb21UeXBlc0NvbW1vbic7XG5cblJvY2tldENoYXQucm9vbVR5cGVzID0gbmV3IGNsYXNzIHJvb21UeXBlc1NlcnZlciBleHRlbmRzIFJvb21UeXBlc0NvbW1vbiB7XG5cdC8qKlxuXHQgKiBBZGQgYSBwdWJsaXNoIGZvciBhIHJvb20gdHlwZVxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gcm9vbVR5cGUgcm9vbSB0eXBlIChlLmcuOiBjIChmb3IgY2hhbm5lbHMpLCBkIChmb3IgZGlyZWN0IGNoYW5uZWxzKSlcblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCB3aWxsIHJldHVybiB0aGUgcHVibGlzaCdzIGRhdGFcblx0Ki9cblx0c2V0UHVibGlzaChyb29tVHlwZSwgY2FsbGJhY2spIHtcblx0XHRpZiAodGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdICYmIHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXS5wdWJsaXNoICE9IG51bGwpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3JvdXRlLXB1Ymxpc2gtZXhpc3RzJywgJ1B1Ymxpc2ggZm9yIHRoZSBnaXZlbiB0eXBlIGFscmVhZHkgZXhpc3RzJyk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0gPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdID0ge307XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucHVibGlzaCA9IGNhbGxiYWNrO1xuXHR9XG5cblx0c2V0Um9vbUZpbmQocm9vbVR5cGUsIGNhbGxiYWNrKSB7XG5cdFx0aWYgKHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXSAmJiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucm9vbUZpbmQgIT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcigncm9vbS1maW5kLWV4aXN0cycsICdSb29tIGZpbmQgZm9yIHRoZSBnaXZlbiB0eXBlIGFscmVhZHkgZXhpc3RzJyk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0gPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdID0ge307XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucm9vbUZpbmQgPSBjYWxsYmFjaztcblx0fVxuXG5cdGdldFJvb21GaW5kKHJvb21UeXBlKSB7XG5cdFx0cmV0dXJuIHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXSAmJiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucm9vbUZpbmQ7XG5cdH1cblxuXHRnZXRSb29tTmFtZShyb29tVHlwZSwgcm9vbURhdGEpIHtcblx0XHRyZXR1cm4gdGhpcy5yb29tVHlwZXNbcm9vbVR5cGVdICYmIHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXS5yb29tTmFtZSAmJiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucm9vbU5hbWUocm9vbURhdGEpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJ1biB0aGUgcHVibGlzaCBmb3IgYSByb29tIHR5cGVcblx0ICpcblx0ICogQHBhcmFtIHNjb3BlIE1ldGVvciBwdWJsaXNoIHNjb3BlXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSByb29tVHlwZSByb29tIHR5cGUgKGUuZy46IGMgKGZvciBjaGFubmVscyksIGQgKGZvciBkaXJlY3QgY2hhbm5lbHMpKVxuXHQgKiBAcGFyYW0gaWRlbnRpZmllciBpZGVudGlmaWVyIG9mIHRoZSByb29tXG5cdCovXG5cdHJ1blB1Ymxpc2goc2NvcGUsIHJvb21UeXBlLCBpZGVudGlmaWVyKSB7XG5cdFx0cmV0dXJuIHRoaXMucm9vbVR5cGVzW3Jvb21UeXBlXSAmJiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucHVibGlzaCAmJiB0aGlzLnJvb21UeXBlc1tyb29tVHlwZV0ucHVibGlzaC5jYWxsKHNjb3BlLCBpZGVudGlmaWVyKTtcblx0fVxuXG59O1xuIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5pbXBvcnQgeyBjYWxsSm9pblJvb20sIG1lc3NhZ2VDb250YWluc0hpZ2hsaWdodCwgcGFyc2VNZXNzYWdlVGV4dFBlclVzZXIsIHJlcGxhY2VNZW50aW9uZWRVc2VybmFtZXNXaXRoRnVsbE5hbWVzIH0gZnJvbSAnLi4vZnVuY3Rpb25zL25vdGlmaWNhdGlvbnMvJztcbmltcG9ydCB7IHNlbmRFbWFpbCwgc2hvdWxkTm90aWZ5RW1haWwgfSBmcm9tICcuLi9mdW5jdGlvbnMvbm90aWZpY2F0aW9ucy9lbWFpbCc7XG5pbXBvcnQgeyBzZW5kU2luZ2xlUHVzaCwgc2hvdWxkTm90aWZ5TW9iaWxlIH0gZnJvbSAnLi4vZnVuY3Rpb25zL25vdGlmaWNhdGlvbnMvbW9iaWxlJztcbmltcG9ydCB7IG5vdGlmeURlc2t0b3BVc2VyLCBzaG91bGROb3RpZnlEZXNrdG9wIH0gZnJvbSAnLi4vZnVuY3Rpb25zL25vdGlmaWNhdGlvbnMvZGVza3RvcCc7XG5pbXBvcnQgeyBub3RpZnlBdWRpb1VzZXIsIHNob3VsZE5vdGlmeUF1ZGlvIH0gZnJvbSAnLi4vZnVuY3Rpb25zL25vdGlmaWNhdGlvbnMvYXVkaW8nO1xuXG5jb25zdCBzZW5kTm90aWZpY2F0aW9uID0gKHtcblx0c3Vic2NyaXB0aW9uLFxuXHRzZW5kZXIsXG5cdGhhc01lbnRpb25Ub0FsbCxcblx0aGFzTWVudGlvblRvSGVyZSxcblx0bWVzc2FnZSxcblx0bm90aWZpY2F0aW9uTWVzc2FnZSxcblx0cm9vbSxcblx0bWVudGlvbklkcyxcblx0ZGlzYWJsZUFsbE1lc3NhZ2VOb3RpZmljYXRpb25zLFxufSkgPT4ge1xuXG5cdC8vIGRvbid0IG5vdGlmeSB0aGUgc2VuZGVyXG5cdGlmIChzdWJzY3JpcHRpb24udS5faWQgPT09IHNlbmRlci5faWQpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBub3RpZmljYXRpb25zIGRpc2FibGVkXG5cdGlmIChzdWJzY3JpcHRpb24uZGlzYWJsZU5vdGlmaWNhdGlvbnMpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBkb250IHNlbmQgbm90aWZpY2F0aW9uIHRvIHVzZXJzIHdobyBpZ25vcmVkIHRoZSBzZW5kZXJcblx0aWYgKEFycmF5LmlzQXJyYXkoc3Vic2NyaXB0aW9uLmlnbm9yZWQpICYmIHN1YnNjcmlwdGlvbi5pZ25vcmVkLmluY2x1ZGVzKHNlbmRlci5faWQpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgaGFzTWVudGlvblRvVXNlciA9IG1lbnRpb25JZHMuaW5jbHVkZXMoc3Vic2NyaXB0aW9uLnUuX2lkKTtcblxuXHQvLyBtdXRlIGdyb3VwIG5vdGlmaWNhdGlvbnMgKEBoZXJlIGFuZCBAYWxsKSBpZiBub3QgZGlyZWN0bHkgbWVudGlvbmVkIGFzIHdlbGxcblx0aWYgKCFoYXNNZW50aW9uVG9Vc2VyICYmIHN1YnNjcmlwdGlvbi5tdXRlR3JvdXBNZW50aW9ucyAmJiAoaGFzTWVudGlvblRvQWxsIHx8IGhhc01lbnRpb25Ub0hlcmUpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgcmVjZWl2ZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlJZChzdWJzY3JpcHRpb24udS5faWQpO1xuXG5cdGlmICghcmVjZWl2ZXIgfHwgIXJlY2VpdmVyLmFjdGl2ZSkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IHJvb21UeXBlID0gcm9vbS50O1xuXHQvLyBJZiB0aGUgdXNlciBkb2Vzbid0IGhhdmUgcGVybWlzc2lvbiB0byB2aWV3IGRpcmVjdCBtZXNzYWdlcywgZG9uJ3Qgc2VuZCBub3RpZmljYXRpb24gb2YgZGlyZWN0IG1lc3NhZ2VzLlxuXHRpZiAocm9vbVR5cGUgPT09ICdkJyAmJiAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHN1YnNjcmlwdGlvbi51Ll9pZCwgJ3ZpZXctZC1yb29tJykpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRub3RpZmljYXRpb25NZXNzYWdlID0gcGFyc2VNZXNzYWdlVGV4dFBlclVzZXIobm90aWZpY2F0aW9uTWVzc2FnZSwgbWVzc2FnZSwgcmVjZWl2ZXIpO1xuXG5cdGNvbnN0IGlzSGlnaGxpZ2h0ZWQgPSBtZXNzYWdlQ29udGFpbnNIaWdobGlnaHQobWVzc2FnZSwgc3Vic2NyaXB0aW9uLnVzZXJIaWdobGlnaHRzKTtcblxuXG5cdGNvbnN0IHtcblx0XHRhdWRpb05vdGlmaWNhdGlvbnMsXG5cdFx0ZGVza3RvcE5vdGlmaWNhdGlvbnMsXG5cdFx0bW9iaWxlUHVzaE5vdGlmaWNhdGlvbnMsXG5cdFx0ZW1haWxOb3RpZmljYXRpb25zLFxuXHR9ID0gc3Vic2NyaXB0aW9uO1xuXG5cdGxldCBub3RpZmljYXRpb25TZW50ID0gZmFsc2U7XG5cblx0Ly8gYnVzeSB1c2VycyBkb24ndCByZWNlaXZlIGF1ZGlvIG5vdGlmaWNhdGlvblxuXHRpZiAoc2hvdWxkTm90aWZ5QXVkaW8oe1xuXHRcdGRpc2FibGVBbGxNZXNzYWdlTm90aWZpY2F0aW9ucyxcblx0XHRzdGF0dXM6IHJlY2VpdmVyLnN0YXR1cyxcblx0XHRhdWRpb05vdGlmaWNhdGlvbnMsXG5cdFx0aGFzTWVudGlvblRvQWxsLFxuXHRcdGhhc01lbnRpb25Ub0hlcmUsXG5cdFx0aXNIaWdobGlnaHRlZCxcblx0XHRoYXNNZW50aW9uVG9Vc2VyLFxuXHRcdHJvb21UeXBlLFxuXHR9KSkge1xuXHRcdG5vdGlmeUF1ZGlvVXNlcihzdWJzY3JpcHRpb24udS5faWQsIG1lc3NhZ2UsIHJvb20pO1xuXHR9XG5cblx0Ly8gYnVzeSB1c2VycyBkb24ndCByZWNlaXZlIGRlc2t0b3Agbm90aWZpY2F0aW9uXG5cdGlmIChzaG91bGROb3RpZnlEZXNrdG9wKHtcblx0XHRkaXNhYmxlQWxsTWVzc2FnZU5vdGlmaWNhdGlvbnMsXG5cdFx0c3RhdHVzOiByZWNlaXZlci5zdGF0dXMsXG5cdFx0ZGVza3RvcE5vdGlmaWNhdGlvbnMsXG5cdFx0aGFzTWVudGlvblRvQWxsLFxuXHRcdGhhc01lbnRpb25Ub0hlcmUsXG5cdFx0aXNIaWdobGlnaHRlZCxcblx0XHRoYXNNZW50aW9uVG9Vc2VyLFxuXHRcdHJvb21UeXBlLFxuXHR9KSkge1xuXHRcdG5vdGlmaWNhdGlvblNlbnQgPSB0cnVlO1xuXHRcdG5vdGlmeURlc2t0b3BVc2VyKHtcblx0XHRcdG5vdGlmaWNhdGlvbk1lc3NhZ2UsXG5cdFx0XHR1c2VySWQ6IHN1YnNjcmlwdGlvbi51Ll9pZCxcblx0XHRcdHVzZXI6IHNlbmRlcixcblx0XHRcdG1lc3NhZ2UsXG5cdFx0XHRyb29tLFxuXHRcdFx0ZHVyYXRpb246IHN1YnNjcmlwdGlvbi5kZXNrdG9wTm90aWZpY2F0aW9uRHVyYXRpb24sXG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoc2hvdWxkTm90aWZ5TW9iaWxlKHtcblx0XHRkaXNhYmxlQWxsTWVzc2FnZU5vdGlmaWNhdGlvbnMsXG5cdFx0bW9iaWxlUHVzaE5vdGlmaWNhdGlvbnMsXG5cdFx0aGFzTWVudGlvblRvQWxsLFxuXHRcdGlzSGlnaGxpZ2h0ZWQsXG5cdFx0aGFzTWVudGlvblRvVXNlcixcblx0XHRzdGF0dXNDb25uZWN0aW9uOiByZWNlaXZlci5zdGF0dXNDb25uZWN0aW9uLFxuXHRcdHJvb21UeXBlLFxuXHR9KSkge1xuXHRcdG5vdGlmaWNhdGlvblNlbnQgPSB0cnVlO1xuXG5cdFx0c2VuZFNpbmdsZVB1c2goe1xuXHRcdFx0bm90aWZpY2F0aW9uTWVzc2FnZSxcblx0XHRcdHJvb20sXG5cdFx0XHRtZXNzYWdlLFxuXHRcdFx0dXNlcklkOiBzdWJzY3JpcHRpb24udS5faWQsXG5cdFx0XHRzZW5kZXJVc2VybmFtZTogc2VuZGVyLnVzZXJuYW1lLFxuXHRcdFx0c2VuZGVyTmFtZTogc2VuZGVyLm5hbWUsXG5cdFx0XHRyZWNlaXZlclVzZXJuYW1lOiByZWNlaXZlci51c2VybmFtZSxcblx0XHR9KTtcblx0fVxuXG5cdGlmIChyZWNlaXZlci5lbWFpbHMgJiYgc2hvdWxkTm90aWZ5RW1haWwoe1xuXHRcdGRpc2FibGVBbGxNZXNzYWdlTm90aWZpY2F0aW9ucyxcblx0XHRzdGF0dXNDb25uZWN0aW9uOiByZWNlaXZlci5zdGF0dXNDb25uZWN0aW9uLFxuXHRcdGVtYWlsTm90aWZpY2F0aW9ucyxcblx0XHRpc0hpZ2hsaWdodGVkLFxuXHRcdGhhc01lbnRpb25Ub1VzZXIsXG5cdFx0aGFzTWVudGlvblRvQWxsLFxuXHRcdHJvb21UeXBlLFxuXHR9KSkge1xuXHRcdHJlY2VpdmVyLmVtYWlscy5zb21lKChlbWFpbCkgPT4ge1xuXHRcdFx0aWYgKGVtYWlsLnZlcmlmaWVkKSB7XG5cdFx0XHRcdHNlbmRFbWFpbCh7IG1lc3NhZ2UsIHJlY2VpdmVyLCBzdWJzY3JpcHRpb24sIHJvb20sIGVtYWlsQWRkcmVzczogZW1haWwuYWRkcmVzcywgaGFzTWVudGlvblRvVXNlciB9KTtcblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9KTtcblx0fVxuXG5cdGlmIChub3RpZmljYXRpb25TZW50KSB7XG5cdFx0Um9ja2V0Q2hhdC5TYW5kc3Rvcm0ubm90aWZ5KG1lc3NhZ2UsIFtzdWJzY3JpcHRpb24udS5faWRdLCBgQCR7IHNlbmRlci51c2VybmFtZSB9OiAkeyBtZXNzYWdlLm1zZyB9YCwgcm9vbS50ID09PSAncCcgPyAncHJpdmF0ZU1lc3NhZ2UnIDogJ21lc3NhZ2UnKTtcblx0fVxufTtcblxuZnVuY3Rpb24gc2VuZEFsbE5vdGlmaWNhdGlvbnMobWVzc2FnZSwgcm9vbSkge1xuXG5cdC8vIHNraXBzIHRoaXMgY2FsbGJhY2sgaWYgdGhlIG1lc3NhZ2Ugd2FzIGVkaXRlZFxuXHRpZiAobWVzc2FnZS5lZGl0ZWRBdCkge1xuXHRcdHJldHVybiBtZXNzYWdlO1xuXHR9XG5cblx0aWYgKG1lc3NhZ2UudHMgJiYgTWF0aC5hYnMobW9tZW50KG1lc3NhZ2UudHMpLmRpZmYoKSkgPiA2MDAwMCkge1xuXHRcdHJldHVybiBtZXNzYWdlO1xuXHR9XG5cblx0aWYgKCFyb29tIHx8IHJvb20udCA9PSBudWxsKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdH1cblxuXHRjb25zdCBzZW5kZXIgPSBSb2NrZXRDaGF0LnJvb21UeXBlcy5nZXRDb25maWcocm9vbS50KS5nZXRNc2dTZW5kZXIobWVzc2FnZS51Ll9pZCk7XG5cdGlmICghc2VuZGVyKSB7XG5cdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdH1cblxuXHRjb25zdCBtZW50aW9uSWRzID0gKG1lc3NhZ2UubWVudGlvbnMgfHwgW10pLm1hcCgoeyBfaWQgfSkgPT4gX2lkKTtcblx0Y29uc3QgbWVudGlvbklkc1dpdGhvdXRHcm91cHMgPSBtZW50aW9uSWRzLmZpbHRlcigoX2lkKSA9PiBfaWQgIT09ICdhbGwnICYmIF9pZCAhPT0gJ2hlcmUnKTtcblx0Y29uc3QgaGFzTWVudGlvblRvQWxsID0gbWVudGlvbklkcy5pbmNsdWRlcygnYWxsJyk7XG5cdGNvbnN0IGhhc01lbnRpb25Ub0hlcmUgPSBtZW50aW9uSWRzLmluY2x1ZGVzKCdoZXJlJyk7XG5cblx0bGV0IG5vdGlmaWNhdGlvbk1lc3NhZ2UgPSBSb2NrZXRDaGF0LmNhbGxiYWNrcy5ydW4oJ2JlZm9yZVNlbmRNZXNzYWdlTm90aWZpY2F0aW9ucycsIG1lc3NhZ2UubXNnKTtcblx0aWYgKG1lbnRpb25JZHMubGVuZ3RoID4gMCAmJiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfVXNlX1JlYWxfTmFtZScpKSB7XG5cdFx0bm90aWZpY2F0aW9uTWVzc2FnZSA9IHJlcGxhY2VNZW50aW9uZWRVc2VybmFtZXNXaXRoRnVsbE5hbWVzKG1lc3NhZ2UubXNnLCBtZXNzYWdlLm1lbnRpb25zKTtcblx0fVxuXG5cdC8vIERvbid0IGZldGNoIGFsbCB1c2VycyBpZiByb29tIGV4Y2VlZHMgbWF4IG1lbWJlcnNcblx0Y29uc3QgbWF4TWVtYmVyc0Zvck5vdGlmaWNhdGlvbiA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdOb3RpZmljYXRpb25zX01heF9Sb29tX01lbWJlcnMnKTtcblx0Y29uc3Qgcm9vbU1lbWJlcnNDb3VudCA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZEJ5Um9vbUlkKHJvb20uX2lkKS5jb3VudCgpO1xuXHRjb25zdCBkaXNhYmxlQWxsTWVzc2FnZU5vdGlmaWNhdGlvbnMgPSByb29tTWVtYmVyc0NvdW50ID4gbWF4TWVtYmVyc0Zvck5vdGlmaWNhdGlvbiAmJiBtYXhNZW1iZXJzRm9yTm90aWZpY2F0aW9uICE9PSAwO1xuXG5cdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdHJpZDogcm9vbS5faWQsXG5cdFx0JG9yOiBbe1xuXHRcdFx0J3VzZXJIaWdobGlnaHRzLjAnOiB7ICRleGlzdHM6IDEgfSxcblx0XHR9XSxcblx0fTtcblxuXHRbJ2F1ZGlvJywgJ2Rlc2t0b3AnLCAnbW9iaWxlJywgJ2VtYWlsJ10uZm9yRWFjaCgoa2luZCkgPT4ge1xuXHRcdGNvbnN0IG5vdGlmaWNhdGlvbkZpZWxkID0gYCR7IGtpbmQgPT09ICdtb2JpbGUnID8gJ21vYmlsZVB1c2gnIDoga2luZCB9Tm90aWZpY2F0aW9uc2A7XG5cblx0XHRjb25zdCBmaWx0ZXIgPSB7IFtub3RpZmljYXRpb25GaWVsZF06ICdhbGwnIH07XG5cblx0XHRpZiAoZGlzYWJsZUFsbE1lc3NhZ2VOb3RpZmljYXRpb25zKSB7XG5cdFx0XHRmaWx0ZXJbYCR7IGtpbmQgfVByZWZPcmlnaW5gXSA9IHsgJG5lOiAndXNlcicgfTtcblx0XHR9XG5cblx0XHRxdWVyeS4kb3IucHVzaChmaWx0ZXIpO1xuXG5cdFx0aWYgKG1lbnRpb25JZHNXaXRob3V0R3JvdXBzLmxlbmd0aCA+IDApIHtcblx0XHRcdHF1ZXJ5LiRvci5wdXNoKHtcblx0XHRcdFx0W25vdGlmaWNhdGlvbkZpZWxkXTogJ21lbnRpb25zJyxcblx0XHRcdFx0J3UuX2lkJzogeyAkaW46IG1lbnRpb25JZHNXaXRob3V0R3JvdXBzIH0sXG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKCFkaXNhYmxlQWxsTWVzc2FnZU5vdGlmaWNhdGlvbnMgJiYgKGhhc01lbnRpb25Ub0FsbCB8fCBoYXNNZW50aW9uVG9IZXJlKSkge1xuXHRcdFx0cXVlcnkuJG9yLnB1c2goe1xuXHRcdFx0XHRbbm90aWZpY2F0aW9uRmllbGRdOiAnbWVudGlvbnMnLFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc2VydmVyRmllbGQgPSBraW5kID09PSAnZW1haWwnID8gJ2VtYWlsTm90aWZpY2F0aW9uTW9kZScgOiBgJHsga2luZCB9Tm90aWZpY2F0aW9uc2A7XG5cdFx0Y29uc3Qgc2VydmVyUHJlZmVyZW5jZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KGBBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfJHsgc2VydmVyRmllbGQgfWApO1xuXHRcdGlmICgocm9vbS50ID09PSAnZCcgJiYgc2VydmVyUHJlZmVyZW5jZSAhPT0gJ25vdGhpbmcnKSB8fCAoIWRpc2FibGVBbGxNZXNzYWdlTm90aWZpY2F0aW9ucyAmJiAoc2VydmVyUHJlZmVyZW5jZSA9PT0gJ2FsbCcgfHwgaGFzTWVudGlvblRvQWxsIHx8IGhhc01lbnRpb25Ub0hlcmUpKSkge1xuXHRcdFx0cXVlcnkuJG9yLnB1c2goe1xuXHRcdFx0XHRbbm90aWZpY2F0aW9uRmllbGRdOiB7ICRleGlzdHM6IGZhbHNlIH0sXG5cdFx0XHR9KTtcblx0XHR9IGVsc2UgaWYgKHNlcnZlclByZWZlcmVuY2UgPT09ICdtZW50aW9ucycgJiYgbWVudGlvbklkc1dpdGhvdXRHcm91cHMubGVuZ3RoKSB7XG5cdFx0XHRxdWVyeS4kb3IucHVzaCh7XG5cdFx0XHRcdFtub3RpZmljYXRpb25GaWVsZF06IHsgJGV4aXN0czogZmFsc2UgfSxcblx0XHRcdFx0J3UuX2lkJzogeyAkaW46IG1lbnRpb25JZHNXaXRob3V0R3JvdXBzIH0sXG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXG5cdC8vIHRoZSBmaW5kIGJlbGxvdyBpcyBjcnVjaWFsLiBhbGwgc3Vic2NyaXB0aW9uIHJlY29yZHMgcmV0dXJuZWQgd2lsbCByZWNlaXZlIGF0IGxlYXN0IG9uZSBraW5kIG9mIG5vdGlmaWNhdGlvbi5cblx0Ly8gdGhlIHF1ZXJ5IGlzIGRlZmluZWQgYnkgdGhlIHNlcnZlcidzIGRlZmF1bHQgdmFsdWVzIGFuZCBOb3RpZmljYXRpb25zX01heF9Sb29tX01lbWJlcnMgc2V0dGluZy5cblx0Y29uc3Qgc3Vic2NyaXB0aW9ucyA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZE5vdGlmaWNhdGlvblByZWZlcmVuY2VzQnlSb29tKHF1ZXJ5KTtcblx0c3Vic2NyaXB0aW9ucy5mb3JFYWNoKChzdWJzY3JpcHRpb24pID0+IHNlbmROb3RpZmljYXRpb24oe1xuXHRcdHN1YnNjcmlwdGlvbixcblx0XHRzZW5kZXIsXG5cdFx0aGFzTWVudGlvblRvQWxsLFxuXHRcdGhhc01lbnRpb25Ub0hlcmUsXG5cdFx0bWVzc2FnZSxcblx0XHRub3RpZmljYXRpb25NZXNzYWdlLFxuXHRcdHJvb20sXG5cdFx0bWVudGlvbklkcyxcblx0XHRkaXNhYmxlQWxsTWVzc2FnZU5vdGlmaWNhdGlvbnMsXG5cdH0pKTtcblxuXHQvLyBvbiBwdWJsaWMgY2hhbm5lbHMsIGlmIGEgbWVudGlvbmVkIHVzZXIgaXMgbm90IG1lbWJlciBvZiB0aGUgY2hhbm5lbCB5ZXQsIGhlIHdpbGwgZmlyc3Qgam9pbiB0aGUgY2hhbm5lbCBhbmQgdGhlbiBiZSBub3RpZmllZCBiYXNlZCBvbiBoaXMgcHJlZmVyZW5jZXMuXG5cdGlmIChyb29tLnQgPT09ICdjJykge1xuXHRcdC8vIGdldCBzdWJzY3JpcHRpb25zIGZyb20gdXNlcnMgYWxyZWFkeSBpbiByb29tICh0byBub3Qgc2VuZCB0aGVtIGEgbm90aWZpY2F0aW9uKVxuXHRcdGNvbnN0IG1lbnRpb25zID0gWy4uLm1lbnRpb25JZHNXaXRob3V0R3JvdXBzXTtcblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRCeVJvb21JZEFuZFVzZXJJZHMocm9vbS5faWQsIG1lbnRpb25JZHNXaXRob3V0R3JvdXBzLCB7IGZpZWxkczogeyAndS5faWQnOiAxIH0gfSkuZm9yRWFjaCgoc3Vic2NyaXB0aW9uKSA9PiB7XG5cdFx0XHRjb25zdCBpbmRleCA9IG1lbnRpb25zLmluZGV4T2Yoc3Vic2NyaXB0aW9uLnUuX2lkKTtcblx0XHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdFx0bWVudGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdFByb21pc2UuYWxsKG1lbnRpb25zXG5cdFx0XHQubWFwKGFzeW5jKHVzZXJJZCkgPT4ge1xuXHRcdFx0XHRhd2FpdCBjYWxsSm9pblJvb20odXNlcklkLCByb29tLl9pZCk7XG5cblx0XHRcdFx0cmV0dXJuIHVzZXJJZDtcblx0XHRcdH0pXG5cdFx0KS50aGVuKCh1c2VycykgPT4ge1xuXHRcdFx0dXNlcnMuZm9yRWFjaCgodXNlcklkKSA9PiB7XG5cdFx0XHRcdGNvbnN0IHN1YnNjcmlwdGlvbiA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZE9uZUJ5Um9vbUlkQW5kVXNlcklkKHJvb20uX2lkLCB1c2VySWQpO1xuXG5cdFx0XHRcdHNlbmROb3RpZmljYXRpb24oe1xuXHRcdFx0XHRcdHN1YnNjcmlwdGlvbixcblx0XHRcdFx0XHRzZW5kZXIsXG5cdFx0XHRcdFx0aGFzTWVudGlvblRvQWxsLFxuXHRcdFx0XHRcdGhhc01lbnRpb25Ub0hlcmUsXG5cdFx0XHRcdFx0bWVzc2FnZSxcblx0XHRcdFx0XHRub3RpZmljYXRpb25NZXNzYWdlLFxuXHRcdFx0XHRcdHJvb20sXG5cdFx0XHRcdFx0bWVudGlvbklkcyxcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHR9KS5jYXRjaCgoZXJyb3IpID0+IHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoZXJyb3IpO1xuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIG1lc3NhZ2U7XG59XG5cblJvY2tldENoYXQuY2FsbGJhY2tzLmFkZCgnYWZ0ZXJTYXZlTWVzc2FnZScsIHNlbmRBbGxOb3RpZmljYXRpb25zLCBSb2NrZXRDaGF0LmNhbGxiYWNrcy5wcmlvcml0eS5MT1csICdzZW5kTm90aWZpY2F0aW9uc09uTWVzc2FnZScpO1xuXG5leHBvcnQgeyBzZW5kTm90aWZpY2F0aW9uIH07XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcbmltcG9ydCBkbnMgZnJvbSAnZG5zJztcblxubGV0IGVtYWlsRG9tYWluQmxhY2tMaXN0ID0gW107XG5sZXQgZW1haWxEb21haW5XaGl0ZUxpc3QgPSBbXTtcbmxldCB1c2VEZWZhdWx0QmxhY2tMaXN0ID0gZmFsc2U7XG5sZXQgdXNlRE5TRG9tYWluQ2hlY2sgPSBmYWxzZTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0Jsb2NrZWREb21haW5zTGlzdCcsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0ZW1haWxEb21haW5CbGFja0xpc3QgPSBfLm1hcCh2YWx1ZS5zcGxpdCgnLCcpLCAoZG9tYWluKSA9PiBkb21haW4udHJpbSgpKTtcbn0pO1xuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0FsbG93ZWREb21haW5zTGlzdCcsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0ZW1haWxEb21haW5XaGl0ZUxpc3QgPSBfLm1hcCh2YWx1ZS5zcGxpdCgnLCcpLCAoZG9tYWluKSA9PiBkb21haW4udHJpbSgpKTtcbn0pO1xuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX1VzZURlZmF1bHRCbG9ja2VkRG9tYWluc0xpc3QnLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdHVzZURlZmF1bHRCbGFja0xpc3QgPSB2YWx1ZTtcbn0pO1xuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX1VzZUROU0RvbWFpbkNoZWNrJywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHR1c2VETlNEb21haW5DaGVjayA9IHZhbHVlO1xufSk7XG5cblJvY2tldENoYXQudmFsaWRhdGVFbWFpbERvbWFpbiA9IGZ1bmN0aW9uKGVtYWlsKSB7XG5cdGNvbnN0IGVtYWlsVmFsaWRhdGlvbiA9IC9eW2EtekEtWjAtOS4hIyQlJicqK1xcLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvO1xuXHRpZiAoIWVtYWlsVmFsaWRhdGlvbi50ZXN0KGVtYWlsKSkge1xuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtZW1haWwnLCBgSW52YWxpZCBlbWFpbCAkeyBlbWFpbCB9YCwgeyBmdW5jdGlvbjogJ1JvY2tldENoYXQudmFsaWRhdGVFbWFpbERvbWFpbicsIGVtYWlsIH0pO1xuXHR9XG5cblx0Y29uc3QgZW1haWxEb21haW4gPSBlbWFpbC5zdWJzdHIoZW1haWwubGFzdEluZGV4T2YoJ0AnKSArIDEpO1xuXG5cdC8vIGlmIG5vdCBpbiB3aGl0ZWxpc3Rcblx0aWYgKGVtYWlsRG9tYWluV2hpdGVMaXN0LmluZGV4T2YoZW1haWxEb21haW4pID09PSAtMSkge1xuXHRcdGlmIChlbWFpbERvbWFpbkJsYWNrTGlzdC5pbmRleE9mKGVtYWlsRG9tYWluKSAhPT0gLTEgfHwgKHVzZURlZmF1bHRCbGFja0xpc3QgJiYgUm9ja2V0Q2hhdC5lbWFpbERvbWFpbkRlZmF1bHRCbGFja0xpc3QuaW5kZXhPZihlbWFpbERvbWFpbikgIT09IC0xKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItZW1haWwtZG9tYWluLWJsYWNrbGlzdGVkJywgJ1RoZSBlbWFpbCBkb21haW4gaXMgYmxhY2tsaXN0ZWQnLCB7IGZ1bmN0aW9uOiAnUm9ja2V0Q2hhdC52YWxpZGF0ZUVtYWlsRG9tYWluJyB9KTtcblx0XHR9XG5cdH1cblxuXHRpZiAodXNlRE5TRG9tYWluQ2hlY2spIHtcblx0XHR0cnkge1xuXHRcdFx0TWV0ZW9yLndyYXBBc3luYyhkbnMucmVzb2x2ZU14KShlbWFpbERvbWFpbik7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1kb21haW4nLCAnSW52YWxpZCBkb21haW4nLCB7IGZ1bmN0aW9uOiAnUm9ja2V0Q2hhdC52YWxpZGF0ZUVtYWlsRG9tYWluJyB9KTtcblx0XHR9XG5cdH1cbn07XG4iLCJpbXBvcnQgUGFzc3dvcmRQb2xpY3kgZnJvbSAnLi9QYXNzd29yZFBvbGljeUNsYXNzJztcblxuUm9ja2V0Q2hhdC5wYXNzd29yZFBvbGljeSA9IG5ldyBQYXNzd29yZFBvbGljeSgpO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfUGFzc3dvcmRfUG9saWN5X0VuYWJsZWQnLCAoa2V5LCB2YWx1ZSkgPT4gUm9ja2V0Q2hhdC5wYXNzd29yZFBvbGljeS5lbmFibGVkID0gdmFsdWUpO1xuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX1Bhc3N3b3JkX1BvbGljeV9NaW5MZW5ndGgnLCAoa2V5LCB2YWx1ZSkgPT4gUm9ja2V0Q2hhdC5wYXNzd29yZFBvbGljeS5taW5MZW5ndGggPSB2YWx1ZSk7XG5Sb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfUGFzc3dvcmRfUG9saWN5X01heExlbmd0aCcsIChrZXksIHZhbHVlKSA9PiBSb2NrZXRDaGF0LnBhc3N3b3JkUG9saWN5Lm1heExlbmd0aCA9IHZhbHVlKTtcblJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19QYXNzd29yZF9Qb2xpY3lfRm9yYmlkUmVwZWF0aW5nQ2hhcmFjdGVycycsIChrZXksIHZhbHVlKSA9PiBSb2NrZXRDaGF0LnBhc3N3b3JkUG9saWN5LmZvcmJpZFJlcGVhdGluZ0NoYXJhY3RlcnMgPSB2YWx1ZSk7XG5Sb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfUGFzc3dvcmRfUG9saWN5X0ZvcmJpZFJlcGVhdGluZ0NoYXJhY3RlcnNDb3VudCcsIChrZXksIHZhbHVlKSA9PiBSb2NrZXRDaGF0LnBhc3N3b3JkUG9saWN5LmZvcmJpZFJlcGVhdGluZ0NoYXJhY3RlcnNDb3VudCA9IHZhbHVlKTtcblJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19QYXNzd29yZF9Qb2xpY3lfQXRMZWFzdE9uZUxvd2VyY2FzZScsIChrZXksIHZhbHVlKSA9PiBSb2NrZXRDaGF0LnBhc3N3b3JkUG9saWN5Lm11c3RDb250YWluQXRMZWFzdE9uZUxvd2VyY2FzZSA9IHZhbHVlKTtcblJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19QYXNzd29yZF9Qb2xpY3lfQXRMZWFzdE9uZVVwcGVyY2FzZScsIChrZXksIHZhbHVlKSA9PiBSb2NrZXRDaGF0LnBhc3N3b3JkUG9saWN5Lm11c3RDb250YWluQXRMZWFzdE9uZVVwcGVyY2FzZSA9IHZhbHVlKTtcblJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19QYXNzd29yZF9Qb2xpY3lfQXRMZWFzdE9uZU51bWJlcicsIChrZXksIHZhbHVlKSA9PiBSb2NrZXRDaGF0LnBhc3N3b3JkUG9saWN5Lm11c3RDb250YWluQXRMZWFzdE9uZU51bWJlciA9IHZhbHVlKTtcblJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19QYXNzd29yZF9Qb2xpY3lfQXRMZWFzdE9uZVNwZWNpYWxDaGFyYWN0ZXInLCAoa2V5LCB2YWx1ZSkgPT4gUm9ja2V0Q2hhdC5wYXNzd29yZFBvbGljeS5tdXN0Q29udGFpbkF0TGVhc3RPbmVTcGVjaWFsQ2hhcmFjdGVyID0gdmFsdWUpO1xuIiwiLypcblx0V2hhdCBpcyB0aGlzIGZpbGU/IEdyZWF0IHF1ZXN0aW9uISBUbyBtYWtlIFJvY2tldC5DaGF0IG1vcmUgXCJtb2R1bGFyXCJcblx0YW5kIHRvIG1ha2UgdGhlIFwicm9ja2V0Y2hhdDpsaWJcIiBwYWNrYWdlIG1vcmUgb2YgYSBjb3JlIHBhY2thZ2Vcblx0d2l0aCB0aGUgbGlicmFyaWVzLCB0aGlzIGluZGV4IGZpbGUgY29udGFpbnMgdGhlIGV4cG9ydGVkIG1lbWJlcnNcblx0Zm9yIHRoZSAqc2VydmVyKiBwaWVjZXMgb2YgY29kZSB3aGljaCBkb2VzIGluY2x1ZGUgdGhlIHNoYXJlZFxuXHRsaWJyYXJ5IGZpbGVzLlxuKi9cblxuaW1wb3J0IHsgUm9vbVNldHRpbmdzRW51bSwgUm9vbVR5cGVDb25maWcsIFJvb21UeXBlUm91dGVDb25maWcgfSBmcm9tICcuLi8uLi9saWIvUm9vbVR5cGVDb25maWcnO1xuaW1wb3J0IHsgc2VuZE5vdGlmaWNhdGlvbiB9IGZyb20gJy4vc2VuZE5vdGlmaWNhdGlvbnNPbk1lc3NhZ2UuanMnO1xuXG5leHBvcnQge1xuXHRSb29tU2V0dGluZ3NFbnVtLFxuXHRSb29tVHlwZUNvbmZpZyxcblx0Um9vbVR5cGVSb3V0ZUNvbmZpZyxcblx0c2VuZE5vdGlmaWNhdGlvbixcbn07XG4iLCJjbGFzcyBQYXNzd29yZFBvbGljeSB7XG5cdGNvbnN0cnVjdG9yKHtcblx0XHRlbmFibGVkID0gZmFsc2UsXG5cdFx0bWluTGVuZ3RoID0gLTEsXG5cdFx0bWF4TGVuZ3RoID0gLTEsXG5cdFx0Zm9yYmlkUmVwZWF0aW5nQ2hhcmFjdGVycyA9IGZhbHNlLFxuXHRcdGZvcmJpZFJlcGVhdGluZ0NoYXJhY3RlcnNDb3VudCA9IDMsIC8vIHRoZSByZWdleCBpcyB0aGlzIG51bWJlciBtaW51cyBvbmVcblx0XHRtdXN0Q29udGFpbkF0TGVhc3RPbmVMb3dlcmNhc2UgPSBmYWxzZSwgLy8gL1tBLVpdezMsfS8gY291bGQgZG8gdGhpcyBpbnN0ZWFkIG9mIGF0IGxlYXN0IG9uZVxuXHRcdG11c3RDb250YWluQXRMZWFzdE9uZVVwcGVyY2FzZSA9IGZhbHNlLFxuXHRcdG11c3RDb250YWluQXRMZWFzdE9uZU51bWJlciA9IGZhbHNlLFxuXHRcdG11c3RDb250YWluQXRMZWFzdE9uZVNwZWNpYWxDaGFyYWN0ZXIgPSBmYWxzZSxcblx0XHR0aHJvd0Vycm9yID0gdHJ1ZSxcblx0fSA9IHt9KSB7XG5cdFx0dGhpcy5yZWdleCA9IHtcblx0XHRcdG11c3RDb250YWluQXRMZWFzdE9uZUxvd2VyY2FzZTogbmV3IFJlZ0V4cCgnW2Etel0nKSxcblx0XHRcdG11c3RDb250YWluQXRMZWFzdE9uZVVwcGVyY2FzZTogbmV3IFJlZ0V4cCgnW0EtWl0nKSxcblx0XHRcdG11c3RDb250YWluQXRMZWFzdE9uZU51bWJlcjogbmV3IFJlZ0V4cCgnWzAtOV0nKSxcblx0XHRcdG11c3RDb250YWluQXRMZWFzdE9uZVNwZWNpYWxDaGFyYWN0ZXI6IG5ldyBSZWdFeHAoJ1teQS1aYS16MC05IF0nKSxcblx0XHR9O1xuXG5cdFx0dGhpcy5lbmFibGVkID0gZW5hYmxlZDtcblx0XHR0aGlzLm1pbkxlbmd0aCA9IG1pbkxlbmd0aDtcblx0XHR0aGlzLm1heExlbmd0aCA9IG1heExlbmd0aDtcblx0XHR0aGlzLmZvcmJpZFJlcGVhdGluZ0NoYXJhY3RlcnMgPSBmb3JiaWRSZXBlYXRpbmdDaGFyYWN0ZXJzO1xuXHRcdHRoaXMuZm9yYmlkUmVwZWF0aW5nQ2hhcmFjdGVyc0NvdW50ID0gZm9yYmlkUmVwZWF0aW5nQ2hhcmFjdGVyc0NvdW50O1xuXHRcdHRoaXMubXVzdENvbnRhaW5BdExlYXN0T25lTG93ZXJjYXNlID0gbXVzdENvbnRhaW5BdExlYXN0T25lTG93ZXJjYXNlO1xuXHRcdHRoaXMubXVzdENvbnRhaW5BdExlYXN0T25lVXBwZXJjYXNlID0gbXVzdENvbnRhaW5BdExlYXN0T25lVXBwZXJjYXNlO1xuXHRcdHRoaXMubXVzdENvbnRhaW5BdExlYXN0T25lTnVtYmVyID0gbXVzdENvbnRhaW5BdExlYXN0T25lTnVtYmVyO1xuXHRcdHRoaXMubXVzdENvbnRhaW5BdExlYXN0T25lU3BlY2lhbENoYXJhY3RlciA9IG11c3RDb250YWluQXRMZWFzdE9uZVNwZWNpYWxDaGFyYWN0ZXI7XG5cdFx0dGhpcy50aHJvd0Vycm9yID0gdGhyb3dFcnJvcjtcblx0fVxuXG5cdHNldCBmb3JiaWRSZXBlYXRpbmdDaGFyYWN0ZXJzQ291bnQodmFsdWUpIHtcblx0XHR0aGlzLl9mb3JiaWRSZXBlYXRpbmdDaGFyYWN0ZXJzQ291bnQgPSB2YWx1ZTtcblx0XHR0aGlzLnJlZ2V4LmZvcmJpZGRpbmdSZXBlYXRpbmdDaGFyYWN0ZXJzID0gbmV3IFJlZ0V4cChgKC4pXFxcXDF7JHsgdGhpcy5mb3JiaWRSZXBlYXRpbmdDaGFyYWN0ZXJzQ291bnQgfSx9YCk7XG5cdH1cblxuXHRnZXQgZm9yYmlkUmVwZWF0aW5nQ2hhcmFjdGVyc0NvdW50KCkge1xuXHRcdHJldHVybiB0aGlzLl9mb3JiaWRSZXBlYXRpbmdDaGFyYWN0ZXJzQ291bnQ7XG5cdH1cblxuXHRlcnJvcihlcnJvciwgbWVzc2FnZSkge1xuXHRcdGlmICh0aGlzLnRocm93RXJyb3IpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoZXJyb3IsIG1lc3NhZ2UpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhbGlkYXRlKHBhc3N3b3JkKSB7XG5cdFx0aWYgKCF0aGlzLmVuYWJsZWQpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICghcGFzc3dvcmQgfHwgdHlwZW9mIHBhc3N3b3JkICE9PSAnc3RyaW5nJyB8fCAhcGFzc3dvcmQubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lcnJvcignZXJyb3ItcGFzc3dvcmQtcG9saWN5LW5vdC1tZXQnLCAnVGhlIHBhc3N3b3JkIHByb3ZpZGVkIGRvZXMgbm90IG1lZXQgdGhlIHNlcnZlclxcJ3MgcGFzc3dvcmQgcG9saWN5LicpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLm1pbkxlbmd0aCA+PSAxICYmIHBhc3N3b3JkLmxlbmd0aCA8IHRoaXMubWluTGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lcnJvcignZXJyb3ItcGFzc3dvcmQtcG9saWN5LW5vdC1tZXQtbWluTGVuZ3RoJywgJ1RoZSBwYXNzd29yZCBkb2VzIG5vdCBtZWV0IHRoZSBtaW5pbXVtIGxlbmd0aCBwYXNzd29yZCBwb2xpY3kuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMubWF4TGVuZ3RoID49IDEgJiYgcGFzc3dvcmQubGVuZ3RoID4gdGhpcy5tYXhMZW5ndGgpIHtcblx0XHRcdHJldHVybiB0aGlzLmVycm9yKCdlcnJvci1wYXNzd29yZC1wb2xpY3ktbm90LW1ldC1tYXhMZW5ndGgnLCAnVGhlIHBhc3N3b3JkIGRvZXMgbm90IG1lZXQgdGhlIG1heGltdW0gbGVuZ3RoIHBhc3N3b3JkIHBvbGljeS4nKTtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5mb3JiaWRSZXBlYXRpbmdDaGFyYWN0ZXJzICYmIHRoaXMucmVnZXguZm9yYmlkZGluZ1JlcGVhdGluZ0NoYXJhY3RlcnMudGVzdChwYXNzd29yZCkpIHtcblx0XHRcdHJldHVybiB0aGlzLmVycm9yKCdlcnJvci1wYXNzd29yZC1wb2xpY3ktbm90LW1ldC1yZXBlYXRpbmdDaGFyYWN0ZXJzJywgJ1RoZSBwYXNzd29yZCBjb250YWlucyByZXBlYXRpbmcgY2hhcmFjdGVycyB3aGljaCBpcyBhZ2FpbnN0IHRoZSBwYXNzd29yZCBwb2xpY3kuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMubXVzdENvbnRhaW5BdExlYXN0T25lTG93ZXJjYXNlICYmICF0aGlzLnJlZ2V4Lm11c3RDb250YWluQXRMZWFzdE9uZUxvd2VyY2FzZS50ZXN0KHBhc3N3b3JkKSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZXJyb3IoJ2Vycm9yLXBhc3N3b3JkLXBvbGljeS1ub3QtbWV0LW9uZUxvd2VyY2FzZScsICdUaGUgcGFzc3dvcmQgZG9lcyBub3QgY29udGFpbiBhdCBsZWFzdCBvbmUgbG93ZXJjYXNlIGNoYXJhY3RlciB3aGljaCBpcyBhZ2FpbnN0IHRoZSBwYXNzd29yZCBwb2xpY3kuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMubXVzdENvbnRhaW5BdExlYXN0T25lVXBwZXJjYXNlICYmICF0aGlzLnJlZ2V4Lm11c3RDb250YWluQXRMZWFzdE9uZVVwcGVyY2FzZS50ZXN0KHBhc3N3b3JkKSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZXJyb3IoJ2Vycm9yLXBhc3N3b3JkLXBvbGljeS1ub3QtbWV0LW9uZVVwcGVyY2FzZScsICdUaGUgcGFzc3dvcmQgZG9lcyBub3QgY29udGFpbiBhdCBsZWFzdCBvbmUgdXBwZXJjYXNlIGNoYXJhY3RlciB3aGljaCBpcyBhZ2FpbnN0IHRoZSBwYXNzd29yZCBwb2xpY3kuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMubXVzdENvbnRhaW5BdExlYXN0T25lTnVtYmVyICYmICF0aGlzLnJlZ2V4Lm11c3RDb250YWluQXRMZWFzdE9uZU51bWJlci50ZXN0KHBhc3N3b3JkKSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZXJyb3IoJ2Vycm9yLXBhc3N3b3JkLXBvbGljeS1ub3QtbWV0LW9uZU51bWJlcicsICdUaGUgcGFzc3dvcmQgZG9lcyBub3QgY29udGFpbiBhdCBsZWFzdCBvbmUgbnVtZXJpY2FsIGNoYXJhY3RlciB3aGljaCBpcyBhZ2FpbnN0IHRoZSBwYXNzd29yZCBwb2xpY3kuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMubXVzdENvbnRhaW5BdExlYXN0T25lU3BlY2lhbENoYXJhY3RlciAmJiAhdGhpcy5yZWdleC5tdXN0Q29udGFpbkF0TGVhc3RPbmVTcGVjaWFsQ2hhcmFjdGVyLnRlc3QocGFzc3dvcmQpKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lcnJvcignZXJyb3ItcGFzc3dvcmQtcG9saWN5LW5vdC1tZXQtb25lU3BlY2lhbCcsICdUaGUgcGFzc3dvcmQgZG9lcyBub3QgY29udGFpbiBhdCBsZWFzdCBvbmUgc3BlY2lhbCBjaGFyYWN0ZXIgd2hpY2ggaXMgYWdhaW5zdCB0aGUgcGFzc3dvcmQgcG9saWN5LicpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBhc3N3b3JkUG9saWN5O1xuIiwiaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuZnVuY3Rpb24gaGFzRG9ja2VyRW52KCkge1xuXHR0cnkge1xuXHRcdGZzLnN0YXRTeW5jKCcvLmRvY2tlcmVudicpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gaGFzRG9ja2VyQ0dyb3VwKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBmcy5yZWFkRmlsZVN5bmMoJy9wcm9jL3NlbGYvY2dyb3VwJywgJ3V0ZjgnKS5pbmRleE9mKCdkb2NrZXInKSAhPT0gLTE7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5mdW5jdGlvbiBjaGVjaygpIHtcblx0cmV0dXJuIGhhc0RvY2tlckVudigpIHx8IGhhc0RvY2tlckNHcm91cCgpO1xufVxuXG5sZXQgaXNEb2NrZXI7XG5Sb2NrZXRDaGF0LmlzRG9ja2VyID0gZnVuY3Rpb24oKSB7XG5cdGlmIChpc0RvY2tlciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0aXNEb2NrZXIgPSBjaGVjaygpO1xuXHR9XG5cblx0cmV0dXJuIGlzRG9ja2VyO1xufTtcbiIsIlJvY2tldENoYXQuYWRkVXNlclRvRGVmYXVsdENoYW5uZWxzID0gZnVuY3Rpb24odXNlciwgc2lsZW5jZWQpIHtcblx0Um9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdiZWZvcmVKb2luRGVmYXVsdENoYW5uZWxzJywgdXNlcik7XG5cdGNvbnN0IGRlZmF1bHRSb29tcyA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRCeURlZmF1bHRBbmRUeXBlcyh0cnVlLCBbJ2MnLCAncCddLCB7IGZpZWxkczogeyB1c2VybmFtZXM6IDAgfSB9KS5mZXRjaCgpO1xuXHRkZWZhdWx0Um9vbXMuZm9yRWFjaCgocm9vbSkgPT4ge1xuXG5cdFx0Ly8gcHV0IHVzZXIgaW4gZGVmYXVsdCByb29tc1xuXHRcdGNvbnN0IG11dGVkID0gcm9vbS5ybyAmJiAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXIuX2lkLCAncG9zdC1yZWFkb25seScpO1xuXHRcdGlmIChtdXRlZCkge1xuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMubXV0ZVVzZXJuYW1lQnlSb29tSWQocm9vbS5faWQsIHVzZXIudXNlcm5hbWUpO1xuXHRcdH1cblxuXHRcdGlmICghUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kT25lQnlSb29tSWRBbmRVc2VySWQocm9vbS5faWQsIHVzZXIuX2lkKSkge1xuXG5cdFx0XHQvLyBBZGQgYSBzdWJzY3JpcHRpb24gdG8gdGhpcyB1c2VyXG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmNyZWF0ZVdpdGhSb29tQW5kVXNlcihyb29tLCB1c2VyLCB7XG5cdFx0XHRcdHRzOiBuZXcgRGF0ZSgpLFxuXHRcdFx0XHRvcGVuOiB0cnVlLFxuXHRcdFx0XHRhbGVydDogdHJ1ZSxcblx0XHRcdFx0dW5yZWFkOiAxLFxuXHRcdFx0XHR1c2VyTWVudGlvbnM6IDEsXG5cdFx0XHRcdGdyb3VwTWVudGlvbnM6IDAsXG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gSW5zZXJ0IHVzZXIgam9pbmVkIG1lc3NhZ2Vcblx0XHRcdGlmICghc2lsZW5jZWQpIHtcblx0XHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuY3JlYXRlVXNlckpvaW5XaXRoUm9vbUlkQW5kVXNlcihyb29tLl9pZCwgdXNlcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcbn07XG4iLCJSb2NrZXRDaGF0LmFkZFVzZXJUb1Jvb20gPSBmdW5jdGlvbihyaWQsIHVzZXIsIGludml0ZXIsIHNpbGVuY2VkKSB7XG5cdGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG5cdGNvbnN0IHJvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlJZChyaWQpO1xuXG5cdC8vIENoZWNrIGlmIHVzZXIgaXMgYWxyZWFkeSBpbiByb29tXG5cdGNvbnN0IHN1YnNjcmlwdGlvbiA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZE9uZUJ5Um9vbUlkQW5kVXNlcklkKHJpZCwgdXNlci5faWQpO1xuXHRpZiAoc3Vic2NyaXB0aW9uKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKHJvb20udCA9PT0gJ2MnIHx8IHJvb20udCA9PT0gJ3AnKSB7XG5cdFx0Um9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdiZWZvcmVKb2luUm9vbScsIHVzZXIsIHJvb20pO1xuXHR9XG5cblx0Y29uc3QgbXV0ZWQgPSByb29tLnJvICYmICFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24odXNlci5faWQsICdwb3N0LXJlYWRvbmx5Jyk7XG5cdGlmIChtdXRlZCkge1xuXHRcdFJvY2tldENoYXQubW9kZWxzLlJvb21zLm11dGVVc2VybmFtZUJ5Um9vbUlkKHJpZCwgdXNlci51c2VybmFtZSk7XG5cdH1cblxuXHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmNyZWF0ZVdpdGhSb29tQW5kVXNlcihyb29tLCB1c2VyLCB7XG5cdFx0dHM6IG5vdyxcblx0XHRvcGVuOiB0cnVlLFxuXHRcdGFsZXJ0OiB0cnVlLFxuXHRcdHVucmVhZDogMSxcblx0XHR1c2VyTWVudGlvbnM6IDEsXG5cdFx0Z3JvdXBNZW50aW9uczogMCxcblx0fSk7XG5cblx0aWYgKCFzaWxlbmNlZCkge1xuXHRcdGlmIChpbnZpdGVyKSB7XG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy5jcmVhdGVVc2VyQWRkZWRXaXRoUm9vbUlkQW5kVXNlcihyaWQsIHVzZXIsIHtcblx0XHRcdFx0dHM6IG5vdyxcblx0XHRcdFx0dToge1xuXHRcdFx0XHRcdF9pZDogaW52aXRlci5faWQsXG5cdFx0XHRcdFx0dXNlcm5hbWU6IGludml0ZXIudXNlcm5hbWUsXG5cdFx0XHRcdH0sXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuY3JlYXRlVXNlckpvaW5XaXRoUm9vbUlkQW5kVXNlcihyaWQsIHVzZXIsIHsgdHM6IG5vdyB9KTtcblx0XHR9XG5cdH1cblxuXHRpZiAocm9vbS50ID09PSAnYycgfHwgcm9vbS50ID09PSAncCcpIHtcblx0XHRNZXRlb3IuZGVmZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRSb2NrZXRDaGF0LmNhbGxiYWNrcy5ydW4oJ2FmdGVySm9pblJvb20nLCB1c2VyLCByb29tKTtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIlJvY2tldENoYXQuYXJjaGl2ZVJvb20gPSBmdW5jdGlvbihyaWQpIHtcblx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuYXJjaGl2ZUJ5SWQocmlkKTtcblx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5hcmNoaXZlQnlSb29tSWQocmlkKTtcblxuXHRSb2NrZXRDaGF0LmNhbGxiYWNrcy5ydW4oJ2FmdGVyUm9vbUFyY2hpdmVkJywgUm9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuZmluZE9uZUJ5SWQocmlkKSwgTWV0ZW9yLnVzZXIoKSk7XG59O1xuIiwiaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5cbmxldCB1c2VybmFtZUJsYWNrTGlzdCA9IFtdO1xuXG5jb25zdCB0b1JlZ0V4cCA9ICh1c2VybmFtZSkgPT4gbmV3IFJlZ0V4cChgXiR7IHMuZXNjYXBlUmVnRXhwKHVzZXJuYW1lKS50cmltKCkgfSRgLCAnaScpO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfQmxvY2tlZFVzZXJuYW1lTGlzdCcsIChrZXksIHZhbHVlKSA9PiB7XG5cdHVzZXJuYW1lQmxhY2tMaXN0ID0gdmFsdWUuc3BsaXQoJywnKS5tYXAodG9SZWdFeHApO1xufSk7XG5cbmNvbnN0IHVzZXJuYW1lSXNCbG9ja2VkID0gKHVzZXJuYW1lLCB1c2VybmFtZUJsYWNrTGlzdCkgPT4gdXNlcm5hbWVCbGFja0xpc3QubGVuZ3RoXG5cdCYmIHVzZXJuYW1lQmxhY2tMaXN0LnNvbWUoKHJlc3RyaWN0ZWRVc2VybmFtZSkgPT4gcmVzdHJpY3RlZFVzZXJuYW1lLnRlc3Qocy50cmltKHMuZXNjYXBlUmVnRXhwKHVzZXJuYW1lKSkpKTtcblxuUm9ja2V0Q2hhdC5jaGVja1VzZXJuYW1lQXZhaWxhYmlsaXR5ID0gZnVuY3Rpb24odXNlcm5hbWUpIHtcblxuXHRpZiAodXNlcm5hbWVJc0Jsb2NrZWQodXNlcm5hbWUsIHVzZXJuYW1lQmxhY2tMaXN0KSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiAhTWV0ZW9yLnVzZXJzLmZpbmRPbmUoe1xuXHRcdHVzZXJuYW1lOiB7XG5cdFx0XHQkcmVnZXg6IHRvUmVnRXhwKHVzZXJuYW1lKSxcblx0XHR9LFxuXHR9LCB7IGZpZWxkczogeyBfaWQ6IDEgfSB9KTtcbn07XG4iLCJpbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5cblJvY2tldENoYXQuY2hlY2tFbWFpbEF2YWlsYWJpbGl0eSA9IGZ1bmN0aW9uKGVtYWlsKSB7XG5cdHJldHVybiAhTWV0ZW9yLnVzZXJzLmZpbmRPbmUoeyAnZW1haWxzLmFkZHJlc3MnOiB7ICRyZWdleCA6IG5ldyBSZWdFeHAoYF4keyBzLnRyaW0ocy5lc2NhcGVSZWdFeHAoZW1haWwpKSB9JGAsICdpJykgfSB9KTtcbn07XG4iLCIvKiBnbG9iYWxzIFJvY2tldENoYXQgKi9cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5Sb2NrZXRDaGF0LmNyZWF0ZVJvb20gPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBvd25lciwgbWVtYmVycywgcmVhZE9ubHksIGV4dHJhRGF0YSA9IHt9KSB7XG5cdG5hbWUgPSBzLnRyaW0obmFtZSk7XG5cdG93bmVyID0gcy50cmltKG93bmVyKTtcblx0bWVtYmVycyA9IFtdLmNvbmNhdChtZW1iZXJzKTtcblxuXHRpZiAoIW5hbWUpIHtcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLW5hbWUnLCAnSW52YWxpZCBuYW1lJywgeyBmdW5jdGlvbjogJ1JvY2tldENoYXQuY3JlYXRlUm9vbScgfSk7XG5cdH1cblxuXHRvd25lciA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeVVzZXJuYW1lKG93bmVyLCB7IGZpZWxkczogeyB1c2VybmFtZTogMSB9IH0pO1xuXHRpZiAoIW93bmVyKSB7XG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgZnVuY3Rpb246ICdSb2NrZXRDaGF0LmNyZWF0ZVJvb20nIH0pO1xuXHR9XG5cblx0aWYgKCFfLmNvbnRhaW5zKG1lbWJlcnMsIG93bmVyLnVzZXJuYW1lKSkge1xuXHRcdG1lbWJlcnMucHVzaChvd25lci51c2VybmFtZSk7XG5cdH1cblxuXHRpZiAoZXh0cmFEYXRhLmJyb2FkY2FzdCkge1xuXHRcdHJlYWRPbmx5ID0gdHJ1ZTtcblx0XHRkZWxldGUgZXh0cmFEYXRhLnJlYWN0V2hlblJlYWRPbmx5O1xuXHR9XG5cblx0Y29uc3Qgbm93ID0gbmV3IERhdGUoKTtcblx0bGV0IHJvb20gPSBPYmplY3QuYXNzaWduKHtcblx0XHRuYW1lOiBSb2NrZXRDaGF0LmdldFZhbGlkUm9vbU5hbWUobmFtZSksXG5cdFx0Zm5hbWU6IG5hbWUsXG5cdFx0dDogdHlwZSxcblx0XHRtc2dzOiAwLFxuXHRcdHVzZXJzQ291bnQ6IDAsXG5cdFx0dToge1xuXHRcdFx0X2lkOiBvd25lci5faWQsXG5cdFx0XHR1c2VybmFtZTogb3duZXIudXNlcm5hbWUsXG5cdFx0fSxcblx0fSwgZXh0cmFEYXRhLCB7XG5cdFx0dHM6IG5vdyxcblx0XHRybzogcmVhZE9ubHkgPT09IHRydWUsXG5cdFx0c3lzTWVzOiByZWFkT25seSAhPT0gdHJ1ZSxcblx0fSk7XG5cblx0aWYgKHR5cGUgPT09ICdkJykge1xuXHRcdHJvb20udXNlcm5hbWVzID0gbWVtYmVycztcblx0fVxuXG5cdGlmIChBcHBzICYmIEFwcHMuaXNMb2FkZWQoKSkge1xuXHRcdGNvbnN0IHByZXZlbnQgPSBQcm9taXNlLmF3YWl0KEFwcHMuZ2V0QnJpZGdlcygpLmdldExpc3RlbmVyQnJpZGdlKCkucm9vbUV2ZW50KCdJUHJlUm9vbUNyZWF0ZVByZXZlbnQnLCByb29tKSk7XG5cdFx0aWYgKHByZXZlbnQpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFwcC1wcmV2ZW50ZWQtY3JlYXRpb24nLCAnQSBSb2NrZXQuQ2hhdCBBcHAgcHJldmVudGVkIHRoZSByb29tIGNyZWF0aW9uLicpO1xuXHRcdH1cblxuXHRcdGxldCByZXN1bHQ7XG5cdFx0cmVzdWx0ID0gUHJvbWlzZS5hd2FpdChBcHBzLmdldEJyaWRnZXMoKS5nZXRMaXN0ZW5lckJyaWRnZSgpLnJvb21FdmVudCgnSVByZVJvb21DcmVhdGVFeHRlbmQnLCByb29tKSk7XG5cdFx0cmVzdWx0ID0gUHJvbWlzZS5hd2FpdChBcHBzLmdldEJyaWRnZXMoKS5nZXRMaXN0ZW5lckJyaWRnZSgpLnJvb21FdmVudCgnSVByZVJvb21DcmVhdGVNb2RpZnknLCByZXN1bHQpKTtcblxuXHRcdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0Jykge1xuXHRcdFx0cm9vbSA9IE9iamVjdC5hc3NpZ24ocm9vbSwgcmVzdWx0KTtcblx0XHR9XG5cdH1cblxuXHRpZiAodHlwZSA9PT0gJ2MnKSB7XG5cdFx0Um9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdiZWZvcmVDcmVhdGVDaGFubmVsJywgb3duZXIsIHJvb20pO1xuXHR9XG5cblx0cm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmNyZWF0ZVdpdGhGdWxsUm9vbURhdGEocm9vbSk7XG5cblx0Zm9yIChjb25zdCB1c2VybmFtZSBvZiBtZW1iZXJzKSB7XG5cdFx0Y29uc3QgbWVtYmVyID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5VXNlcm5hbWUodXNlcm5hbWUsIHsgZmllbGRzOiB7IHVzZXJuYW1lOiAxLCAnc2V0dGluZ3MucHJlZmVyZW5jZXMnOiAxIH0gfSk7XG5cdFx0Y29uc3QgaXNUaGVPd25lciA9IHVzZXJuYW1lID09PSBvd25lci51c2VybmFtZTtcblx0XHRpZiAoIW1lbWJlcikge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Ly8gbWFrZSBhbGwgcm9vbSBtZW1iZXJzIChFeGNlcHQgdGhlIG93bmVyKSBtdXRlZCBieSBkZWZhdWx0LCB1bmxlc3MgdGhleSBoYXZlIHRoZSBwb3N0LXJlYWRvbmx5IHBlcm1pc3Npb25cblx0XHRpZiAocmVhZE9ubHkgPT09IHRydWUgJiYgIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihtZW1iZXIuX2lkLCAncG9zdC1yZWFkb25seScpICYmICFpc1RoZU93bmVyKSB7XG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5tdXRlVXNlcm5hbWVCeVJvb21JZChyb29tLl9pZCwgdXNlcm5hbWUpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGV4dHJhID0geyBvcGVuOiB0cnVlIH07XG5cblx0XHRpZiAodXNlcm5hbWUgPT09IG93bmVyLnVzZXJuYW1lKSB7XG5cdFx0XHRleHRyYS5scyA9IG5vdztcblx0XHR9XG5cblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmNyZWF0ZVdpdGhSb29tQW5kVXNlcihyb29tLCBtZW1iZXIsIGV4dHJhKTtcblx0fVxuXG5cdFJvY2tldENoYXQuYXV0aHouYWRkVXNlclJvbGVzKG93bmVyLl9pZCwgWydvd25lciddLCByb29tLl9pZCk7XG5cblx0aWYgKHR5cGUgPT09ICdjJykge1xuXHRcdE1ldGVvci5kZWZlcigoKSA9PiB7XG5cdFx0XHRSb2NrZXRDaGF0LmNhbGxiYWNrcy5ydW4oJ2FmdGVyQ3JlYXRlQ2hhbm5lbCcsIG93bmVyLCByb29tKTtcblx0XHR9KTtcblx0fSBlbHNlIGlmICh0eXBlID09PSAncCcpIHtcblx0XHRNZXRlb3IuZGVmZXIoKCkgPT4ge1xuXHRcdFx0Um9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdhZnRlckNyZWF0ZVByaXZhdGVHcm91cCcsIG93bmVyLCByb29tKTtcblx0XHR9KTtcblx0fVxuXHRNZXRlb3IuZGVmZXIoKCkgPT4ge1xuXHRcdFJvY2tldENoYXQuY2FsbGJhY2tzLnJ1bignYWZ0ZXJDcmVhdGVSb29tJywgb3duZXIsIHJvb20pO1xuXHR9KTtcblxuXHRpZiAoQXBwcyAmJiBBcHBzLmlzTG9hZGVkKCkpIHtcblx0XHQvLyBUaGlzIHJldHVybnMgYSBwcm9taXNlLCBidXQgaXQgd29uJ3QgbXV0YXRlIGFueXRoaW5nIGFib3V0IHRoZSBtZXNzYWdlXG5cdFx0Ly8gc28sIHdlIGRvbid0IHJlYWxseSBjYXJlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgb3IgZmFpbHNcblx0XHRBcHBzLmdldEJyaWRnZXMoKS5nZXRMaXN0ZW5lckJyaWRnZSgpLnJvb21FdmVudCgnSVBvc3RSb29tQ3JlYXRlJywgcm9vbSk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHJpZDogcm9vbS5faWQsXG5cdFx0bmFtZTogcm9vbS5uYW1lLFxuXHR9O1xufTtcbiIsIlJvY2tldENoYXQuY2xlYW5Sb29tSGlzdG9yeSA9IGZ1bmN0aW9uKHsgcmlkLCBsYXRlc3QgPSBuZXcgRGF0ZSgpLCBvbGRlc3QgPSBuZXcgRGF0ZSgnMDAwMS0wMS0wMVQwMDowMDowMFonKSwgaW5jbHVzaXZlID0gdHJ1ZSwgbGltaXQgPSAwLCBleGNsdWRlUGlubmVkID0gdHJ1ZSwgZmlsZXNPbmx5ID0gZmFsc2UsIGZyb21Vc2VycyA9IFtdIH0pIHtcblx0Y29uc3QgZ3QgPSBpbmNsdXNpdmUgPyAnJGd0ZScgOiAnJGd0Jztcblx0Y29uc3QgbHQgPSBpbmNsdXNpdmUgPyAnJGx0ZScgOiAnJGx0JztcblxuXHRjb25zdCB0cyA9IHsgW2d0XTogb2xkZXN0LCBbbHRdOiBsYXRlc3QgfTtcblxuXHRjb25zdCB0ZXh0ID0gYF8keyBUQVBpMThuLl9fKCdGaWxlX3JlbW92ZWRfYnlfcHJ1bmUnKSB9X2A7XG5cblx0bGV0IGZpbGVDb3VudCA9IDA7XG5cdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRGaWxlc0J5Um9vbUlkUGlubmVkVGltZXN0YW1wQW5kVXNlcnMoXG5cdFx0cmlkLFxuXHRcdGV4Y2x1ZGVQaW5uZWQsXG5cdFx0dHMsXG5cdFx0ZnJvbVVzZXJzLFxuXHRcdHsgZmllbGRzOiB7ICdmaWxlLl9pZCc6IDEsIHBpbm5lZDogMSB9LCBsaW1pdCB9XG5cdCkuZm9yRWFjaCgoZG9jdW1lbnQpID0+IHtcblx0XHRGaWxlVXBsb2FkLmdldFN0b3JlKCdVcGxvYWRzJykuZGVsZXRlQnlJZChkb2N1bWVudC5maWxlLl9pZCk7XG5cdFx0ZmlsZUNvdW50Kys7XG5cdFx0aWYgKGZpbGVzT25seSkge1xuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMudXBkYXRlKHsgX2lkOiBkb2N1bWVudC5faWQgfSwgeyAkdW5zZXQ6IHsgZmlsZTogMSB9LCAkc2V0OiB7IGF0dGFjaG1lbnRzOiBbeyBjb2xvcjogJyNGRDc0NUUnLCB0ZXh0IH1dIH0gfSk7XG5cdFx0fVxuXHR9KTtcblx0aWYgKGZpbGVzT25seSkge1xuXHRcdHJldHVybiBmaWxlQ291bnQ7XG5cdH1cblxuXHRjb25zdCBjb3VudCA9IGxpbWl0ID8gUm9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMucmVtb3ZlQnlJZFBpbm5lZFRpbWVzdGFtcExpbWl0QW5kVXNlcnMocmlkLCBleGNsdWRlUGlubmVkLCB0cywgbGltaXQsIGZyb21Vc2VycykgOiBSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy5yZW1vdmVCeUlkUGlubmVkVGltZXN0YW1wQW5kVXNlcnMocmlkLCBleGNsdWRlUGlubmVkLCB0cywgZnJvbVVzZXJzKTtcblxuXHRpZiAoY291bnQpIHtcblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5yZXNldExhc3RNZXNzYWdlQnlJZChyaWQpO1xuXHRcdFJvY2tldENoYXQuTm90aWZpY2F0aW9ucy5ub3RpZnlSb29tKHJpZCwgJ2RlbGV0ZU1lc3NhZ2VCdWxrJywge1xuXHRcdFx0cmlkLFxuXHRcdFx0ZXhjbHVkZVBpbm5lZCxcblx0XHRcdHRzLFxuXHRcdFx0dXNlcnM6IGZyb21Vc2Vycyxcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gY291bnQ7XG59O1xuIiwiLyogZ2xvYmFscyBGaWxlVXBsb2FkICovXG5Sb2NrZXRDaGF0LmRlbGV0ZU1lc3NhZ2UgPSBmdW5jdGlvbihtZXNzYWdlLCB1c2VyKSB7XG5cdGNvbnN0IGtlZXBIaXN0b3J5ID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ01lc3NhZ2VfS2VlcEhpc3RvcnknKTtcblx0Y29uc3Qgc2hvd0RlbGV0ZWRTdGF0dXMgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTWVzc2FnZV9TaG93RGVsZXRlZFN0YXR1cycpO1xuXHRjb25zdCBkZWxldGVkTXNnID0gUm9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuZmluZE9uZUJ5SWQobWVzc2FnZS5faWQpO1xuXG5cdGlmIChkZWxldGVkTXNnICYmIEFwcHMgJiYgQXBwcy5pc0xvYWRlZCgpKSB7XG5cdFx0Y29uc3QgcHJldmVudCA9IFByb21pc2UuYXdhaXQoQXBwcy5nZXRCcmlkZ2VzKCkuZ2V0TGlzdGVuZXJCcmlkZ2UoKS5tZXNzYWdlRXZlbnQoJ0lQcmVNZXNzYWdlRGVsZXRlUHJldmVudCcsIGRlbGV0ZWRNc2cpKTtcblx0XHRpZiAocHJldmVudCkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYXBwLXByZXZlbnRlZC1kZWxldGluZycsICdBIFJvY2tldC5DaGF0IEFwcCBwcmV2ZW50ZWQgdGhlIG1lc3NhZ2UgZGVsZXRpbmcuJyk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGtlZXBIaXN0b3J5KSB7XG5cdFx0aWYgKHNob3dEZWxldGVkU3RhdHVzKSB7XG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy5jbG9uZUFuZFNhdmVBc0hpc3RvcnlCeUlkKG1lc3NhZ2UuX2lkKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuc2V0SGlkZGVuQnlJZChtZXNzYWdlLl9pZCwgdHJ1ZSk7XG5cdFx0fVxuXG5cdFx0aWYgKG1lc3NhZ2UuZmlsZSAmJiBtZXNzYWdlLmZpbGUuX2lkKSB7XG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5VcGxvYWRzLnVwZGF0ZShtZXNzYWdlLmZpbGUuX2lkLCB7ICRzZXQ6IHsgX2hpZGRlbjogdHJ1ZSB9IH0pO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRpZiAoIXNob3dEZWxldGVkU3RhdHVzKSB7XG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy5yZW1vdmVCeUlkKG1lc3NhZ2UuX2lkKTtcblx0XHR9XG5cblx0XHRpZiAobWVzc2FnZS5maWxlICYmIG1lc3NhZ2UuZmlsZS5faWQpIHtcblx0XHRcdEZpbGVVcGxvYWQuZ2V0U3RvcmUoJ1VwbG9hZHMnKS5kZWxldGVCeUlkKG1lc3NhZ2UuZmlsZS5faWQpO1xuXHRcdH1cblx0fVxuXG5cdE1ldGVvci5kZWZlcihmdW5jdGlvbigpIHtcblx0XHRSb2NrZXRDaGF0LmNhbGxiYWNrcy5ydW4oJ2FmdGVyRGVsZXRlTWVzc2FnZScsIGRlbGV0ZWRNc2cpO1xuXHR9KTtcblxuXHQvLyB1cGRhdGUgbGFzdCBtZXNzYWdlXG5cdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU3RvcmVfTGFzdF9NZXNzYWdlJykpIHtcblx0XHRjb25zdCByb29tID0gUm9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuZmluZE9uZUJ5SWQobWVzc2FnZS5yaWQsIHsgZmllbGRzOiB7IGxhc3RNZXNzYWdlOiAxIH0gfSk7XG5cdFx0aWYgKCFyb29tLmxhc3RNZXNzYWdlIHx8IHJvb20ubGFzdE1lc3NhZ2UuX2lkID09PSBtZXNzYWdlLl9pZCkge1xuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMucmVzZXRMYXN0TWVzc2FnZUJ5SWQobWVzc2FnZS5yaWQpO1xuXHRcdH1cblx0fVxuXG5cdGlmIChzaG93RGVsZXRlZFN0YXR1cykge1xuXHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLnNldEFzRGVsZXRlZEJ5SWRBbmRVc2VyKG1lc3NhZ2UuX2lkLCB1c2VyKTtcblx0fSBlbHNlIHtcblx0XHRSb2NrZXRDaGF0Lk5vdGlmaWNhdGlvbnMubm90aWZ5Um9vbShtZXNzYWdlLnJpZCwgJ2RlbGV0ZU1lc3NhZ2UnLCB7IF9pZDogbWVzc2FnZS5faWQgfSk7XG5cdH1cblxuXHRpZiAoQXBwcyAmJiBBcHBzLmlzTG9hZGVkKCkpIHtcblx0XHRBcHBzLmdldEJyaWRnZXMoKS5nZXRMaXN0ZW5lckJyaWRnZSgpLm1lc3NhZ2VFdmVudCgnSVBvc3RNZXNzYWdlRGVsZXRlZCcsIGRlbGV0ZWRNc2cpO1xuXHR9XG59O1xuIiwiUm9ja2V0Q2hhdC5kZWxldGVVc2VyID0gZnVuY3Rpb24odXNlcklkKSB7XG5cdGNvbnN0IHVzZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlJZCh1c2VySWQsIHtcblx0XHRmaWVsZHM6IHsgdXNlcm5hbWU6IDEsIGF2YXRhck9yaWdpbjogMSB9LFxuXHR9KTtcblxuXHQvLyBVc2VycyB3aXRob3V0IHVzZXJuYW1lIGNhbid0IGRvIGFueXRoaW5nLCBzbyB0aGVyZSBpcyBub3RoaW5nIHRvIHJlbW92ZVxuXHRpZiAodXNlci51c2VybmFtZSAhPSBudWxsKSB7XG5cdFx0Y29uc3Qgcm9vbUNhY2hlID0gW107XG5cblx0XHQvLyBJdGVyYXRlIHRocm91Z2ggYWxsIHRoZSByb29tcyB0aGUgdXNlciBpcyBzdWJzY3JpYmVkIHRvLCB0byBjaGVjayBpZiB0aGV5IGFyZSB0aGUgbGFzdCBvd25lciBvZiBhbnkgb2YgdGhlbS5cblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmRiLmZpbmRCeVVzZXJJZCh1c2VySWQpLmZvckVhY2goKHN1YnNjcmlwdGlvbikgPT4ge1xuXHRcdFx0Y29uc3Qgcm9vbURhdGEgPSB7XG5cdFx0XHRcdHJpZDogc3Vic2NyaXB0aW9uLnJpZCxcblx0XHRcdFx0dDogc3Vic2NyaXB0aW9uLnQsXG5cdFx0XHRcdHN1YnNjcmliZXJzOiBudWxsLFxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gRE1zIGNhbiBhbHdheXMgYmUgZGVsZXRlZCwgc28gbGV0J3MgaWdub3JlIGl0IG9uIHRoaXMgY2hlY2tcblx0XHRcdGlmIChyb29tRGF0YS50ICE9PSAnZCcpIHtcblx0XHRcdFx0Ly8gSWYgdGhlIHVzZXIgaXMgYW4gb3duZXIgb24gdGhpcyByb29tXG5cdFx0XHRcdGlmIChSb2NrZXRDaGF0LmF1dGh6Lmhhc1JvbGUodXNlci5faWQsICdvd25lcicsIHN1YnNjcmlwdGlvbi5yaWQpKSB7XG5cdFx0XHRcdFx0Ly8gRmV0Y2ggdGhlIG51bWJlciBvZiBvd25lcnNcblx0XHRcdFx0XHRjb25zdCBudW1Pd25lcnMgPSBSb2NrZXRDaGF0LmF1dGh6LmdldFVzZXJzSW5Sb2xlKCdvd25lcicsIHN1YnNjcmlwdGlvbi5yaWQpLmZldGNoKCkubGVuZ3RoO1xuXHRcdFx0XHRcdC8vIElmIGl0J3Mgb25seSBvbmUsIHRoZW4gdGhpcyB1c2VyIGlzIHRoZSBvbmx5IG93bmVyLlxuXHRcdFx0XHRcdGlmIChudW1Pd25lcnMgPT09IDEpIHtcblx0XHRcdFx0XHRcdC8vIElmIHRoZSB1c2VyIGlzIHRoZSBsYXN0IG93bmVyIG9mIGEgcHVibGljIGNoYW5uZWwsIHRoZW4gd2UgbmVlZCB0byBhYm9ydCB0aGUgZGVsZXRpb25cblx0XHRcdFx0XHRcdGlmIChyb29tRGF0YS50ID09PSAnYycpIHtcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItdXNlci1pcy1sYXN0LW93bmVyJywgYFRvIGRlbGV0ZSB0aGlzIHVzZXIgeW91J2xsIG5lZWQgdG8gc2V0IGEgbmV3IG93bmVyIHRvIHRoZSBmb2xsb3dpbmcgcm9vbTogJHsgc3Vic2NyaXB0aW9uLm5hbWUgfS5gLCB7XG5cdFx0XHRcdFx0XHRcdFx0bWV0aG9kOiAnZGVsZXRlVXNlcicsXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBGb3IgcHJpdmF0ZSBncm91cHMsIGxldCdzIGNoZWNrIGhvdyBtYW55IHN1YnNjcmliZXJzIGl0IGhhcy4gSWYgdGhlIHVzZXIgaXMgdGhlIG9ubHkgc3Vic2NyaWJlciwgdGhlbiBpdCB3aWxsIGJlIGVsaW1pbmF0ZWQgYW5kIGRvZXNuJ3QgbmVlZCB0byBhYm9ydCB0aGUgZGVsZXRpb25cblx0XHRcdFx0XHRcdHJvb21EYXRhLnN1YnNjcmliZXJzID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kQnlSb29tSWQoc3Vic2NyaXB0aW9uLnJpZCkuY291bnQoKTtcblxuXHRcdFx0XHRcdFx0aWYgKHJvb21EYXRhLnN1YnNjcmliZXJzID4gMSkge1xuXHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci11c2VyLWlzLWxhc3Qtb3duZXInLCBgVG8gZGVsZXRlIHRoaXMgdXNlciB5b3UnbGwgbmVlZCB0byBzZXQgYSBuZXcgb3duZXIgdG8gdGhlIGZvbGxvd2luZyByb29tOiAkeyBzdWJzY3JpcHRpb24ubmFtZSB9LmAsIHtcblx0XHRcdFx0XHRcdFx0XHRtZXRob2Q6ICdkZWxldGVVc2VyJyxcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJvb21DYWNoZS5wdXNoKHJvb21EYXRhKTtcblx0XHR9KTtcblxuXHRcdGNvbnN0IG1lc3NhZ2VFcmFzdXJlVHlwZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdNZXNzYWdlX0VyYXN1cmVUeXBlJyk7XG5cdFx0c3dpdGNoIChtZXNzYWdlRXJhc3VyZVR5cGUpIHtcblx0XHRcdGNhc2UgJ0RlbGV0ZSc6XG5cdFx0XHRcdGNvbnN0IHN0b3JlID0gRmlsZVVwbG9hZC5nZXRTdG9yZSgnVXBsb2FkcycpO1xuXHRcdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy5maW5kRmlsZXNCeVVzZXJJZCh1c2VySWQpLmZvckVhY2goZnVuY3Rpb24oeyBmaWxlIH0pIHtcblx0XHRcdFx0XHRzdG9yZS5kZWxldGVCeUlkKGZpbGUuX2lkKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLnJlbW92ZUJ5VXNlcklkKHVzZXJJZCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnVW5saW5rJzpcblx0XHRcdFx0Y29uc3Qgcm9ja2V0Q2F0ID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQoJ3JvY2tldC5jYXQnKTtcblx0XHRcdFx0Y29uc3QgbmFtZUFsaWFzID0gVEFQaTE4bi5fXygnUmVtb3ZlZF9Vc2VyJyk7XG5cdFx0XHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLnVubGlua1VzZXJJZCh1c2VySWQsIHJvY2tldENhdC5faWQsIHJvY2tldENhdC51c2VybmFtZSwgbmFtZUFsaWFzKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0cm9vbUNhY2hlLmZvckVhY2goKHJvb21EYXRhKSA9PiB7XG5cdFx0XHRpZiAocm9vbURhdGEuc3Vic2NyaWJlcnMgPT09IG51bGwgJiYgcm9vbURhdGEudCAhPT0gJ2QnICYmIHJvb21EYXRhLnQgIT09ICdjJykge1xuXHRcdFx0XHRyb29tRGF0YS5zdWJzY3JpYmVycyA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZEJ5Um9vbUlkKHJvb21EYXRhLnJpZCkuY291bnQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIERNcyBhbmQgbm9uLWNoYW5uZWwgcm9vbXMgd2l0aCBvbmx5IDEgdXNlciAodGhlIG9uZSBiZWluZyBkZWxldGVkKVxuXHRcdFx0aWYgKHJvb21EYXRhLnQgPT09ICdkJyB8fCAocm9vbURhdGEudCAhPT0gJ2MnICYmIHJvb21EYXRhLnN1YnNjcmliZXJzID09PSAxKSkge1xuXHRcdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLnJlbW92ZUJ5Um9vbUlkKHJvb21EYXRhLnJpZCk7XG5cdFx0XHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLnJlbW92ZUZpbGVzQnlSb29tSWQocm9vbURhdGEucmlkKTtcblx0XHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMucmVtb3ZlQnlSb29tSWQocm9vbURhdGEucmlkKTtcblx0XHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMucmVtb3ZlQnlJZChyb29tRGF0YS5yaWQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5yZW1vdmVCeVVzZXJJZCh1c2VySWQpOyAvLyBSZW1vdmUgdXNlciBzdWJzY3JpcHRpb25zXG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMucmVtb3ZlRGlyZWN0Um9vbUNvbnRhaW5pbmdVc2VybmFtZSh1c2VyLnVzZXJuYW1lKTsgLy8gUmVtb3ZlIGRpcmVjdCByb29tcyB3aXRoIHRoZSB1c2VyXG5cblx0XHQvLyByZW1vdmVzIHVzZXIncyBhdmF0YXJcblx0XHRpZiAodXNlci5hdmF0YXJPcmlnaW4gPT09ICd1cGxvYWQnIHx8IHVzZXIuYXZhdGFyT3JpZ2luID09PSAndXJsJykge1xuXHRcdFx0RmlsZVVwbG9hZC5nZXRTdG9yZSgnQXZhdGFycycpLmRlbGV0ZUJ5TmFtZSh1c2VyLnVzZXJuYW1lKTtcblx0XHR9XG5cblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5JbnRlZ3JhdGlvbnMuZGlzYWJsZUJ5VXNlcklkKHVzZXJJZCk7IC8vIERpc2FibGVzIGFsbCB0aGUgaW50ZWdyYXRpb25zIHdoaWNoIHJlbHkgb24gdGhlIHVzZXIgYmVpbmcgZGVsZXRlZC5cblx0XHRSb2NrZXRDaGF0Lk5vdGlmaWNhdGlvbnMubm90aWZ5TG9nZ2VkKCdVc2VyczpEZWxldGVkJywgeyB1c2VySWQgfSk7XG5cdH1cblxuXHRSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5yZW1vdmVCeUlkKHVzZXJJZCk7IC8vIFJlbW92ZSB1c2VyIGZyb20gdXNlcnMgZGF0YWJhc2Vcbn07XG4iLCIvKiBnbG9iYWxzIFJvY2tldENoYXQgKi9cbmltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcblxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignZ2V0RnVsbFVzZXJEYXRhJyk7XG5cbmNvbnN0IGRlZmF1bHRGaWVsZHMgPSB7XG5cdG5hbWU6IDEsXG5cdHVzZXJuYW1lOiAxLFxuXHRzdGF0dXM6IDEsXG5cdHV0Y09mZnNldDogMSxcblx0dHlwZTogMSxcblx0YWN0aXZlOiAxLFxuXHRyZWFzb246IDEsXG59O1xuXG5jb25zdCBmdWxsRmllbGRzID0ge1xuXHRlbWFpbHM6IDEsXG5cdHBob25lOiAxLFxuXHRzdGF0dXNDb25uZWN0aW9uOiAxLFxuXHRjcmVhdGVkQXQ6IDEsXG5cdGxhc3RMb2dpbjogMSxcblx0c2VydmljZXM6IDEsXG5cdHJlcXVpcmVQYXNzd29yZENoYW5nZTogMSxcblx0cmVxdWlyZVBhc3N3b3JkQ2hhbmdlUmVhc29uOiAxLFxuXHRyb2xlczogMSxcbn07XG5cbmxldCBwdWJsaWNDdXN0b21GaWVsZHMgPSB7fTtcbmxldCBjdXN0b21GaWVsZHMgPSB7fTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0N1c3RvbUZpZWxkcycsIChrZXksIHZhbHVlKSA9PiB7XG5cdHB1YmxpY0N1c3RvbUZpZWxkcyA9IHt9O1xuXHRjdXN0b21GaWVsZHMgPSB7fTtcblxuXHRpZiAoIXZhbHVlLnRyaW0oKSkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHRyeSB7XG5cdFx0Y29uc3QgY3VzdG9tRmllbGRzT25TZXJ2ZXIgPSBKU09OLnBhcnNlKHZhbHVlLnRyaW0oKSk7XG5cdFx0T2JqZWN0LmtleXMoY3VzdG9tRmllbGRzT25TZXJ2ZXIpLmZvckVhY2goKGtleSkgPT4ge1xuXHRcdFx0Y29uc3QgZWxlbWVudCA9IGN1c3RvbUZpZWxkc09uU2VydmVyW2tleV07XG5cdFx0XHRpZiAoZWxlbWVudC5wdWJsaWMpIHtcblx0XHRcdFx0cHVibGljQ3VzdG9tRmllbGRzW2BjdXN0b21GaWVsZHMuJHsga2V5IH1gXSA9IDE7XG5cdFx0XHR9XG5cdFx0XHRjdXN0b21GaWVsZHNbYGN1c3RvbUZpZWxkcy4keyBrZXkgfWBdID0gMTtcblx0XHR9KTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGxvZ2dlci53YXJuKGBUaGUgSlNPTiBzcGVjaWZpZWQgZm9yIFwiQWNjb3VudHNfQ3VzdG9tRmllbGRzXCIgaXMgaW52YWxpZC4gVGhlIGZvbGxvd2luZyBlcnJvciB3YXMgdGhyb3duOiAkeyBlIH1gKTtcblx0fVxufSk7XG5cblJvY2tldENoYXQuZ2V0RnVsbFVzZXJEYXRhID0gZnVuY3Rpb24oeyB1c2VySWQsIGZpbHRlciwgbGltaXQ6IGwgfSkge1xuXHRjb25zdCB1c2VybmFtZSA9IHMudHJpbShmaWx0ZXIpO1xuXHRjb25zdCB1c2VyVG9SZXRyaWV2ZUZ1bGxVc2VyRGF0YSA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeVVzZXJuYW1lKHVzZXJuYW1lKTtcblx0Y29uc3QgaXNNeU93bkluZm8gPSB1c2VyVG9SZXRyaWV2ZUZ1bGxVc2VyRGF0YSAmJiB1c2VyVG9SZXRyaWV2ZUZ1bGxVc2VyRGF0YS5faWQgPT09IHVzZXJJZDtcblx0Y29uc3Qgdmlld0Z1bGxPdGhlclVzZXJJbmZvID0gUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXJJZCwgJ3ZpZXctZnVsbC1vdGhlci11c2VyLWluZm8nKTtcblx0Y29uc3QgbGltaXQgPSAhdmlld0Z1bGxPdGhlclVzZXJJbmZvID8gMSA6IGw7XG5cblx0aWYgKCF1c2VybmFtZSAmJiBsaW1pdCA8PSAxKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdGNvbnN0IF9jdXN0b21GaWVsZHMgPSBpc015T3duSW5mbyB8fCB2aWV3RnVsbE90aGVyVXNlckluZm8gPyBjdXN0b21GaWVsZHMgOiBwdWJsaWNDdXN0b21GaWVsZHM7XG5cblx0Y29uc3QgZmllbGRzID0gdmlld0Z1bGxPdGhlclVzZXJJbmZvID8geyAuLi5kZWZhdWx0RmllbGRzLCAuLi5mdWxsRmllbGRzLCAuLi5fY3VzdG9tRmllbGRzIH0gOiB7IC4uLmRlZmF1bHRGaWVsZHMsIC4uLl9jdXN0b21GaWVsZHMgfTtcblxuXHRjb25zdCBvcHRpb25zID0ge1xuXHRcdGZpZWxkcyxcblx0XHRsaW1pdCxcblx0XHRzb3J0OiB7IHVzZXJuYW1lOiAxIH0sXG5cdH07XG5cblx0aWYgKCF1c2VybmFtZSkge1xuXHRcdHJldHVybiBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kKHt9LCBvcHRpb25zKTtcblx0fVxuXHRpZiAobGltaXQgPT09IDEpIHtcblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZEJ5VXNlcm5hbWUodXNlcm5hbWUsIG9wdGlvbnMpO1xuXHR9XG5cdGNvbnN0IHVzZXJuYW1lUmVnID0gbmV3IFJlZ0V4cChzLmVzY2FwZVJlZ0V4cCh1c2VybmFtZSksICdpJyk7XG5cdHJldHVybiBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kQnlVc2VybmFtZU5hbWVPckVtYWlsQWRkcmVzcyh1c2VybmFtZVJlZywgb3B0aW9ucyk7XG59O1xuIiwiLyogZ2xvYmFscyBSb2NrZXRDaGF0ICovXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuUm9ja2V0Q2hhdC5nZXRSb29tQnlOYW1lT3JJZFdpdGhPcHRpb25Ub0pvaW4gPSBmdW5jdGlvbiBfZ2V0Um9vbUJ5TmFtZU9ySWRXaXRoT3B0aW9uVG9Kb2luKHsgY3VycmVudFVzZXJJZCwgbmFtZU9ySWQsIHR5cGUgPSAnJywgdHJ5RGlyZWN0QnlVc2VySWRPbmx5ID0gZmFsc2UsIGpvaW5DaGFubmVsID0gdHJ1ZSwgZXJyb3JPbkVtcHR5ID0gdHJ1ZSB9KSB7XG5cdGxldCByb29tO1xuXG5cdC8vIElmIHRoZSBuYW1lT3JJZCBzdGFydHMgd2l0aCAjLCB0aGVuIGxldCdzIHRyeSB0byBmaW5kIGEgY2hhbm5lbCBvciBncm91cFxuXHRpZiAobmFtZU9ySWQuc3RhcnRzV2l0aCgnIycpKSB7XG5cdFx0bmFtZU9ySWQgPSBuYW1lT3JJZC5zdWJzdHJpbmcoMSk7XG5cdFx0cm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkT3JOYW1lKG5hbWVPcklkKTtcblx0fSBlbHNlIGlmIChuYW1lT3JJZC5zdGFydHNXaXRoKCdAJykgfHwgdHlwZSA9PT0gJ2QnKSB7XG5cdFx0Ly8gSWYgdGhlIG5hbWVPcklkIHN0YXJ0cyB3aXRoIEAgT1IgdHlwZSBpcyAnZCcsIHRoZW4gbGV0J3MgdHJ5IGp1c3QgYSBkaXJlY3QgbWVzc2FnZVxuXHRcdG5hbWVPcklkID0gbmFtZU9ySWQucmVwbGFjZSgnQCcsICcnKTtcblxuXHRcdGxldCByb29tVXNlcjtcblx0XHRpZiAodHJ5RGlyZWN0QnlVc2VySWRPbmx5KSB7XG5cdFx0XHRyb29tVXNlciA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeUlkKG5hbWVPcklkKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cm9vbVVzZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lKHtcblx0XHRcdFx0JG9yOiBbeyBfaWQ6IG5hbWVPcklkIH0sIHsgdXNlcm5hbWU6IG5hbWVPcklkIH1dLFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmlkID0gXy5pc09iamVjdChyb29tVXNlcikgPyBbY3VycmVudFVzZXJJZCwgcm9vbVVzZXIuX2lkXS5zb3J0KCkuam9pbignJykgOiBuYW1lT3JJZDtcblx0XHRyb29tID0gUm9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuZmluZE9uZUJ5SWQocmlkKTtcblxuXHRcdC8vIElmIHRoZSByb29tIGhhc24ndCBiZWVuIGZvdW5kIHlldCwgbGV0J3MgdHJ5IHNvbWUgbW9yZVxuXHRcdGlmICghXy5pc09iamVjdChyb29tKSkge1xuXHRcdFx0Ly8gSWYgdGhlIHJvb21Vc2VyIHdhc24ndCBmb3VuZCwgdGhlbiB0aGVyZSdzIG5vIGRlc3RpbmF0aW9uIHRvIHBvaW50IHRvd2FyZHNcblx0XHRcdC8vIHNvIHJldHVybiBvdXQgYmFzZWQgdXBvbiBlcnJvck9uRW1wdHlcblx0XHRcdGlmICghXy5pc09iamVjdChyb29tVXNlcikpIHtcblx0XHRcdFx0aWYgKGVycm9yT25FbXB0eSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2ludmFsaWQtY2hhbm5lbCcpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyb29tID0gTWV0ZW9yLnJ1bkFzVXNlcihjdXJyZW50VXNlcklkLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y29uc3QgeyByaWQgfSA9IE1ldGVvci5jYWxsKCdjcmVhdGVEaXJlY3RNZXNzYWdlJywgcm9vbVVzZXIudXNlcm5hbWUpO1xuXHRcdFx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuZmluZE9uZUJ5SWQocmlkKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvLyBPdGhlcndpc2UsIHdlJ2xsIHRyZWF0IHRoaXMgYXMgYSBjaGFubmVsIG9yIGdyb3VwLlxuXHRcdHJvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlJZE9yTmFtZShuYW1lT3JJZCk7XG5cdH1cblxuXHQvLyBJZiBubyByb29tIHdhcyBmb3VuZCwgaGFuZGxlIHRoZSByb29tIHJldHVybiBiYXNlZCB1cG9uIGVycm9yT25FbXB0eVxuXHRpZiAoIXJvb20gJiYgZXJyb3JPbkVtcHR5KSB7XG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignaW52YWxpZC1jaGFubmVsJyk7XG5cdH0gZWxzZSBpZiAoIXJvb20pIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBJZiBhIHJvb20gd2FzIGZvdW5kIGFuZCB0aGV5IHByb3ZpZGVkIGEgdHlwZSB0byBzZWFyY2gsIHRoZW4gY2hlY2tcblx0Ly8gYW5kIGlmIHRoZSB0eXBlIGZvdW5kIGlzbid0IHdoYXQgd2UncmUgbG9va2luZyBmb3IgdGhlbiBoYW5kbGVcblx0Ly8gdGhlIHJldHVybiBiYXNlZCB1cG9uIGVycm9yT25FbXB0eVxuXHRpZiAodHlwZSAmJiByb29tLnQgIT09IHR5cGUpIHtcblx0XHRpZiAoZXJyb3JPbkVtcHR5KSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdpbnZhbGlkLWNoYW5uZWwnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdC8vIElmIHRoZSByb29tIHR5cGUgaXMgY2hhbm5lbCBhbmQgam9pbkNoYW5uZWwgaGFzIGJlZW4gcGFzc2VkLCB0cnkgdG8gam9pbiB0aGVtXG5cdC8vIGlmIHRoZXkgY2FuJ3Qgam9pbiB0aGUgcm9vbSwgdGhpcyB3aWxsIGVycm9yIG91dCFcblx0aWYgKHJvb20udCA9PT0gJ2MnICYmIGpvaW5DaGFubmVsKSB7XG5cdFx0Y29uc3Qgc3ViID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kT25lQnlSb29tSWRBbmRVc2VySWQocm9vbS5faWQsIGN1cnJlbnRVc2VySWQpO1xuXG5cdFx0aWYgKCFzdWIpIHtcblx0XHRcdE1ldGVvci5ydW5Bc1VzZXIoY3VycmVudFVzZXJJZCwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBNZXRlb3IuY2FsbCgnam9pblJvb20nLCByb29tLl9pZCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcm9vbTtcbn07XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuY29uc3QgaGlkZU1lc3NhZ2VzT2ZUeXBlID0gW107XG5cblJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KC9NZXNzYWdlX0hpZGVUeXBlXy4rLywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRjb25zdCB0eXBlID0ga2V5LnJlcGxhY2UoJ01lc3NhZ2VfSGlkZVR5cGVfJywgJycpO1xuXHRjb25zdCB0eXBlcyA9IHR5cGUgPT09ICdtdXRlX3VubXV0ZScgPyBbJ3VzZXItbXV0ZWQnLCAndXNlci11bm11dGVkJ10gOiBbdHlwZV07XG5cblx0cmV0dXJuIHR5cGVzLmZvckVhY2goKHR5cGUpID0+IHtcblx0XHRjb25zdCBpbmRleCA9IGhpZGVNZXNzYWdlc09mVHlwZS5pbmRleE9mKHR5cGUpO1xuXG5cdFx0aWYgKHZhbHVlID09PSB0cnVlICYmIGluZGV4ID09PSAtMSkge1xuXHRcdFx0cmV0dXJuIGhpZGVNZXNzYWdlc09mVHlwZS5wdXNoKHR5cGUpO1xuXHRcdH1cblxuXHRcdGlmIChpbmRleCA+IC0xKSB7XG5cdFx0XHRyZXR1cm4gaGlkZU1lc3NhZ2VzT2ZUeXBlLnNwbGljZShpbmRleCwgMSk7XG5cdFx0fVxuXHR9KTtcbn0pO1xuXG5Sb2NrZXRDaGF0LmxvYWRNZXNzYWdlSGlzdG9yeSA9IGZ1bmN0aW9uIGxvYWRNZXNzYWdlSGlzdG9yeSh7IHVzZXJJZCwgcmlkLCBlbmQsIGxpbWl0ID0gMjAsIGxzIH0pIHtcblx0Y29uc3Qgb3B0aW9ucyA9IHtcblx0XHRzb3J0OiB7XG5cdFx0XHR0czogLTEsXG5cdFx0fSxcblx0XHRsaW1pdCxcblx0fTtcblxuXHRpZiAoIVJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdNZXNzYWdlX1Nob3dFZGl0ZWRTdGF0dXMnKSkge1xuXHRcdG9wdGlvbnMuZmllbGRzID0ge1xuXHRcdFx0ZWRpdGVkQXQ6IDAsXG5cdFx0fTtcblx0fVxuXG5cdGxldCByZWNvcmRzO1xuXHRpZiAoZW5kICE9IG51bGwpIHtcblx0XHRyZWNvcmRzID0gUm9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuZmluZFZpc2libGVCeVJvb21JZEJlZm9yZVRpbWVzdGFtcE5vdENvbnRhaW5pbmdUeXBlcyhyaWQsIGVuZCwgaGlkZU1lc3NhZ2VzT2ZUeXBlLCBvcHRpb25zKS5mZXRjaCgpO1xuXHR9IGVsc2Uge1xuXHRcdHJlY29yZHMgPSBSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy5maW5kVmlzaWJsZUJ5Um9vbUlkTm90Q29udGFpbmluZ1R5cGVzKHJpZCwgaGlkZU1lc3NhZ2VzT2ZUeXBlLCBvcHRpb25zKS5mZXRjaCgpO1xuXHR9XG5cblx0Y29uc3QgVUlfVXNlX1JlYWxfTmFtZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVSV9Vc2VfUmVhbF9OYW1lJykgPT09IHRydWU7XG5cblx0Y29uc3QgbWVzc2FnZXMgPSByZWNvcmRzLm1hcCgobWVzc2FnZSkgPT4ge1xuXHRcdG1lc3NhZ2Uuc3RhcnJlZCA9IF8uZmluZFdoZXJlKG1lc3NhZ2Uuc3RhcnJlZCwge1xuXHRcdFx0X2lkOiB1c2VySWQsXG5cdFx0fSk7XG5cdFx0aWYgKG1lc3NhZ2UudSAmJiBtZXNzYWdlLnUuX2lkICYmIFVJX1VzZV9SZWFsX05hbWUpIHtcblx0XHRcdGNvbnN0IHVzZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlJZChtZXNzYWdlLnUuX2lkKTtcblx0XHRcdG1lc3NhZ2UudS5uYW1lID0gdXNlciAmJiB1c2VyLm5hbWU7XG5cdFx0fVxuXHRcdGlmIChtZXNzYWdlLm1lbnRpb25zICYmIG1lc3NhZ2UubWVudGlvbnMubGVuZ3RoICYmIFVJX1VzZV9SZWFsX05hbWUpIHtcblx0XHRcdG1lc3NhZ2UubWVudGlvbnMuZm9yRWFjaCgobWVudGlvbikgPT4ge1xuXHRcdFx0XHRjb25zdCB1c2VyID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQobWVudGlvbi5faWQpO1xuXHRcdFx0XHRtZW50aW9uLm5hbWUgPSB1c2VyICYmIHVzZXIubmFtZTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRyZXR1cm4gbWVzc2FnZTtcblx0fSk7XG5cblx0bGV0IHVucmVhZE5vdExvYWRlZCA9IDA7XG5cdGxldCBmaXJzdFVucmVhZDtcblxuXHRpZiAobHMgIT0gbnVsbCkge1xuXHRcdGNvbnN0IGZpcnN0TWVzc2FnZSA9IG1lc3NhZ2VzW21lc3NhZ2VzLmxlbmd0aCAtIDFdO1xuXG5cdFx0aWYgKChmaXJzdE1lc3NhZ2UgIT0gbnVsbCA/IGZpcnN0TWVzc2FnZS50cyA6IHVuZGVmaW5lZCkgPiBscykge1xuXHRcdFx0ZGVsZXRlIG9wdGlvbnMubGltaXQ7XG5cblx0XHRcdGNvbnN0IHVucmVhZE1lc3NhZ2VzID0gUm9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuZmluZFZpc2libGVCeVJvb21JZEJldHdlZW5UaW1lc3RhbXBzTm90Q29udGFpbmluZ1R5cGVzKHJpZCwgbHMsIGZpcnN0TWVzc2FnZS50cywgaGlkZU1lc3NhZ2VzT2ZUeXBlLCB7XG5cdFx0XHRcdGxpbWl0OiAxLFxuXHRcdFx0XHRzb3J0OiB7XG5cdFx0XHRcdFx0dHM6IDEsXG5cdFx0XHRcdH0sXG5cdFx0XHR9KTtcblxuXHRcdFx0Zmlyc3RVbnJlYWQgPSB1bnJlYWRNZXNzYWdlcy5mZXRjaCgpWzBdO1xuXHRcdFx0dW5yZWFkTm90TG9hZGVkID0gdW5yZWFkTWVzc2FnZXMuY291bnQoKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdG1lc3NhZ2VzLFxuXHRcdGZpcnN0VW5yZWFkLFxuXHRcdHVucmVhZE5vdExvYWRlZCxcblx0fTtcbn07XG4iLCJSb2NrZXRDaGF0LnJlbW92ZVVzZXJGcm9tUm9vbSA9IGZ1bmN0aW9uKHJpZCwgdXNlcikge1xuXHRjb25zdCByb29tID0gUm9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuZmluZE9uZUJ5SWQocmlkKTtcblxuXHRpZiAocm9vbSkge1xuXHRcdFJvY2tldENoYXQuY2FsbGJhY2tzLnJ1bignYmVmb3JlTGVhdmVSb29tJywgdXNlciwgcm9vbSk7XG5cblx0XHRjb25zdCBzdWJzY3JpcHRpb24gPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRPbmVCeVJvb21JZEFuZFVzZXJJZChyaWQsIHVzZXIuX2lkLCB7IGZpZWxkczogeyBfaWQ6IDEgfSB9KTtcblxuXHRcdGlmIChzdWJzY3JpcHRpb24pIHtcblx0XHRcdGNvbnN0IHJlbW92ZWRVc2VyID0gdXNlcjtcblx0XHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmNyZWF0ZVVzZXJMZWF2ZVdpdGhSb29tSWRBbmRVc2VyKHJpZCwgcmVtb3ZlZFVzZXIpO1xuXHRcdH1cblxuXHRcdGlmIChyb29tLnQgPT09ICdsJykge1xuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuY3JlYXRlQ29tbWFuZFdpdGhSb29tSWRBbmRVc2VyKCdzdXJ2ZXknLCByaWQsIHVzZXIpO1xuXHRcdH1cblxuXHRcdFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMucmVtb3ZlQnlSb29tSWRBbmRVc2VySWQocmlkLCB1c2VyLl9pZCk7XG5cblx0XHRNZXRlb3IuZGVmZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBUT0RPOiBDQUNIRTogbWF5YmUgYSBxdWV1ZT9cblx0XHRcdFJvY2tldENoYXQuY2FsbGJhY2tzLnJ1bignYWZ0ZXJMZWF2ZVJvb20nLCB1c2VyLCByb29tKTtcblx0XHR9KTtcblx0fVxufTtcbiIsIi8qIGdsb2JhbHMgR3JhdmF0YXIgKi9cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuaW1wb3J0ICogYXMgTWFpbGVyIGZyb20gJ21ldGVvci9yb2NrZXRjaGF0Om1haWxlcic7XG5sZXQgaHRtbCA9ICcnO1xuTWV0ZW9yLnN0YXJ0dXAoKCkgPT4ge1xuXHRNYWlsZXIuZ2V0VGVtcGxhdGUoJ0FjY291bnRzX1VzZXJBZGRlZEVtYWlsX0VtYWlsJywgKHRlbXBsYXRlKSA9PiB7XG5cdFx0aHRtbCA9IHRlbXBsYXRlO1xuXHR9KTtcbn0pO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVVzZXJEYXRhKHVzZXJJZCwgdXNlckRhdGEpIHtcblx0Y29uc3QgZXhpc3RpbmdSb2xlcyA9IF8ucGx1Y2soUm9ja2V0Q2hhdC5hdXRoei5nZXRSb2xlcygpLCAnX2lkJyk7XG5cblx0aWYgKHVzZXJEYXRhLl9pZCAmJiB1c2VySWQgIT09IHVzZXJEYXRhLl9pZCAmJiAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXJJZCwgJ2VkaXQtb3RoZXItdXNlci1pbmZvJykpIHtcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCAnRWRpdGluZyB1c2VyIGlzIG5vdCBhbGxvd2VkJywge1xuXHRcdFx0bWV0aG9kOiAnaW5zZXJ0T3JVcGRhdGVVc2VyJyxcblx0XHRcdGFjdGlvbjogJ0VkaXRpbmdfdXNlcicsXG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoIXVzZXJEYXRhLl9pZCAmJiAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXJJZCwgJ2NyZWF0ZS11c2VyJykpIHtcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCAnQWRkaW5nIHVzZXIgaXMgbm90IGFsbG93ZWQnLCB7XG5cdFx0XHRtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInLFxuXHRcdFx0YWN0aW9uOiAnQWRkaW5nX3VzZXInLFxuXHRcdH0pO1xuXHR9XG5cblx0aWYgKHVzZXJEYXRhLnJvbGVzICYmIF8uZGlmZmVyZW5jZSh1c2VyRGF0YS5yb2xlcywgZXhpc3RpbmdSb2xlcykubGVuZ3RoID4gMCkge1xuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFjdGlvbi1ub3QtYWxsb3dlZCcsICdUaGUgZmllbGQgUm9sZXMgY29uc2lzdCBpbnZhbGlkIHJvbGUgbmFtZScsIHtcblx0XHRcdG1ldGhvZDogJ2luc2VydE9yVXBkYXRlVXNlcicsXG5cdFx0XHRhY3Rpb246ICdBc3NpZ25fcm9sZScsXG5cdFx0fSk7XG5cdH1cblxuXHRpZiAodXNlckRhdGEucm9sZXMgJiYgXy5pbmRleE9mKHVzZXJEYXRhLnJvbGVzLCAnYWRtaW4nKSA+PSAwICYmICFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24odXNlcklkLCAnYXNzaWduLWFkbWluLXJvbGUnKSkge1xuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFjdGlvbi1ub3QtYWxsb3dlZCcsICdBc3NpZ25pbmcgYWRtaW4gaXMgbm90IGFsbG93ZWQnLCB7XG5cdFx0XHRtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInLFxuXHRcdFx0YWN0aW9uOiAnQXNzaWduX2FkbWluJyxcblx0XHR9KTtcblx0fVxuXG5cdGlmICghdXNlckRhdGEuX2lkICYmICFzLnRyaW0odXNlckRhdGEubmFtZSkpIHtcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci10aGUtZmllbGQtaXMtcmVxdWlyZWQnLCAnVGhlIGZpZWxkIE5hbWUgaXMgcmVxdWlyZWQnLCB7XG5cdFx0XHRtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInLFxuXHRcdFx0ZmllbGQ6ICdOYW1lJyxcblx0XHR9KTtcblx0fVxuXG5cdGlmICghdXNlckRhdGEuX2lkICYmICFzLnRyaW0odXNlckRhdGEudXNlcm5hbWUpKSB7XG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItdGhlLWZpZWxkLWlzLXJlcXVpcmVkJywgJ1RoZSBmaWVsZCBVc2VybmFtZSBpcyByZXF1aXJlZCcsIHtcblx0XHRcdG1ldGhvZDogJ2luc2VydE9yVXBkYXRlVXNlcicsXG5cdFx0XHRmaWVsZDogJ1VzZXJuYW1lJyxcblx0XHR9KTtcblx0fVxuXG5cdGxldCBuYW1lVmFsaWRhdGlvbjtcblxuXHR0cnkge1xuXHRcdG5hbWVWYWxpZGF0aW9uID0gbmV3IFJlZ0V4cChgXiR7IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVVEY4X05hbWVzX1ZhbGlkYXRpb24nKSB9JGApO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0bmFtZVZhbGlkYXRpb24gPSBuZXcgUmVnRXhwKCdeWzAtOWEtekEtWi1fLl0rJCcpO1xuXHR9XG5cblx0aWYgKHVzZXJEYXRhLnVzZXJuYW1lICYmICFuYW1lVmFsaWRhdGlvbi50ZXN0KHVzZXJEYXRhLnVzZXJuYW1lKSkge1xuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWlucHV0LWlzLW5vdC1hLXZhbGlkLWZpZWxkJywgYCR7IF8uZXNjYXBlKHVzZXJEYXRhLnVzZXJuYW1lKSB9IGlzIG5vdCBhIHZhbGlkIHVzZXJuYW1lYCwge1xuXHRcdFx0bWV0aG9kOiAnaW5zZXJ0T3JVcGRhdGVVc2VyJyxcblx0XHRcdGlucHV0OiB1c2VyRGF0YS51c2VybmFtZSxcblx0XHRcdGZpZWxkOiAnVXNlcm5hbWUnLFxuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCF1c2VyRGF0YS5faWQgJiYgIXVzZXJEYXRhLnBhc3N3b3JkKSB7XG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItdGhlLWZpZWxkLWlzLXJlcXVpcmVkJywgJ1RoZSBmaWVsZCBQYXNzd29yZCBpcyByZXF1aXJlZCcsIHtcblx0XHRcdG1ldGhvZDogJ2luc2VydE9yVXBkYXRlVXNlcicsXG5cdFx0XHRmaWVsZDogJ1Bhc3N3b3JkJyxcblx0XHR9KTtcblx0fVxuXG5cdGlmICghdXNlckRhdGEuX2lkKSB7XG5cdFx0aWYgKCFSb2NrZXRDaGF0LmNoZWNrVXNlcm5hbWVBdmFpbGFiaWxpdHkodXNlckRhdGEudXNlcm5hbWUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1maWVsZC11bmF2YWlsYWJsZScsIGAkeyBfLmVzY2FwZSh1c2VyRGF0YS51c2VybmFtZSkgfSBpcyBhbHJlYWR5IGluIHVzZSA6KGAsIHtcblx0XHRcdFx0bWV0aG9kOiAnaW5zZXJ0T3JVcGRhdGVVc2VyJyxcblx0XHRcdFx0ZmllbGQ6IHVzZXJEYXRhLnVzZXJuYW1lLFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHVzZXJEYXRhLmVtYWlsICYmICFSb2NrZXRDaGF0LmNoZWNrRW1haWxBdmFpbGFiaWxpdHkodXNlckRhdGEuZW1haWwpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1maWVsZC11bmF2YWlsYWJsZScsIGAkeyBfLmVzY2FwZSh1c2VyRGF0YS5lbWFpbCkgfSBpcyBhbHJlYWR5IGluIHVzZSA6KGAsIHtcblx0XHRcdFx0bWV0aG9kOiAnaW5zZXJ0T3JVcGRhdGVVc2VyJyxcblx0XHRcdFx0ZmllbGQ6IHVzZXJEYXRhLmVtYWlsLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG59XG5cblJvY2tldENoYXQuc2F2ZVVzZXIgPSBmdW5jdGlvbih1c2VySWQsIHVzZXJEYXRhKSB7XG5cdHZhbGlkYXRlVXNlckRhdGEodXNlcklkLCB1c2VyRGF0YSk7XG5cblx0aWYgKCF1c2VyRGF0YS5faWQpIHtcblx0XHRSb2NrZXRDaGF0LnZhbGlkYXRlRW1haWxEb21haW4odXNlckRhdGEuZW1haWwpO1xuXG5cdFx0Ly8gaW5zZXJ0IHVzZXJcblx0XHRjb25zdCBjcmVhdGVVc2VyID0ge1xuXHRcdFx0dXNlcm5hbWU6IHVzZXJEYXRhLnVzZXJuYW1lLFxuXHRcdFx0cGFzc3dvcmQ6IHVzZXJEYXRhLnBhc3N3b3JkLFxuXHRcdFx0am9pbkRlZmF1bHRDaGFubmVsczogdXNlckRhdGEuam9pbkRlZmF1bHRDaGFubmVscyxcblx0XHR9O1xuXHRcdGlmICh1c2VyRGF0YS5lbWFpbCkge1xuXHRcdFx0Y3JlYXRlVXNlci5lbWFpbCA9IHVzZXJEYXRhLmVtYWlsO1xuXHRcdH1cblxuXHRcdGNvbnN0IF9pZCA9IEFjY291bnRzLmNyZWF0ZVVzZXIoY3JlYXRlVXNlcik7XG5cblx0XHRjb25zdCB1cGRhdGVVc2VyID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRuYW1lOiB1c2VyRGF0YS5uYW1lLFxuXHRcdFx0XHRyb2xlczogdXNlckRhdGEucm9sZXMgfHwgWyd1c2VyJ10sXG5cdFx0XHRcdHNldHRpbmdzOiB1c2VyRGF0YS5zZXR0aW5ncyB8fCB7fSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdGlmICh0eXBlb2YgdXNlckRhdGEucmVxdWlyZVBhc3N3b3JkQ2hhbmdlICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0dXBkYXRlVXNlci4kc2V0LnJlcXVpcmVQYXNzd29yZENoYW5nZSA9IHVzZXJEYXRhLnJlcXVpcmVQYXNzd29yZENoYW5nZTtcblx0XHR9XG5cblx0XHRpZiAodHlwZW9mIHVzZXJEYXRhLnZlcmlmaWVkID09PSAnYm9vbGVhbicpIHtcblx0XHRcdHVwZGF0ZVVzZXIuJHNldFsnZW1haWxzLjAudmVyaWZpZWQnXSA9IHVzZXJEYXRhLnZlcmlmaWVkO1xuXHRcdH1cblxuXHRcdE1ldGVvci51c2Vycy51cGRhdGUoeyBfaWQgfSwgdXBkYXRlVXNlcik7XG5cblx0XHRpZiAodXNlckRhdGEuc2VuZFdlbGNvbWVFbWFpbCkge1xuXHRcdFx0Y29uc3Qgc3ViamVjdCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19Vc2VyQWRkZWRFbWFpbF9TdWJqZWN0Jyk7XG5cblx0XHRcdGNvbnN0IGVtYWlsID0ge1xuXHRcdFx0XHR0bzogdXNlckRhdGEuZW1haWwsXG5cdFx0XHRcdGZyb206IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdGcm9tX0VtYWlsJyksXG5cdFx0XHRcdHN1YmplY3QsXG5cdFx0XHRcdGh0bWwsXG5cdFx0XHRcdGRhdGE6IHtcblx0XHRcdFx0XHRuYW1lOiBzLmVzY2FwZUhUTUwodXNlckRhdGEubmFtZSksXG5cdFx0XHRcdFx0ZW1haWw6IHMuZXNjYXBlSFRNTCh1c2VyRGF0YS5lbWFpbCksXG5cdFx0XHRcdFx0cGFzc3dvcmQ6IHMuZXNjYXBlSFRNTCh1c2VyRGF0YS5wYXNzd29yZCksXG5cdFx0XHRcdH0sXG5cdFx0XHR9O1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRNYWlsZXIuc2VuZChlbWFpbCk7XG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1lbWFpbC1zZW5kLWZhaWxlZCcsIGBFcnJvciB0cnlpbmcgdG8gc2VuZCBlbWFpbDogJHsgZXJyb3IubWVzc2FnZSB9YCwge1xuXHRcdFx0XHRcdGZ1bmN0aW9uOiAnUm9ja2V0Q2hhdC5zYXZlVXNlcicsXG5cdFx0XHRcdFx0bWVzc2FnZTogZXJyb3IubWVzc2FnZSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dXNlckRhdGEuX2lkID0gX2lkO1xuXG5cdFx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19TZXREZWZhdWx0QXZhdGFyJykgPT09IHRydWUgJiYgdXNlckRhdGEuZW1haWwpIHtcblx0XHRcdGNvbnN0IGdyYXZhdGFyVXJsID0gR3JhdmF0YXIuaW1hZ2VVcmwodXNlckRhdGEuZW1haWwsIHsgZGVmYXVsdDogJzQwNCcsIHNpemU6IDIwMCwgc2VjdXJlOiB0cnVlIH0pO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRSb2NrZXRDaGF0LnNldFVzZXJBdmF0YXIodXNlckRhdGEsIGdyYXZhdGFyVXJsLCAnJywgJ3VybCcpO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHQvLyBJZ25vcmUgdGhpcyBlcnJvciBmb3Igbm93LCBhcyBpdCBub3QgYmVpbmcgc3VjY2Vzc2Z1bCBpc24ndCBiYWRcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gX2lkO1xuXHR9XG5cdGlmICghUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0FsbG93VXNlclByb2ZpbGVDaGFuZ2UnKSAmJiAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXJJZCwgJ2VkaXQtb3RoZXItdXNlci1pbmZvJykgJiYgIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbih1c2VySWQsICdlZGl0LW90aGVyLXVzZXItcGFzc3dvcmQnKSkge1xuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFjdGlvbi1ub3QtYWxsb3dlZCcsICdFZGl0IHVzZXIgcHJvZmlsZSBpcyBub3QgYWxsb3dlZCcsIHtcblx0XHRcdG1ldGhvZDogJ2luc2VydE9yVXBkYXRlVXNlcicsXG5cdFx0XHRhY3Rpb246ICdVcGRhdGVfdXNlcicsXG5cdFx0fSk7XG5cdH1cblxuXHRpZiAodXNlckRhdGEudXNlcm5hbWUgJiYgIVJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19BbGxvd1VzZXJuYW1lQ2hhbmdlJykgJiYgIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbih1c2VySWQsICdlZGl0LW90aGVyLXVzZXItaW5mbycpKSB7XG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYWN0aW9uLW5vdC1hbGxvd2VkJywgJ0VkaXQgdXNlcm5hbWUgaXMgbm90IGFsbG93ZWQnLCB7XG5cdFx0XHRtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInLFxuXHRcdFx0YWN0aW9uOiAnVXBkYXRlX3VzZXInLFxuXHRcdH0pO1xuXHR9XG5cblx0aWYgKHVzZXJEYXRhLm5hbWUgJiYgIVJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19BbGxvd1JlYWxOYW1lQ2hhbmdlJykgJiYgIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbih1c2VySWQsICdlZGl0LW90aGVyLXVzZXItaW5mbycpKSB7XG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYWN0aW9uLW5vdC1hbGxvd2VkJywgJ0VkaXQgdXNlciByZWFsIG5hbWUgaXMgbm90IGFsbG93ZWQnLCB7XG5cdFx0XHRtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInLFxuXHRcdFx0YWN0aW9uOiAnVXBkYXRlX3VzZXInLFxuXHRcdH0pO1xuXHR9XG5cblx0aWYgKHVzZXJEYXRhLmVtYWlsICYmICFSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfQWxsb3dFbWFpbENoYW5nZScpICYmICFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24odXNlcklkLCAnZWRpdC1vdGhlci11c2VyLWluZm8nKSkge1xuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFjdGlvbi1ub3QtYWxsb3dlZCcsICdFZGl0IHVzZXIgZW1haWwgaXMgbm90IGFsbG93ZWQnLCB7XG5cdFx0XHRtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInLFxuXHRcdFx0YWN0aW9uOiAnVXBkYXRlX3VzZXInLFxuXHRcdH0pO1xuXHR9XG5cblx0aWYgKHVzZXJEYXRhLnBhc3N3b3JkICYmICFSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfQWxsb3dQYXNzd29yZENoYW5nZScpICYmICFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24odXNlcklkLCAnZWRpdC1vdGhlci11c2VyLXBhc3N3b3JkJykpIHtcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCAnRWRpdCB1c2VyIHBhc3N3b3JkIGlzIG5vdCBhbGxvd2VkJywge1xuXHRcdFx0bWV0aG9kOiAnaW5zZXJ0T3JVcGRhdGVVc2VyJyxcblx0XHRcdGFjdGlvbjogJ1VwZGF0ZV91c2VyJyxcblx0XHR9KTtcblx0fVxuXG5cdC8vIHVwZGF0ZSB1c2VyXG5cdGlmICh1c2VyRGF0YS51c2VybmFtZSkge1xuXHRcdFJvY2tldENoYXQuc2V0VXNlcm5hbWUodXNlckRhdGEuX2lkLCB1c2VyRGF0YS51c2VybmFtZSk7XG5cdH1cblxuXHRpZiAodXNlckRhdGEubmFtZSkge1xuXHRcdFJvY2tldENoYXQuc2V0UmVhbE5hbWUodXNlckRhdGEuX2lkLCB1c2VyRGF0YS5uYW1lKTtcblx0fVxuXG5cdGlmICh1c2VyRGF0YS5lbWFpbCkge1xuXHRcdGNvbnN0IHNob3VsZFNlbmRWZXJpZmljYXRpb25FbWFpbFRvVXNlciA9IHVzZXJEYXRhLnZlcmlmaWVkICE9PSB0cnVlO1xuXHRcdFJvY2tldENoYXQuc2V0RW1haWwodXNlckRhdGEuX2lkLCB1c2VyRGF0YS5lbWFpbCwgc2hvdWxkU2VuZFZlcmlmaWNhdGlvbkVtYWlsVG9Vc2VyKTtcblx0fVxuXG5cdGlmICh1c2VyRGF0YS5wYXNzd29yZCAmJiB1c2VyRGF0YS5wYXNzd29yZC50cmltKCkgJiYgUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXJJZCwgJ2VkaXQtb3RoZXItdXNlci1wYXNzd29yZCcpICYmIFJvY2tldENoYXQucGFzc3dvcmRQb2xpY3kudmFsaWRhdGUodXNlckRhdGEucGFzc3dvcmQpKSB7XG5cdFx0QWNjb3VudHMuc2V0UGFzc3dvcmQodXNlckRhdGEuX2lkLCB1c2VyRGF0YS5wYXNzd29yZC50cmltKCkpO1xuXHR9XG5cblx0Y29uc3QgdXBkYXRlVXNlciA9IHtcblx0XHQkc2V0OiB7fSxcblx0fTtcblxuXHRpZiAodXNlckRhdGEucm9sZXMpIHtcblx0XHR1cGRhdGVVc2VyLiRzZXQucm9sZXMgPSB1c2VyRGF0YS5yb2xlcztcblx0fVxuXG5cdGlmICh1c2VyRGF0YS5zZXR0aW5ncykge1xuXHRcdHVwZGF0ZVVzZXIuJHNldC5zZXR0aW5ncyA9IHsgcHJlZmVyZW5jZXM6IHVzZXJEYXRhLnNldHRpbmdzLnByZWZlcmVuY2VzIH07XG5cdH1cblxuXHRpZiAodHlwZW9mIHVzZXJEYXRhLnJlcXVpcmVQYXNzd29yZENoYW5nZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHR1cGRhdGVVc2VyLiRzZXQucmVxdWlyZVBhc3N3b3JkQ2hhbmdlID0gdXNlckRhdGEucmVxdWlyZVBhc3N3b3JkQ2hhbmdlO1xuXHR9XG5cblx0aWYgKHR5cGVvZiB1c2VyRGF0YS52ZXJpZmllZCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dXBkYXRlVXNlci4kc2V0WydlbWFpbHMuMC52ZXJpZmllZCddID0gdXNlckRhdGEudmVyaWZpZWQ7XG5cdH1cblxuXHRNZXRlb3IudXNlcnMudXBkYXRlKHsgX2lkOiB1c2VyRGF0YS5faWQgfSwgdXBkYXRlVXNlcik7XG5cblx0cmV0dXJuIHRydWU7XG59O1xuIiwiaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5Sb2NrZXRDaGF0LnNhdmVDdXN0b21GaWVsZHMgPSBmdW5jdGlvbih1c2VySWQsIGZvcm1EYXRhKSB7XG5cdGlmIChzLnRyaW0oUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0N1c3RvbUZpZWxkcycpKSAhPT0gJycpIHtcblx0XHRSb2NrZXRDaGF0LnZhbGlkYXRlQ3VzdG9tRmllbGRzKGZvcm1EYXRhKTtcblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zYXZlQ3VzdG9tRmllbGRzV2l0aG91dFZhbGlkYXRpb24odXNlcklkLCBmb3JtRGF0YSk7XG5cdH1cbn07XG4iLCJpbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5cblJvY2tldENoYXQuc2F2ZUN1c3RvbUZpZWxkc1dpdGhvdXRWYWxpZGF0aW9uID0gZnVuY3Rpb24odXNlcklkLCBmb3JtRGF0YSkge1xuXHRpZiAocy50cmltKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19DdXN0b21GaWVsZHMnKSkgIT09ICcnKSB7XG5cdFx0bGV0IGN1c3RvbUZpZWxkc01ldGE7XG5cdFx0dHJ5IHtcblx0XHRcdGN1c3RvbUZpZWxkc01ldGEgPSBKU09OLnBhcnNlKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19DdXN0b21GaWVsZHMnKSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1jdXN0b21maWVsZC1qc29uJywgJ0ludmFsaWQgSlNPTiBmb3IgQ3VzdG9tIEZpZWxkcycpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGN1c3RvbUZpZWxkcyA9IHt9O1xuXHRcdE9iamVjdC5rZXlzKGN1c3RvbUZpZWxkc01ldGEpLmZvckVhY2goKGtleSkgPT4gY3VzdG9tRmllbGRzW2tleV0gPSBmb3JtRGF0YVtrZXldKTtcblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5zZXRDdXN0b21GaWVsZHModXNlcklkLCBjdXN0b21GaWVsZHMpO1xuXG5cdFx0Ly8gVXBkYXRlIGN1c3RvbUZpZWxkcyBvZiBhbGwgRGlyZWN0IE1lc3NhZ2VzJyBSb29tcyBmb3IgdXNlcklkXG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5zZXRDdXN0b21GaWVsZHNEaXJlY3RNZXNzYWdlc0J5VXNlcklkKHVzZXJJZCwgY3VzdG9tRmllbGRzKTtcblxuXHRcdE9iamVjdC5rZXlzKGN1c3RvbUZpZWxkcykuZm9yRWFjaCgoZmllbGROYW1lKSA9PiB7XG5cdFx0XHRpZiAoIWN1c3RvbUZpZWxkc01ldGFbZmllbGROYW1lXS5tb2RpZnlSZWNvcmRGaWVsZCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHsgbW9kaWZ5UmVjb3JkRmllbGQgfSA9IGN1c3RvbUZpZWxkc01ldGFbZmllbGROYW1lXTtcblx0XHRcdGNvbnN0IHVwZGF0ZSA9IHt9O1xuXHRcdFx0aWYgKG1vZGlmeVJlY29yZEZpZWxkLmFycmF5KSB7XG5cdFx0XHRcdHVwZGF0ZS4kYWRkVG9TZXQgPSB7fTtcblx0XHRcdFx0dXBkYXRlLiRhZGRUb1NldFttb2RpZnlSZWNvcmRGaWVsZC5maWVsZF0gPSBjdXN0b21GaWVsZHNbZmllbGROYW1lXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHVwZGF0ZS4kc2V0ID0ge307XG5cdFx0XHRcdHVwZGF0ZS4kc2V0W21vZGlmeVJlY29yZEZpZWxkLmZpZWxkXSA9IGN1c3RvbUZpZWxkc1tmaWVsZE5hbWVdO1xuXHRcdFx0fVxuXG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy51cGRhdGUodXNlcklkLCB1cGRhdGUpO1xuXHRcdH0pO1xuXHR9XG59O1xuIiwiY29uc3Qgb2JqZWN0TWF5YmVJbmNsdWRpbmcgPSAodHlwZXMpID0+IE1hdGNoLldoZXJlKCh2YWx1ZSkgPT4ge1xuXHRPYmplY3Qua2V5cyh0eXBlcykuZm9yRWFjaCgoZmllbGQpID0+IHtcblx0XHRpZiAodmFsdWVbZmllbGRdICE9IG51bGwpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNoZWNrKHZhbHVlW2ZpZWxkXSwgdHlwZXNbZmllbGRdKTtcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdGVycm9yLnBhdGggPSBmaWVsZDtcblx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gdHJ1ZTtcbn0pO1xuXG5jb25zdCB2YWxpZGF0ZUF0dGFjaG1lbnRzRmllbGRzID0gKGF0dGFjaG1lbnRGaWVsZCkgPT4ge1xuXHRjaGVjayhhdHRhY2htZW50RmllbGQsIG9iamVjdE1heWJlSW5jbHVkaW5nKHtcblx0XHRzaG9ydDogQm9vbGVhbixcblx0XHR0aXRsZTogU3RyaW5nLFxuXHRcdHZhbHVlOiBNYXRjaC5PbmVPZihTdHJpbmcsIE1hdGNoLkludGVnZXIsIEJvb2xlYW4pLFxuXHR9KSk7XG5cblx0aWYgKHR5cGVvZiBhdHRhY2htZW50RmllbGQudmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0YXR0YWNobWVudEZpZWxkLnZhbHVlID0gU3RyaW5nKGF0dGFjaG1lbnRGaWVsZC52YWx1ZSk7XG5cdH1cblxufTtcblxuY29uc3QgdmFsaWRhdGVBdHRhY2htZW50c0FjdGlvbnMgPSAoYXR0YWNobWVudEFjdGlvbnMpID0+IHtcblx0Y2hlY2soYXR0YWNobWVudEFjdGlvbnMsIG9iamVjdE1heWJlSW5jbHVkaW5nKHtcblx0XHR0eXBlOiBTdHJpbmcsXG5cdFx0dGV4dDogU3RyaW5nLFxuXHRcdHVybDogU3RyaW5nLFxuXHRcdGltYWdlX3VybDogU3RyaW5nLFxuXHRcdGlzX3dlYnZpZXc6IEJvb2xlYW4sXG5cdFx0d2Vidmlld19oZWlnaHRfcmF0aW86IFN0cmluZyxcblx0XHRtc2c6IFN0cmluZyxcblx0XHRtc2dfaW5fY2hhdF93aW5kb3c6IEJvb2xlYW4sXG5cdH0pKTtcbn07XG5cbmNvbnN0IHZhbGlkYXRlQXR0YWNobWVudCA9IChhdHRhY2htZW50KSA9PiB7XG5cdGNoZWNrKGF0dGFjaG1lbnQsIG9iamVjdE1heWJlSW5jbHVkaW5nKHtcblx0XHRjb2xvcjogU3RyaW5nLFxuXHRcdHRleHQ6IFN0cmluZyxcblx0XHR0czogTWF0Y2guT25lT2YoU3RyaW5nLCBNYXRjaC5JbnRlZ2VyKSxcblx0XHR0aHVtYl91cmw6IFN0cmluZyxcblx0XHRidXR0b25fYWxpZ25tZW50OiBTdHJpbmcsXG5cdFx0YWN0aW9uczogW01hdGNoLkFueV0sXG5cdFx0bWVzc2FnZV9saW5rOiBTdHJpbmcsXG5cdFx0Y29sbGFwc2VkOiBCb29sZWFuLFxuXHRcdGF1dGhvcl9uYW1lOiBTdHJpbmcsXG5cdFx0YXV0aG9yX2xpbms6IFN0cmluZyxcblx0XHRhdXRob3JfaWNvbjogU3RyaW5nLFxuXHRcdHRpdGxlOiBTdHJpbmcsXG5cdFx0dGl0bGVfbGluazogU3RyaW5nLFxuXHRcdHRpdGxlX2xpbmtfZG93bmxvYWQ6IEJvb2xlYW4sXG5cdFx0aW1hZ2VfdXJsOiBTdHJpbmcsXG5cdFx0YXVkaW9fdXJsOiBTdHJpbmcsXG5cdFx0dmlkZW9fdXJsOiBTdHJpbmcsXG5cdFx0ZmllbGRzOiBbTWF0Y2guQW55XSxcblx0fSkpO1xuXG5cdGlmIChhdHRhY2htZW50LmZpZWxkcyAmJiBhdHRhY2htZW50LmZpZWxkcy5sZW5ndGgpIHtcblx0XHRhdHRhY2htZW50LmZpZWxkcy5tYXAodmFsaWRhdGVBdHRhY2htZW50c0ZpZWxkcyk7XG5cdH1cblxuXHRpZiAoYXR0YWNobWVudC5hY3Rpb25zICYmIGF0dGFjaG1lbnQuYWN0aW9ucy5sZW5ndGgpIHtcblx0XHRhdHRhY2htZW50LmFjdGlvbnMubWFwKHZhbGlkYXRlQXR0YWNobWVudHNBY3Rpb25zKTtcblx0fVxufTtcblxuY29uc3QgdmFsaWRhdGVCb2R5QXR0YWNobWVudHMgPSAoYXR0YWNobWVudHMpID0+IGF0dGFjaG1lbnRzLm1hcCh2YWxpZGF0ZUF0dGFjaG1lbnQpO1xuXG5Sb2NrZXRDaGF0LnNlbmRNZXNzYWdlID0gZnVuY3Rpb24odXNlciwgbWVzc2FnZSwgcm9vbSwgdXBzZXJ0ID0gZmFsc2UpIHtcblx0aWYgKCF1c2VyIHx8ICFtZXNzYWdlIHx8ICFyb29tLl9pZCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGNoZWNrKG1lc3NhZ2UsIG9iamVjdE1heWJlSW5jbHVkaW5nKHtcblx0XHRfaWQ6IFN0cmluZyxcblx0XHRtc2c6IFN0cmluZyxcblx0XHR0ZXh0OiBTdHJpbmcsXG5cdFx0YWxpYXM6IFN0cmluZyxcblx0XHRlbW9qaTogU3RyaW5nLFxuXHRcdGF2YXRhcjogU3RyaW5nLFxuXHRcdGF0dGFjaG1lbnRzOiBbTWF0Y2guQW55XSxcblx0fSkpO1xuXG5cdGlmIChBcnJheS5pc0FycmF5KG1lc3NhZ2UuYXR0YWNobWVudHMpICYmIG1lc3NhZ2UuYXR0YWNobWVudHMubGVuZ3RoKSB7XG5cdFx0dmFsaWRhdGVCb2R5QXR0YWNobWVudHMobWVzc2FnZS5hdHRhY2htZW50cyk7XG5cdH1cblxuXHRpZiAoIW1lc3NhZ2UudHMpIHtcblx0XHRtZXNzYWdlLnRzID0gbmV3IERhdGUoKTtcblx0fVxuXHRjb25zdCB7IF9pZCwgdXNlcm5hbWUsIG5hbWUgfSA9IHVzZXI7XG5cdG1lc3NhZ2UudSA9IHtcblx0XHRfaWQsXG5cdFx0dXNlcm5hbWUsXG5cdFx0bmFtZSxcblx0fTtcblx0bWVzc2FnZS5yaWQgPSByb29tLl9pZDtcblxuXHRpZiAoIU1hdGNoLnRlc3QobWVzc2FnZS5tc2csIFN0cmluZykpIHtcblx0XHRtZXNzYWdlLm1zZyA9ICcnO1xuXHR9XG5cblx0aWYgKG1lc3NhZ2UudHMgPT0gbnVsbCkge1xuXHRcdG1lc3NhZ2UudHMgPSBuZXcgRGF0ZSgpO1xuXHR9XG5cblx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdNZXNzYWdlX1JlYWRfUmVjZWlwdF9FbmFibGVkJykpIHtcblx0XHRtZXNzYWdlLnVucmVhZCA9IHRydWU7XG5cdH1cblxuXHQvLyBGb3IgdGhlIFJvY2tldC5DaGF0IEFwcHMgOilcblx0aWYgKG1lc3NhZ2UgJiYgQXBwcyAmJiBBcHBzLmlzTG9hZGVkKCkpIHtcblx0XHRjb25zdCBwcmV2ZW50ID0gUHJvbWlzZS5hd2FpdChBcHBzLmdldEJyaWRnZXMoKS5nZXRMaXN0ZW5lckJyaWRnZSgpLm1lc3NhZ2VFdmVudCgnSVByZU1lc3NhZ2VTZW50UHJldmVudCcsIG1lc3NhZ2UpKTtcblx0XHRpZiAocHJldmVudCkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYXBwLXByZXZlbnRlZC1zZW5kaW5nJywgJ0EgUm9ja2V0LkNoYXQgQXBwIHByZXZlbnRlZCB0aGUgbWVzc2FnZSBzZW5kaW5nLicpO1xuXHRcdH1cblxuXHRcdGxldCByZXN1bHQ7XG5cdFx0cmVzdWx0ID0gUHJvbWlzZS5hd2FpdChBcHBzLmdldEJyaWRnZXMoKS5nZXRMaXN0ZW5lckJyaWRnZSgpLm1lc3NhZ2VFdmVudCgnSVByZU1lc3NhZ2VTZW50RXh0ZW5kJywgbWVzc2FnZSkpO1xuXHRcdHJlc3VsdCA9IFByb21pc2UuYXdhaXQoQXBwcy5nZXRCcmlkZ2VzKCkuZ2V0TGlzdGVuZXJCcmlkZ2UoKS5tZXNzYWdlRXZlbnQoJ0lQcmVNZXNzYWdlU2VudE1vZGlmeScsIHJlc3VsdCkpO1xuXG5cdFx0aWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRtZXNzYWdlID0gT2JqZWN0LmFzc2lnbihtZXNzYWdlLCByZXN1bHQpO1xuXHRcdH1cblx0fVxuXG5cdGlmIChtZXNzYWdlLnBhcnNlVXJscyAhPT0gZmFsc2UpIHtcblx0XHRtZXNzYWdlLmh0bWwgPSBtZXNzYWdlLm1zZztcblx0XHRtZXNzYWdlID0gUm9ja2V0Q2hhdC5NYXJrZG93bi5jb2RlKG1lc3NhZ2UpO1xuXG5cdFx0Y29uc3QgdXJscyA9IG1lc3NhZ2UuaHRtbC5tYXRjaCgvKFtBLVphLXpdezMsOX0pOlxcL1xcLyhbLTs6Jj1cXCtcXCQsXFx3XStAezF9KT8oWy1BLVphLXowLTlcXC5dKykrOj8oXFxkKyk/KChcXC9bLVxcKz0hOn4lXFwvXFwuQFxcLFxcKFxcKVxcd10qKT9cXD8/KFstXFwrPSYhOjslQFxcL1xcLlxcLFxcd10rKT8oPzojKFteXFxzXFwpXSspKT8pPy9nKTtcblx0XHRpZiAodXJscykge1xuXHRcdFx0bWVzc2FnZS51cmxzID0gdXJscy5tYXAoKHVybCkgPT4gKHsgdXJsIH0pKTtcblx0XHR9XG5cblx0XHRtZXNzYWdlID0gUm9ja2V0Q2hhdC5NYXJrZG93bi5tb3VudFRva2Vuc0JhY2sobWVzc2FnZSwgZmFsc2UpO1xuXHRcdG1lc3NhZ2UubXNnID0gbWVzc2FnZS5odG1sO1xuXHRcdGRlbGV0ZSBtZXNzYWdlLmh0bWw7XG5cdFx0ZGVsZXRlIG1lc3NhZ2UudG9rZW5zO1xuXHR9XG5cblx0bWVzc2FnZSA9IFJvY2tldENoYXQuY2FsbGJhY2tzLnJ1bignYmVmb3JlU2F2ZU1lc3NhZ2UnLCBtZXNzYWdlKTtcblx0aWYgKG1lc3NhZ2UpIHtcblx0XHQvLyBBdm9pZCBzYXZpbmcgc2FuZHN0b3JtU2Vzc2lvbklkIHRvIHRoZSBkYXRhYmFzZVxuXHRcdGxldCBzYW5kc3Rvcm1TZXNzaW9uSWQgPSBudWxsO1xuXHRcdGlmIChtZXNzYWdlLnNhbmRzdG9ybVNlc3Npb25JZCkge1xuXHRcdFx0c2FuZHN0b3JtU2Vzc2lvbklkID0gbWVzc2FnZS5zYW5kc3Rvcm1TZXNzaW9uSWQ7XG5cdFx0XHRkZWxldGUgbWVzc2FnZS5zYW5kc3Rvcm1TZXNzaW9uSWQ7XG5cdFx0fVxuXG5cdFx0aWYgKG1lc3NhZ2UuX2lkICYmIHVwc2VydCkge1xuXHRcdFx0Y29uc3QgeyBfaWQgfSA9IG1lc3NhZ2U7XG5cdFx0XHRkZWxldGUgbWVzc2FnZS5faWQ7XG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy51cHNlcnQoe1xuXHRcdFx0XHRfaWQsXG5cdFx0XHRcdCd1Ll9pZCc6IG1lc3NhZ2UudS5faWQsXG5cdFx0XHR9LCBtZXNzYWdlKTtcblx0XHRcdG1lc3NhZ2UuX2lkID0gX2lkO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZXNzYWdlLl9pZCA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmluc2VydChtZXNzYWdlKTtcblx0XHR9XG5cblx0XHRpZiAoQXBwcyAmJiBBcHBzLmlzTG9hZGVkKCkpIHtcblx0XHRcdC8vIFRoaXMgcmV0dXJucyBhIHByb21pc2UsIGJ1dCBpdCB3b24ndCBtdXRhdGUgYW55dGhpbmcgYWJvdXQgdGhlIG1lc3NhZ2Vcblx0XHRcdC8vIHNvLCB3ZSBkb24ndCByZWFsbHkgY2FyZSBpZiBpdCBpcyBzdWNjZXNzZnVsIG9yIGZhaWxzXG5cdFx0XHRBcHBzLmdldEJyaWRnZXMoKS5nZXRMaXN0ZW5lckJyaWRnZSgpLm1lc3NhZ2VFdmVudCgnSVBvc3RNZXNzYWdlU2VudCcsIG1lc3NhZ2UpO1xuXHRcdH1cblxuXHRcdC8qXG5cdFx0RGVmZXIgb3RoZXIgdXBkYXRlcyBhcyB0aGVpciByZXR1cm4gaXMgbm90IGludGVyZXN0aW5nIHRvIHRoZSB1c2VyXG5cdFx0Ki9cblx0XHRNZXRlb3IuZGVmZXIoKCkgPT4ge1xuXHRcdFx0Ly8gRXhlY3V0ZSBhbGwgY2FsbGJhY2tzXG5cdFx0XHRtZXNzYWdlLnNhbmRzdG9ybVNlc3Npb25JZCA9IHNhbmRzdG9ybVNlc3Npb25JZDtcblx0XHRcdHJldHVybiBSb2NrZXRDaGF0LmNhbGxiYWNrcy5ydW4oJ2FmdGVyU2F2ZU1lc3NhZ2UnLCBtZXNzYWdlLCByb29tLCB1c2VyLl9pZCk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdH1cbn07XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuY29uc3QgYmxvY2tlZFNldHRpbmdzID0ge307XG5cbmlmIChwcm9jZXNzLmVudi5TRVRUSU5HU19CTE9DS0VEKSB7XG5cdHByb2Nlc3MuZW52LlNFVFRJTkdTX0JMT0NLRUQuc3BsaXQoJywnKS5mb3JFYWNoKChzZXR0aW5nSWQpID0+IGJsb2NrZWRTZXR0aW5nc1tzZXR0aW5nSWRdID0gMSk7XG59XG5cbmNvbnN0IGhpZGRlblNldHRpbmdzID0ge307XG5pZiAocHJvY2Vzcy5lbnYuU0VUVElOR1NfSElEREVOKSB7XG5cdHByb2Nlc3MuZW52LlNFVFRJTkdTX0hJRERFTi5zcGxpdCgnLCcpLmZvckVhY2goKHNldHRpbmdJZCkgPT4gaGlkZGVuU2V0dGluZ3Nbc2V0dGluZ0lkXSA9IDEpO1xufVxuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLl9zb3J0ZXIgPSB7fTtcblxuXG4vKlxuKiBBZGQgYSBzZXR0aW5nXG4qIEBwYXJhbSB7U3RyaW5nfSBfaWRcbiogQHBhcmFtIHtNaXhlZH0gdmFsdWVcbiogQHBhcmFtIHtPYmplY3R9IHNldHRpbmdcbiovXG5cblJvY2tldENoYXQuc2V0dGluZ3MuYWRkID0gZnVuY3Rpb24oX2lkLCB2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG5cdGlmIChvcHRpb25zID09IG51bGwpIHtcblx0XHRvcHRpb25zID0ge307XG5cdH1cblx0aWYgKCFfaWQgfHwgdmFsdWUgPT0gbnVsbCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5fc29ydGVyW29wdGlvbnMuZ3JvdXBdID09IG51bGwpIHtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLl9zb3J0ZXJbb3B0aW9ucy5ncm91cF0gPSAwO1xuXHR9XG5cdG9wdGlvbnMucGFja2FnZVZhbHVlID0gdmFsdWU7XG5cdG9wdGlvbnMudmFsdWVTb3VyY2UgPSAncGFja2FnZVZhbHVlJztcblx0b3B0aW9ucy5oaWRkZW4gPSBvcHRpb25zLmhpZGRlbiB8fCBmYWxzZTtcblx0b3B0aW9ucy5ibG9ja2VkID0gb3B0aW9ucy5ibG9ja2VkIHx8IGZhbHNlO1xuXHRpZiAob3B0aW9ucy5zb3J0ZXIgPT0gbnVsbCkge1xuXHRcdG9wdGlvbnMuc29ydGVyID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5fc29ydGVyW29wdGlvbnMuZ3JvdXBdKys7XG5cdH1cblx0aWYgKG9wdGlvbnMuZW5hYmxlUXVlcnkgIT0gbnVsbCkge1xuXHRcdG9wdGlvbnMuZW5hYmxlUXVlcnkgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmVuYWJsZVF1ZXJ5KTtcblx0fVxuXHRpZiAob3B0aW9ucy5pMThuRGVmYXVsdFF1ZXJ5ICE9IG51bGwpIHtcblx0XHRvcHRpb25zLmkxOG5EZWZhdWx0UXVlcnkgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmkxOG5EZWZhdWx0UXVlcnkpO1xuXHR9XG5cdGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnZbX2lkXSkge1xuXHRcdHZhbHVlID0gcHJvY2Vzcy5lbnZbX2lkXTtcblx0XHRpZiAodmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnKSB7XG5cdFx0XHR2YWx1ZSA9IHRydWU7XG5cdFx0fSBlbHNlIGlmICh2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAnZmFsc2UnKSB7XG5cdFx0XHR2YWx1ZSA9IGZhbHNlO1xuXHRcdH1cblx0XHRvcHRpb25zLnByb2Nlc3NFbnZWYWx1ZSA9IHZhbHVlO1xuXHRcdG9wdGlvbnMudmFsdWVTb3VyY2UgPSAncHJvY2Vzc0VudlZhbHVlJztcblx0fSBlbHNlIGlmIChNZXRlb3Iuc2V0dGluZ3MgJiYgdHlwZW9mIE1ldGVvci5zZXR0aW5nc1tfaWRdICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGlmIChNZXRlb3Iuc2V0dGluZ3NbX2lkXSA9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dmFsdWUgPSBNZXRlb3Iuc2V0dGluZ3NbX2lkXTtcblx0XHRvcHRpb25zLm1ldGVvclNldHRpbmdzVmFsdWUgPSB2YWx1ZTtcblx0XHRvcHRpb25zLnZhbHVlU291cmNlID0gJ21ldGVvclNldHRpbmdzVmFsdWUnO1xuXHR9XG5cdGlmIChvcHRpb25zLmkxOG5MYWJlbCA9PSBudWxsKSB7XG5cdFx0b3B0aW9ucy5pMThuTGFiZWwgPSBfaWQ7XG5cdH1cblx0aWYgKG9wdGlvbnMuaTE4bkRlc2NyaXB0aW9uID09IG51bGwpIHtcblx0XHRvcHRpb25zLmkxOG5EZXNjcmlwdGlvbiA9IGAkeyBfaWQgfV9EZXNjcmlwdGlvbmA7XG5cdH1cblx0aWYgKGJsb2NrZWRTZXR0aW5nc1tfaWRdICE9IG51bGwpIHtcblx0XHRvcHRpb25zLmJsb2NrZWQgPSB0cnVlO1xuXHR9XG5cdGlmIChoaWRkZW5TZXR0aW5nc1tfaWRdICE9IG51bGwpIHtcblx0XHRvcHRpb25zLmhpZGRlbiA9IHRydWU7XG5cdH1cblx0aWYgKG9wdGlvbnMuYXV0b2NvbXBsZXRlID09IG51bGwpIHtcblx0XHRvcHRpb25zLmF1dG9jb21wbGV0ZSA9IHRydWU7XG5cdH1cblx0aWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudltgT1ZFUldSSVRFX1NFVFRJTkdfJHsgX2lkIH1gXSkge1xuXHRcdGxldCB2YWx1ZSA9IHByb2Nlc3MuZW52W2BPVkVSV1JJVEVfU0VUVElOR18keyBfaWQgfWBdO1xuXHRcdGlmICh2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScpIHtcblx0XHRcdHZhbHVlID0gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09ICdmYWxzZScpIHtcblx0XHRcdHZhbHVlID0gZmFsc2U7XG5cdFx0fVxuXHRcdG9wdGlvbnMudmFsdWUgPSB2YWx1ZTtcblx0XHRvcHRpb25zLnByb2Nlc3NFbnZWYWx1ZSA9IHZhbHVlO1xuXHRcdG9wdGlvbnMudmFsdWVTb3VyY2UgPSAncHJvY2Vzc0VudlZhbHVlJztcblx0fVxuXHRjb25zdCB1cGRhdGVPcGVyYXRpb25zID0ge1xuXHRcdCRzZXQ6IG9wdGlvbnMsXG5cdFx0JHNldE9uSW5zZXJ0OiB7XG5cdFx0XHRjcmVhdGVkQXQ6IG5ldyBEYXRlLFxuXHRcdH0sXG5cdH07XG5cdGlmIChvcHRpb25zLmVkaXRvciAhPSBudWxsKSB7XG5cdFx0dXBkYXRlT3BlcmF0aW9ucy4kc2V0T25JbnNlcnQuZWRpdG9yID0gb3B0aW9ucy5lZGl0b3I7XG5cdFx0ZGVsZXRlIG9wdGlvbnMuZWRpdG9yO1xuXHR9XG5cdGlmIChvcHRpb25zLnZhbHVlID09IG51bGwpIHtcblx0XHRpZiAob3B0aW9ucy5mb3JjZSA9PT0gdHJ1ZSkge1xuXHRcdFx0dXBkYXRlT3BlcmF0aW9ucy4kc2V0LnZhbHVlID0gb3B0aW9ucy5wYWNrYWdlVmFsdWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHVwZGF0ZU9wZXJhdGlvbnMuJHNldE9uSW5zZXJ0LnZhbHVlID0gdmFsdWU7XG5cdFx0fVxuXHR9XG5cdGNvbnN0IHF1ZXJ5ID0gXy5leHRlbmQoe1xuXHRcdF9pZCxcblx0fSwgdXBkYXRlT3BlcmF0aW9ucy4kc2V0KTtcblx0aWYgKG9wdGlvbnMuc2VjdGlvbiA9PSBudWxsKSB7XG5cdFx0dXBkYXRlT3BlcmF0aW9ucy4kdW5zZXQgPSB7XG5cdFx0XHRzZWN0aW9uOiAxLFxuXHRcdH07XG5cdFx0cXVlcnkuc2VjdGlvbiA9IHtcblx0XHRcdCRleGlzdHM6IGZhbHNlLFxuXHRcdH07XG5cdH1cblx0Y29uc3QgZXhpc3RhbnRTZXR0aW5nID0gUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MuZGIuZmluZE9uZShxdWVyeSk7XG5cdGlmIChleGlzdGFudFNldHRpbmcgIT0gbnVsbCkge1xuXHRcdGlmIChleGlzdGFudFNldHRpbmcuZWRpdG9yID09IG51bGwgJiYgdXBkYXRlT3BlcmF0aW9ucy4kc2V0T25JbnNlcnQuZWRpdG9yICE9IG51bGwpIHtcblx0XHRcdHVwZGF0ZU9wZXJhdGlvbnMuJHNldC5lZGl0b3IgPSB1cGRhdGVPcGVyYXRpb25zLiRzZXRPbkluc2VydC5lZGl0b3I7XG5cdFx0XHRkZWxldGUgdXBkYXRlT3BlcmF0aW9ucy4kc2V0T25JbnNlcnQuZWRpdG9yO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHR1cGRhdGVPcGVyYXRpb25zLiRzZXQudHMgPSBuZXcgRGF0ZTtcblx0fVxuXHRyZXR1cm4gUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MudXBzZXJ0KHtcblx0XHRfaWQsXG5cdH0sIHVwZGF0ZU9wZXJhdGlvbnMpO1xufTtcblxuXG4vKlxuKiBBZGQgYSBzZXR0aW5nIGdyb3VwXG4qIEBwYXJhbSB7U3RyaW5nfSBfaWRcbiovXG5cblJvY2tldENoYXQuc2V0dGluZ3MuYWRkR3JvdXAgPSBmdW5jdGlvbihfaWQsIG9wdGlvbnMgPSB7fSwgY2IpIHtcblx0aWYgKCFfaWQpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKF8uaXNGdW5jdGlvbihvcHRpb25zKSkge1xuXHRcdGNiID0gb3B0aW9ucztcblx0XHRvcHRpb25zID0ge307XG5cdH1cblx0aWYgKG9wdGlvbnMuaTE4bkxhYmVsID09IG51bGwpIHtcblx0XHRvcHRpb25zLmkxOG5MYWJlbCA9IF9pZDtcblx0fVxuXHRpZiAob3B0aW9ucy5pMThuRGVzY3JpcHRpb24gPT0gbnVsbCkge1xuXHRcdG9wdGlvbnMuaTE4bkRlc2NyaXB0aW9uID0gYCR7IF9pZCB9X0Rlc2NyaXB0aW9uYDtcblx0fVxuXHRvcHRpb25zLnRzID0gbmV3IERhdGU7XG5cdG9wdGlvbnMuYmxvY2tlZCA9IGZhbHNlO1xuXHRvcHRpb25zLmhpZGRlbiA9IGZhbHNlO1xuXHRpZiAoYmxvY2tlZFNldHRpbmdzW19pZF0gIT0gbnVsbCkge1xuXHRcdG9wdGlvbnMuYmxvY2tlZCA9IHRydWU7XG5cdH1cblx0aWYgKGhpZGRlblNldHRpbmdzW19pZF0gIT0gbnVsbCkge1xuXHRcdG9wdGlvbnMuaGlkZGVuID0gdHJ1ZTtcblx0fVxuXHRSb2NrZXRDaGF0Lm1vZGVscy5TZXR0aW5ncy51cHNlcnQoe1xuXHRcdF9pZCxcblx0fSwge1xuXHRcdCRzZXQ6IG9wdGlvbnMsXG5cdFx0JHNldE9uSW5zZXJ0OiB7XG5cdFx0XHR0eXBlOiAnZ3JvdXAnLFxuXHRcdFx0Y3JlYXRlZEF0OiBuZXcgRGF0ZSxcblx0XHR9LFxuXHR9KTtcblx0aWYgKGNiICE9IG51bGwpIHtcblx0XHRjYi5jYWxsKHtcblx0XHRcdGFkZChpZCwgdmFsdWUsIG9wdGlvbnMpIHtcblx0XHRcdFx0aWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuXHRcdFx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRvcHRpb25zLmdyb3VwID0gX2lkO1xuXHRcdFx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zZXR0aW5ncy5hZGQoaWQsIHZhbHVlLCBvcHRpb25zKTtcblx0XHRcdH0sXG5cdFx0XHRzZWN0aW9uKHNlY3Rpb24sIGNiKSB7XG5cdFx0XHRcdHJldHVybiBjYi5jYWxsKHtcblx0XHRcdFx0XHRhZGQoaWQsIHZhbHVlLCBvcHRpb25zKSB7XG5cdFx0XHRcdFx0XHRpZiAob3B0aW9ucyA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG9wdGlvbnMuZ3JvdXAgPSBfaWQ7XG5cdFx0XHRcdFx0XHRvcHRpb25zLnNlY3Rpb24gPSBzZWN0aW9uO1xuXHRcdFx0XHRcdFx0cmV0dXJuIFJvY2tldENoYXQuc2V0dGluZ3MuYWRkKGlkLCB2YWx1ZSwgb3B0aW9ucyk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9XG59O1xuXG5cbi8qXG4qIFJlbW92ZSBhIHNldHRpbmcgYnkgaWRcbiogQHBhcmFtIHtTdHJpbmd9IF9pZFxuKi9cblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkID0gZnVuY3Rpb24oX2lkKSB7XG5cdGlmICghX2lkKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBSb2NrZXRDaGF0Lm1vZGVscy5TZXR0aW5ncy5yZW1vdmVCeUlkKF9pZCk7XG59O1xuXG5cbi8qXG4qIFVwZGF0ZSBhIHNldHRpbmcgYnkgaWRcbiogQHBhcmFtIHtTdHJpbmd9IF9pZFxuKi9cblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy51cGRhdGVCeUlkID0gZnVuY3Rpb24oX2lkLCB2YWx1ZSwgZWRpdG9yKSB7XG5cdGlmICghX2lkIHx8IHZhbHVlID09IG51bGwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKGVkaXRvciAhPSBudWxsKSB7XG5cdFx0cmV0dXJuIFJvY2tldENoYXQubW9kZWxzLlNldHRpbmdzLnVwZGF0ZVZhbHVlQW5kRWRpdG9yQnlJZChfaWQsIHZhbHVlLCBlZGl0b3IpO1xuXHR9XG5cdHJldHVybiBSb2NrZXRDaGF0Lm1vZGVscy5TZXR0aW5ncy51cGRhdGVWYWx1ZUJ5SWQoX2lkLCB2YWx1ZSk7XG59O1xuXG5cbi8qXG4qIFVwZGF0ZSBvcHRpb25zIG9mIGEgc2V0dGluZyBieSBpZFxuKiBAcGFyYW0ge1N0cmluZ30gX2lkXG4qL1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLnVwZGF0ZU9wdGlvbnNCeUlkID0gZnVuY3Rpb24oX2lkLCBvcHRpb25zKSB7XG5cdGlmICghX2lkIHx8IG9wdGlvbnMgPT0gbnVsbCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MudXBkYXRlT3B0aW9uc0J5SWQoX2lkLCBvcHRpb25zKTtcbn07XG5cblxuLypcbiogVXBkYXRlIGEgc2V0dGluZyBieSBpZFxuKiBAcGFyYW0ge1N0cmluZ30gX2lkXG4qL1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmNsZWFyQnlJZCA9IGZ1bmN0aW9uKF9pZCkge1xuXHRpZiAoX2lkID09IG51bGwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIFJvY2tldENoYXQubW9kZWxzLlNldHRpbmdzLnVwZGF0ZVZhbHVlQnlJZChfaWQsIHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qXG4qIFVwZGF0ZSBhIHNldHRpbmcgYnkgaWRcbiovXG5cblJvY2tldENoYXQuc2V0dGluZ3MuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRSb2NrZXRDaGF0LnNldHRpbmdzLmluaXRpYWxMb2FkID0gdHJ1ZTtcblx0Um9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MuZmluZCgpLm9ic2VydmUoe1xuXHRcdGFkZGVkKHJlY29yZCkge1xuXHRcdFx0TWV0ZW9yLnNldHRpbmdzW3JlY29yZC5faWRdID0gcmVjb3JkLnZhbHVlO1xuXHRcdFx0aWYgKHJlY29yZC5lbnYgPT09IHRydWUpIHtcblx0XHRcdFx0cHJvY2Vzcy5lbnZbcmVjb3JkLl9pZF0gPSByZWNvcmQudmFsdWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zZXR0aW5ncy5sb2FkKHJlY29yZC5faWQsIHJlY29yZC52YWx1ZSwgUm9ja2V0Q2hhdC5zZXR0aW5ncy5pbml0aWFsTG9hZCk7XG5cdFx0fSxcblx0XHRjaGFuZ2VkKHJlY29yZCkge1xuXHRcdFx0TWV0ZW9yLnNldHRpbmdzW3JlY29yZC5faWRdID0gcmVjb3JkLnZhbHVlO1xuXHRcdFx0aWYgKHJlY29yZC5lbnYgPT09IHRydWUpIHtcblx0XHRcdFx0cHJvY2Vzcy5lbnZbcmVjb3JkLl9pZF0gPSByZWNvcmQudmFsdWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zZXR0aW5ncy5sb2FkKHJlY29yZC5faWQsIHJlY29yZC52YWx1ZSwgUm9ja2V0Q2hhdC5zZXR0aW5ncy5pbml0aWFsTG9hZCk7XG5cdFx0fSxcblx0XHRyZW1vdmVkKHJlY29yZCkge1xuXHRcdFx0ZGVsZXRlIE1ldGVvci5zZXR0aW5nc1tyZWNvcmQuX2lkXTtcblx0XHRcdGlmIChyZWNvcmQuZW52ID09PSB0cnVlKSB7XG5cdFx0XHRcdGRlbGV0ZSBwcm9jZXNzLmVudltyZWNvcmQuX2lkXTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBSb2NrZXRDaGF0LnNldHRpbmdzLmxvYWQocmVjb3JkLl9pZCwgdW5kZWZpbmVkLCBSb2NrZXRDaGF0LnNldHRpbmdzLmluaXRpYWxMb2FkKTtcblx0XHR9LFxuXHR9KTtcblx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5pbml0aWFsTG9hZCA9IGZhbHNlO1xuXHRSb2NrZXRDaGF0LnNldHRpbmdzLmFmdGVySW5pdGlhbExvYWQuZm9yRWFjaCgoZm4pID0+IGZuKE1ldGVvci5zZXR0aW5ncykpO1xufTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5hZnRlckluaXRpYWxMb2FkID0gW107XG5cblJvY2tldENoYXQuc2V0dGluZ3Mub25BZnRlckluaXRpYWxMb2FkID0gZnVuY3Rpb24oZm4pIHtcblx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5hZnRlckluaXRpYWxMb2FkLnB1c2goZm4pO1xuXHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5pbml0aWFsTG9hZCA9PT0gZmFsc2UpIHtcblx0XHRyZXR1cm4gZm4oTWV0ZW9yLnNldHRpbmdzKTtcblx0fVxufTtcbiIsIlJvY2tldENoYXQuc2V0VXNlckF2YXRhciA9IGZ1bmN0aW9uKHVzZXIsIGRhdGFVUkksIGNvbnRlbnRUeXBlLCBzZXJ2aWNlKSB7XG5cdGxldCBlbmNvZGluZztcblx0bGV0IGltYWdlO1xuXG5cdGlmIChzZXJ2aWNlID09PSAnaW5pdGlhbHMnKSB7XG5cdFx0cmV0dXJuIFJvY2tldENoYXQubW9kZWxzLlVzZXJzLnNldEF2YXRhck9yaWdpbih1c2VyLl9pZCwgc2VydmljZSk7XG5cdH0gZWxzZSBpZiAoc2VydmljZSA9PT0gJ3VybCcpIHtcblx0XHRsZXQgcmVzdWx0ID0gbnVsbDtcblxuXHRcdHRyeSB7XG5cdFx0XHRyZXN1bHQgPSBIVFRQLmdldChkYXRhVVJJLCB7IG5wbVJlcXVlc3RPcHRpb25zOiB7IGVuY29kaW5nOiAnYmluYXJ5JyB9IH0pO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRpZiAoIWVycm9yLnJlc3BvbnNlIHx8IGVycm9yLnJlc3BvbnNlLnN0YXR1c0NvZGUgIT09IDQwNCkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhgRXJyb3Igd2hpbGUgaGFuZGxpbmcgdGhlIHNldHRpbmcgb2YgdGhlIGF2YXRhciBmcm9tIGEgdXJsICgkeyBkYXRhVVJJIH0pIGZvciAkeyB1c2VyLnVzZXJuYW1lIH06YCwgZXJyb3IpO1xuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hdmF0YXItdXJsLWhhbmRsaW5nJywgYEVycm9yIHdoaWxlIGhhbmRsaW5nIGF2YXRhciBzZXR0aW5nIGZyb20gYSBVUkwgKCR7IGRhdGFVUkkgfSkgZm9yICR7IHVzZXIudXNlcm5hbWUgfWAsIHsgZnVuY3Rpb246ICdSb2NrZXRDaGF0LnNldFVzZXJBdmF0YXInLCB1cmw6IGRhdGFVUkksIHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lIH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChyZXN1bHQuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhgTm90IGEgdmFsaWQgcmVzcG9uc2UsICR7IHJlc3VsdC5zdGF0dXNDb2RlIH0sIGZyb20gdGhlIGF2YXRhciB1cmw6ICR7IGRhdGFVUkkgfWApO1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYXZhdGFyLWludmFsaWQtdXJsJywgYEludmFsaWQgYXZhdGFyIFVSTDogJHsgZGF0YVVSSSB9YCwgeyBmdW5jdGlvbjogJ1JvY2tldENoYXQuc2V0VXNlckF2YXRhcicsIHVybDogZGF0YVVSSSB9KTtcblx0XHR9XG5cblx0XHRpZiAoIS9pbWFnZVxcLy4rLy50ZXN0KHJlc3VsdC5oZWFkZXJzWydjb250ZW50LXR5cGUnXSkpIHtcblx0XHRcdGNvbnNvbGUubG9nKGBOb3QgYSB2YWxpZCBjb250ZW50LXR5cGUgZnJvbSB0aGUgcHJvdmlkZWQgdXJsLCAkeyByZXN1bHQuaGVhZGVyc1snY29udGVudC10eXBlJ10gfSwgZnJvbSB0aGUgYXZhdGFyIHVybDogJHsgZGF0YVVSSSB9YCk7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hdmF0YXItaW52YWxpZC11cmwnLCBgSW52YWxpZCBhdmF0YXIgVVJMOiAkeyBkYXRhVVJJIH1gLCB7IGZ1bmN0aW9uOiAnUm9ja2V0Q2hhdC5zZXRVc2VyQXZhdGFyJywgdXJsOiBkYXRhVVJJIH0pO1xuXHRcdH1cblxuXHRcdGVuY29kaW5nID0gJ2JpbmFyeSc7XG5cdFx0aW1hZ2UgPSByZXN1bHQuY29udGVudDtcblx0XHRjb250ZW50VHlwZSA9IHJlc3VsdC5oZWFkZXJzWydjb250ZW50LXR5cGUnXTtcblx0fSBlbHNlIGlmIChzZXJ2aWNlID09PSAncmVzdCcpIHtcblx0XHRlbmNvZGluZyA9ICdiaW5hcnknO1xuXHRcdGltYWdlID0gZGF0YVVSSTtcblx0fSBlbHNlIHtcblx0XHRjb25zdCBmaWxlRGF0YSA9IFJvY2tldENoYXRGaWxlLmRhdGFVUklQYXJzZShkYXRhVVJJKTtcblx0XHRlbmNvZGluZyA9ICdiYXNlNjQnO1xuXHRcdGltYWdlID0gZmlsZURhdGEuaW1hZ2U7XG5cdFx0Y29udGVudFR5cGUgPSBmaWxlRGF0YS5jb250ZW50VHlwZTtcblx0fVxuXG5cdGNvbnN0IGJ1ZmZlciA9IG5ldyBCdWZmZXIoaW1hZ2UsIGVuY29kaW5nKTtcblx0Y29uc3QgZmlsZVN0b3JlID0gRmlsZVVwbG9hZC5nZXRTdG9yZSgnQXZhdGFycycpO1xuXHRmaWxlU3RvcmUuZGVsZXRlQnlOYW1lKHVzZXIudXNlcm5hbWUpO1xuXG5cdGNvbnN0IGZpbGUgPSB7XG5cdFx0dXNlcklkOiB1c2VyLl9pZCxcblx0XHR0eXBlOiBjb250ZW50VHlwZSxcblx0XHRzaXplOiBidWZmZXIubGVuZ3RoLFxuXHR9O1xuXG5cdGZpbGVTdG9yZS5pbnNlcnQoZmlsZSwgYnVmZmVyLCAoKSA9PiB7XG5cdFx0TWV0ZW9yLnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5zZXRBdmF0YXJPcmlnaW4odXNlci5faWQsIHNlcnZpY2UpO1xuXHRcdFx0Um9ja2V0Q2hhdC5Ob3RpZmljYXRpb25zLm5vdGlmeUxvZ2dlZCgndXBkYXRlQXZhdGFyJywgeyB1c2VybmFtZTogdXNlci51c2VybmFtZSB9KTtcblx0XHR9LCA1MDApO1xuXHR9KTtcbn07XG4iLCJpbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5cblJvY2tldENoYXQuX3NldFVzZXJuYW1lID0gZnVuY3Rpb24odXNlcklkLCB1KSB7XG5cdGNvbnN0IHVzZXJuYW1lID0gcy50cmltKHUpO1xuXHRpZiAoIXVzZXJJZCB8fCAhdXNlcm5hbWUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0bGV0IG5hbWVWYWxpZGF0aW9uO1xuXHR0cnkge1xuXHRcdG5hbWVWYWxpZGF0aW9uID0gbmV3IFJlZ0V4cChgXiR7IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVVEY4X05hbWVzX1ZhbGlkYXRpb24nKSB9JGApO1xuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdG5hbWVWYWxpZGF0aW9uID0gbmV3IFJlZ0V4cCgnXlswLTlhLXpBLVotXy5dKyQnKTtcblx0fVxuXHRpZiAoIW5hbWVWYWxpZGF0aW9uLnRlc3QodXNlcm5hbWUpKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGNvbnN0IHVzZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlJZCh1c2VySWQpO1xuXHQvLyBVc2VyIGFscmVhZHkgaGFzIGRlc2lyZWQgdXNlcm5hbWUsIHJldHVyblxuXHRpZiAodXNlci51c2VybmFtZSA9PT0gdXNlcm5hbWUpIHtcblx0XHRyZXR1cm4gdXNlcjtcblx0fVxuXHRjb25zdCBwcmV2aW91c1VzZXJuYW1lID0gdXNlci51c2VybmFtZTtcblx0Ly8gQ2hlY2sgdXNlcm5hbWUgYXZhaWxhYmlsaXR5IG9yIGlmIHRoZSB1c2VyIGFscmVhZHkgb3ducyBhIGRpZmZlcmVudCBjYXNpbmcgb2YgdGhlIG5hbWVcblx0aWYgKCFwcmV2aW91c1VzZXJuYW1lIHx8ICEodXNlcm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gcHJldmlvdXNVc2VybmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuXHRcdGlmICghUm9ja2V0Q2hhdC5jaGVja1VzZXJuYW1lQXZhaWxhYmlsaXR5KHVzZXJuYW1lKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXHQvLyBJZiBmaXJzdCB0aW1lIHNldHRpbmcgdXNlcm5hbWUsIHNlbmQgRW5yb2xsbWVudCBFbWFpbFxuXHR0cnkge1xuXHRcdGlmICghcHJldmlvdXNVc2VybmFtZSAmJiB1c2VyLmVtYWlscyAmJiB1c2VyLmVtYWlscy5sZW5ndGggPiAwICYmIFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19FbnJvbGxtZW50X0VtYWlsJykpIHtcblx0XHRcdEFjY291bnRzLnNlbmRFbnJvbGxtZW50RW1haWwodXNlci5faWQpO1xuXHRcdH1cblx0fSBjYXRjaCAoZSkge1xuXHRcdGNvbnNvbGUuZXJyb3IoZSk7XG5cdH1cblx0LyogZ2xvYmFscyBnZXRBdmF0YXJTdWdnZXN0aW9uRm9yVXNlciAqL1xuXHR1c2VyLnVzZXJuYW1lID0gdXNlcm5hbWU7XG5cdGlmICghcHJldmlvdXNVc2VybmFtZSAmJiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfU2V0RGVmYXVsdEF2YXRhcicpID09PSB0cnVlKSB7XG5cdFx0Y29uc3QgYXZhdGFyU3VnZ2VzdGlvbnMgPSBnZXRBdmF0YXJTdWdnZXN0aW9uRm9yVXNlcih1c2VyKTtcblx0XHRsZXQgZ3JhdmF0YXI7XG5cdFx0T2JqZWN0LmtleXMoYXZhdGFyU3VnZ2VzdGlvbnMpLnNvbWUoKHNlcnZpY2UpID0+IHtcblx0XHRcdGNvbnN0IGF2YXRhckRhdGEgPSBhdmF0YXJTdWdnZXN0aW9uc1tzZXJ2aWNlXTtcblx0XHRcdGlmIChzZXJ2aWNlICE9PSAnZ3JhdmF0YXInKSB7XG5cdFx0XHRcdFJvY2tldENoYXQuc2V0VXNlckF2YXRhcih1c2VyLCBhdmF0YXJEYXRhLmJsb2IsIGF2YXRhckRhdGEuY29udGVudFR5cGUsIHNlcnZpY2UpO1xuXHRcdFx0XHRncmF2YXRhciA9IG51bGw7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0Z3JhdmF0YXIgPSBhdmF0YXJEYXRhO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0pO1xuXHRcdGlmIChncmF2YXRhciAhPSBudWxsKSB7XG5cdFx0XHRSb2NrZXRDaGF0LnNldFVzZXJBdmF0YXIodXNlciwgZ3JhdmF0YXIuYmxvYiwgZ3JhdmF0YXIuY29udGVudFR5cGUsICdncmF2YXRhcicpO1xuXHRcdH1cblx0fVxuXHQvLyBVc2VybmFtZSBpcyBhdmFpbGFibGU7IGlmIGNvbWluZyBmcm9tIG9sZCB1c2VybmFtZSwgdXBkYXRlIGFsbCByZWZlcmVuY2VzXG5cdGlmIChwcmV2aW91c1VzZXJuYW1lKSB7XG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMudXBkYXRlQWxsVXNlcm5hbWVzQnlVc2VySWQodXNlci5faWQsIHVzZXJuYW1lKTtcblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy51cGRhdGVVc2VybmFtZU9mRWRpdEJ5VXNlcklkKHVzZXIuX2lkLCB1c2VybmFtZSk7XG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuZmluZEJ5TWVudGlvbihwcmV2aW91c1VzZXJuYW1lKS5mb3JFYWNoKGZ1bmN0aW9uKG1zZykge1xuXHRcdFx0Y29uc3QgdXBkYXRlZE1zZyA9IG1zZy5tc2cucmVwbGFjZShuZXcgUmVnRXhwKGBAJHsgcHJldmlvdXNVc2VybmFtZSB9YCwgJ2lnJyksIGBAJHsgdXNlcm5hbWUgfWApO1xuXHRcdFx0cmV0dXJuIFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLnVwZGF0ZVVzZXJuYW1lQW5kTWVzc2FnZU9mTWVudGlvbkJ5SWRBbmRPbGRVc2VybmFtZShtc2cuX2lkLCBwcmV2aW91c1VzZXJuYW1lLCB1c2VybmFtZSwgdXBkYXRlZE1zZyk7XG5cdFx0fSk7XG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMucmVwbGFjZVVzZXJuYW1lKHByZXZpb3VzVXNlcm5hbWUsIHVzZXJuYW1lKTtcblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5yZXBsYWNlTXV0ZWRVc2VybmFtZShwcmV2aW91c1VzZXJuYW1lLCB1c2VybmFtZSk7XG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMucmVwbGFjZVVzZXJuYW1lT2ZVc2VyQnlVc2VySWQodXNlci5faWQsIHVzZXJuYW1lKTtcblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLnNldFVzZXJVc2VybmFtZUJ5VXNlcklkKHVzZXIuX2lkLCB1c2VybmFtZSk7XG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5zZXROYW1lRm9yRGlyZWN0Um9vbXNXaXRoT2xkTmFtZShwcmV2aW91c1VzZXJuYW1lLCB1c2VybmFtZSk7XG5cdFx0Um9ja2V0Q2hhdC5tb2RlbHMuTGl2ZWNoYXREZXBhcnRtZW50QWdlbnRzLnJlcGxhY2VVc2VybmFtZU9mQWdlbnRCeVVzZXJJZCh1c2VyLl9pZCwgdXNlcm5hbWUpO1xuXG5cdFx0Y29uc3QgZmlsZVN0b3JlID0gRmlsZVVwbG9hZC5nZXRTdG9yZSgnQXZhdGFycycpO1xuXHRcdGNvbnN0IGZpbGUgPSBmaWxlU3RvcmUubW9kZWwuZmluZE9uZUJ5TmFtZShwcmV2aW91c1VzZXJuYW1lKTtcblx0XHRpZiAoZmlsZSkge1xuXHRcdFx0ZmlsZVN0b3JlLm1vZGVsLnVwZGF0ZUZpbGVOYW1lQnlJZChmaWxlLl9pZCwgdXNlcm5hbWUpO1xuXHRcdH1cblx0fVxuXHQvLyBTZXQgbmV3IHVzZXJuYW1lKlxuXHRSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5zZXRVc2VybmFtZSh1c2VyLl9pZCwgdXNlcm5hbWUpO1xuXHRyZXR1cm4gdXNlcjtcbn07XG5cblJvY2tldENoYXQuc2V0VXNlcm5hbWUgPSBSb2NrZXRDaGF0LlJhdGVMaW1pdGVyLmxpbWl0RnVuY3Rpb24oUm9ja2V0Q2hhdC5fc2V0VXNlcm5hbWUsIDEsIDYwMDAwLCB7XG5cdFswXSh1c2VySWQpIHtcblx0XHRyZXR1cm4gIXVzZXJJZCB8fCAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXJJZCwgJ2VkaXQtb3RoZXItdXNlci1pbmZvJyk7XG5cdH0sXG59KTtcbiIsImltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcblxuUm9ja2V0Q2hhdC5fc2V0UmVhbE5hbWUgPSBmdW5jdGlvbih1c2VySWQsIG5hbWUpIHtcblx0bmFtZSA9IHMudHJpbShuYW1lKTtcblx0aWYgKCF1c2VySWQgfHwgIW5hbWUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRjb25zdCB1c2VyID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQodXNlcklkKTtcblxuXHQvLyBVc2VyIGFscmVhZHkgaGFzIGRlc2lyZWQgbmFtZSwgcmV0dXJuXG5cdGlmICh1c2VyLm5hbWUgPT09IG5hbWUpIHtcblx0XHRyZXR1cm4gdXNlcjtcblx0fVxuXG5cdC8vIFNldCBuZXcgbmFtZVxuXHRSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5zZXROYW1lKHVzZXIuX2lkLCBuYW1lKTtcblx0dXNlci5uYW1lID0gbmFtZTtcblxuXHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLnVwZGF0ZURpcmVjdEZOYW1lQnlOYW1lKHVzZXIudXNlcm5hbWUsIG5hbWUpO1xuXG5cdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfVXNlX1JlYWxfTmFtZScpID09PSB0cnVlKSB7XG5cdFx0Um9ja2V0Q2hhdC5Ob3RpZmljYXRpb25zLm5vdGlmeUxvZ2dlZCgnVXNlcnM6TmFtZUNoYW5nZWQnLCB7XG5cdFx0XHRfaWQ6IHVzZXIuX2lkLFxuXHRcdFx0bmFtZTogdXNlci5uYW1lLFxuXHRcdFx0dXNlcm5hbWU6IHVzZXIudXNlcm5hbWUsXG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gdXNlcjtcbn07XG5cblJvY2tldENoYXQuc2V0UmVhbE5hbWUgPSBSb2NrZXRDaGF0LlJhdGVMaW1pdGVyLmxpbWl0RnVuY3Rpb24oUm9ja2V0Q2hhdC5fc2V0UmVhbE5hbWUsIDEsIDYwMDAwLCB7XG5cdDAoKSB7IHJldHVybiAhTWV0ZW9yLnVzZXJJZCgpIHx8ICFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAnZWRpdC1vdGhlci11c2VyLWluZm8nKTsgfSwgLy8gQWRtaW5pc3RyYXRvcnMgaGF2ZSBwZXJtaXNzaW9uIHRvIGNoYW5nZSBvdGhlcnMgbmFtZXMsIHNvIGRvbid0IGxpbWl0IHRob3NlXG59KTtcbiIsImltcG9ydCBzIGZyb20gJ3VuZGVyc2NvcmUuc3RyaW5nJztcblxuUm9ja2V0Q2hhdC5fc2V0RW1haWwgPSBmdW5jdGlvbih1c2VySWQsIGVtYWlsLCBzaG91bGRTZW5kVmVyaWZpY2F0aW9uRW1haWwgPSB0cnVlKSB7XG5cdGVtYWlsID0gcy50cmltKGVtYWlsKTtcblx0aWYgKCF1c2VySWQpIHtcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBmdW5jdGlvbjogJ19zZXRFbWFpbCcgfSk7XG5cdH1cblxuXHRpZiAoIWVtYWlsKSB7XG5cdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1lbWFpbCcsICdJbnZhbGlkIGVtYWlsJywgeyBmdW5jdGlvbjogJ19zZXRFbWFpbCcgfSk7XG5cdH1cblxuXHRSb2NrZXRDaGF0LnZhbGlkYXRlRW1haWxEb21haW4oZW1haWwpO1xuXG5cdGNvbnN0IHVzZXIgPSBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlJZCh1c2VySWQpO1xuXG5cdC8vIFVzZXIgYWxyZWFkeSBoYXMgZGVzaXJlZCB1c2VybmFtZSwgcmV0dXJuXG5cdGlmICh1c2VyLmVtYWlscyAmJiB1c2VyLmVtYWlsc1swXSAmJiB1c2VyLmVtYWlsc1swXS5hZGRyZXNzID09PSBlbWFpbCkge1xuXHRcdHJldHVybiB1c2VyO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZW1haWwgYXZhaWxhYmlsaXR5XG5cdGlmICghUm9ja2V0Q2hhdC5jaGVja0VtYWlsQXZhaWxhYmlsaXR5KGVtYWlsKSkge1xuXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWZpZWxkLXVuYXZhaWxhYmxlJywgYCR7IGVtYWlsIH0gaXMgYWxyZWFkeSBpbiB1c2UgOihgLCB7IGZ1bmN0aW9uOiAnX3NldEVtYWlsJywgZmllbGQ6IGVtYWlsIH0pO1xuXHR9XG5cblx0Ly8gU2V0IG5ldyBlbWFpbFxuXHRSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5zZXRFbWFpbCh1c2VyLl9pZCwgZW1haWwpO1xuXHR1c2VyLmVtYWlsID0gZW1haWw7XG5cdGlmIChzaG91bGRTZW5kVmVyaWZpY2F0aW9uRW1haWwgPT09IHRydWUpIHtcblx0XHRNZXRlb3IuY2FsbCgnc2VuZENvbmZpcm1hdGlvbkVtYWlsJywgdXNlci5lbWFpbCk7XG5cdH1cblx0cmV0dXJuIHVzZXI7XG59O1xuXG5Sb2NrZXRDaGF0LnNldEVtYWlsID0gUm9ja2V0Q2hhdC5SYXRlTGltaXRlci5saW1pdEZ1bmN0aW9uKFJvY2tldENoYXQuX3NldEVtYWlsLCAxLCA2MDAwMCwge1xuXHQwKCkgeyByZXR1cm4gIU1ldGVvci51c2VySWQoKSB8fCAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKE1ldGVvci51c2VySWQoKSwgJ2VkaXQtb3RoZXItdXNlci1pbmZvJyk7IH0sIC8vIEFkbWluaXN0cmF0b3JzIGhhdmUgcGVybWlzc2lvbiB0byBjaGFuZ2Ugb3RoZXJzIGVtYWlscywgc28gZG9uJ3QgbGltaXQgdGhvc2Vcbn0pO1xuIiwiUm9ja2V0Q2hhdC51bmFyY2hpdmVSb29tID0gZnVuY3Rpb24ocmlkKSB7XG5cdFJvY2tldENoYXQubW9kZWxzLlJvb21zLnVuYXJjaGl2ZUJ5SWQocmlkKTtcblx0Um9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy51bmFyY2hpdmVCeVJvb21JZChyaWQpO1xufTtcbiIsIlJvY2tldENoYXQudXBkYXRlTWVzc2FnZSA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHVzZXIsIG9yaWdpbmFsTWVzc2FnZSkge1xuXHRpZiAoIW9yaWdpbmFsTWVzc2FnZSkge1xuXHRcdG9yaWdpbmFsTWVzc2FnZSA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRPbmVCeUlkKG1lc3NhZ2UuX2lkKTtcblx0fVxuXG5cdC8vIEZvciB0aGUgUm9ja2V0LkNoYXQgQXBwcyA6KVxuXHRpZiAobWVzc2FnZSAmJiBBcHBzICYmIEFwcHMuaXNMb2FkZWQoKSkge1xuXHRcdGNvbnN0IGFwcE1lc3NhZ2UgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbE1lc3NhZ2UsIG1lc3NhZ2UpO1xuXG5cdFx0Y29uc3QgcHJldmVudCA9IFByb21pc2UuYXdhaXQoQXBwcy5nZXRCcmlkZ2VzKCkuZ2V0TGlzdGVuZXJCcmlkZ2UoKS5tZXNzYWdlRXZlbnQoJ0lQcmVNZXNzYWdlVXBkYXRlZFByZXZlbnQnLCBhcHBNZXNzYWdlKSk7XG5cdFx0aWYgKHByZXZlbnQpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFwcC1wcmV2ZW50ZWQtdXBkYXRpbmcnLCAnQSBSb2NrZXQuQ2hhdCBBcHAgcHJldmVudGVkIHRoZSBtZXNzYWdlIHVwZGF0aW5nLicpO1xuXHRcdH1cblxuXHRcdGxldCByZXN1bHQ7XG5cdFx0cmVzdWx0ID0gUHJvbWlzZS5hd2FpdChBcHBzLmdldEJyaWRnZXMoKS5nZXRMaXN0ZW5lckJyaWRnZSgpLm1lc3NhZ2VFdmVudCgnSVByZU1lc3NhZ2VVcGRhdGVkRXh0ZW5kJywgYXBwTWVzc2FnZSkpO1xuXHRcdHJlc3VsdCA9IFByb21pc2UuYXdhaXQoQXBwcy5nZXRCcmlkZ2VzKCkuZ2V0TGlzdGVuZXJCcmlkZ2UoKS5tZXNzYWdlRXZlbnQoJ0lQcmVNZXNzYWdlVXBkYXRlZE1vZGlmeScsIHJlc3VsdCkpO1xuXG5cdFx0aWYgKHR5cGVvZiByZXN1bHQgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRtZXNzYWdlID0gT2JqZWN0LmFzc2lnbihhcHBNZXNzYWdlLCByZXN1bHQpO1xuXHRcdH1cblx0fVxuXG5cdC8vIElmIHdlIGtlZXAgaGlzdG9yeSBvZiBlZGl0cywgaW5zZXJ0IGEgbmV3IG1lc3NhZ2UgdG8gc3RvcmUgaGlzdG9yeSBpbmZvcm1hdGlvblxuXHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ01lc3NhZ2VfS2VlcEhpc3RvcnknKSkge1xuXHRcdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmNsb25lQW5kU2F2ZUFzSGlzdG9yeUJ5SWQobWVzc2FnZS5faWQpO1xuXHR9XG5cblx0bWVzc2FnZS5lZGl0ZWRBdCA9IG5ldyBEYXRlKCk7XG5cdG1lc3NhZ2UuZWRpdGVkQnkgPSB7XG5cdFx0X2lkOiB1c2VyLl9pZCxcblx0XHR1c2VybmFtZTogdXNlci51c2VybmFtZSxcblx0fTtcblxuXHRjb25zdCB1cmxzID0gbWVzc2FnZS5tc2cubWF0Y2goLyhbQS1aYS16XXszLDl9KTpcXC9cXC8oWy07OiY9XFwrXFwkLFxcd10rQHsxfSk/KFstQS1aYS16MC05XFwuXSspKzo/KFxcZCspPygoXFwvWy1cXCs9ITp+JVxcL1xcLkBcXCxcXHddKik/XFw/PyhbLVxcKz0mITo7JUBcXC9cXC5cXCxcXHddKyk/KD86IyhbXlxcc1xcKV0rKSk/KT8vZykgfHwgW107XG5cdG1lc3NhZ2UudXJscyA9IHVybHMubWFwKCh1cmwpID0+ICh7IHVybCB9KSk7XG5cblx0bWVzc2FnZSA9IFJvY2tldENoYXQuY2FsbGJhY2tzLnJ1bignYmVmb3JlU2F2ZU1lc3NhZ2UnLCBtZXNzYWdlKTtcblxuXHRjb25zdCB0ZW1waWQgPSBtZXNzYWdlLl9pZDtcblx0ZGVsZXRlIG1lc3NhZ2UuX2lkO1xuXG5cdFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLnVwZGF0ZSh7IF9pZDogdGVtcGlkIH0sIHsgJHNldDogbWVzc2FnZSB9KTtcblxuXHRjb25zdCByb29tID0gUm9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuZmluZE9uZUJ5SWQobWVzc2FnZS5yaWQpO1xuXG5cdGlmIChBcHBzICYmIEFwcHMuaXNMb2FkZWQoKSkge1xuXHRcdC8vIFRoaXMgcmV0dXJucyBhIHByb21pc2UsIGJ1dCBpdCB3b24ndCBtdXRhdGUgYW55dGhpbmcgYWJvdXQgdGhlIG1lc3NhZ2Vcblx0XHQvLyBzbywgd2UgZG9uJ3QgcmVhbGx5IGNhcmUgaWYgaXQgaXMgc3VjY2Vzc2Z1bCBvciBmYWlsc1xuXHRcdEFwcHMuZ2V0QnJpZGdlcygpLmdldExpc3RlbmVyQnJpZGdlKCkubWVzc2FnZUV2ZW50KCdJUG9zdE1lc3NhZ2VVcGRhdGVkJywgbWVzc2FnZSk7XG5cdH1cblxuXHRNZXRlb3IuZGVmZXIoZnVuY3Rpb24oKSB7XG5cdFx0Um9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdhZnRlclNhdmVNZXNzYWdlJywgUm9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuZmluZE9uZUJ5SWQodGVtcGlkKSwgcm9vbSwgdXNlci5faWQpO1xuXHR9KTtcbn07XG4iLCJpbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5cblJvY2tldENoYXQudmFsaWRhdGVDdXN0b21GaWVsZHMgPSBmdW5jdGlvbihmaWVsZHMpIHtcblx0Ly8gU3BlY2lhbCBDYXNlOlxuXHQvLyBJZiBhbiBhZG1pbiBkaWRuJ3Qgc2V0IGFueSBjdXN0b20gZmllbGRzIHRoZXJlJ3Mgbm90aGluZyB0byB2YWxpZGF0ZSBhZ2FpbnN0IHNvIGNvbnNpZGVyIGFueSBjdXN0b21GaWVsZHMgdmFsaWRcblx0aWYgKHMudHJpbShSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfQ3VzdG9tRmllbGRzJykpID09PSAnJykge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGxldCBjdXN0b21GaWVsZHNNZXRhO1xuXHR0cnkge1xuXHRcdGN1c3RvbUZpZWxkc01ldGEgPSBKU09OLnBhcnNlKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19DdXN0b21GaWVsZHMnKSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLWN1c3RvbWZpZWxkLWpzb24nLCAnSW52YWxpZCBKU09OIGZvciBDdXN0b20gRmllbGRzJyk7XG5cdH1cblxuXHRjb25zdCBjdXN0b21GaWVsZHMgPSB7fTtcblxuXHRPYmplY3Qua2V5cyhjdXN0b21GaWVsZHNNZXRhKS5mb3JFYWNoKChmaWVsZE5hbWUpID0+IHtcblx0XHRjb25zdCBmaWVsZCA9IGN1c3RvbUZpZWxkc01ldGFbZmllbGROYW1lXTtcblxuXHRcdGN1c3RvbUZpZWxkc1tmaWVsZE5hbWVdID0gZmllbGRzW2ZpZWxkTmFtZV07XG5cdFx0Y29uc3QgZmllbGRWYWx1ZSA9IHMudHJpbShmaWVsZHNbZmllbGROYW1lXSk7XG5cblx0XHRpZiAoZmllbGQucmVxdWlyZWQgJiYgZmllbGRWYWx1ZSA9PT0gJycpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLXVzZXItcmVnaXN0cmF0aW9uLWN1c3RvbS1maWVsZCcsIGBGaWVsZCAkeyBmaWVsZE5hbWUgfSBpcyByZXF1aXJlZGAsIHsgbWV0aG9kOiAncmVnaXN0ZXJVc2VyJyB9KTtcblx0XHR9XG5cblx0XHRpZiAoZmllbGQudHlwZSA9PT0gJ3NlbGVjdCcgJiYgZmllbGQub3B0aW9ucy5pbmRleE9mKGZpZWxkc1tmaWVsZE5hbWVdKSA9PT0gLTEpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLXVzZXItcmVnaXN0cmF0aW9uLWN1c3RvbS1maWVsZCcsIGBWYWx1ZSBmb3IgZmllbGQgJHsgZmllbGROYW1lIH0gaXMgaW52YWxpZGAsIHsgbWV0aG9kOiAncmVnaXN0ZXJVc2VyJyB9KTtcblx0XHR9XG5cblx0XHRpZiAoZmllbGQubWF4TGVuZ3RoICYmIGZpZWxkVmFsdWUubGVuZ3RoID4gZmllbGQubWF4TGVuZ3RoKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci11c2VyLXJlZ2lzdHJhdGlvbi1jdXN0b20tZmllbGQnLCBgTWF4IGxlbmd0aCBvZiBmaWVsZCAkeyBmaWVsZE5hbWUgfSAkeyBmaWVsZC5tYXhMZW5ndGggfWAsIHsgbWV0aG9kOiAncmVnaXN0ZXJVc2VyJyB9KTtcblx0XHR9XG5cblx0XHRpZiAoZmllbGQubWluTGVuZ3RoICYmIGZpZWxkVmFsdWUubGVuZ3RoIDwgZmllbGQubWluTGVuZ3RoKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci11c2VyLXJlZ2lzdHJhdGlvbi1jdXN0b20tZmllbGQnLCBgTWluIGxlbmd0aCBvZiBmaWVsZCAkeyBmaWVsZE5hbWUgfSAkeyBmaWVsZC5taW5MZW5ndGggfWAsIHsgbWV0aG9kOiAncmVnaXN0ZXJVc2VyJyB9KTtcblx0XHR9XG5cdH0pO1xufTtcbiIsIlJvY2tldENoYXQuTm90aWZpY2F0aW9ucyA9IG5ldyBjbGFzcyB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuZGVidWcgPSBmYWxzZTtcblx0XHR0aGlzLnN0cmVhbUFsbCA9IG5ldyBNZXRlb3IuU3RyZWFtZXIoJ25vdGlmeS1hbGwnKTtcblx0XHR0aGlzLnN0cmVhbUxvZ2dlZCA9IG5ldyBNZXRlb3IuU3RyZWFtZXIoJ25vdGlmeS1sb2dnZWQnKTtcblx0XHR0aGlzLnN0cmVhbVJvb20gPSBuZXcgTWV0ZW9yLlN0cmVhbWVyKCdub3RpZnktcm9vbScpO1xuXHRcdHRoaXMuc3RyZWFtUm9vbVVzZXJzID0gbmV3IE1ldGVvci5TdHJlYW1lcignbm90aWZ5LXJvb20tdXNlcnMnKTtcblx0XHR0aGlzLnN0cmVhbVVzZXIgPSBuZXcgTWV0ZW9yLlN0cmVhbWVyKCdub3RpZnktdXNlcicpO1xuXHRcdHRoaXMuc3RyZWFtQWxsLmFsbG93V3JpdGUoJ25vbmUnKTtcblx0XHR0aGlzLnN0cmVhbUxvZ2dlZC5hbGxvd1dyaXRlKCdub25lJyk7XG5cdFx0dGhpcy5zdHJlYW1Sb29tLmFsbG93V3JpdGUoJ25vbmUnKTtcblx0XHR0aGlzLnN0cmVhbVJvb21Vc2Vycy5hbGxvd1dyaXRlKGZ1bmN0aW9uKGV2ZW50TmFtZSwgLi4uYXJncykge1xuXHRcdFx0Y29uc3QgW3Jvb21JZCwgZV0gPSBldmVudE5hbWUuc3BsaXQoJy8nKTtcblx0XHRcdC8vIGNvbnN0IHVzZXIgPSBNZXRlb3IudXNlcnMuZmluZE9uZSh0aGlzLnVzZXJJZCwge1xuXHRcdFx0Ly8gXHRmaWVsZHM6IHtcblx0XHRcdC8vIFx0XHR1c2VybmFtZTogMVxuXHRcdFx0Ly8gXHR9XG5cdFx0XHQvLyB9KTtcblx0XHRcdGlmIChSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRPbmVCeVJvb21JZEFuZFVzZXJJZChyb29tSWQsIHRoaXMudXNlcklkKSAhPSBudWxsKSB7XG5cdFx0XHRcdGNvbnN0IHN1YnNjcmlwdGlvbnMgPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRCeVJvb21JZEFuZE5vdFVzZXJJZChyb29tSWQsIHRoaXMudXNlcklkKS5mZXRjaCgpO1xuXHRcdFx0XHRzdWJzY3JpcHRpb25zLmZvckVhY2goKHN1YnNjcmlwdGlvbikgPT4gUm9ja2V0Q2hhdC5Ob3RpZmljYXRpb25zLm5vdGlmeVVzZXIoc3Vic2NyaXB0aW9uLnUuX2lkLCBlLCAuLi5hcmdzKSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSk7XG5cdFx0dGhpcy5zdHJlYW1Vc2VyLmFsbG93V3JpdGUoJ2xvZ2dlZCcpO1xuXHRcdHRoaXMuc3RyZWFtQWxsLmFsbG93UmVhZCgnYWxsJyk7XG5cdFx0dGhpcy5zdHJlYW1Mb2dnZWQuYWxsb3dSZWFkKCdsb2dnZWQnKTtcblx0XHR0aGlzLnN0cmVhbVJvb20uYWxsb3dSZWFkKGZ1bmN0aW9uKGV2ZW50TmFtZSwgZXh0cmFEYXRhKSB7XG5cdFx0XHRjb25zdCBbcm9vbUlkXSA9IGV2ZW50TmFtZS5zcGxpdCgnLycpO1xuXHRcdFx0Y29uc3Qgcm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkKHJvb21JZCk7XG5cdFx0XHRpZiAoIXJvb20pIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKGBJbnZhbGlkIHN0cmVhbVJvb20gZXZlbnROYW1lOiBcIiR7IGV2ZW50TmFtZSB9XCJgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJvb20udCA9PT0gJ2wnICYmIGV4dHJhRGF0YSAmJiBleHRyYURhdGEudG9rZW4gJiYgcm9vbS52LnRva2VuID09PSBleHRyYURhdGEudG9rZW4pIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy51c2VySWQgPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBzdWJzY3JpcHRpb24gPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRPbmVCeVJvb21JZEFuZFVzZXJJZChyb29tSWQsIHRoaXMudXNlcklkLCB7IGZpZWxkczogeyBfaWQ6IDEgfSB9KTtcblx0XHRcdHJldHVybiBzdWJzY3JpcHRpb24gIT0gbnVsbDtcblx0XHR9KTtcblx0XHR0aGlzLnN0cmVhbVJvb21Vc2Vycy5hbGxvd1JlYWQoJ25vbmUnKTtcblx0XHR0aGlzLnN0cmVhbVVzZXIuYWxsb3dSZWFkKGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuXHRcdFx0Y29uc3QgW3VzZXJJZF0gPSBldmVudE5hbWUuc3BsaXQoJy8nKTtcblx0XHRcdHJldHVybiAodGhpcy51c2VySWQgIT0gbnVsbCkgJiYgdGhpcy51c2VySWQgPT09IHVzZXJJZDtcblx0XHR9KTtcblx0fVxuXG5cdG5vdGlmeUFsbChldmVudE5hbWUsIC4uLmFyZ3MpIHtcblx0XHRpZiAodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ25vdGlmeUFsbCcsIFtldmVudE5hbWUsIC4uLmFyZ3NdKTtcblx0XHR9XG5cdFx0YXJncy51bnNoaWZ0KGV2ZW50TmFtZSk7XG5cdFx0cmV0dXJuIHRoaXMuc3RyZWFtQWxsLmVtaXQuYXBwbHkodGhpcy5zdHJlYW1BbGwsIGFyZ3MpO1xuXHR9XG5cblx0bm90aWZ5TG9nZ2VkKGV2ZW50TmFtZSwgLi4uYXJncykge1xuXHRcdGlmICh0aGlzLmRlYnVnID09PSB0cnVlKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnbm90aWZ5TG9nZ2VkJywgW2V2ZW50TmFtZSwgLi4uYXJnc10pO1xuXHRcdH1cblx0XHRhcmdzLnVuc2hpZnQoZXZlbnROYW1lKTtcblx0XHRyZXR1cm4gdGhpcy5zdHJlYW1Mb2dnZWQuZW1pdC5hcHBseSh0aGlzLnN0cmVhbUxvZ2dlZCwgYXJncyk7XG5cdH1cblxuXHRub3RpZnlSb29tKHJvb20sIGV2ZW50TmFtZSwgLi4uYXJncykge1xuXHRcdGlmICh0aGlzLmRlYnVnID09PSB0cnVlKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnbm90aWZ5Um9vbScsIFtyb29tLCBldmVudE5hbWUsIC4uLmFyZ3NdKTtcblx0XHR9XG5cdFx0YXJncy51bnNoaWZ0KGAkeyByb29tIH0vJHsgZXZlbnROYW1lIH1gKTtcblx0XHRyZXR1cm4gdGhpcy5zdHJlYW1Sb29tLmVtaXQuYXBwbHkodGhpcy5zdHJlYW1Sb29tLCBhcmdzKTtcblx0fVxuXG5cdG5vdGlmeVVzZXIodXNlcklkLCBldmVudE5hbWUsIC4uLmFyZ3MpIHtcblx0XHRpZiAodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ25vdGlmeVVzZXInLCBbdXNlcklkLCBldmVudE5hbWUsIC4uLmFyZ3NdKTtcblx0XHR9XG5cdFx0YXJncy51bnNoaWZ0KGAkeyB1c2VySWQgfS8keyBldmVudE5hbWUgfWApO1xuXHRcdHJldHVybiB0aGlzLnN0cmVhbVVzZXIuZW1pdC5hcHBseSh0aGlzLnN0cmVhbVVzZXIsIGFyZ3MpO1xuXHR9XG5cblx0bm90aWZ5QWxsSW5UaGlzSW5zdGFuY2UoZXZlbnROYW1lLCAuLi5hcmdzKSB7XG5cdFx0aWYgKHRoaXMuZGVidWcgPT09IHRydWUpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdub3RpZnlBbGwnLCBbZXZlbnROYW1lLCAuLi5hcmdzXSk7XG5cdFx0fVxuXHRcdGFyZ3MudW5zaGlmdChldmVudE5hbWUpO1xuXHRcdHJldHVybiB0aGlzLnN0cmVhbUFsbC5lbWl0V2l0aG91dEJyb2FkY2FzdC5hcHBseSh0aGlzLnN0cmVhbUFsbCwgYXJncyk7XG5cdH1cblxuXHRub3RpZnlMb2dnZWRJblRoaXNJbnN0YW5jZShldmVudE5hbWUsIC4uLmFyZ3MpIHtcblx0XHRpZiAodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ25vdGlmeUxvZ2dlZCcsIFtldmVudE5hbWUsIC4uLmFyZ3NdKTtcblx0XHR9XG5cdFx0YXJncy51bnNoaWZ0KGV2ZW50TmFtZSk7XG5cdFx0cmV0dXJuIHRoaXMuc3RyZWFtTG9nZ2VkLmVtaXRXaXRob3V0QnJvYWRjYXN0LmFwcGx5KHRoaXMuc3RyZWFtTG9nZ2VkLCBhcmdzKTtcblx0fVxuXG5cdG5vdGlmeVJvb21JblRoaXNJbnN0YW5jZShyb29tLCBldmVudE5hbWUsIC4uLmFyZ3MpIHtcblx0XHRpZiAodGhpcy5kZWJ1ZyA9PT0gdHJ1ZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ25vdGlmeVJvb21BbmRCcm9hZGNhc3QnLCBbcm9vbSwgZXZlbnROYW1lLCAuLi5hcmdzXSk7XG5cdFx0fVxuXHRcdGFyZ3MudW5zaGlmdChgJHsgcm9vbSB9LyR7IGV2ZW50TmFtZSB9YCk7XG5cdFx0cmV0dXJuIHRoaXMuc3RyZWFtUm9vbS5lbWl0V2l0aG91dEJyb2FkY2FzdC5hcHBseSh0aGlzLnN0cmVhbVJvb20sIGFyZ3MpO1xuXHR9XG5cblx0bm90aWZ5VXNlckluVGhpc0luc3RhbmNlKHVzZXJJZCwgZXZlbnROYW1lLCAuLi5hcmdzKSB7XG5cdFx0aWYgKHRoaXMuZGVidWcgPT09IHRydWUpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdub3RpZnlVc2VyQW5kQnJvYWRjYXN0JywgW3VzZXJJZCwgZXZlbnROYW1lLCAuLi5hcmdzXSk7XG5cdFx0fVxuXHRcdGFyZ3MudW5zaGlmdChgJHsgdXNlcklkIH0vJHsgZXZlbnROYW1lIH1gKTtcblx0XHRyZXR1cm4gdGhpcy5zdHJlYW1Vc2VyLmVtaXRXaXRob3V0QnJvYWRjYXN0LmFwcGx5KHRoaXMuc3RyZWFtVXNlciwgYXJncyk7XG5cdH1cbn07XG5cblJvY2tldENoYXQuTm90aWZpY2F0aW9ucy5zdHJlYW1Sb29tLmFsbG93V3JpdGUoZnVuY3Rpb24oZXZlbnROYW1lLCB1c2VybmFtZSwgdHlwaW5nLCBleHRyYURhdGEpIHtcblx0Y29uc3QgW3Jvb21JZCwgZV0gPSBldmVudE5hbWUuc3BsaXQoJy8nKTtcblxuXHRpZiAoZSA9PT0gJ3dlYnJ0YycpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZiAoZSA9PT0gJ3R5cGluZycpIHtcblx0XHRjb25zdCBrZXkgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfVXNlX1JlYWxfTmFtZScpID8gJ25hbWUnIDogJ3VzZXJuYW1lJztcblx0XHQvLyB0eXBpbmcgZnJvbSBsaXZlY2hhdCB3aWRnZXRcblx0XHRpZiAoZXh0cmFEYXRhICYmIGV4dHJhRGF0YS50b2tlbikge1xuXHRcdFx0Y29uc3Qgcm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkKHJvb21JZCk7XG5cdFx0XHRpZiAocm9vbSAmJiByb29tLnQgPT09ICdsJyAmJiByb29tLnYudG9rZW4gPT09IGV4dHJhRGF0YS50b2tlbikge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCB1c2VyID0gTWV0ZW9yLnVzZXJzLmZpbmRPbmUodGhpcy51c2VySWQsIHtcblx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRba2V5XTogMSxcblx0XHRcdH0sXG5cdFx0fSk7XG5cblx0XHRpZiAoIXVzZXIpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdXNlcltrZXldID09PSB1c2VybmFtZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59KTtcbiIsImV4cG9ydCBmdW5jdGlvbiBzaG91bGROb3RpZnlBdWRpbyh7XG5cdGRpc2FibGVBbGxNZXNzYWdlTm90aWZpY2F0aW9ucyxcblx0c3RhdHVzLFxuXHRhdWRpb05vdGlmaWNhdGlvbnMsXG5cdGhhc01lbnRpb25Ub0FsbCxcblx0aGFzTWVudGlvblRvSGVyZSxcblx0aXNIaWdobGlnaHRlZCxcblx0aGFzTWVudGlvblRvVXNlcixcblx0cm9vbVR5cGUsXG59KSB7XG5cdGlmIChkaXNhYmxlQWxsTWVzc2FnZU5vdGlmaWNhdGlvbnMgJiYgYXVkaW9Ob3RpZmljYXRpb25zID09IG51bGwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoc3RhdHVzID09PSAnYnVzeScgfHwgYXVkaW9Ob3RpZmljYXRpb25zID09PSAnbm90aGluZycpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIWF1ZGlvTm90aWZpY2F0aW9ucyAmJiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX2F1ZGlvTm90aWZpY2F0aW9ucycpID09PSAnYWxsJykge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0cmV0dXJuIHJvb21UeXBlID09PSAnZCcgfHwgKCFkaXNhYmxlQWxsTWVzc2FnZU5vdGlmaWNhdGlvbnMgJiYgKGhhc01lbnRpb25Ub0FsbCB8fCBoYXNNZW50aW9uVG9IZXJlKSkgfHwgaXNIaWdobGlnaHRlZCB8fCBhdWRpb05vdGlmaWNhdGlvbnMgPT09ICdhbGwnIHx8IGhhc01lbnRpb25Ub1VzZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3RpZnlBdWRpb1VzZXIodXNlcklkLCBtZXNzYWdlLCByb29tKSB7XG5cdFJvY2tldENoYXQubWV0cmljcy5ub3RpZmljYXRpb25zU2VudC5pbmMoeyBub3RpZmljYXRpb25fdHlwZTogJ2F1ZGlvJyB9KTtcblx0Um9ja2V0Q2hhdC5Ob3RpZmljYXRpb25zLm5vdGlmeVVzZXIodXNlcklkLCAnYXVkaW9Ob3RpZmljYXRpb24nLCB7XG5cdFx0cGF5bG9hZDoge1xuXHRcdFx0X2lkOiBtZXNzYWdlLl9pZCxcblx0XHRcdHJpZDogbWVzc2FnZS5yaWQsXG5cdFx0XHRzZW5kZXI6IG1lc3NhZ2UudSxcblx0XHRcdHR5cGU6IHJvb20udCxcblx0XHRcdG5hbWU6IHJvb20ubmFtZSxcblx0XHR9LFxuXHR9KTtcbn1cbiIsIi8qKlxuICogU2VuZCBub3RpZmljYXRpb24gdG8gdXNlclxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWQgVGhlIHVzZXIgdG8gbm90aWZ5XG4gKiBAcGFyYW0ge29iamVjdH0gdXNlciBUaGUgc2VuZGVyXG4gKiBAcGFyYW0ge29iamVjdH0gcm9vbSBUaGUgcm9vbSBzZW5kIGZyb21cbiAqIEBwYXJhbSB7b2JqZWN0fSBtZXNzYWdlIFRoZSBtZXNzYWdlIG9iamVjdFxuICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIER1cmF0aW9uIG9mIG5vdGlmaWNhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IG5vdGlmaWNhdGlvbk1lc3NhZ2UgVGhlIG1lc3NhZ2UgdGV4dCB0byBzZW5kIG9uIG5vdGlmaWNhdGlvbiBib2R5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3RpZnlEZXNrdG9wVXNlcih7XG5cdHVzZXJJZCxcblx0dXNlcixcblx0bWVzc2FnZSxcblx0cm9vbSxcblx0ZHVyYXRpb24sXG5cdG5vdGlmaWNhdGlvbk1lc3NhZ2UsXG59KSB7XG5cdGNvbnN0IHsgdGl0bGUsIHRleHQgfSA9IFJvY2tldENoYXQucm9vbVR5cGVzLmdldENvbmZpZyhyb29tLnQpLmdldE5vdGlmaWNhdGlvbkRldGFpbHMocm9vbSwgdXNlciwgbm90aWZpY2F0aW9uTWVzc2FnZSk7XG5cblx0Um9ja2V0Q2hhdC5tZXRyaWNzLm5vdGlmaWNhdGlvbnNTZW50LmluYyh7IG5vdGlmaWNhdGlvbl90eXBlOiAnZGVza3RvcCcgfSk7XG5cdFJvY2tldENoYXQuTm90aWZpY2F0aW9ucy5ub3RpZnlVc2VyKHVzZXJJZCwgJ25vdGlmaWNhdGlvbicsIHtcblx0XHR0aXRsZSxcblx0XHR0ZXh0LFxuXHRcdGR1cmF0aW9uLFxuXHRcdHBheWxvYWQ6IHtcblx0XHRcdF9pZDogbWVzc2FnZS5faWQsXG5cdFx0XHRyaWQ6IG1lc3NhZ2UucmlkLFxuXHRcdFx0c2VuZGVyOiBtZXNzYWdlLnUsXG5cdFx0XHR0eXBlOiByb29tLnQsXG5cdFx0XHRuYW1lOiByb29tLm5hbWUsXG5cdFx0XHRtZXNzYWdlOiB7XG5cdFx0XHRcdG1zZzogbWVzc2FnZS5tc2csXG5cdFx0XHRcdHQ6IG1lc3NhZ2UudCxcblx0XHRcdH0sXG5cdFx0fSxcblx0fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG91bGROb3RpZnlEZXNrdG9wKHtcblx0ZGlzYWJsZUFsbE1lc3NhZ2VOb3RpZmljYXRpb25zLFxuXHRzdGF0dXMsXG5cdGRlc2t0b3BOb3RpZmljYXRpb25zLFxuXHRoYXNNZW50aW9uVG9BbGwsXG5cdGhhc01lbnRpb25Ub0hlcmUsXG5cdGlzSGlnaGxpZ2h0ZWQsXG5cdGhhc01lbnRpb25Ub1VzZXIsXG5cdHJvb21UeXBlLFxufSkge1xuXHRpZiAoZGlzYWJsZUFsbE1lc3NhZ2VOb3RpZmljYXRpb25zICYmIGRlc2t0b3BOb3RpZmljYXRpb25zID09IG51bGwpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoc3RhdHVzID09PSAnYnVzeScgfHwgZGVza3RvcE5vdGlmaWNhdGlvbnMgPT09ICdub3RoaW5nJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICghZGVza3RvcE5vdGlmaWNhdGlvbnMpIHtcblx0XHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19kZXNrdG9wTm90aWZpY2F0aW9ucycpID09PSAnYWxsJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX2Rlc2t0b3BOb3RpZmljYXRpb25zJykgPT09ICdub3RoaW5nJykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByb29tVHlwZSA9PT0gJ2QnIHx8ICghZGlzYWJsZUFsbE1lc3NhZ2VOb3RpZmljYXRpb25zICYmIChoYXNNZW50aW9uVG9BbGwgfHwgaGFzTWVudGlvblRvSGVyZSkpIHx8IGlzSGlnaGxpZ2h0ZWQgfHwgZGVza3RvcE5vdGlmaWNhdGlvbnMgPT09ICdhbGwnIHx8IGhhc01lbnRpb25Ub1VzZXI7XG59XG4iLCJpbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5pbXBvcnQgKiBhcyBNYWlsZXIgZnJvbSAnbWV0ZW9yL3JvY2tldGNoYXQ6bWFpbGVyJztcblxubGV0IGFkdmljZSA9ICcnO1xubGV0IGdvVG9NZXNzYWdlID0gJyc7XG5NZXRlb3Iuc3RhcnR1cCgoKSA9PiB7XG5cdFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdlbWFpbF9zdHlsZScsIGZ1bmN0aW9uKCkge1xuXHRcdGdvVG9NZXNzYWdlID0gTWFpbGVyLmlubGluZWNzcygnPHA+PGEgY2xhc3M9XFwnYnRuXFwnIGhyZWY9XCJbcm9vbV9wYXRoXVwiPntPZmZsaW5lX0xpbmtfTWVzc2FnZX08L2E+PC9wPicpO1xuXHR9KTtcblx0TWFpbGVyLmdldFRlbXBsYXRlKCdFbWFpbF9Gb290ZXJfRGlyZWN0X1JlcGx5JywgKHZhbHVlKSA9PiB7XG5cdFx0YWR2aWNlID0gdmFsdWU7XG5cdH0pO1xufSk7XG5cbmZ1bmN0aW9uIGdldEVtYWlsQ29udGVudCh7IG1lc3NhZ2UsIHVzZXIsIHJvb20gfSkge1xuXHRjb25zdCBsbmcgPSAodXNlciAmJiB1c2VyLmxhbmd1YWdlKSB8fCBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnbGFuZ3VhZ2UnKSB8fCAnZW4nO1xuXG5cdGNvbnN0IHJvb21OYW1lID0gcy5lc2NhcGVIVE1MKGAjJHsgUm9ja2V0Q2hhdC5yb29tVHlwZXMuZ2V0Um9vbU5hbWUocm9vbS50LCByb29tKSB9YCk7XG5cdGNvbnN0IHVzZXJOYW1lID0gcy5lc2NhcGVIVE1MKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVSV9Vc2VfUmVhbF9OYW1lJykgPyBtZXNzYWdlLnUubmFtZSB8fCBtZXNzYWdlLnUudXNlcm5hbWUgOiBtZXNzYWdlLnUudXNlcm5hbWUpO1xuXG5cdGNvbnN0IGhlYWRlciA9IFRBUGkxOG4uX18ocm9vbS50ID09PSAnZCcgPyAnVXNlcl9zZW50X2FfbWVzc2FnZV90b195b3UnIDogJ1VzZXJfc2VudF9hX21lc3NhZ2Vfb25fY2hhbm5lbCcsIHtcblx0XHR1c2VybmFtZTogdXNlck5hbWUsXG5cdFx0Y2hhbm5lbDogcm9vbU5hbWUsXG5cdFx0bG5nLFxuXHR9KTtcblxuXHRpZiAobWVzc2FnZS5tc2cgIT09ICcnKSB7XG5cdFx0bGV0IG1lc3NhZ2VDb250ZW50ID0gcy5lc2NhcGVIVE1MKG1lc3NhZ2UubXNnKTtcblxuXHRcdGlmIChtZXNzYWdlLnQgPT09ICdlMmUnKSB7XG5cdFx0XHRtZXNzYWdlQ29udGVudCA9IFRBUGkxOG4uX18oJ0VuY3J5cHRlZF9tZXNzYWdlJywgeyBsbmcgfSk7XG5cdFx0fVxuXG5cdFx0bWVzc2FnZSA9IFJvY2tldENoYXQuY2FsbGJhY2tzLnJ1bigncmVuZGVyTWVzc2FnZScsIG1lc3NhZ2UpO1xuXHRcdGlmIChtZXNzYWdlLnRva2VucyAmJiBtZXNzYWdlLnRva2Vucy5sZW5ndGggPiAwKSB7XG5cdFx0XHRtZXNzYWdlLnRva2Vucy5mb3JFYWNoKCh0b2tlbikgPT4ge1xuXHRcdFx0XHR0b2tlbi50ZXh0ID0gdG9rZW4udGV4dC5yZXBsYWNlKC8oW15cXCRdKShcXCRbXlxcJF0pL2dtLCAnJDEkJCQyJyk7XG5cdFx0XHRcdG1lc3NhZ2VDb250ZW50ID0gbWVzc2FnZUNvbnRlbnQucmVwbGFjZSh0b2tlbi50b2tlbiwgdG9rZW4udGV4dCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0cmV0dXJuIGAkeyBoZWFkZXIgfTxici8+PGJyLz4keyBtZXNzYWdlQ29udGVudC5yZXBsYWNlKC9cXG4vZ20sICc8YnIvPicpIH1gO1xuXHR9XG5cblx0aWYgKG1lc3NhZ2UuZmlsZSkge1xuXHRcdGNvbnN0IGZpbGVIZWFkZXIgPSBUQVBpMThuLl9fKHJvb20udCA9PT0gJ2QnID8gJ1VzZXJfdXBsb2FkZWRfYV9maWxlX3RvX3lvdScgOiAnVXNlcl91cGxvYWRlZF9hX2ZpbGVfb25fY2hhbm5lbCcsIHtcblx0XHRcdHVzZXJuYW1lOiB1c2VyTmFtZSxcblx0XHRcdGNoYW5uZWw6IHJvb21OYW1lLFxuXHRcdFx0bG5nLFxuXHRcdH0pO1xuXG5cdFx0bGV0IGNvbnRlbnQgPSBgJHsgVEFQaTE4bi5fXygnQXR0YWNobWVudF9GaWxlX1VwbG9hZGVkJykgfTogJHsgcy5lc2NhcGVIVE1MKG1lc3NhZ2UuZmlsZS5uYW1lKSB9YDtcblxuXHRcdGlmIChtZXNzYWdlLmF0dGFjaG1lbnRzICYmIG1lc3NhZ2UuYXR0YWNobWVudHMubGVuZ3RoID09PSAxICYmIG1lc3NhZ2UuYXR0YWNobWVudHNbMF0uZGVzY3JpcHRpb24gIT09ICcnKSB7XG5cdFx0XHRjb250ZW50ICs9IGA8YnIvPjxici8+JHsgcy5lc2NhcGVIVE1MKG1lc3NhZ2UuYXR0YWNobWVudHNbMF0uZGVzY3JpcHRpb24pIH1gO1xuXHRcdH1cblxuXHRcdHJldHVybiBgJHsgZmlsZUhlYWRlciB9PGJyLz48YnIvPiR7IGNvbnRlbnQgfWA7XG5cdH1cblxuXHRpZiAobWVzc2FnZS5hdHRhY2htZW50cy5sZW5ndGggPiAwKSB7XG5cdFx0Y29uc3QgW2F0dGFjaG1lbnRdID0gbWVzc2FnZS5hdHRhY2htZW50cztcblxuXHRcdGxldCBjb250ZW50ID0gJyc7XG5cblx0XHRpZiAoYXR0YWNobWVudC50aXRsZSkge1xuXHRcdFx0Y29udGVudCArPSBgJHsgcy5lc2NhcGVIVE1MKGF0dGFjaG1lbnQudGl0bGUpIH08YnIvPmA7XG5cdFx0fVxuXHRcdGlmIChhdHRhY2htZW50LnRleHQpIHtcblx0XHRcdGNvbnRlbnQgKz0gYCR7IHMuZXNjYXBlSFRNTChhdHRhY2htZW50LnRleHQpIH08YnIvPmA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGAkeyBoZWFkZXIgfTxici8+PGJyLz4keyBjb250ZW50IH1gO1xuXHR9XG5cblx0cmV0dXJuIGhlYWRlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlbmRFbWFpbCh7IG1lc3NhZ2UsIHVzZXIsIHN1YnNjcmlwdGlvbiwgcm9vbSwgZW1haWxBZGRyZXNzLCBoYXNNZW50aW9uVG9Vc2VyIH0pIHtcblx0Y29uc3QgdXNlcm5hbWUgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVUlfVXNlX1JlYWxfTmFtZScpID8gbWVzc2FnZS51Lm5hbWUgOiBtZXNzYWdlLnUudXNlcm5hbWU7XG5cdGxldCBzdWJqZWN0S2V5ID0gJ09mZmxpbmVfTWVudGlvbl9BbGxfRW1haWwnO1xuXG5cdGlmIChyb29tLnQgPT09ICdkJykge1xuXHRcdHN1YmplY3RLZXkgPSAnT2ZmbGluZV9ETV9FbWFpbCc7XG5cdH0gZWxzZSBpZiAoaGFzTWVudGlvblRvVXNlcikge1xuXHRcdHN1YmplY3RLZXkgPSAnT2ZmbGluZV9NZW50aW9uX0VtYWlsJztcblx0fVxuXG5cdGNvbnN0IGVtYWlsU3ViamVjdCA9IE1haWxlci5yZXBsYWNlKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KHN1YmplY3RLZXkpLCB7XG5cdFx0dXNlcjogdXNlcm5hbWUsXG5cdFx0cm9vbTogUm9ja2V0Q2hhdC5yb29tVHlwZXMuZ2V0Um9vbU5hbWUocm9vbS50LCByb29tKSxcblx0fSk7XG5cdGNvbnN0IGNvbnRlbnQgPSBnZXRFbWFpbENvbnRlbnQoe1xuXHRcdG1lc3NhZ2UsXG5cdFx0dXNlcixcblx0XHRyb29tLFxuXHR9KTtcblxuXHRjb25zdCByb29tX3BhdGggPSBSb2NrZXRDaGF0LnJvb21UeXBlcy5nZXRVUkwocm9vbS50LCBzdWJzY3JpcHRpb24pO1xuXG5cdGNvbnN0IGVtYWlsID0ge1xuXHRcdHRvOiBlbWFpbEFkZHJlc3MsXG5cdFx0c3ViamVjdDogZW1haWxTdWJqZWN0LFxuXHRcdGh0bWw6IGNvbnRlbnQgKyBnb1RvTWVzc2FnZSArIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X0VuYWJsZScpID8gYWR2aWNlIDogJycpLFxuXHRcdGRhdGE6IHtcblx0XHRcdHJvb21fcGF0aCxcblx0XHR9LFxuXHR9O1xuXG5cdGNvbnN0IGZyb20gPSByb29tLnQgPT09ICdkJyA/IG1lc3NhZ2UudS5uYW1lIDogcm9vbS5uYW1lO1x0Ly8gdXNpbmcgdXNlciBmdWxsLW5hbWUvY2hhbm5lbCBuYW1lIGluIGZyb20gYWRkcmVzc1xuXHRlbWFpbC5mcm9tID0gYCR7IFN0cmluZyhmcm9tKS5yZXBsYWNlKC9AL2csICclNDAnKS5yZXBsYWNlKC9bPD4sXS9nLCAnJykgfSA8JHsgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0Zyb21fRW1haWwnKSB9PmA7XG5cdC8vIElmIGRpcmVjdCByZXBseSBlbmFibGVkLCBlbWFpbCBjb250ZW50IHdpdGggaGVhZGVyc1xuXHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9FbmFibGUnKSkge1xuXHRcdGNvbnN0IHJlcGx5dG8gPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X1JlcGx5VG8nKSB8fCBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X1VzZXJuYW1lJyk7XG5cdFx0ZW1haWwuaGVhZGVycyA9IHtcblx0XHRcdC8vIFJlcGx5LVRvIGhlYWRlciB3aXRoIGZvcm1hdCBcInVzZXJuYW1lK21lc3NhZ2VJZEBkb21haW5cIlxuXHRcdFx0J1JlcGx5LVRvJzogYCR7IHJlcGx5dG8uc3BsaXQoJ0AnKVswXS5zcGxpdChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X1NlcGFyYXRvcicpKVswXSB9JHsgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9TZXBhcmF0b3InKSB9JHsgbWVzc2FnZS5faWQgfUAkeyByZXBseXRvLnNwbGl0KCdAJylbMV0gfWAsXG5cdFx0fTtcblx0fVxuXG5cdFJvY2tldENoYXQubWV0cmljcy5ub3RpZmljYXRpb25zU2VudC5pbmMoeyBub3RpZmljYXRpb25fdHlwZTogJ2VtYWlsJyB9KTtcblx0cmV0dXJuIE1haWxlci5zZW5kKGVtYWlsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZE5vdGlmeUVtYWlsKHtcblx0ZGlzYWJsZUFsbE1lc3NhZ2VOb3RpZmljYXRpb25zLFxuXHRzdGF0dXNDb25uZWN0aW9uLFxuXHRlbWFpbE5vdGlmaWNhdGlvbnMsXG5cdGlzSGlnaGxpZ2h0ZWQsXG5cdGhhc01lbnRpb25Ub1VzZXIsXG5cdGhhc01lbnRpb25Ub0FsbCxcblx0cm9vbVR5cGUsXG59KSB7XG5cblx0Ly8gdXNlIGNvbm5lY3RlZCAoZG9uJ3QgbmVlZCB0byBzZW5kIGhpbSBhbiBlbWFpbClcblx0aWYgKHN0YXR1c0Nvbm5lY3Rpb24gPT09ICdvbmxpbmUnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gdXNlci9yb29tIHByZWZlcmVuY2UgdG8gbm90aGluZ1xuXHRpZiAoZW1haWxOb3RpZmljYXRpb25zID09PSAnbm90aGluZycpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBubyB1c2VyIG9yIHJvb20gcHJlZmVyZW5jZVxuXHRpZiAoZW1haWxOb3RpZmljYXRpb25zID09IG51bGwpIHtcblx0XHRpZiAoZGlzYWJsZUFsbE1lc3NhZ2VOb3RpZmljYXRpb25zKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gZGVmYXVsdCBzZXJ2ZXIgcHJlZmVyZW5jZSBpcyBkaXNhYmxlZFxuXHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX2VtYWlsTm90aWZpY2F0aW9uTW9kZScpID09PSAnbm90aGluZycpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcm9vbVR5cGUgPT09ICdkJyB8fCBpc0hpZ2hsaWdodGVkIHx8IGVtYWlsTm90aWZpY2F0aW9ucyA9PT0gJ2FsbCcgfHwgaGFzTWVudGlvblRvVXNlciB8fCAoIWRpc2FibGVBbGxNZXNzYWdlTm90aWZpY2F0aW9ucyAmJiBoYXNNZW50aW9uVG9BbGwpO1xufVxuIiwiaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG4vKipcbiogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgc3RyaW5nIHJlYWR5IHRvIGJlIHNob3duIGluIHRoZSBub3RpZmljYXRpb25cbipcbiogQHBhcmFtIHtvYmplY3R9IG1lc3NhZ2UgdGhlIG1lc3NhZ2UgdG8gYmUgcGFyc2VkXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTWVzc2FnZVRleHRQZXJVc2VyKG1lc3NhZ2VUZXh0LCBtZXNzYWdlLCByZWNlaXZlcikge1xuXHRpZiAoIW1lc3NhZ2UubXNnICYmIG1lc3NhZ2UuYXR0YWNobWVudHMgJiYgbWVzc2FnZS5hdHRhY2htZW50c1swXSkge1xuXHRcdGNvbnN0IGxuZyA9IHJlY2VpdmVyLmxhbmd1YWdlIHx8IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdsYW5ndWFnZScpIHx8ICdlbic7XG5cblx0XHRyZXR1cm4gbWVzc2FnZS5hdHRhY2htZW50c1swXS5pbWFnZV90eXBlID8gVEFQaTE4bi5fXygnVXNlcl91cGxvYWRlZF9pbWFnZScsIHsgbG5nIH0pIDogVEFQaTE4bi5fXygnVXNlcl91cGxvYWRlZF9maWxlJywgeyBsbmcgfSk7XG5cdH1cblxuXHRpZiAobWVzc2FnZS5tc2cgJiYgbWVzc2FnZS50ID09PSAnZTJlJykge1xuXHRcdGNvbnN0IGxuZyA9IHJlY2VpdmVyLmxhbmd1YWdlIHx8IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdsYW5ndWFnZScpIHx8ICdlbic7XG5cblx0XHRyZXR1cm4gVEFQaTE4bi5fXygnRW5jcnlwdGVkX21lc3NhZ2UnLCB7IGxuZyB9KTtcblx0fVxuXG5cdHJldHVybiBtZXNzYWdlVGV4dDtcbn1cblxuLyoqXG4gKiBSZXBsYWNlcyBAdXNlcm5hbWUgd2l0aCBmdWxsIG5hbWVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byByZXBsYWNlXG4gKiBAcGFyYW0ge29iamVjdFtdfSBtZW50aW9ucyBBcnJheSBvZiBtZW50aW9ucyB1c2VkIHRvIG1ha2UgcmVwbGFjZW1lbnRzXG4gKlxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VNZW50aW9uZWRVc2VybmFtZXNXaXRoRnVsbE5hbWVzKG1lc3NhZ2UsIG1lbnRpb25zKSB7XG5cdGlmICghbWVudGlvbnMgfHwgIW1lbnRpb25zLmxlbmd0aCkge1xuXHRcdHJldHVybiBtZXNzYWdlO1xuXHR9XG5cdG1lbnRpb25zLmZvckVhY2goKG1lbnRpb24pID0+IHtcblx0XHRpZiAobWVudGlvbi5uYW1lKSB7XG5cdFx0XHRtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKG5ldyBSZWdFeHAocy5lc2NhcGVSZWdFeHAoYEAkeyBtZW50aW9uLnVzZXJuYW1lIH1gKSwgJ2cnKSwgbWVudGlvbi5uYW1lKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gbWVzc2FnZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtZXNzYWdlIGNvbnRhaW5zIGEgdXNlciBoaWdobGlnaHRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxuICogQHBhcmFtIHthcnJheXx1bmRlZmluZWR9IGhpZ2hsaWdodHNcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lc3NhZ2VDb250YWluc0hpZ2hsaWdodChtZXNzYWdlLCBoaWdobGlnaHRzKSB7XG5cdGlmICghIGhpZ2hsaWdodHMgfHwgaGlnaGxpZ2h0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhpZ2hsaWdodHMuc29tZShmdW5jdGlvbihoaWdobGlnaHQpIHtcblx0XHRjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKHMuZXNjYXBlUmVnRXhwKGhpZ2hsaWdodCksICdpJyk7XG5cdFx0cmV0dXJuIHJlZ2V4cC50ZXN0KG1lc3NhZ2UubXNnKTtcblx0fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxsSm9pblJvb20odXNlcklkLCByaWQpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRNZXRlb3IucnVuQXNVc2VyKHVzZXJJZCwgKCkgPT4gTWV0ZW9yLmNhbGwoJ2pvaW5Sb29tJywgcmlkLCAoZXJyb3IsIHJlc3VsdCkgPT4ge1xuXHRcdFx0aWYgKGVycm9yKSB7XG5cdFx0XHRcdHJldHVybiByZWplY3QoZXJyb3IpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc29sdmUocmVzdWx0KTtcblx0XHR9KSk7XG5cdH0pO1xufVxuIiwiY29uc3QgQ0FURUdPUllfTUVTU0FHRSA9ICdNRVNTQUdFJztcbmNvbnN0IENBVEVHT1JZX01FU1NBR0VfTk9SRVBMWSA9ICdNRVNTQUdFX05PUkVQTFknO1xuXG5sZXQgYWx3YXlzTm90aWZ5TW9iaWxlQm9vbGVhbjtcblJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdOb3RpZmljYXRpb25zX0Fsd2F5c19Ob3RpZnlfTW9iaWxlJywgKGtleSwgdmFsdWUpID0+IHtcblx0YWx3YXlzTm90aWZ5TW9iaWxlQm9vbGVhbiA9IHZhbHVlO1xufSk7XG5cbmxldCBTdWJzY3JpcHRpb25SYXc7XG5NZXRlb3Iuc3RhcnR1cCgoKSA9PiB7XG5cdFN1YnNjcmlwdGlvblJhdyA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMubW9kZWwucmF3Q29sbGVjdGlvbigpO1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEJhZGdlQ291bnQodXNlcklkKSB7XG5cdGNvbnN0IFtyZXN1bHRdID0gYXdhaXQgU3Vic2NyaXB0aW9uUmF3LmFnZ3JlZ2F0ZShbXG5cdFx0eyAkbWF0Y2g6IHsgJ3UuX2lkJzogdXNlcklkIH0gfSxcblx0XHR7XG5cdFx0XHQkZ3JvdXA6IHtcblx0XHRcdFx0X2lkOiAndG90YWwnLFxuXHRcdFx0XHR0b3RhbDogeyAkc3VtOiAnJHVucmVhZCcgfSxcblx0XHRcdH0sXG5cdFx0fSxcblx0XSkudG9BcnJheSgpO1xuXG5cdGNvbnN0IHsgdG90YWwgfSA9IHJlc3VsdDtcblx0cmV0dXJuIHRvdGFsO1xufVxuXG5mdW5jdGlvbiBjYW5TZW5kTWVzc2FnZVRvUm9vbShyb29tLCB1c2VybmFtZSkge1xuXHRyZXR1cm4gISgocm9vbS5tdXRlZCB8fCBbXSkuaW5jbHVkZXModXNlcm5hbWUpKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRTaW5nbGVQdXNoKHsgcm9vbSwgbWVzc2FnZSwgdXNlcklkLCByZWNlaXZlclVzZXJuYW1lLCBzZW5kZXJVc2VybmFtZSwgc2VuZGVyTmFtZSwgbm90aWZpY2F0aW9uTWVzc2FnZSB9KSB7XG5cdGxldCB1c2VybmFtZSA9ICcnO1xuXHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1B1c2hfc2hvd191c2VybmFtZV9yb29tJykpIHtcblx0XHR1c2VybmFtZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVSV9Vc2VfUmVhbF9OYW1lJykgPT09IHRydWUgPyBzZW5kZXJOYW1lIDogc2VuZGVyVXNlcm5hbWU7XG5cdH1cblxuXHRSb2NrZXRDaGF0LlB1c2hOb3RpZmljYXRpb24uc2VuZCh7XG5cdFx0cm9vbUlkOiBtZXNzYWdlLnJpZCxcblx0XHRwYXlsb2FkOiB7XG5cdFx0XHRob3N0OiBNZXRlb3IuYWJzb2x1dGVVcmwoKSxcblx0XHRcdHJpZDogbWVzc2FnZS5yaWQsXG5cdFx0XHRzZW5kZXI6IG1lc3NhZ2UudSxcblx0XHRcdHR5cGU6IHJvb20udCxcblx0XHRcdG5hbWU6IHJvb20ubmFtZSxcblx0XHR9LFxuXHRcdHJvb21OYW1lOiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnUHVzaF9zaG93X3VzZXJuYW1lX3Jvb20nKSAmJiByb29tLnQgIT09ICdkJyA/IGAjJHsgUm9ja2V0Q2hhdC5yb29tVHlwZXMuZ2V0Um9vbU5hbWUocm9vbS50LCByb29tKSB9YCA6ICcnLFxuXHRcdHVzZXJuYW1lLFxuXHRcdG1lc3NhZ2U6IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdQdXNoX3Nob3dfbWVzc2FnZScpID8gbm90aWZpY2F0aW9uTWVzc2FnZSA6ICcgJyxcblx0XHRiYWRnZTogYXdhaXQgZ2V0QmFkZ2VDb3VudCh1c2VySWQpLFxuXHRcdHVzZXJzVG86IHtcblx0XHRcdHVzZXJJZCxcblx0XHR9LFxuXHRcdGNhdGVnb3J5OiBjYW5TZW5kTWVzc2FnZVRvUm9vbShyb29tLCByZWNlaXZlclVzZXJuYW1lKSA/IENBVEVHT1JZX01FU1NBR0UgOiBDQVRFR09SWV9NRVNTQUdFX05PUkVQTFksXG5cdH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkTm90aWZ5TW9iaWxlKHtcblx0ZGlzYWJsZUFsbE1lc3NhZ2VOb3RpZmljYXRpb25zLFxuXHRtb2JpbGVQdXNoTm90aWZpY2F0aW9ucyxcblx0aGFzTWVudGlvblRvQWxsLFxuXHRpc0hpZ2hsaWdodGVkLFxuXHRoYXNNZW50aW9uVG9Vc2VyLFxuXHRzdGF0dXNDb25uZWN0aW9uLFxuXHRyb29tVHlwZSxcbn0pIHtcblx0aWYgKGRpc2FibGVBbGxNZXNzYWdlTm90aWZpY2F0aW9ucyAmJiBtb2JpbGVQdXNoTm90aWZpY2F0aW9ucyA9PSBudWxsKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKG1vYmlsZVB1c2hOb3RpZmljYXRpb25zID09PSAnbm90aGluZycpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIWFsd2F5c05vdGlmeU1vYmlsZUJvb2xlYW4gJiYgc3RhdHVzQ29ubmVjdGlvbiA9PT0gJ29ubGluZScpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIW1vYmlsZVB1c2hOb3RpZmljYXRpb25zKSB7XG5cdFx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfbW9iaWxlTm90aWZpY2F0aW9ucycpID09PSAnYWxsJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX21vYmlsZU5vdGlmaWNhdGlvbnMnKSA9PT0gJ25vdGhpbmcnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJvb21UeXBlID09PSAnZCcgfHwgKCFkaXNhYmxlQWxsTWVzc2FnZU5vdGlmaWNhdGlvbnMgJiYgaGFzTWVudGlvblRvQWxsKSB8fCBpc0hpZ2hsaWdodGVkIHx8IG1vYmlsZVB1c2hOb3RpZmljYXRpb25zID09PSAnYWxsJyB8fCBoYXNNZW50aW9uVG9Vc2VyO1xufVxuIiwiaW1wb3J0IE1vZGVsc0Jhc2VEYiBmcm9tICcuL19CYXNlRGInO1xuaW1wb3J0IG9iamVjdFBhdGggZnJvbSAnb2JqZWN0LXBhdGgnO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmNsYXNzIE1vZGVsc0Jhc2Uge1xuXHRjb25zdHJ1Y3RvcihuYW1lT3JNb2RlbCkge1xuXHRcdHRoaXMuX2RiID0gbmV3IE1vZGVsc0Jhc2VEYihuYW1lT3JNb2RlbCwgdGhpcyk7XG5cdFx0dGhpcy5tb2RlbCA9IHRoaXMuX2RiLm1vZGVsO1xuXHRcdHRoaXMuY29sbGVjdGlvbk5hbWUgPSB0aGlzLl9kYi5jb2xsZWN0aW9uTmFtZTtcblx0XHR0aGlzLm5hbWUgPSB0aGlzLl9kYi5uYW1lO1xuXG5cdFx0dGhpcy5vbiA9IHRoaXMuX2RiLm9uLmJpbmQodGhpcy5fZGIpO1xuXHRcdHRoaXMuZW1pdCA9IHRoaXMuX2RiLmVtaXQuYmluZCh0aGlzLl9kYik7XG5cblx0XHR0aGlzLmRiID0gdGhpcztcblx0fVxuXG5cdGdldCBvcmlnaW4oKSB7XG5cdFx0cmV0dXJuICdfZGInO1xuXHR9XG5cblx0YXJyYXlUb0N1cnNvcihkYXRhKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGZldGNoKCkge1xuXHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdH0sXG5cdFx0XHRjb3VudCgpIHtcblx0XHRcdFx0cmV0dXJuIGRhdGEubGVuZ3RoO1xuXHRcdFx0fSxcblx0XHRcdGZvckVhY2goZm4pIHtcblx0XHRcdFx0cmV0dXJuIGRhdGEuZm9yRWFjaChmbik7XG5cdFx0XHR9LFxuXHRcdH07XG5cdH1cblxuXHRzZXRVcGRhdGVkQXQoLi4uYXJncy8qIHJlY29yZCwgY2hlY2tRdWVyeSwgcXVlcnkqLykge1xuXHRcdHJldHVybiB0aGlzLl9kYi5zZXRVcGRhdGVkQXQoLi4uYXJncyk7XG5cdH1cblxuXHRmaW5kKC4uLmFyZ3MpIHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIHRoaXNbdGhpcy5vcmlnaW5dLmZpbmQoLi4uYXJncyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcignRXhjZXB0aW9uIG9uIGZpbmQnLCBlLCAuLi5hcmdzKTtcblx0XHR9XG5cdH1cblxuXHRmaW5kT25lKC4uLmFyZ3MpIHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIHRoaXNbdGhpcy5vcmlnaW5dLmZpbmRPbmUoLi4uYXJncyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcignRXhjZXB0aW9uIG9uIGZpbmQnLCBlLCAuLi5hcmdzKTtcblx0XHR9XG5cdH1cblxuXHRmaW5kT25lQnlJZCguLi5hcmdzKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiB0aGlzW3RoaXMub3JpZ2luXS5maW5kT25lQnlJZCguLi5hcmdzKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdFeGNlcHRpb24gb24gZmluZCcsIGUsIC4uLmFyZ3MpO1xuXHRcdH1cblx0fVxuXG5cdGZpbmRPbmVCeUlkcyhpZHMsIG9wdGlvbnMsIC4uLmFyZ3MpIHtcblx0XHRjaGVjayhpZHMsIFtTdHJpbmddKTtcblxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gdGhpc1t0aGlzLm9yaWdpbl0uZmluZE9uZUJ5SWRzKGlkcywgb3B0aW9ucyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Y29uc29sZS5lcnJvcignRXhjZXB0aW9uIG9uIGZpbmQnLCBlLCBbaWRzLCBvcHRpb25zLCAuLi5hcmdzXSk7XG5cdFx0fVxuXHR9XG5cblx0aW5zZXJ0KC4uLmFyZ3MvKiByZWNvcmQqLykge1xuXHRcdHJldHVybiB0aGlzLl9kYi5pbnNlcnQoLi4uYXJncyk7XG5cdH1cblxuXHR1cGRhdGUoLi4uYXJncy8qIHF1ZXJ5LCB1cGRhdGUsIG9wdGlvbnMqLykge1xuXHRcdHJldHVybiB0aGlzLl9kYi51cGRhdGUoLi4uYXJncyk7XG5cdH1cblxuXHR1cHNlcnQoLi4uYXJncy8qIHF1ZXJ5LCB1cGRhdGUqLykge1xuXHRcdHJldHVybiB0aGlzLl9kYi51cHNlcnQoLi4uYXJncyk7XG5cdH1cblxuXHRyZW1vdmUoLi4uYXJncy8qIHF1ZXJ5Ki8pIHtcblx0XHRyZXR1cm4gdGhpcy5fZGIucmVtb3ZlKC4uLmFyZ3MpO1xuXHR9XG5cblx0aW5zZXJ0T3JVcHNlcnQoLi4uYXJncykge1xuXHRcdHJldHVybiB0aGlzLl9kYi5pbnNlcnRPclVwc2VydCguLi5hcmdzKTtcblx0fVxuXG5cdGFsbG93KC4uLmFyZ3MpIHtcblx0XHRyZXR1cm4gdGhpcy5fZGIuYWxsb3coLi4uYXJncyk7XG5cdH1cblxuXHRkZW55KC4uLmFyZ3MpIHtcblx0XHRyZXR1cm4gdGhpcy5fZGIuZGVueSguLi5hcmdzKTtcblx0fVxuXG5cdGVuc3VyZUluZGV4KC4uLmFyZ3MpIHtcblx0XHRyZXR1cm4gdGhpcy5fZGIuZW5zdXJlSW5kZXgoLi4uYXJncyk7XG5cdH1cblxuXHRkcm9wSW5kZXgoLi4uYXJncykge1xuXHRcdHJldHVybiB0aGlzLl9kYi5kcm9wSW5kZXgoLi4uYXJncyk7XG5cdH1cblxuXHR0cnlFbnN1cmVJbmRleCguLi5hcmdzKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2RiLnRyeUVuc3VyZUluZGV4KC4uLmFyZ3MpO1xuXHR9XG5cblx0dHJ5RHJvcEluZGV4KC4uLmFyZ3MpIHtcblx0XHRyZXR1cm4gdGhpcy5fZGIudHJ5RHJvcEluZGV4KC4uLmFyZ3MpO1xuXHR9XG5cblx0dHJhc2hGaW5kKC4uLmFyZ3MvKiBxdWVyeSwgb3B0aW9ucyovKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2RiLnRyYXNoRmluZCguLi5hcmdzKTtcblx0fVxuXG5cdHRyYXNoRmluZE9uZUJ5SWQoLi4uYXJncy8qIF9pZCwgb3B0aW9ucyovKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2RiLnRyYXNoRmluZE9uZUJ5SWQoLi4uYXJncyk7XG5cdH1cblxuXHR0cmFzaEZpbmREZWxldGVkQWZ0ZXIoLi4uYXJncy8qIGRlbGV0ZWRBdCwgcXVlcnksIG9wdGlvbnMqLykge1xuXHRcdHJldHVybiB0aGlzLl9kYi50cmFzaEZpbmREZWxldGVkQWZ0ZXIoLi4uYXJncyk7XG5cdH1cblxuXHRwcm9jZXNzUXVlcnlPcHRpb25zT25SZXN1bHQocmVzdWx0LCBvcHRpb25zID0ge30pIHtcblx0XHRpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgfHwgcmVzdWx0ID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcblx0XHRcdGlmIChvcHRpb25zLnNvcnQpIHtcblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0LnNvcnQoKGEsIGIpID0+IHtcblx0XHRcdFx0XHRsZXQgciA9IDA7XG5cdFx0XHRcdFx0Zm9yIChjb25zdCBmaWVsZCBpbiBvcHRpb25zLnNvcnQpIHtcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLnNvcnQuaGFzT3duUHJvcGVydHkoZmllbGQpKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGRpcmVjdGlvbiA9IG9wdGlvbnMuc29ydFtmaWVsZF07XG5cdFx0XHRcdFx0XHRcdGxldCB2YWx1ZUE7XG5cdFx0XHRcdFx0XHRcdGxldCB2YWx1ZUI7XG5cdFx0XHRcdFx0XHRcdGlmIChmaWVsZC5pbmRleE9mKCcuJykgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhbHVlQSA9IG9iamVjdFBhdGguZ2V0KGEsIGZpZWxkKTtcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZUIgPSBvYmplY3RQYXRoLmdldChiLCBmaWVsZCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFsdWVBID0gYVtmaWVsZF07XG5cdFx0XHRcdFx0XHRcdFx0dmFsdWVCID0gYltmaWVsZF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKHZhbHVlQSA+IHZhbHVlQikge1xuXHRcdFx0XHRcdFx0XHRcdHIgPSBkaXJlY3Rpb247XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKHZhbHVlQSA8IHZhbHVlQikge1xuXHRcdFx0XHRcdFx0XHRcdHIgPSAtZGlyZWN0aW9uO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiByO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBvcHRpb25zLnNraXAgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdHJlc3VsdC5zcGxpY2UoMCwgb3B0aW9ucy5za2lwKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBvcHRpb25zLmxpbWl0ID09PSAnbnVtYmVyJyAmJiBvcHRpb25zLmxpbWl0ICE9PSAwKSB7XG5cdFx0XHRcdHJlc3VsdC5zcGxpY2Uob3B0aW9ucy5saW1pdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCFvcHRpb25zLmZpZWxkcykge1xuXHRcdFx0b3B0aW9ucy5maWVsZHMgPSB7fTtcblx0XHR9XG5cblx0XHRjb25zdCBmaWVsZHNUb1JlbW92ZSA9IFtdO1xuXHRcdGNvbnN0IGZpZWxkc1RvR2V0ID0gW107XG5cblx0XHRmb3IgKGNvbnN0IGZpZWxkIGluIG9wdGlvbnMuZmllbGRzKSB7XG5cdFx0XHRpZiAob3B0aW9ucy5maWVsZHMuaGFzT3duUHJvcGVydHkoZmllbGQpKSB7XG5cdFx0XHRcdGlmIChvcHRpb25zLmZpZWxkc1tmaWVsZF0gPT09IDApIHtcblx0XHRcdFx0XHRmaWVsZHNUb1JlbW92ZS5wdXNoKGZpZWxkKTtcblx0XHRcdFx0fSBlbHNlIGlmIChvcHRpb25zLmZpZWxkc1tmaWVsZF0gPT09IDEpIHtcblx0XHRcdFx0XHRmaWVsZHNUb0dldC5wdXNoKGZpZWxkKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChmaWVsZHNUb1JlbW92ZS5sZW5ndGggPiAwICYmIGZpZWxkc1RvR2V0Lmxlbmd0aCA+IDApIHtcblx0XHRcdGNvbnNvbGUud2FybignQ2FuXFwndCBtaXggcmVtb3ZlIGFuZCBnZXQgZmllbGRzJyk7XG5cdFx0XHRmaWVsZHNUb1JlbW92ZS5zcGxpY2UoMCwgZmllbGRzVG9SZW1vdmUubGVuZ3RoKTtcblx0XHR9XG5cblx0XHRpZiAoZmllbGRzVG9HZXQubGVuZ3RoID4gMCAmJiBmaWVsZHNUb0dldC5pbmRleE9mKCdfaWQnKSA9PT0gLTEpIHtcblx0XHRcdGZpZWxkc1RvR2V0LnB1c2goJ19pZCcpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHBpY2tGaWVsZHMgPSAob2JqLCBmaWVsZHMpID0+IHtcblx0XHRcdGNvbnN0IHBpY2tlZCA9IHt9O1xuXHRcdFx0ZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG5cdFx0XHRcdGlmIChmaWVsZC5pbmRleE9mKCcuJykgIT09IC0xKSB7XG5cdFx0XHRcdFx0b2JqZWN0UGF0aC5zZXQocGlja2VkLCBmaWVsZCwgb2JqZWN0UGF0aC5nZXQob2JqLCBmaWVsZCkpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHBpY2tlZFtmaWVsZF0gPSBvYmpbZmllbGRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBwaWNrZWQ7XG5cdFx0fTtcblxuXHRcdGlmIChmaWVsZHNUb1JlbW92ZS5sZW5ndGggPiAwIHx8IGZpZWxkc1RvR2V0Lmxlbmd0aCA+IDApIHtcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0Lm1hcCgocmVjb3JkKSA9PiB7XG5cdFx0XHRcdFx0aWYgKGZpZWxkc1RvUmVtb3ZlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdHJldHVybiBfLm9taXQocmVjb3JkLCAuLi5maWVsZHNUb1JlbW92ZSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGZpZWxkc1RvR2V0Lmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdHJldHVybiBwaWNrRmllbGRzKHJlY29yZCwgZmllbGRzVG9HZXQpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChmaWVsZHNUb1JlbW92ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIF8ub21pdChyZXN1bHQsIC4uLmZpZWxkc1RvUmVtb3ZlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChmaWVsZHNUb0dldC5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBpY2tGaWVsZHMocmVzdWx0LCBmaWVsZHNUb0dldCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0Ly8gZGluYW1pY1RyYXNoRmluZEFmdGVyKG1ldGhvZCwgZGVsZXRlZEF0LCAuLi5hcmdzKSB7XG5cdC8vIFx0Y29uc3Qgc2NvcGUgPSB7XG5cdC8vIFx0XHRmaW5kOiAocXVlcnk9e30pID0+IHtcblx0Ly8gXHRcdFx0cmV0dXJuIHRoaXMudHJhc2hGaW5kRGVsZXRlZEFmdGVyKGRlbGV0ZWRBdCwgcXVlcnksIHsgZmllbGRzOiB7X2lkOiAxLCBfZGVsZXRlZEF0OiAxfSB9KTtcblx0Ly8gXHRcdH1cblx0Ly8gXHR9O1xuXG5cdC8vIFx0c2NvcGUubW9kZWwgPSB7XG5cdC8vIFx0XHRmaW5kOiBzY29wZS5maW5kXG5cdC8vIFx0fTtcblxuXHQvLyBcdHJldHVybiB0aGlzW21ldGhvZF0uYXBwbHkoc2NvcGUsIGFyZ3MpO1xuXHQvLyB9XG5cblx0Ly8gZGluYW1pY0ZpbmRBZnRlcihtZXRob2QsIHVwZGF0ZWRBdCwgLi4uYXJncykge1xuXHQvLyBcdGNvbnN0IHNjb3BlID0ge1xuXHQvLyBcdFx0ZmluZDogKHF1ZXJ5PXt9LCBvcHRpb25zKSA9PiB7XG5cdC8vIFx0XHRcdHF1ZXJ5Ll91cGRhdGVkQXQgPSB7XG5cdC8vIFx0XHRcdFx0JGd0OiB1cGRhdGVkQXRcblx0Ly8gXHRcdFx0fTtcblxuXHQvLyBcdFx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0Ly8gXHRcdH1cblx0Ly8gXHR9O1xuXG5cdC8vIFx0c2NvcGUubW9kZWwgPSB7XG5cdC8vIFx0XHRmaW5kOiBzY29wZS5maW5kXG5cdC8vIFx0fTtcblxuXHQvLyBcdHJldHVybiB0aGlzW21ldGhvZF0uYXBwbHkoc2NvcGUsIGFyZ3MpO1xuXHQvLyB9XG5cblx0Ly8gZGluYW1pY0ZpbmRDaGFuZ2VzQWZ0ZXIobWV0aG9kLCB1cGRhdGVkQXQsIC4uLmFyZ3MpIHtcblx0Ly8gXHRyZXR1cm4ge1xuXHQvLyBcdFx0dXBkYXRlOiB0aGlzLmRpbmFtaWNGaW5kQWZ0ZXIobWV0aG9kLCB1cGRhdGVkQXQsIC4uLmFyZ3MpLmZldGNoKCksXG5cdC8vIFx0XHRyZW1vdmU6IHRoaXMuZGluYW1pY1RyYXNoRmluZEFmdGVyKG1ldGhvZCwgdXBkYXRlZEF0LCAuLi5hcmdzKS5mZXRjaCgpXG5cdC8vIFx0fTtcblx0Ly8gfVxuXG59XG5cblJvY2tldENoYXQubW9kZWxzLl9CYXNlID0gTW9kZWxzQmFzZTtcbiIsIi8qIGdsb2JhbHMgSW5zdGFuY2VTdGF0dXMgKi9cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5Sb2NrZXRDaGF0Lm1vZGVscy5BdmF0YXJzID0gbmV3IGNsYXNzIGV4dGVuZHMgUm9ja2V0Q2hhdC5tb2RlbHMuX0Jhc2Uge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcignYXZhdGFycycpO1xuXG5cdFx0dGhpcy5tb2RlbC5iZWZvcmUuaW5zZXJ0KCh1c2VySWQsIGRvYykgPT4ge1xuXHRcdFx0ZG9jLmluc3RhbmNlSWQgPSBJbnN0YW5jZVN0YXR1cy5pZCgpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IG5hbWU6IDEgfSk7XG5cdH1cblxuXHRpbnNlcnRBdmF0YXJGaWxlSW5pdChuYW1lLCB1c2VySWQsIHN0b3JlLCBmaWxlLCBleHRyYSkge1xuXHRcdGNvbnN0IGZpbGVEYXRhID0ge1xuXHRcdFx0X2lkOiBuYW1lLFxuXHRcdFx0bmFtZSxcblx0XHRcdHVzZXJJZCxcblx0XHRcdHN0b3JlLFxuXHRcdFx0Y29tcGxldGU6IGZhbHNlLFxuXHRcdFx0dXBsb2FkaW5nOiB0cnVlLFxuXHRcdFx0cHJvZ3Jlc3M6IDAsXG5cdFx0XHRleHRlbnNpb246IHMuc3RyUmlnaHRCYWNrKGZpbGUubmFtZSwgJy4nKSxcblx0XHRcdHVwbG9hZGVkQXQ6IG5ldyBEYXRlKCksXG5cdFx0fTtcblxuXHRcdF8uZXh0ZW5kKGZpbGVEYXRhLCBmaWxlLCBleHRyYSk7XG5cblx0XHRyZXR1cm4gdGhpcy5pbnNlcnRPclVwc2VydChmaWxlRGF0YSk7XG5cdH1cblxuXHR1cGRhdGVGaWxlQ29tcGxldGUoZmlsZUlkLCB1c2VySWQsIGZpbGUpIHtcblx0XHRpZiAoIWZpbGVJZCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGZpbHRlciA9IHtcblx0XHRcdF9pZDogZmlsZUlkLFxuXHRcdFx0dXNlcklkLFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGNvbXBsZXRlOiB0cnVlLFxuXHRcdFx0XHR1cGxvYWRpbmc6IGZhbHNlLFxuXHRcdFx0XHRwcm9ncmVzczogMSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHVwZGF0ZS4kc2V0ID0gXy5leHRlbmQoZmlsZSwgdXBkYXRlLiRzZXQpO1xuXG5cdFx0aWYgKHRoaXMubW9kZWwuZGlyZWN0ICYmIHRoaXMubW9kZWwuZGlyZWN0LnVwZGF0ZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMubW9kZWwuZGlyZWN0LnVwZGF0ZShmaWx0ZXIsIHVwZGF0ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLnVwZGF0ZShmaWx0ZXIsIHVwZGF0ZSk7XG5cdFx0fVxuXHR9XG5cblx0ZmluZE9uZUJ5TmFtZShuYW1lKSB7XG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZSh7IG5hbWUgfSk7XG5cdH1cblxuXHR1cGRhdGVGaWxlTmFtZUJ5SWQoZmlsZUlkLCBuYW1lKSB7XG5cdFx0Y29uc3QgZmlsdGVyID0geyBfaWQ6IGZpbGVJZCB9O1xuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0bmFtZSxcblx0XHRcdH0sXG5cdFx0fTtcblx0XHRpZiAodGhpcy5tb2RlbC5kaXJlY3QgJiYgdGhpcy5tb2RlbC5kaXJlY3QudXBkYXRlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5tb2RlbC5kaXJlY3QudXBkYXRlKGZpbHRlciwgdXBkYXRlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMudXBkYXRlKGZpbHRlciwgdXBkYXRlKTtcblx0XHR9XG5cdH1cblxuXHQvLyBAVE9ETyBkZXByZWNhdGVkXG5cdHVwZGF0ZUZpbGVDb21wbGV0ZUJ5TmFtZUFuZFVzZXJJZChuYW1lLCB1c2VySWQsIHVybCkge1xuXHRcdGlmICghbmFtZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGZpbHRlciA9IHtcblx0XHRcdG5hbWUsXG5cdFx0XHR1c2VySWQsXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0Y29tcGxldGU6IHRydWUsXG5cdFx0XHRcdHVwbG9hZGluZzogZmFsc2UsXG5cdFx0XHRcdHByb2dyZXNzOiAxLFxuXHRcdFx0XHR1cmwsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRpZiAodGhpcy5tb2RlbC5kaXJlY3QgJiYgdGhpcy5tb2RlbC5kaXJlY3QudXBkYXRlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5tb2RlbC5kaXJlY3QudXBkYXRlKGZpbHRlciwgdXBkYXRlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMudXBkYXRlKGZpbHRlciwgdXBkYXRlKTtcblx0XHR9XG5cdH1cblxuXHRkZWxldGVGaWxlKGZpbGVJZCkge1xuXHRcdGlmICh0aGlzLm1vZGVsLmRpcmVjdCAmJiB0aGlzLm1vZGVsLmRpcmVjdC5yZW1vdmUpIHtcblx0XHRcdHJldHVybiB0aGlzLm1vZGVsLmRpcmVjdC5yZW1vdmUoeyBfaWQ6IGZpbGVJZCB9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMucmVtb3ZlKHsgX2lkOiBmaWxlSWQgfSk7XG5cdFx0fVxuXHR9XG59O1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cblJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzID0gbmV3IGNsYXNzIGV4dGVuZHMgUm9ja2V0Q2hhdC5tb2RlbHMuX0Jhc2Uge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcignbWVzc2FnZScpO1xuXG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IHJpZDogMSwgdHM6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IHRzOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAndS5faWQnOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyBlZGl0ZWRBdDogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ2VkaXRlZEJ5Ll9pZCc6IDEgfSwgeyBzcGFyc2U6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IHJpZDogMSwgdDogMSwgJ3UuX2lkJzogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgZXhwaXJlQXQ6IDEgfSwgeyBleHBpcmVBZnRlclNlY29uZHM6IDAgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IG1zZzogJ3RleHQnIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAnZmlsZS5faWQnOiAxIH0sIHsgc3BhcnNlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAnbWVudGlvbnMudXNlcm5hbWUnOiAxIH0sIHsgc3BhcnNlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyBwaW5uZWQ6IDEgfSwgeyBzcGFyc2U6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IHNuaXBwZXRlZDogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgbG9jYXRpb246ICcyZHNwaGVyZScgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IHNsYWNrQm90SWQ6IDEsIHNsYWNrVHM6IDEgfSwgeyBzcGFyc2U6IDEgfSk7XG5cdH1cblxuXHRjb3VudFZpc2libGVCeVJvb21JZEJldHdlZW5UaW1lc3RhbXBzSW5jbHVzaXZlKHJvb21JZCwgYWZ0ZXJUaW1lc3RhbXAsIGJlZm9yZVRpbWVzdGFtcCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjoge1xuXHRcdFx0XHQkbmU6IHRydWUsXG5cdFx0XHR9LFxuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHR0czoge1xuXHRcdFx0XHQkZ3RlOiBhZnRlclRpbWVzdGFtcCxcblx0XHRcdFx0JGx0ZTogYmVmb3JlVGltZXN0YW1wLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucykuY291bnQoKTtcblx0fVxuXG5cdC8vIEZJTkRcblx0ZmluZEJ5TWVudGlvbih1c2VybmFtZSwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cdHsgJ21lbnRpb25zLnVzZXJuYW1lJzogdXNlcm5hbWUgfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEZpbGVzQnlVc2VySWQodXNlcklkLCBvcHRpb25zID0ge30pIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdCd1Ll9pZCc6IHVzZXJJZCxcblx0XHRcdCdmaWxlLl9pZCc6IHsgJGV4aXN0czogdHJ1ZSB9LFxuXHRcdH07XG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgeyBmaWVsZHM6IHsgJ2ZpbGUuX2lkJzogMSB9LCAuLi5vcHRpb25zIH0pO1xuXHR9XG5cblx0ZmluZEZpbGVzQnlSb29tSWRQaW5uZWRUaW1lc3RhbXBBbmRVc2VycyhyaWQsIGV4Y2x1ZGVQaW5uZWQsIHRzLCB1c2VycyA9IFtdLCBvcHRpb25zID0ge30pIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZCxcblx0XHRcdHRzLFxuXHRcdFx0J2ZpbGUuX2lkJzogeyAkZXhpc3RzOiB0cnVlIH0sXG5cdFx0fTtcblxuXHRcdGlmIChleGNsdWRlUGlubmVkKSB7XG5cdFx0XHRxdWVyeS5waW5uZWQgPSB7ICRuZTogdHJ1ZSB9O1xuXHRcdH1cblxuXHRcdGlmICh1c2Vycy5sZW5ndGgpIHtcblx0XHRcdHF1ZXJ5Wyd1LnVzZXJuYW1lJ10gPSB7ICRpbjogdXNlcnMgfTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCB7IGZpZWxkczogeyAnZmlsZS5faWQnOiAxIH0sIC4uLm9wdGlvbnMgfSk7XG5cdH1cblx0ZmluZFZpc2libGVCeU1lbnRpb25BbmRSb29tSWQodXNlcm5hbWUsIHJpZCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjogeyAkbmU6IHRydWUgfSxcblx0XHRcdCdtZW50aW9ucy51c2VybmFtZSc6IHVzZXJuYW1lLFxuXHRcdFx0cmlkLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRWaXNpYmxlQnlSb29tSWQocm9vbUlkLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaGlkZGVuOiB7XG5cdFx0XHRcdCRuZTogdHJ1ZSxcblx0XHRcdH0sXG5cblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRWaXNpYmxlQnlSb29tSWROb3RDb250YWluaW5nVHlwZXMocm9vbUlkLCB0eXBlcywgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjoge1xuXHRcdFx0XHQkbmU6IHRydWUsXG5cdFx0XHR9LFxuXG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHR9O1xuXG5cdFx0aWYgKE1hdGNoLnRlc3QodHlwZXMsIFtTdHJpbmddKSAmJiAodHlwZXMubGVuZ3RoID4gMCkpIHtcblx0XHRcdHF1ZXJ5LnQgPVxuXHRcdFx0eyAkbmluOiB0eXBlcyB9O1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEludmlzaWJsZUJ5Um9vbUlkKHJvb21JZCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjogdHJ1ZSxcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRWaXNpYmxlQnlSb29tSWRBZnRlclRpbWVzdGFtcChyb29tSWQsIHRpbWVzdGFtcCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjoge1xuXHRcdFx0XHQkbmU6IHRydWUsXG5cdFx0XHR9LFxuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHR0czoge1xuXHRcdFx0XHQkZ3Q6IHRpbWVzdGFtcCxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEZvclVwZGF0ZXMocm9vbUlkLCB0aW1lc3RhbXAsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9oaWRkZW46IHtcblx0XHRcdFx0JG5lOiB0cnVlLFxuXHRcdFx0fSxcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0X3VwZGF0ZWRBdDoge1xuXHRcdFx0XHQkZ3Q6IHRpbWVzdGFtcCxcblx0XHRcdH0sXG5cdFx0fTtcblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRWaXNpYmxlQnlSb29tSWRCZWZvcmVUaW1lc3RhbXAocm9vbUlkLCB0aW1lc3RhbXAsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9oaWRkZW46IHtcblx0XHRcdFx0JG5lOiB0cnVlLFxuXHRcdFx0fSxcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0dHM6IHtcblx0XHRcdFx0JGx0OiB0aW1lc3RhbXAsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRWaXNpYmxlQnlSb29tSWRCZWZvcmVUaW1lc3RhbXBJbmNsdXNpdmUocm9vbUlkLCB0aW1lc3RhbXAsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9oaWRkZW46IHtcblx0XHRcdFx0JG5lOiB0cnVlLFxuXHRcdFx0fSxcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0dHM6IHtcblx0XHRcdFx0JGx0ZTogdGltZXN0YW1wLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVmlzaWJsZUJ5Um9vbUlkQmV0d2VlblRpbWVzdGFtcHMocm9vbUlkLCBhZnRlclRpbWVzdGFtcCwgYmVmb3JlVGltZXN0YW1wLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaGlkZGVuOiB7XG5cdFx0XHRcdCRuZTogdHJ1ZSxcblx0XHRcdH0sXG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdHRzOiB7XG5cdFx0XHRcdCRndDogYWZ0ZXJUaW1lc3RhbXAsXG5cdFx0XHRcdCRsdDogYmVmb3JlVGltZXN0YW1wLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVmlzaWJsZUJ5Um9vbUlkQmV0d2VlblRpbWVzdGFtcHNJbmNsdXNpdmUocm9vbUlkLCBhZnRlclRpbWVzdGFtcCwgYmVmb3JlVGltZXN0YW1wLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaGlkZGVuOiB7XG5cdFx0XHRcdCRuZTogdHJ1ZSxcblx0XHRcdH0sXG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdHRzOiB7XG5cdFx0XHRcdCRndGU6IGFmdGVyVGltZXN0YW1wLFxuXHRcdFx0XHQkbHRlOiBiZWZvcmVUaW1lc3RhbXAsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRWaXNpYmxlQnlSb29tSWRCZWZvcmVUaW1lc3RhbXBOb3RDb250YWluaW5nVHlwZXMocm9vbUlkLCB0aW1lc3RhbXAsIHR5cGVzLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaGlkZGVuOiB7XG5cdFx0XHRcdCRuZTogdHJ1ZSxcblx0XHRcdH0sXG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdHRzOiB7XG5cdFx0XHRcdCRsdDogdGltZXN0YW1wLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0aWYgKE1hdGNoLnRlc3QodHlwZXMsIFtTdHJpbmddKSAmJiAodHlwZXMubGVuZ3RoID4gMCkpIHtcblx0XHRcdHF1ZXJ5LnQgPVxuXHRcdFx0eyAkbmluOiB0eXBlcyB9O1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZFZpc2libGVCeVJvb21JZEJldHdlZW5UaW1lc3RhbXBzTm90Q29udGFpbmluZ1R5cGVzKHJvb21JZCwgYWZ0ZXJUaW1lc3RhbXAsIGJlZm9yZVRpbWVzdGFtcCwgdHlwZXMsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9oaWRkZW46IHtcblx0XHRcdFx0JG5lOiB0cnVlLFxuXHRcdFx0fSxcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0dHM6IHtcblx0XHRcdFx0JGd0OiBhZnRlclRpbWVzdGFtcCxcblx0XHRcdFx0JGx0OiBiZWZvcmVUaW1lc3RhbXAsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRpZiAoTWF0Y2gudGVzdCh0eXBlcywgW1N0cmluZ10pICYmICh0eXBlcy5sZW5ndGggPiAwKSkge1xuXHRcdFx0cXVlcnkudCA9XG5cdFx0XHR7ICRuaW46IHR5cGVzIH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVmlzaWJsZUNyZWF0ZWRPckVkaXRlZEFmdGVyVGltZXN0YW1wKHRpbWVzdGFtcCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjogeyAkbmU6IHRydWUgfSxcblx0XHRcdCRvcjogW3tcblx0XHRcdFx0dHM6IHtcblx0XHRcdFx0XHQkZ3Q6IHRpbWVzdGFtcCxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGVkaXRlZEF0OiB7XG5cdFx0XHRcdFx0JGd0OiB0aW1lc3RhbXAsXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kU3RhcnJlZEJ5VXNlckF0Um9vbSh1c2VySWQsIHJvb21JZCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2hpZGRlbjogeyAkbmU6IHRydWUgfSxcblx0XHRcdCdzdGFycmVkLl9pZCc6IHVzZXJJZCxcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRQaW5uZWRCeVJvb20ocm9vbUlkLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiB7ICRuZTogJ3JtJyB9LFxuXHRcdFx0X2hpZGRlbjogeyAkbmU6IHRydWUgfSxcblx0XHRcdHBpbm5lZDogdHJ1ZSxcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRTbmlwcGV0ZWRCeVJvb20ocm9vbUlkLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaGlkZGVuOiB7ICRuZTogdHJ1ZSB9LFxuXHRcdFx0c25pcHBldGVkOiB0cnVlLFxuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0Z2V0TGFzdFRpbWVzdGFtcChvcHRpb25zKSB7XG5cdFx0aWYgKG9wdGlvbnMgPT0gbnVsbCkgeyBvcHRpb25zID0ge307IH1cblx0XHRjb25zdCBxdWVyeSA9IHsgdHM6IHsgJGV4aXN0czogMSB9IH07XG5cdFx0b3B0aW9ucy5zb3J0ID0geyB0czogLTEgfTtcblx0XHRvcHRpb25zLmxpbWl0ID0gMTtcblx0XHRjb25zdCBbbWVzc2FnZV0gPSB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpLmZldGNoKCk7XG5cdFx0cmV0dXJuIG1lc3NhZ2UgJiYgbWVzc2FnZS50cztcblx0fVxuXG5cdGZpbmRCeVJvb21JZEFuZE1lc3NhZ2VJZHMocmlkLCBtZXNzYWdlSWRzLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQsXG5cdFx0XHRfaWQ6IHtcblx0XHRcdFx0JGluOiBtZXNzYWdlSWRzLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kT25lQnlTbGFja0JvdElkQW5kU2xhY2tUcyhzbGFja0JvdElkLCBzbGFja1RzKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRzbGFja0JvdElkLFxuXHRcdFx0c2xhY2tUcyxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSk7XG5cdH1cblxuXHRmaW5kT25lQnlTbGFja1RzKHNsYWNrVHMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHsgc2xhY2tUcyB9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSk7XG5cdH1cblxuXHRmaW5kQnlSb29tSWRBbmRUeXBlKHJvb21JZCwgdHlwZSwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHR0OiB0eXBlLFxuXHRcdH07XG5cblx0XHRpZiAob3B0aW9ucyA9PSBudWxsKSB7IG9wdGlvbnMgPSB7fTsgfVxuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlSb29tSWQocm9vbUlkLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRnZXRMYXN0VmlzaWJsZU1lc3NhZ2VTZW50V2l0aE5vVHlwZUJ5Um9vbUlkKHJpZCwgbWVzc2FnZUlkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQsXG5cdFx0XHRfaGlkZGVuOiB7ICRuZTogdHJ1ZSB9LFxuXHRcdFx0dDogeyAkZXhpc3RzOiBmYWxzZSB9LFxuXHRcdH07XG5cblx0XHRpZiAobWVzc2FnZUlkKSB7XG5cdFx0XHRxdWVyeS5faWQgPSB7ICRuZTogbWVzc2FnZUlkIH07XG5cdFx0fVxuXG5cdFx0Y29uc3Qgb3B0aW9ucyA9IHtcblx0XHRcdHNvcnQ6IHtcblx0XHRcdFx0dHM6IC0xLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRjbG9uZUFuZFNhdmVBc0hpc3RvcnlCeUlkKF9pZCkge1xuXHRcdGNvbnN0IG1lID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQoTWV0ZW9yLnVzZXJJZCgpKTtcblx0XHRjb25zdCByZWNvcmQgPSB0aGlzLmZpbmRPbmVCeUlkKF9pZCk7XG5cdFx0cmVjb3JkLl9oaWRkZW4gPSB0cnVlO1xuXHRcdHJlY29yZC5wYXJlbnQgPSByZWNvcmQuX2lkO1xuXHRcdHJlY29yZC5lZGl0ZWRBdCA9IG5ldyBEYXRlO1xuXHRcdHJlY29yZC5lZGl0ZWRCeSA9IHtcblx0XHRcdF9pZDogTWV0ZW9yLnVzZXJJZCgpLFxuXHRcdFx0dXNlcm5hbWU6IG1lLnVzZXJuYW1lLFxuXHRcdH07XG5cdFx0ZGVsZXRlIHJlY29yZC5faWQ7XG5cdFx0cmV0dXJuIHRoaXMuaW5zZXJ0KHJlY29yZCk7XG5cdH1cblxuXHQvLyBVUERBVEVcblx0c2V0SGlkZGVuQnlJZChfaWQsIGhpZGRlbikge1xuXHRcdGlmIChoaWRkZW4gPT0gbnVsbCkgeyBoaWRkZW4gPSB0cnVlOyB9XG5cdFx0Y29uc3QgcXVlcnkgPVx0eyBfaWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0X2hpZGRlbjogaGlkZGVuLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0QXNEZWxldGVkQnlJZEFuZFVzZXIoX2lkLCB1c2VyKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVx0eyBfaWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0bXNnOiAnJyxcblx0XHRcdFx0dDogJ3JtJyxcblx0XHRcdFx0dXJsczogW10sXG5cdFx0XHRcdG1lbnRpb25zOiBbXSxcblx0XHRcdFx0YXR0YWNobWVudHM6IFtdLFxuXHRcdFx0XHRyZWFjdGlvbnM6IFtdLFxuXHRcdFx0XHRlZGl0ZWRBdDogbmV3IERhdGUoKSxcblx0XHRcdFx0ZWRpdGVkQnk6IHtcblx0XHRcdFx0XHRfaWQ6IHVzZXIuX2lkLFxuXHRcdFx0XHRcdHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0UGlubmVkQnlJZEFuZFVzZXJJZChfaWQsIHBpbm5lZEJ5LCBwaW5uZWQsIHBpbm5lZEF0KSB7XG5cdFx0aWYgKHBpbm5lZCA9PSBudWxsKSB7IHBpbm5lZCA9IHRydWU7IH1cblx0XHRpZiAocGlubmVkQXQgPT0gbnVsbCkgeyBwaW5uZWRBdCA9IDA7IH1cblx0XHRjb25zdCBxdWVyeSA9XHR7IF9pZCB9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRwaW5uZWQsXG5cdFx0XHRcdHBpbm5lZEF0OiBwaW5uZWRBdCB8fCBuZXcgRGF0ZSxcblx0XHRcdFx0cGlubmVkQnksXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRTbmlwcGV0ZWRCeUlkQW5kVXNlcklkKG1lc3NhZ2UsIHNuaXBwZXROYW1lLCBzbmlwcGV0ZWRCeSwgc25pcHBldGVkLCBzbmlwcGV0ZWRBdCkge1xuXHRcdGlmIChzbmlwcGV0ZWQgPT0gbnVsbCkgeyBzbmlwcGV0ZWQgPSB0cnVlOyB9XG5cdFx0aWYgKHNuaXBwZXRlZEF0ID09IG51bGwpIHsgc25pcHBldGVkQXQgPSAwOyB9XG5cdFx0Y29uc3QgcXVlcnkgPVx0eyBfaWQ6IG1lc3NhZ2UuX2lkIH07XG5cblx0XHRjb25zdCBtc2cgPSBgXFxgXFxgXFxgJHsgbWVzc2FnZS5tc2cgfVxcYFxcYFxcYGA7XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdG1zZyxcblx0XHRcdFx0c25pcHBldGVkLFxuXHRcdFx0XHRzbmlwcGV0ZWRBdDogc25pcHBldGVkQXQgfHwgbmV3IERhdGUsXG5cdFx0XHRcdHNuaXBwZXRlZEJ5LFxuXHRcdFx0XHRzbmlwcGV0TmFtZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNldFVybHNCeUlkKF9pZCwgdXJscykge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cdHsgX2lkIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdHVybHMsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHR1cGRhdGVBbGxVc2VybmFtZXNCeVVzZXJJZCh1c2VySWQsIHVzZXJuYW1lKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVx0eyAndS5faWQnOiB1c2VySWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J3UudXNlcm5hbWUnOiB1c2VybmFtZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0dXBkYXRlVXNlcm5hbWVPZkVkaXRCeVVzZXJJZCh1c2VySWQsIHVzZXJuYW1lKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVx0eyAnZWRpdGVkQnkuX2lkJzogdXNlcklkIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdCdlZGl0ZWRCeS51c2VybmFtZSc6IHVzZXJuYW1lLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHR1cGRhdGVVc2VybmFtZUFuZE1lc3NhZ2VPZk1lbnRpb25CeUlkQW5kT2xkVXNlcm5hbWUoX2lkLCBvbGRVc2VybmFtZSwgbmV3VXNlcm5hbWUsIG5ld01lc3NhZ2UpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9pZCxcblx0XHRcdCdtZW50aW9ucy51c2VybmFtZSc6IG9sZFVzZXJuYW1lLFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdCdtZW50aW9ucy4kLnVzZXJuYW1lJzogbmV3VXNlcm5hbWUsXG5cdFx0XHRcdG1zZzogbmV3TWVzc2FnZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHVwZGF0ZVVzZXJTdGFyQnlJZChfaWQsIHVzZXJJZCwgc3RhcnJlZCkge1xuXHRcdGxldCB1cGRhdGU7XG5cdFx0Y29uc3QgcXVlcnkgPVx0eyBfaWQgfTtcblxuXHRcdGlmIChzdGFycmVkKSB7XG5cdFx0XHR1cGRhdGUgPSB7XG5cdFx0XHRcdCRhZGRUb1NldDoge1xuXHRcdFx0XHRcdHN0YXJyZWQ6IHsgX2lkOiB1c2VySWQgfSxcblx0XHRcdFx0fSxcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHVwZGF0ZSA9IHtcblx0XHRcdFx0JHB1bGw6IHtcblx0XHRcdFx0XHRzdGFycmVkOiB7IF9pZDogTWV0ZW9yLnVzZXJJZCgpIH0sXG5cdFx0XHRcdH0sXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHVwZ3JhZGVFdHNUb0VkaXRBdCgpIHtcblx0XHRjb25zdCBxdWVyeSA9XHR7IGV0czogeyAkZXhpc3RzOiAxIH0gfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRyZW5hbWU6IHtcblx0XHRcdFx0ZXRzOiAnZWRpdGVkQXQnLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHRzZXRNZXNzYWdlQXR0YWNobWVudHMoX2lkLCBhdHRhY2htZW50cykge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cdHsgX2lkIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGF0dGFjaG1lbnRzLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0U2xhY2tCb3RJZEFuZFNsYWNrVHMoX2lkLCBzbGFja0JvdElkLCBzbGFja1RzKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVx0eyBfaWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0c2xhY2tCb3RJZCxcblx0XHRcdFx0c2xhY2tUcyxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHVubGlua1VzZXJJZCh1c2VySWQsIG5ld1VzZXJJZCwgbmV3VXNlcm5hbWUsIG5ld05hbWVBbGlhcykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0J3UuX2lkJzogdXNlcklkLFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGFsaWFzOiBuZXdOYW1lQWxpYXMsXG5cdFx0XHRcdCd1Ll9pZCc6IG5ld1VzZXJJZCxcblx0XHRcdFx0J3UudXNlcm5hbWUnIDogbmV3VXNlcm5hbWUsXG5cdFx0XHRcdCd1Lm5hbWUnIDogdW5kZWZpbmVkLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHQvLyBJTlNFUlRcblx0Y3JlYXRlV2l0aFR5cGVSb29tSWRNZXNzYWdlQW5kVXNlcih0eXBlLCByb29tSWQsIG1lc3NhZ2UsIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdGNvbnN0IHJvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlJZChyb29tSWQsIHsgZmllbGRzOiB7IHN5c01lczogMSB9IH0pO1xuXHRcdGlmICgocm9vbSAhPSBudWxsID8gcm9vbS5zeXNNZXMgOiB1bmRlZmluZWQpID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCByZWNvcmQgPSB7XG5cdFx0XHR0OiB0eXBlLFxuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHR0czogbmV3IERhdGUsXG5cdFx0XHRtc2c6IG1lc3NhZ2UsXG5cdFx0XHR1OiB7XG5cdFx0XHRcdF9pZDogdXNlci5faWQsXG5cdFx0XHRcdHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lLFxuXHRcdFx0fSxcblx0XHRcdGdyb3VwYWJsZTogZmFsc2UsXG5cdFx0fTtcblxuXHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTWVzc2FnZV9SZWFkX1JlY2VpcHRfRW5hYmxlZCcpKSB7XG5cdFx0XHRyZWNvcmQudW5yZWFkID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRfLmV4dGVuZChyZWNvcmQsIGV4dHJhRGF0YSk7XG5cblx0XHRyZWNvcmQuX2lkID0gdGhpcy5pbnNlcnRPclVwc2VydChyZWNvcmQpO1xuXHRcdFJvY2tldENoYXQubW9kZWxzLlJvb21zLmluY01zZ0NvdW50QnlJZChyb29tLl9pZCwgMSk7XG5cdFx0cmV0dXJuIHJlY29yZDtcblx0fVxuXG5cdGNyZWF0ZU5hdmlnYXRpb25IaXN0b3J5V2l0aFJvb21JZE1lc3NhZ2VBbmRVc2VyKHJvb21JZCwgbWVzc2FnZSwgdXNlciwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3QgdHlwZSA9ICdsaXZlY2hhdF9uYXZpZ2F0aW9uX2hpc3RvcnknO1xuXHRcdGNvbnN0IHJvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlJZChyb29tSWQsIHsgZmllbGRzOiB7IHN5c01lczogMSB9IH0pO1xuXHRcdGlmICgocm9vbSAhPSBudWxsID8gcm9vbS5zeXNNZXMgOiB1bmRlZmluZWQpID09PSBmYWxzZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRjb25zdCByZWNvcmQgPSB7XG5cdFx0XHR0OiB0eXBlLFxuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHR0czogbmV3IERhdGUsXG5cdFx0XHRtc2c6IG1lc3NhZ2UsXG5cdFx0XHR1OiB7XG5cdFx0XHRcdF9pZDogdXNlci5faWQsXG5cdFx0XHRcdHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lLFxuXHRcdFx0fSxcblx0XHRcdGdyb3VwYWJsZTogZmFsc2UsXG5cdFx0fTtcblxuXHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTWVzc2FnZV9SZWFkX1JlY2VpcHRfRW5hYmxlZCcpKSB7XG5cdFx0XHRyZWNvcmQudW5yZWFkID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRfLmV4dGVuZChyZWNvcmQsIGV4dHJhRGF0YSk7XG5cblx0XHRyZWNvcmQuX2lkID0gdGhpcy5pbnNlcnRPclVwc2VydChyZWNvcmQpO1xuXHRcdHJldHVybiByZWNvcmQ7XG5cdH1cblxuXHRjcmVhdGVVc2VySm9pbldpdGhSb29tSWRBbmRVc2VyKHJvb21JZCwgdXNlciwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3QgbWVzc2FnZSA9IHVzZXIudXNlcm5hbWU7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlV2l0aFR5cGVSb29tSWRNZXNzYWdlQW5kVXNlcigndWonLCByb29tSWQsIG1lc3NhZ2UsIHVzZXIsIGV4dHJhRGF0YSk7XG5cdH1cblxuXHRjcmVhdGVVc2VyTGVhdmVXaXRoUm9vbUlkQW5kVXNlcihyb29tSWQsIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdGNvbnN0IG1lc3NhZ2UgPSB1c2VyLnVzZXJuYW1lO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZVdpdGhUeXBlUm9vbUlkTWVzc2FnZUFuZFVzZXIoJ3VsJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlVXNlclJlbW92ZWRXaXRoUm9vbUlkQW5kVXNlcihyb29tSWQsIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdGNvbnN0IG1lc3NhZ2UgPSB1c2VyLnVzZXJuYW1lO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZVdpdGhUeXBlUm9vbUlkTWVzc2FnZUFuZFVzZXIoJ3J1Jywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlVXNlckFkZGVkV2l0aFJvb21JZEFuZFVzZXIocm9vbUlkLCB1c2VyLCBleHRyYURhdGEpIHtcblx0XHRjb25zdCBtZXNzYWdlID0gdXNlci51c2VybmFtZTtcblx0XHRyZXR1cm4gdGhpcy5jcmVhdGVXaXRoVHlwZVJvb21JZE1lc3NhZ2VBbmRVc2VyKCdhdScsIHJvb21JZCwgbWVzc2FnZSwgdXNlciwgZXh0cmFEYXRhKTtcblx0fVxuXG5cdGNyZWF0ZUNvbW1hbmRXaXRoUm9vbUlkQW5kVXNlcihjb21tYW5kLCByb29tSWQsIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZVdpdGhUeXBlUm9vbUlkTWVzc2FnZUFuZFVzZXIoJ2NvbW1hbmQnLCByb29tSWQsIGNvbW1hbmQsIHVzZXIsIGV4dHJhRGF0YSk7XG5cdH1cblxuXHRjcmVhdGVVc2VyTXV0ZWRXaXRoUm9vbUlkQW5kVXNlcihyb29tSWQsIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdGNvbnN0IG1lc3NhZ2UgPSB1c2VyLnVzZXJuYW1lO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZVdpdGhUeXBlUm9vbUlkTWVzc2FnZUFuZFVzZXIoJ3VzZXItbXV0ZWQnLCByb29tSWQsIG1lc3NhZ2UsIHVzZXIsIGV4dHJhRGF0YSk7XG5cdH1cblxuXHRjcmVhdGVVc2VyVW5tdXRlZFdpdGhSb29tSWRBbmRVc2VyKHJvb21JZCwgdXNlciwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3QgbWVzc2FnZSA9IHVzZXIudXNlcm5hbWU7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlV2l0aFR5cGVSb29tSWRNZXNzYWdlQW5kVXNlcigndXNlci11bm11dGVkJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlTmV3TW9kZXJhdG9yV2l0aFJvb21JZEFuZFVzZXIocm9vbUlkLCB1c2VyLCBleHRyYURhdGEpIHtcblx0XHRjb25zdCBtZXNzYWdlID0gdXNlci51c2VybmFtZTtcblx0XHRyZXR1cm4gdGhpcy5jcmVhdGVXaXRoVHlwZVJvb21JZE1lc3NhZ2VBbmRVc2VyKCduZXctbW9kZXJhdG9yJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlTW9kZXJhdG9yUmVtb3ZlZFdpdGhSb29tSWRBbmRVc2VyKHJvb21JZCwgdXNlciwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3QgbWVzc2FnZSA9IHVzZXIudXNlcm5hbWU7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlV2l0aFR5cGVSb29tSWRNZXNzYWdlQW5kVXNlcignbW9kZXJhdG9yLXJlbW92ZWQnLCByb29tSWQsIG1lc3NhZ2UsIHVzZXIsIGV4dHJhRGF0YSk7XG5cdH1cblxuXHRjcmVhdGVOZXdPd25lcldpdGhSb29tSWRBbmRVc2VyKHJvb21JZCwgdXNlciwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3QgbWVzc2FnZSA9IHVzZXIudXNlcm5hbWU7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlV2l0aFR5cGVSb29tSWRNZXNzYWdlQW5kVXNlcignbmV3LW93bmVyJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlT3duZXJSZW1vdmVkV2l0aFJvb21JZEFuZFVzZXIocm9vbUlkLCB1c2VyLCBleHRyYURhdGEpIHtcblx0XHRjb25zdCBtZXNzYWdlID0gdXNlci51c2VybmFtZTtcblx0XHRyZXR1cm4gdGhpcy5jcmVhdGVXaXRoVHlwZVJvb21JZE1lc3NhZ2VBbmRVc2VyKCdvd25lci1yZW1vdmVkJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlTmV3TGVhZGVyV2l0aFJvb21JZEFuZFVzZXIocm9vbUlkLCB1c2VyLCBleHRyYURhdGEpIHtcblx0XHRjb25zdCBtZXNzYWdlID0gdXNlci51c2VybmFtZTtcblx0XHRyZXR1cm4gdGhpcy5jcmVhdGVXaXRoVHlwZVJvb21JZE1lc3NhZ2VBbmRVc2VyKCduZXctbGVhZGVyJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlTGVhZGVyUmVtb3ZlZFdpdGhSb29tSWRBbmRVc2VyKHJvb21JZCwgdXNlciwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3QgbWVzc2FnZSA9IHVzZXIudXNlcm5hbWU7XG5cdFx0cmV0dXJuIHRoaXMuY3JlYXRlV2l0aFR5cGVSb29tSWRNZXNzYWdlQW5kVXNlcignbGVhZGVyLXJlbW92ZWQnLCByb29tSWQsIG1lc3NhZ2UsIHVzZXIsIGV4dHJhRGF0YSk7XG5cdH1cblxuXHRjcmVhdGVTdWJzY3JpcHRpb25Sb2xlQWRkZWRXaXRoUm9vbUlkQW5kVXNlcihyb29tSWQsIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdGNvbnN0IG1lc3NhZ2UgPSB1c2VyLnVzZXJuYW1lO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZVdpdGhUeXBlUm9vbUlkTWVzc2FnZUFuZFVzZXIoJ3N1YnNjcmlwdGlvbi1yb2xlLWFkZGVkJywgcm9vbUlkLCBtZXNzYWdlLCB1c2VyLCBleHRyYURhdGEpO1xuXHR9XG5cblx0Y3JlYXRlU3Vic2NyaXB0aW9uUm9sZVJlbW92ZWRXaXRoUm9vbUlkQW5kVXNlcihyb29tSWQsIHVzZXIsIGV4dHJhRGF0YSkge1xuXHRcdGNvbnN0IG1lc3NhZ2UgPSB1c2VyLnVzZXJuYW1lO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZVdpdGhUeXBlUm9vbUlkTWVzc2FnZUFuZFVzZXIoJ3N1YnNjcmlwdGlvbi1yb2xlLXJlbW92ZWQnLCByb29tSWQsIG1lc3NhZ2UsIHVzZXIsIGV4dHJhRGF0YSk7XG5cdH1cblxuXHQvLyBSRU1PVkVcblx0cmVtb3ZlQnlJZChfaWQpIHtcblx0XHRjb25zdCBxdWVyeSA9XHR7IF9pZCB9O1xuXG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlKHF1ZXJ5KTtcblx0fVxuXG5cdHJlbW92ZUJ5Um9vbUlkKHJvb21JZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cdHsgcmlkOiByb29tSWQgfTtcblxuXHRcdHJldHVybiB0aGlzLnJlbW92ZShxdWVyeSk7XG5cdH1cblxuXHRyZW1vdmVCeUlkUGlubmVkVGltZXN0YW1wQW5kVXNlcnMocmlkLCBwaW5uZWQsIHRzLCB1c2VycyA9IFtdKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQsXG5cdFx0XHR0cyxcblx0XHR9O1xuXG5cdFx0aWYgKHBpbm5lZCkge1xuXHRcdFx0cXVlcnkucGlubmVkID0geyAkbmU6IHRydWUgfTtcblx0XHR9XG5cblx0XHRpZiAodXNlcnMubGVuZ3RoKSB7XG5cdFx0XHRxdWVyeVsndS51c2VybmFtZSddID0geyAkaW46IHVzZXJzIH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlKHF1ZXJ5KTtcblx0fVxuXG5cdHJlbW92ZUJ5SWRQaW5uZWRUaW1lc3RhbXBMaW1pdEFuZFVzZXJzKHJpZCwgcGlubmVkLCB0cywgbGltaXQsIHVzZXJzID0gW10pIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZCxcblx0XHRcdHRzLFxuXHRcdH07XG5cblx0XHRpZiAocGlubmVkKSB7XG5cdFx0XHRxdWVyeS5waW5uZWQgPSB7ICRuZTogdHJ1ZSB9O1xuXHRcdH1cblxuXHRcdGlmICh1c2Vycy5sZW5ndGgpIHtcblx0XHRcdHF1ZXJ5Wyd1LnVzZXJuYW1lJ10gPSB7ICRpbjogdXNlcnMgfTtcblx0XHR9XG5cblx0XHRjb25zdCBtZXNzYWdlc1RvRGVsZXRlID0gUm9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuZmluZChxdWVyeSwge1xuXHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdF9pZDogMSxcblx0XHRcdH0sXG5cdFx0XHRsaW1pdCxcblx0XHR9KS5tYXAoKHsgX2lkIH0pID0+IF9pZCk7XG5cblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUoe1xuXHRcdFx0X2lkOiB7XG5cdFx0XHRcdCRpbjogbWVzc2FnZXNUb0RlbGV0ZSxcblx0XHRcdH0sXG5cdFx0fSk7XG5cdH1cblxuXHRyZW1vdmVCeVVzZXJJZCh1c2VySWQpIHtcblx0XHRjb25zdCBxdWVyeSA9XHR7ICd1Ll9pZCc6IHVzZXJJZCB9O1xuXG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlKHF1ZXJ5KTtcblx0fVxuXG5cdHJlbW92ZUZpbGVzQnlSb29tSWQocm9vbUlkKSB7XG5cdFx0dGhpcy5maW5kKHtcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0J2ZpbGUuX2lkJzoge1xuXHRcdFx0XHQkZXhpc3RzOiB0cnVlLFxuXHRcdFx0fSxcblx0XHR9LCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0J2ZpbGUuX2lkJzogMSxcblx0XHRcdH0sXG5cdFx0fSkuZmV0Y2goKS5mb3JFYWNoKChkb2N1bWVudCkgPT4gRmlsZVVwbG9hZC5nZXRTdG9yZSgnVXBsb2FkcycpLmRlbGV0ZUJ5SWQoZG9jdW1lbnQuZmlsZS5faWQpKTtcblx0fVxuXG5cdGdldE1lc3NhZ2VCeUZpbGVJZChmaWxlSUQpIHtcblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHsgJ2ZpbGUuX2lkJzogZmlsZUlEIH0pO1xuXHR9XG5cblx0c2V0QXNSZWFkKHJpZCwgdW50aWwpIHtcblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoe1xuXHRcdFx0cmlkLFxuXHRcdFx0dW5yZWFkOiB0cnVlLFxuXHRcdFx0dHM6IHsgJGx0OiB1bnRpbCB9LFxuXHRcdH0sIHtcblx0XHRcdCR1bnNldDoge1xuXHRcdFx0XHR1bnJlYWQ6IDEsXG5cdFx0XHR9LFxuXHRcdH0sIHtcblx0XHRcdG11bHRpOiB0cnVlLFxuXHRcdH0pO1xuXHR9XG5cblx0c2V0QXNSZWFkQnlJZChfaWQpIHtcblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoe1xuXHRcdFx0X2lkLFxuXHRcdH0sIHtcblx0XHRcdCR1bnNldDoge1xuXHRcdFx0XHR1bnJlYWQ6IDEsXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHR9XG5cblx0ZmluZFVucmVhZE1lc3NhZ2VzQnlSb29tQW5kRGF0ZShyaWQsIGFmdGVyKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR1bnJlYWQ6IHRydWUsXG5cdFx0XHRyaWQsXG5cdFx0fTtcblxuXHRcdGlmIChhZnRlcikge1xuXHRcdFx0cXVlcnkudHMgPSB7ICRndDogYWZ0ZXIgfTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0X2lkOiAxLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0fVxufTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5Sb2NrZXRDaGF0Lm1vZGVscy5SZXBvcnRzID0gbmV3IGNsYXNzIGV4dGVuZHMgUm9ja2V0Q2hhdC5tb2RlbHMuX0Jhc2Uge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigncmVwb3J0cycpO1xuXHR9XG5cdGNyZWF0ZVdpdGhNZXNzYWdlRGVzY3JpcHRpb25BbmRVc2VySWQobWVzc2FnZSwgZGVzY3JpcHRpb24sIHVzZXJJZCwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3QgcmVjb3JkID0ge1xuXHRcdFx0bWVzc2FnZSxcblx0XHRcdGRlc2NyaXB0aW9uLFxuXHRcdFx0dHM6IG5ldyBEYXRlKCksXG5cdFx0XHR1c2VySWQsXG5cdFx0fTtcblx0XHRfLmV4dGVuZChyZWNvcmQsIGV4dHJhRGF0YSk7XG5cdFx0cmVjb3JkLl9pZCA9IHRoaXMuaW5zZXJ0KHJlY29yZCk7XG5cdFx0cmV0dXJuIHJlY29yZDtcblx0fVxufTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5jbGFzcyBNb2RlbFJvb21zIGV4dGVuZHMgUm9ja2V0Q2hhdC5tb2RlbHMuX0Jhc2Uge1xuXHRjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG5cdFx0c3VwZXIoLi4uYXJncyk7XG5cblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgbmFtZTogMSB9LCB7IHVuaXF1ZTogMSwgc3BhcnNlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyBkZWZhdWx0OiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyB0OiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAndS5faWQnOiAxIH0pO1xuXHR9XG5cblx0ZmluZE9uZUJ5SWRPck5hbWUoX2lkT3JOYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHQkb3I6IFt7XG5cdFx0XHRcdF9pZDogX2lkT3JOYW1lLFxuXHRcdFx0fSwge1xuXHRcdFx0XHRuYW1lOiBfaWRPck5hbWUsXG5cdFx0XHR9XSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kT25lQnlJbXBvcnRJZChfaWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHsgaW1wb3J0SWRzOiBfaWQgfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZE9uZUJ5TmFtZShuYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IG5hbWUgfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZE9uZUJ5TmFtZUFuZE5vdElkKG5hbWUsIHJpZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2lkOiB7ICRuZTogcmlkIH0sXG5cdFx0XHRuYW1lLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHF1ZXJ5KTtcblx0fVxuXG5cdGZpbmRPbmVCeURpc3BsYXlOYW1lKGZuYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IGZuYW1lIH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRPbmVCeU5hbWVBbmRUeXBlKG5hbWUsIHR5cGUsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdG5hbWUsXG5cdFx0XHR0OiB0eXBlLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdC8vIEZJTkRcblxuXHRmaW5kQnlJZChyb29tSWQsIG9wdGlvbnMpIHtcblx0XHRyZXR1cm4gdGhpcy5maW5kKHsgX2lkOiByb29tSWQgfSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlJZHMocm9vbUlkcywgb3B0aW9ucykge1xuXHRcdHJldHVybiB0aGlzLmZpbmQoeyBfaWQ6IHsgJGluOiBbXS5jb25jYXQocm9vbUlkcykgfSB9LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVR5cGUodHlwZSwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyB0OiB0eXBlIH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVR5cGVJbklkcyh0eXBlLCBpZHMsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9pZDoge1xuXHRcdFx0XHQkaW46IGlkcyxcblx0XHRcdH0sXG5cdFx0XHR0OiB0eXBlLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVR5cGVzKHR5cGVzLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiB7XG5cdFx0XHRcdCRpbjogdHlwZXMsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVVzZXJJZCh1c2VySWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHsgJ3UuX2lkJzogdXNlcklkIH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVN1YnNjcmlwdGlvblVzZXJJZCh1c2VySWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBkYXRhID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kQnlVc2VySWQodXNlcklkLCB7IGZpZWxkczogeyByaWQ6IDEgfSB9KS5mZXRjaCgpXG5cdFx0XHQubWFwKChpdGVtKSA9PiBpdGVtLnJpZCk7XG5cblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9pZDoge1xuXHRcdFx0XHQkaW46IGRhdGEsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVN1YnNjcmlwdGlvblR5cGVBbmRVc2VySWQodHlwZSwgdXNlcklkLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgZGF0YSA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZEJ5VXNlcklkQW5kVHlwZSh1c2VySWQsIHR5cGUsIHsgZmllbGRzOiB7IHJpZDogMSB9IH0pLmZldGNoKClcblx0XHRcdC5tYXAoKGl0ZW0pID0+IGl0ZW0ucmlkKTtcblxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dDogdHlwZSxcblx0XHRcdF9pZDoge1xuXHRcdFx0XHQkaW46IGRhdGEsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVN1YnNjcmlwdGlvblVzZXJJZFVwZGF0ZWRBZnRlcih1c2VySWQsIF91cGRhdGVkQXQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBpZHMgPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRCeVVzZXJJZCh1c2VySWQsIHsgZmllbGRzOiB7IHJpZDogMSB9IH0pLmZldGNoKClcblx0XHRcdC5tYXAoKGl0ZW0pID0+IGl0ZW0ucmlkKTtcblxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2lkOiB7XG5cdFx0XHRcdCRpbjogaWRzLFxuXHRcdFx0fSxcblx0XHRcdF91cGRhdGVkQXQ6IHtcblx0XHRcdFx0JGd0OiBfdXBkYXRlZEF0LFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlOYW1lQ29udGFpbmluZyhuYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgbmFtZVJlZ2V4ID0gbmV3IFJlZ0V4cChzLnRyaW0ocy5lc2NhcGVSZWdFeHAobmFtZSkpLCAnaScpO1xuXG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHQkb3I6IFtcblx0XHRcdFx0eyBuYW1lOiBuYW1lUmVnZXggfSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHQ6ICdkJyxcblx0XHRcdFx0XHR1c2VybmFtZXM6IG5hbWVSZWdleCxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5TmFtZUNvbnRhaW5pbmdBbmRUeXBlcyhuYW1lLCB0eXBlcywgb3B0aW9ucykge1xuXHRcdGNvbnN0IG5hbWVSZWdleCA9IG5ldyBSZWdFeHAocy50cmltKHMuZXNjYXBlUmVnRXhwKG5hbWUpKSwgJ2knKTtcblxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dDoge1xuXHRcdFx0XHQkaW46IHR5cGVzLFxuXHRcdFx0fSxcblx0XHRcdCRvcjogW1xuXHRcdFx0XHR7IG5hbWU6IG5hbWVSZWdleCB9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dDogJ2QnLFxuXHRcdFx0XHRcdHVzZXJuYW1lczogbmFtZVJlZ2V4LFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlOYW1lQW5kVHlwZShuYW1lLCB0eXBlLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiB0eXBlLFxuXHRcdFx0bmFtZSxcblx0XHR9O1xuXG5cdFx0Ly8gZG8gbm90IHVzZSBjYWNoZVxuXHRcdHJldHVybiB0aGlzLl9kYi5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeU5hbWVBbmRUeXBlTm90RGVmYXVsdChuYW1lLCB0eXBlLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiB0eXBlLFxuXHRcdFx0bmFtZSxcblx0XHRcdGRlZmF1bHQ6IHtcblx0XHRcdFx0JG5lOiB0cnVlLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0Ly8gZG8gbm90IHVzZSBjYWNoZVxuXHRcdHJldHVybiB0aGlzLl9kYi5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeU5hbWVBbmRUeXBlc05vdEluSWRzKG5hbWUsIHR5cGVzLCBpZHMsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9pZDoge1xuXHRcdFx0XHQkbmU6IGlkcyxcblx0XHRcdH0sXG5cdFx0XHR0OiB7XG5cdFx0XHRcdCRpbjogdHlwZXMsXG5cdFx0XHR9LFxuXHRcdFx0bmFtZSxcblx0XHR9O1xuXG5cdFx0Ly8gZG8gbm90IHVzZSBjYWNoZVxuXHRcdHJldHVybiB0aGlzLl9kYi5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRDaGFubmVsQW5kUHJpdmF0ZUJ5TmFtZVN0YXJ0aW5nKG5hbWUsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBuYW1lUmVnZXggPSBuZXcgUmVnRXhwKGBeJHsgcy50cmltKHMuZXNjYXBlUmVnRXhwKG5hbWUpKSB9YCwgJ2knKTtcblxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dDoge1xuXHRcdFx0XHQkaW46IFsnYycsICdwJ10sXG5cdFx0XHR9LFxuXHRcdFx0bmFtZTogbmFtZVJlZ2V4LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeURlZmF1bHRBbmRUeXBlcyhkZWZhdWx0VmFsdWUsIHR5cGVzLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRkZWZhdWx0OiBkZWZhdWx0VmFsdWUsXG5cdFx0XHR0OiB7XG5cdFx0XHRcdCRpbjogdHlwZXMsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmREaXJlY3RSb29tQ29udGFpbmluZ1VzZXJuYW1lKHVzZXJuYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiAnZCcsXG5cdFx0XHR1c2VybmFtZXM6IHVzZXJuYW1lLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVR5cGVBbmROYW1lKHR5cGUsIG5hbWUsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdG5hbWUsXG5cdFx0XHR0OiB0eXBlLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVR5cGVBbmROYW1lQ29udGFpbmluZyh0eXBlLCBuYW1lLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgbmFtZVJlZ2V4ID0gbmV3IFJlZ0V4cChzLnRyaW0ocy5lc2NhcGVSZWdFeHAobmFtZSkpLCAnaScpO1xuXG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRuYW1lOiBuYW1lUmVnZXgsXG5cdFx0XHR0OiB0eXBlLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVR5cGVJbklkc0FuZE5hbWVDb250YWluaW5nKHR5cGUsIGlkcywgbmFtZSwgb3B0aW9ucykge1xuXHRcdGNvbnN0IG5hbWVSZWdleCA9IG5ldyBSZWdFeHAocy50cmltKHMuZXNjYXBlUmVnRXhwKG5hbWUpKSwgJ2knKTtcblxuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2lkOiB7XG5cdFx0XHRcdCRpbjogaWRzLFxuXHRcdFx0fSxcblx0XHRcdG5hbWU6IG5hbWVSZWdleCxcblx0XHRcdHQ6IHR5cGUsXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5VHlwZUFuZEFyY2hpdmF0aW9uU3RhdGUodHlwZSwgYXJjaGl2YXRpb25zdGF0ZSwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyB0OiB0eXBlIH07XG5cblx0XHRpZiAoYXJjaGl2YXRpb25zdGF0ZSkge1xuXHRcdFx0cXVlcnkuYXJjaGl2ZWQgPSB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRxdWVyeS5hcmNoaXZlZCA9IHsgJG5lOiB0cnVlIH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHQvLyBVUERBVEVcblx0YWRkSW1wb3J0SWRzKF9pZCwgaW1wb3J0SWRzKSB7XG5cdFx0aW1wb3J0SWRzID0gW10uY29uY2F0KGltcG9ydElkcyk7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IF9pZCB9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JGFkZFRvU2V0OiB7XG5cdFx0XHRcdGltcG9ydElkczoge1xuXHRcdFx0XHRcdCRlYWNoOiBpbXBvcnRJZHMsXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRhcmNoaXZlQnlJZChfaWQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHsgX2lkIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGFyY2hpdmVkOiB0cnVlLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0dW5hcmNoaXZlQnlJZChfaWQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHsgX2lkIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGFyY2hpdmVkOiBmYWxzZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNldE5hbWVCeUlkKF9pZCwgbmFtZSwgZm5hbWUpIHtcblx0XHRjb25zdCBxdWVyeSA9IHsgX2lkIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdG5hbWUsXG5cdFx0XHRcdGZuYW1lLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0Rm5hbWVCeUlkKF9pZCwgZm5hbWUpIHtcblx0XHRjb25zdCBxdWVyeSA9IHsgX2lkIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGZuYW1lLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0aW5jTXNnQ291bnRCeUlkKF9pZCwgaW5jKSB7XG5cdFx0aWYgKGluYyA9PSBudWxsKSB7IGluYyA9IDE7IH1cblx0XHRjb25zdCBxdWVyeSA9IHsgX2lkIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkaW5jOiB7XG5cdFx0XHRcdG1zZ3M6IGluYyxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdGluY01zZ0NvdW50QW5kU2V0TGFzdE1lc3NhZ2VCeUlkKF9pZCwgaW5jLCBsYXN0TWVzc2FnZVRpbWVzdGFtcCwgbGFzdE1lc3NhZ2UpIHtcblx0XHRpZiAoaW5jID09IG51bGwpIHsgaW5jID0gMTsgfVxuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0bG06IGxhc3RNZXNzYWdlVGltZXN0YW1wLFxuXHRcdFx0fSxcblx0XHRcdCRpbmM6IHtcblx0XHRcdFx0bXNnczogaW5jLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0aWYgKGxhc3RNZXNzYWdlKSB7XG5cdFx0XHR1cGRhdGUuJHNldC5sYXN0TWVzc2FnZSA9IGxhc3RNZXNzYWdlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdGluY1VzZXJzQ291bnRCeUlkKF9pZCwgaW5jID0gMSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRpbmM6IHtcblx0XHRcdFx0dXNlcnNDb3VudDogaW5jLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0aW5jVXNlcnNDb3VudEJ5SWRzKGlkcywgaW5jID0gMSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2lkOiB7XG5cdFx0XHRcdCRpbjogaWRzLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JGluYzoge1xuXHRcdFx0XHR1c2Vyc0NvdW50OiBpbmMsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdHNldExhc3RNZXNzYWdlQnlJZChfaWQsIGxhc3RNZXNzYWdlKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IF9pZCB9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRsYXN0TWVzc2FnZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHJlc2V0TGFzdE1lc3NhZ2VCeUlkKF9pZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQgfTtcblx0XHRjb25zdCBsYXN0TWVzc2FnZSA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmdldExhc3RWaXNpYmxlTWVzc2FnZVNlbnRXaXRoTm9UeXBlQnlSb29tSWQoX2lkKTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IGxhc3RNZXNzYWdlID8ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRsYXN0TWVzc2FnZSxcblx0XHRcdH0sXG5cdFx0fSA6IHtcblx0XHRcdCR1bnNldDoge1xuXHRcdFx0XHRsYXN0TWVzc2FnZTogMSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHJlcGxhY2VVc2VybmFtZShwcmV2aW91c1VzZXJuYW1lLCB1c2VybmFtZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyB1c2VybmFtZXM6IHByZXZpb3VzVXNlcm5hbWUgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J3VzZXJuYW1lcy4kJzogdXNlcm5hbWUsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdHJlcGxhY2VNdXRlZFVzZXJuYW1lKHByZXZpb3VzVXNlcm5hbWUsIHVzZXJuYW1lKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IG11dGVkOiBwcmV2aW91c1VzZXJuYW1lIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdCdtdXRlZC4kJzogdXNlcm5hbWUsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdHJlcGxhY2VVc2VybmFtZU9mVXNlckJ5VXNlcklkKHVzZXJJZCwgdXNlcm5hbWUpIHtcblx0XHRjb25zdCBxdWVyeSA9IHsgJ3UuX2lkJzogdXNlcklkIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdCd1LnVzZXJuYW1lJzogdXNlcm5hbWUsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdHNldEpvaW5Db2RlQnlJZChfaWQsIGpvaW5Db2RlKSB7XG5cdFx0bGV0IHVwZGF0ZTtcblx0XHRjb25zdCBxdWVyeSA9IHsgX2lkIH07XG5cblx0XHRpZiAoKGpvaW5Db2RlICE9IG51bGwgPyBqb2luQ29kZS50cmltKCkgOiB1bmRlZmluZWQpICE9PSAnJykge1xuXHRcdFx0dXBkYXRlID0ge1xuXHRcdFx0XHQkc2V0OiB7XG5cdFx0XHRcdFx0am9pbkNvZGVSZXF1aXJlZDogdHJ1ZSxcblx0XHRcdFx0XHRqb2luQ29kZSxcblx0XHRcdFx0fSxcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHVwZGF0ZSA9IHtcblx0XHRcdFx0JHNldDoge1xuXHRcdFx0XHRcdGpvaW5Db2RlUmVxdWlyZWQ6IGZhbHNlLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHQkdW5zZXQ6IHtcblx0XHRcdFx0XHRqb2luQ29kZTogMSxcblx0XHRcdFx0fSxcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0VXNlckJ5SWQoX2lkLCB1c2VyKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IF9pZCB9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHR1OiB7XG5cdFx0XHRcdFx0X2lkOiB1c2VyLl9pZCxcblx0XHRcdFx0XHR1c2VybmFtZTogdXNlci51c2VybmFtZSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNldFR5cGVCeUlkKF9pZCwgdHlwZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQgfTtcblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdHQ6IHR5cGUsXG5cdFx0XHR9LFxuXHRcdH07XG5cdFx0aWYgKHR5cGUgPT09ICdwJykge1xuXHRcdFx0dXBkYXRlLiR1bnNldCA9IHsgZGVmYXVsdDogJycgfTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRUb3BpY0J5SWQoX2lkLCB0b3BpYykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0dG9waWMsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRBbm5vdW5jZW1lbnRCeUlkKF9pZCwgYW5ub3VuY2VtZW50LCBhbm5vdW5jZW1lbnREZXRhaWxzKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IF9pZCB9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRhbm5vdW5jZW1lbnQsXG5cdFx0XHRcdGFubm91bmNlbWVudERldGFpbHMsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRDdXN0b21GaWVsZHNCeUlkKF9pZCwgY3VzdG9tRmllbGRzKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IF9pZCB9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRjdXN0b21GaWVsZHMsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRtdXRlVXNlcm5hbWVCeVJvb21JZChfaWQsIHVzZXJuYW1lKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IF9pZCB9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JGFkZFRvU2V0OiB7XG5cdFx0XHRcdG11dGVkOiB1c2VybmFtZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHVubXV0ZVVzZXJuYW1lQnlSb29tSWQoX2lkLCB1c2VybmFtZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRwdWxsOiB7XG5cdFx0XHRcdG11dGVkOiB1c2VybmFtZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNhdmVEZWZhdWx0QnlJZChfaWQsIGRlZmF1bHRWYWx1ZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0ZGVmYXVsdDogZGVmYXVsdFZhbHVlID09PSAndHJ1ZScsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzYXZlUmV0ZW50aW9uRW5hYmxlZEJ5SWQoX2lkLCB2YWx1ZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHt9O1xuXG5cdFx0aWYgKHZhbHVlID09IG51bGwpIHtcblx0XHRcdHVwZGF0ZS4kdW5zZXQgPSB7ICdyZXRlbnRpb24uZW5hYmxlZCc6IHRydWUgfTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dXBkYXRlLiRzZXQgPSB7ICdyZXRlbnRpb24uZW5hYmxlZCc6ICEhdmFsdWUgfTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzYXZlUmV0ZW50aW9uTWF4QWdlQnlJZChfaWQsIHZhbHVlKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IF9pZCB9O1xuXG5cdFx0dmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXHRcdGlmICghdmFsdWUpIHtcblx0XHRcdHZhbHVlID0gMzA7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHQncmV0ZW50aW9uLm1heEFnZSc6IHZhbHVlLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2F2ZVJldGVudGlvbkV4Y2x1ZGVQaW5uZWRCeUlkKF9pZCwgdmFsdWUpIHtcblx0XHRjb25zdCBxdWVyeSA9IHsgX2lkIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdCdyZXRlbnRpb24uZXhjbHVkZVBpbm5lZCc6IHZhbHVlID09PSB0cnVlLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2F2ZVJldGVudGlvbkZpbGVzT25seUJ5SWQoX2lkLCB2YWx1ZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J3JldGVudGlvbi5maWxlc09ubHknOiB2YWx1ZSA9PT0gdHJ1ZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNhdmVSZXRlbnRpb25PdmVycmlkZUdsb2JhbEJ5SWQoX2lkLCB2YWx1ZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J3JldGVudGlvbi5vdmVycmlkZUdsb2JhbCc6IHZhbHVlID09PSB0cnVlLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2F2ZUVuY3J5cHRlZEJ5SWQoX2lkLCB2YWx1ZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0ZW5jcnlwdGVkOiB2YWx1ZSA9PT0gdHJ1ZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNldFRvcGljQW5kVGFnc0J5SWQoX2lkLCB0b3BpYywgdGFncykge1xuXHRcdGNvbnN0IHNldERhdGEgPSB7fTtcblx0XHRjb25zdCB1bnNldERhdGEgPSB7fTtcblxuXHRcdGlmICh0b3BpYyAhPSBudWxsKSB7XG5cdFx0XHRpZiAoIV8uaXNFbXB0eShzLnRyaW0odG9waWMpKSkge1xuXHRcdFx0XHRzZXREYXRhLnRvcGljID0gcy50cmltKHRvcGljKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHVuc2V0RGF0YS50b3BpYyA9IDE7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKHRhZ3MgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCFfLmlzRW1wdHkocy50cmltKHRhZ3MpKSkge1xuXHRcdFx0XHRzZXREYXRhLnRhZ3MgPSBzLnRyaW0odGFncykuc3BsaXQoJywnKS5tYXAoKHRhZykgPT4gcy50cmltKHRhZykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dW5zZXREYXRhLnRhZ3MgPSAxO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHt9O1xuXG5cdFx0aWYgKCFfLmlzRW1wdHkoc2V0RGF0YSkpIHtcblx0XHRcdHVwZGF0ZS4kc2V0ID0gc2V0RGF0YTtcblx0XHR9XG5cblx0XHRpZiAoIV8uaXNFbXB0eSh1bnNldERhdGEpKSB7XG5cdFx0XHR1cGRhdGUuJHVuc2V0ID0gdW5zZXREYXRhO1xuXHRcdH1cblxuXHRcdGlmIChfLmlzRW1wdHkodXBkYXRlKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZSh7IF9pZCB9LCB1cGRhdGUpO1xuXHR9XG5cblx0Ly8gSU5TRVJUXG5cdGNyZWF0ZVdpdGhUeXBlTmFtZVVzZXJBbmRVc2VybmFtZXModHlwZSwgbmFtZSwgZm5hbWUsIHVzZXIsIHVzZXJuYW1lcywgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3Qgcm9vbSA9IHtcblx0XHRcdG5hbWUsXG5cdFx0XHRmbmFtZSxcblx0XHRcdHQ6IHR5cGUsXG5cdFx0XHR1c2VybmFtZXMsXG5cdFx0XHRtc2dzOiAwLFxuXHRcdFx0dXNlcnNDb3VudDogMCxcblx0XHRcdHU6IHtcblx0XHRcdFx0X2lkOiB1c2VyLl9pZCxcblx0XHRcdFx0dXNlcm5hbWU6IHVzZXIudXNlcm5hbWUsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRfLmV4dGVuZChyb29tLCBleHRyYURhdGEpO1xuXG5cdFx0cm9vbS5faWQgPSB0aGlzLmluc2VydChyb29tKTtcblx0XHRyZXR1cm4gcm9vbTtcblx0fVxuXG5cdGNyZWF0ZVdpdGhJZFR5cGVBbmROYW1lKF9pZCwgdHlwZSwgbmFtZSwgZXh0cmFEYXRhKSB7XG5cdFx0Y29uc3Qgcm9vbSA9IHtcblx0XHRcdF9pZCxcblx0XHRcdHRzOiBuZXcgRGF0ZSgpLFxuXHRcdFx0dDogdHlwZSxcblx0XHRcdG5hbWUsXG5cdFx0XHR1c2VybmFtZXM6IFtdLFxuXHRcdFx0bXNnczogMCxcblx0XHRcdHVzZXJzQ291bnQ6IDAsXG5cdFx0fTtcblxuXHRcdF8uZXh0ZW5kKHJvb20sIGV4dHJhRGF0YSk7XG5cblx0XHR0aGlzLmluc2VydChyb29tKTtcblx0XHRyZXR1cm4gcm9vbTtcblx0fVxuXG5cdGNyZWF0ZVdpdGhGdWxsUm9vbURhdGEocm9vbSkge1xuXHRcdGRlbGV0ZSByb29tLl9pZDtcblxuXHRcdHJvb20uX2lkID0gdGhpcy5pbnNlcnQocm9vbSk7XG5cdFx0cmV0dXJuIHJvb207XG5cdH1cblxuXG5cdC8vIFJFTU9WRVxuXHRyZW1vdmVCeUlkKF9pZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQgfTtcblxuXHRcdHJldHVybiB0aGlzLnJlbW92ZShxdWVyeSk7XG5cdH1cblxuXHRyZW1vdmVEaXJlY3RSb29tQ29udGFpbmluZ1VzZXJuYW1lKHVzZXJuYW1lKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiAnZCcsXG5cdFx0XHR1c2VybmFtZXM6IHVzZXJuYW1lLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUocXVlcnkpO1xuXHR9XG59XG5cblJvY2tldENoYXQubW9kZWxzLlJvb21zID0gbmV3IE1vZGVsUm9vbXMoJ3Jvb20nLCB0cnVlKTtcbiIsImNsYXNzIE1vZGVsU2V0dGluZ3MgZXh0ZW5kcyBSb2NrZXRDaGF0Lm1vZGVscy5fQmFzZSB7XG5cdGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcblx0XHRzdXBlciguLi5hcmdzKTtcblxuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyBibG9ja2VkOiAxIH0sIHsgc3BhcnNlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyBoaWRkZW46IDEgfSwgeyBzcGFyc2U6IDEgfSk7XG5cdH1cblxuXHQvLyBGSU5EXG5cdGZpbmRCeUlkKF9pZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQgfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnkpO1xuXHR9XG5cblx0ZmluZE9uZU5vdEhpZGRlbkJ5SWQoX2lkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQsXG5cdFx0XHRoaWRkZW46IHsgJG5lOiB0cnVlIH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUocXVlcnkpO1xuXHR9XG5cblx0ZmluZEJ5SWRzKF9pZCA9IFtdKSB7XG5cdFx0X2lkID0gW10uY29uY2F0KF9pZCk7XG5cblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9pZDoge1xuXHRcdFx0XHQkaW46IF9pZCxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnkpO1xuXHR9XG5cblx0ZmluZEJ5Um9sZShyb2xlLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IHJvbGUgfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZFB1YmxpYyhvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IHB1YmxpYzogdHJ1ZSB9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kTm90SGlkZGVuUHVibGljKGlkcyA9IFtdKSB7XG5cdFx0Y29uc3QgZmlsdGVyID0ge1xuXHRcdFx0aGlkZGVuOiB7ICRuZTogdHJ1ZSB9LFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdH07XG5cblx0XHRpZiAoaWRzLmxlbmd0aCA+IDApIHtcblx0XHRcdGZpbHRlci5faWQgPVxuXHRcdFx0XHR7ICRpbjogaWRzIH07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChmaWx0ZXIsIHsgZmllbGRzOiB7IF9pZDogMSwgdmFsdWU6IDEgfSB9KTtcblx0fVxuXG5cdGZpbmROb3RIaWRkZW5QdWJsaWNVcGRhdGVkQWZ0ZXIodXBkYXRlZEF0KSB7XG5cdFx0Y29uc3QgZmlsdGVyID0ge1xuXHRcdFx0aGlkZGVuOiB7ICRuZTogdHJ1ZSB9LFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0X3VwZGF0ZWRBdDoge1xuXHRcdFx0XHQkZ3Q6IHVwZGF0ZWRBdCxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQoZmlsdGVyLCB7IGZpZWxkczogeyBfaWQ6IDEsIHZhbHVlOiAxIH0gfSk7XG5cdH1cblxuXHRmaW5kTm90SGlkZGVuUHJpdmF0ZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5maW5kKHtcblx0XHRcdGhpZGRlbjogeyAkbmU6IHRydWUgfSxcblx0XHRcdHB1YmxpYzogeyAkbmU6IHRydWUgfSxcblx0XHR9KTtcblx0fVxuXG5cdGZpbmROb3RIaWRkZW4ob3B0aW9ucykge1xuXHRcdHJldHVybiB0aGlzLmZpbmQoeyBoaWRkZW46IHsgJG5lOiB0cnVlIH0gfSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kTm90SGlkZGVuVXBkYXRlZEFmdGVyKHVwZGF0ZWRBdCkge1xuXHRcdHJldHVybiB0aGlzLmZpbmQoe1xuXHRcdFx0aGlkZGVuOiB7ICRuZTogdHJ1ZSB9LFxuXHRcdFx0X3VwZGF0ZWRBdDoge1xuXHRcdFx0XHQkZ3Q6IHVwZGF0ZWRBdCxcblx0XHRcdH0sXG5cdFx0fSk7XG5cdH1cblxuXHRmaW5kU2V0dXBXaXphcmRTZXR0aW5ncygpIHtcblx0XHRyZXR1cm4gdGhpcy5maW5kKHsgd2l6YXJkOiB7ICRleGlzdHM6IHRydWUsICRuZTogbnVsbCB9IH0pO1xuXHR9XG5cblx0Ly8gVVBEQVRFXG5cdHVwZGF0ZVZhbHVlQnlJZChfaWQsIHZhbHVlKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRibG9ja2VkOiB7ICRuZTogdHJ1ZSB9LFxuXHRcdFx0dmFsdWU6IHsgJG5lOiB2YWx1ZSB9LFxuXHRcdFx0X2lkLFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdHZhbHVlLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0dXBkYXRlVmFsdWVBbmRFZGl0b3JCeUlkKF9pZCwgdmFsdWUsIGVkaXRvcikge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0YmxvY2tlZDogeyAkbmU6IHRydWUgfSxcblx0XHRcdHZhbHVlOiB7ICRuZTogdmFsdWUgfSxcblx0XHRcdF9pZCxcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHR2YWx1ZSxcblx0XHRcdFx0ZWRpdG9yLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0dXBkYXRlVmFsdWVOb3RIaWRkZW5CeUlkKF9pZCwgdmFsdWUpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9pZCxcblx0XHRcdGhpZGRlbjogeyAkbmU6IHRydWUgfSxcblx0XHRcdGJsb2NrZWQ6IHsgJG5lOiB0cnVlIH0sXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0dmFsdWUsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHR1cGRhdGVPcHRpb25zQnlJZChfaWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdGJsb2NrZWQ6IHsgJG5lOiB0cnVlIH0sXG5cdFx0XHRfaWQsXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHsgJHNldDogb3B0aW9ucyB9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0Ly8gSU5TRVJUXG5cdGNyZWF0ZVdpdGhJZEFuZFZhbHVlKF9pZCwgdmFsdWUpIHtcblx0XHRjb25zdCByZWNvcmQgPSB7XG5cdFx0XHRfaWQsXG5cdFx0XHR2YWx1ZSxcblx0XHRcdF9jcmVhdGVkQXQ6IG5ldyBEYXRlLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5pbnNlcnQocmVjb3JkKTtcblx0fVxuXG5cdC8vIFJFTU9WRVxuXHRyZW1vdmVCeUlkKF9pZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0YmxvY2tlZDogeyAkbmU6IHRydWUgfSxcblx0XHRcdF9pZCxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlKHF1ZXJ5KTtcblx0fVxufVxuXG5Sb2NrZXRDaGF0Lm1vZGVscy5TZXR0aW5ncyA9IG5ldyBNb2RlbFNldHRpbmdzKCdzZXR0aW5ncycsIHRydWUpO1xuIiwiY2xhc3MgTW9kZWxTdWJzY3JpcHRpb25zIGV4dGVuZHMgUm9ja2V0Q2hhdC5tb2RlbHMuX0Jhc2Uge1xuXHRjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG5cdFx0c3VwZXIoLi4uYXJncyk7XG5cblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgcmlkOiAxLCAndS5faWQnOiAxIH0sIHsgdW5pcXVlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyByaWQ6IDEsICd1LnVzZXJuYW1lJzogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgcmlkOiAxLCBhbGVydDogMSwgJ3UuX2lkJzogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgcmlkOiAxLCByb2xlczogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgJ3UuX2lkJzogMSwgbmFtZTogMSwgdDogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgb3BlbjogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgYWxlcnQ6IDEgfSk7XG5cblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgcmlkOiAxLCAndS5faWQnOiAxLCBvcGVuOiAxIH0pO1xuXG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IHRzOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyBsczogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgYXVkaW9Ob3RpZmljYXRpb25zOiAxIH0sIHsgc3BhcnNlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyBkZXNrdG9wTm90aWZpY2F0aW9uczogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgbW9iaWxlUHVzaE5vdGlmaWNhdGlvbnM6IDEgfSwgeyBzcGFyc2U6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IGVtYWlsTm90aWZpY2F0aW9uczogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgYXV0b1RyYW5zbGF0ZTogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgYXV0b1RyYW5zbGF0ZUxhbmd1YWdlOiAxIH0sIHsgc3BhcnNlOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyAndXNlckhpZ2hsaWdodHMuMCc6IDEgfSwgeyBzcGFyc2U6IDEgfSk7XG5cdH1cblxuXG5cdC8vIEZJTkQgT05FXG5cdGZpbmRPbmVCeVJvb21JZEFuZFVzZXJJZChyb29tSWQsIHVzZXJJZCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHQndS5faWQnOiB1c2VySWQsXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZE9uZUJ5Um9vbUlkQW5kVXNlcm5hbWUocm9vbUlkLCB1c2VybmFtZSwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHQndS51c2VybmFtZSc6IHVzZXJuYW1lLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRPbmVCeVJvb21OYW1lQW5kVXNlcklkKHJvb21OYW1lLCB1c2VySWQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdG5hbWU6IHJvb21OYW1lLFxuXHRcdFx0J3UuX2lkJzogdXNlcklkLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHF1ZXJ5KTtcblx0fVxuXG5cdC8vIEZJTkRcblx0ZmluZEJ5VXNlcklkKHVzZXJJZCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cblx0XHRcdHsgJ3UuX2lkJzogdXNlcklkIH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVVzZXJJZEFuZFR5cGUodXNlcklkLCB0eXBlLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHQndS5faWQnOiB1c2VySWQsXG5cdFx0XHR0OiB0eXBlLFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVVzZXJJZEFuZFR5cGVzKHVzZXJJZCwgdHlwZXMsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdCd1Ll9pZCc6IHVzZXJJZCxcblx0XHRcdHQ6IHtcblx0XHRcdFx0JGluOiB0eXBlcyxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5VXNlcklkVXBkYXRlZEFmdGVyKHVzZXJJZCwgdXBkYXRlZEF0LCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHQndS5faWQnOiB1c2VySWQsXG5cdFx0XHRfdXBkYXRlZEF0OiB7XG5cdFx0XHRcdCRndDogdXBkYXRlZEF0LFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlSb29tSWRBbmRSb2xlcyhyb29tSWQsIHJvbGVzLCBvcHRpb25zKSB7XG5cdFx0cm9sZXMgPSBbXS5jb25jYXQocm9sZXMpO1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHRyb2xlczogeyAkaW46IHJvbGVzIH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5VHlwZSh0eXBlcywgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dDoge1xuXHRcdFx0XHQkaW46IHR5cGVzLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlUeXBlQW5kVXNlcklkKHR5cGUsIHVzZXJJZCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dDogdHlwZSxcblx0XHRcdCd1Ll9pZCc6IHVzZXJJZCxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlSb29tSWQocm9vbUlkLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVxuXHRcdFx0eyByaWQ6IHJvb21JZCB9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlSb29tSWRBbmROb3RVc2VySWQocm9vbUlkLCB1c2VySWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0J3UuX2lkJzoge1xuXHRcdFx0XHQkbmU6IHVzZXJJZCxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZEJ5Um9vbVdpdGhVc2VySGlnaGxpZ2h0cyhyb29tSWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0J3VzZXJIaWdobGlnaHRzLjAnOiB7ICRleGlzdHM6IHRydWUgfSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRnZXRMYXN0U2VlbihvcHRpb25zKSB7XG5cdFx0aWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuXHRcdFx0b3B0aW9ucyA9IHt9O1xuXHRcdH1cblx0XHRjb25zdCBxdWVyeSA9IHsgbHM6IHsgJGV4aXN0czogMSB9IH07XG5cdFx0b3B0aW9ucy5zb3J0ID0geyBsczogLTEgfTtcblx0XHRvcHRpb25zLmxpbWl0ID0gMTtcblx0XHRjb25zdCBbc3Vic2NyaXB0aW9uXSA9IHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucykuZmV0Y2goKTtcblx0XHRyZXR1cm4gc3Vic2NyaXB0aW9uICYmIHN1YnNjcmlwdGlvbi5scztcblx0fVxuXG5cdGZpbmRCeVJvb21JZEFuZFVzZXJJZHMocm9vbUlkLCB1c2VySWRzLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdCd1Ll9pZCc6IHtcblx0XHRcdFx0JGluOiB1c2VySWRzLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlSb29tSWRBbmRVc2VySWRzT3JBbGxNZXNzYWdlcyhyb29tSWQsIHVzZXJJZHMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0JG9yOiBbXG5cdFx0XHRcdHsgJ3UuX2lkJzogeyAkaW46IHVzZXJJZHMgfSB9LFxuXHRcdFx0XHR7IGVtYWlsTm90aWZpY2F0aW9uczogJ2FsbCcgfSxcblx0XHRcdF0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnkpO1xuXHR9XG5cblx0ZmluZEJ5Um9vbUlkV2hlblVzZXJJZEV4aXN0cyhyaWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHsgcmlkLCAndS5faWQnOiB7ICRleGlzdHM6IDEgfSB9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlSb29tSWRXaGVuVXNlcm5hbWVFeGlzdHMocmlkLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IHJpZCwgJ3UudXNlcm5hbWUnOiB7ICRleGlzdHM6IDEgfSB9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVW5yZWFkQnlVc2VySWQodXNlcklkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHQndS5faWQnOiB1c2VySWQsXG5cdFx0XHR1bnJlYWQ6IHtcblx0XHRcdFx0JGd0OiAwLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgeyBmaWVsZHM6IHsgdW5yZWFkOiAxIH0gfSk7XG5cdH1cblxuXHRnZXRNaW5pbXVtTGFzdFNlZW5CeVJvb21JZChyaWQpIHtcblx0XHRyZXR1cm4gdGhpcy5kYi5maW5kT25lKHtcblx0XHRcdHJpZCxcblx0XHR9LCB7XG5cdFx0XHRzb3J0OiB7XG5cdFx0XHRcdGxzOiAxLFxuXHRcdFx0fSxcblx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRsczogMSxcblx0XHRcdH0sXG5cdFx0fSk7XG5cdH1cblxuXHQvLyBVUERBVEVcblx0YXJjaGl2ZUJ5Um9vbUlkKHJvb21JZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cblx0XHRcdHsgcmlkOiByb29tSWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0YWxlcnQ6IGZhbHNlLFxuXHRcdFx0XHRvcGVuOiBmYWxzZSxcblx0XHRcdFx0YXJjaGl2ZWQ6IHRydWUsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdHVuYXJjaGl2ZUJ5Um9vbUlkKHJvb21JZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cblx0XHRcdHsgcmlkOiByb29tSWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0YWxlcnQ6IGZhbHNlLFxuXHRcdFx0XHRvcGVuOiB0cnVlLFxuXHRcdFx0XHRhcmNoaXZlZDogZmFsc2UsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdGhpZGVCeVJvb21JZEFuZFVzZXJJZChyb29tSWQsIHVzZXJJZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHQndS5faWQnOiB1c2VySWQsXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0YWxlcnQ6IGZhbHNlLFxuXHRcdFx0XHRvcGVuOiBmYWxzZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdG9wZW5CeVJvb21JZEFuZFVzZXJJZChyb29tSWQsIHVzZXJJZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHQndS5faWQnOiB1c2VySWQsXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0b3BlbjogdHJ1ZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNldEFzUmVhZEJ5Um9vbUlkQW5kVXNlcklkKHJvb21JZCwgdXNlcklkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdCd1Ll9pZCc6IHVzZXJJZCxcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRvcGVuOiB0cnVlLFxuXHRcdFx0XHRhbGVydDogZmFsc2UsXG5cdFx0XHRcdHVucmVhZDogMCxcblx0XHRcdFx0dXNlck1lbnRpb25zOiAwLFxuXHRcdFx0XHRncm91cE1lbnRpb25zOiAwLFxuXHRcdFx0XHRsczogbmV3IERhdGUsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRBc1VucmVhZEJ5Um9vbUlkQW5kVXNlcklkKHJvb21JZCwgdXNlcklkLCBmaXJzdE1lc3NhZ2VVbnJlYWRUaW1lc3RhbXApIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0J3UuX2lkJzogdXNlcklkLFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdG9wZW46IHRydWUsXG5cdFx0XHRcdGFsZXJ0OiB0cnVlLFxuXHRcdFx0XHRsczogZmlyc3RNZXNzYWdlVW5yZWFkVGltZXN0YW1wLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0Q3VzdG9tRmllbGRzRGlyZWN0TWVzc2FnZXNCeVVzZXJJZCh1c2VySWQsIGZpZWxkcykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0J3UuX2lkJzogdXNlcklkLFxuXHRcdFx0dDogJ2QnLFxuXHRcdH07XG5cdFx0Y29uc3QgdXBkYXRlID0geyAkc2V0OiB7IGN1c3RvbUZpZWxkczogZmllbGRzIH0gfTtcblx0XHRjb25zdCBvcHRpb25zID0geyBtdWx0aTogdHJ1ZSB9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIG9wdGlvbnMpO1xuXHR9XG5cblx0c2V0RmF2b3JpdGVCeVJvb21JZEFuZFVzZXJJZChyb29tSWQsIHVzZXJJZCwgZmF2b3JpdGUpIHtcblx0XHRpZiAoZmF2b3JpdGUgPT0gbnVsbCkge1xuXHRcdFx0ZmF2b3JpdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHJpZDogcm9vbUlkLFxuXHRcdFx0J3UuX2lkJzogdXNlcklkLFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGY6IGZhdm9yaXRlLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0dXBkYXRlTmFtZUFuZEFsZXJ0QnlSb29tSWQocm9vbUlkLCBuYW1lLCBmbmFtZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cblx0XHRcdHsgcmlkOiByb29tSWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0bmFtZSxcblx0XHRcdFx0Zm5hbWUsXG5cdFx0XHRcdGFsZXJ0OiB0cnVlLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHR1cGRhdGVEaXNwbGF5TmFtZUJ5Um9vbUlkKHJvb21JZCwgZm5hbWUpIHtcblx0XHRjb25zdCBxdWVyeSA9XG5cdFx0XHR7IHJpZDogcm9vbUlkIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGZuYW1lLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHRzZXRVc2VyVXNlcm5hbWVCeVVzZXJJZCh1c2VySWQsIHVzZXJuYW1lKSB7XG5cdFx0Y29uc3QgcXVlcnkgPVxuXHRcdFx0eyAndS5faWQnOiB1c2VySWQgfTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J3UudXNlcm5hbWUnOiB1c2VybmFtZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0c2V0TmFtZUZvckRpcmVjdFJvb21zV2l0aE9sZE5hbWUob2xkTmFtZSwgbmFtZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0bmFtZTogb2xkTmFtZSxcblx0XHRcdHQ6ICdkJyxcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRuYW1lLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHRpbmNVbnJlYWRGb3JSb29tSWRFeGNsdWRpbmdVc2VySWQocm9vbUlkLCB1c2VySWQsIGluYykge1xuXHRcdGlmIChpbmMgPT0gbnVsbCkge1xuXHRcdFx0aW5jID0gMTtcblx0XHR9XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdCd1Ll9pZCc6IHtcblx0XHRcdFx0JG5lOiB1c2VySWQsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGFsZXJ0OiB0cnVlLFxuXHRcdFx0XHRvcGVuOiB0cnVlLFxuXHRcdFx0fSxcblx0XHRcdCRpbmM6IHtcblx0XHRcdFx0dW5yZWFkOiBpbmMsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdGluY0dyb3VwTWVudGlvbnNBbmRVbnJlYWRGb3JSb29tSWRFeGNsdWRpbmdVc2VySWQocm9vbUlkLCB1c2VySWQsIGluY0dyb3VwID0gMSwgaW5jVW5yZWFkID0gMSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHQndS5faWQnOiB7XG5cdFx0XHRcdCRuZTogdXNlcklkLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRhbGVydDogdHJ1ZSxcblx0XHRcdFx0b3BlbjogdHJ1ZSxcblx0XHRcdH0sXG5cdFx0XHQkaW5jOiB7XG5cdFx0XHRcdHVucmVhZDogaW5jVW5yZWFkLFxuXHRcdFx0XHRncm91cE1lbnRpb25zOiBpbmNHcm91cCxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0aW5jVXNlck1lbnRpb25zQW5kVW5yZWFkRm9yUm9vbUlkQW5kVXNlcklkcyhyb29tSWQsIHVzZXJJZHMsIGluY1VzZXIgPSAxLCBpbmNVbnJlYWQgPSAxKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdCd1Ll9pZCc6IHtcblx0XHRcdFx0JGluOiB1c2VySWRzLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRhbGVydDogdHJ1ZSxcblx0XHRcdFx0b3BlbjogdHJ1ZSxcblx0XHRcdH0sXG5cdFx0XHQkaW5jOiB7XG5cdFx0XHRcdHVucmVhZDogaW5jVW5yZWFkLFxuXHRcdFx0XHR1c2VyTWVudGlvbnM6IGluY1VzZXIsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdGlnbm9yZVVzZXIoeyBfaWQsIGlnbm9yZWRVc2VyIDogaWdub3JlZCwgaWdub3JlID0gdHJ1ZSB9KSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQsXG5cdFx0fTtcblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0fTtcblx0XHRpZiAoaWdub3JlKSB7XG5cdFx0XHR1cGRhdGUuJGFkZFRvU2V0ID0geyBpZ25vcmVkIH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHVwZGF0ZS4kcHVsbCA9IHsgaWdub3JlZCB9O1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNldEFsZXJ0Rm9yUm9vbUlkRXhjbHVkaW5nVXNlcklkKHJvb21JZCwgdXNlcklkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdCd1Ll9pZCc6IHtcblx0XHRcdFx0JG5lOiB1c2VySWQsXG5cdFx0XHR9LFxuXHRcdFx0YWxlcnQ6IHsgJG5lOiB0cnVlIH0sXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0YWxlcnQ6IHRydWUsXG5cdFx0XHR9LFxuXHRcdH07XG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHRzZXRPcGVuRm9yUm9vbUlkRXhjbHVkaW5nVXNlcklkKHJvb21JZCwgdXNlcklkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHRcdCd1Ll9pZCc6IHtcblx0XHRcdFx0JG5lOiB1c2VySWQsXG5cdFx0XHR9LFxuXHRcdFx0b3BlbjogeyAkbmU6IHRydWUgfSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRvcGVuOiB0cnVlLFxuXHRcdFx0fSxcblx0XHR9O1xuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0c2V0QmxvY2tlZEJ5Um9vbUlkKHJpZCwgYmxvY2tlZCwgYmxvY2tlcikge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cmlkLFxuXHRcdFx0J3UuX2lkJzogYmxvY2tlZCxcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRibG9ja2VkOiB0cnVlLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgcXVlcnkyID0ge1xuXHRcdFx0cmlkLFxuXHRcdFx0J3UuX2lkJzogYmxvY2tlcixcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlMiA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0YmxvY2tlcjogdHJ1ZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKSAmJiB0aGlzLnVwZGF0ZShxdWVyeTIsIHVwZGF0ZTIpO1xuXHR9XG5cblx0dW5zZXRCbG9ja2VkQnlSb29tSWQocmlkLCBibG9ja2VkLCBibG9ja2VyKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQsXG5cdFx0XHQndS5faWQnOiBibG9ja2VkLFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkdW5zZXQ6IHtcblx0XHRcdFx0YmxvY2tlZDogMSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdGNvbnN0IHF1ZXJ5MiA9IHtcblx0XHRcdHJpZCxcblx0XHRcdCd1Ll9pZCc6IGJsb2NrZXIsXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZTIgPSB7XG5cdFx0XHQkdW5zZXQ6IHtcblx0XHRcdFx0YmxvY2tlcjogMSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKSAmJiB0aGlzLnVwZGF0ZShxdWVyeTIsIHVwZGF0ZTIpO1xuXHR9XG5cblx0dXBkYXRlQ3VzdG9tRmllbGRzQnlSb29tSWQocmlkLCBjZmllbGRzKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IHJpZCB9O1xuXHRcdGNvbnN0IGN1c3RvbUZpZWxkcyA9IGNmaWVsZHMgfHwge307XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRjdXN0b21GaWVsZHMsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdHVwZGF0ZVR5cGVCeVJvb21JZChyb29tSWQsIHR5cGUpIHtcblx0XHRjb25zdCBxdWVyeSA9XG5cdFx0XHR7IHJpZDogcm9vbUlkIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdHQ6IHR5cGUsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdGFkZFJvbGVCeUlkKF9pZCwgcm9sZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID1cblx0XHRcdHsgX2lkIH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkYWRkVG9TZXQ6IHtcblx0XHRcdFx0cm9sZXM6IHJvbGUsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRyZW1vdmVSb2xlQnlJZChfaWQsIHJvbGUpIHtcblx0XHRjb25zdCBxdWVyeSA9XG5cdFx0XHR7IF9pZCB9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHB1bGw6IHtcblx0XHRcdFx0cm9sZXM6IHJvbGUsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRBcmNoaXZlZEJ5VXNlcm5hbWUodXNlcm5hbWUsIGFyY2hpdmVkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR0OiAnZCcsXG5cdFx0XHRuYW1lOiB1c2VybmFtZSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRhcmNoaXZlZCxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0Y2xlYXJEZXNrdG9wTm90aWZpY2F0aW9uVXNlclByZWZlcmVuY2VzKHVzZXJJZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0J3UuX2lkJzogdXNlcklkLFxuXHRcdFx0ZGVza3RvcFByZWZPcmlnaW46ICd1c2VyJyxcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHVuc2V0OiB7XG5cdFx0XHRcdGRlc2t0b3BOb3RpZmljYXRpb25zOiAxLFxuXHRcdFx0XHRkZXNrdG9wUHJlZk9yaWdpbjogMSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0dXBkYXRlRGVza3RvcE5vdGlmaWNhdGlvblVzZXJQcmVmZXJlbmNlcyh1c2VySWQsIGRlc2t0b3BOb3RpZmljYXRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHQndS5faWQnOiB1c2VySWQsXG5cdFx0XHRkZXNrdG9wUHJlZk9yaWdpbjoge1xuXHRcdFx0XHQkbmU6ICdzdWJzY3JpcHRpb24nLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRkZXNrdG9wTm90aWZpY2F0aW9ucyxcblx0XHRcdFx0ZGVza3RvcFByZWZPcmlnaW46ICd1c2VyJyxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0Y2xlYXJNb2JpbGVOb3RpZmljYXRpb25Vc2VyUHJlZmVyZW5jZXModXNlcklkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHQndS5faWQnOiB1c2VySWQsXG5cdFx0XHRtb2JpbGVQcmVmT3JpZ2luOiAndXNlcicsXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCR1bnNldDoge1xuXHRcdFx0XHRtb2JpbGVQdXNoTm90aWZpY2F0aW9uczogMSxcblx0XHRcdFx0bW9iaWxlUHJlZk9yaWdpbjogMSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0dXBkYXRlTW9iaWxlTm90aWZpY2F0aW9uVXNlclByZWZlcmVuY2VzKHVzZXJJZCwgbW9iaWxlUHVzaE5vdGlmaWNhdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdCd1Ll9pZCc6IHVzZXJJZCxcblx0XHRcdG1vYmlsZVByZWZPcmlnaW46IHtcblx0XHRcdFx0JG5lOiAnc3Vic2NyaXB0aW9uJyxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0bW9iaWxlUHVzaE5vdGlmaWNhdGlvbnMsXG5cdFx0XHRcdG1vYmlsZVByZWZPcmlnaW46ICd1c2VyJyxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0Y2xlYXJFbWFpbE5vdGlmaWNhdGlvblVzZXJQcmVmZXJlbmNlcyh1c2VySWQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdCd1Ll9pZCc6IHVzZXJJZCxcblx0XHRcdGVtYWlsUHJlZk9yaWdpbjogJ3VzZXInLFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkdW5zZXQ6IHtcblx0XHRcdFx0ZW1haWxOb3RpZmljYXRpb25zOiAxLFxuXHRcdFx0XHRlbWFpbFByZWZPcmlnaW46IDEsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSwgeyBtdWx0aTogdHJ1ZSB9KTtcblx0fVxuXG5cdHVwZGF0ZUVtYWlsTm90aWZpY2F0aW9uVXNlclByZWZlcmVuY2VzKHVzZXJJZCwgZW1haWxOb3RpZmljYXRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHQndS5faWQnOiB1c2VySWQsXG5cdFx0XHRlbWFpbFByZWZPcmlnaW46IHtcblx0XHRcdFx0JG5lOiAnc3Vic2NyaXB0aW9uJyxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0ZW1haWxOb3RpZmljYXRpb25zLFxuXHRcdFx0XHRlbWFpbFByZWZPcmlnaW46ICd1c2VyJyxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0dXBkYXRlVXNlckhpZ2hsaWdodHModXNlcklkLCB1c2VySGlnaGxpZ2h0cykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0J3UuX2lkJzogdXNlcklkLFxuXHRcdH07XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdHVzZXJIaWdobGlnaHRzLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIHsgbXVsdGk6IHRydWUgfSk7XG5cdH1cblxuXHR1cGRhdGVEaXJlY3RGTmFtZUJ5TmFtZShuYW1lLCBmbmFtZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dDogJ2QnLFxuXHRcdFx0bmFtZSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRmbmFtZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0Ly8gSU5TRVJUXG5cdGNyZWF0ZVdpdGhSb29tQW5kVXNlcihyb29tLCB1c2VyLCBleHRyYURhdGEpIHtcblx0XHRjb25zdCBzdWJzY3JpcHRpb24gPSB7XG5cdFx0XHRvcGVuOiBmYWxzZSxcblx0XHRcdGFsZXJ0OiBmYWxzZSxcblx0XHRcdHVucmVhZDogMCxcblx0XHRcdHVzZXJNZW50aW9uczogMCxcblx0XHRcdGdyb3VwTWVudGlvbnM6IDAsXG5cdFx0XHR0czogcm9vbS50cyxcblx0XHRcdHJpZDogcm9vbS5faWQsXG5cdFx0XHRuYW1lOiByb29tLm5hbWUsXG5cdFx0XHRmbmFtZTogcm9vbS5mbmFtZSxcblx0XHRcdGN1c3RvbUZpZWxkczogcm9vbS5jdXN0b21GaWVsZHMsXG5cdFx0XHR0OiByb29tLnQsXG5cdFx0XHR1OiB7XG5cdFx0XHRcdF9pZDogdXNlci5faWQsXG5cdFx0XHRcdHVzZXJuYW1lOiB1c2VyLnVzZXJuYW1lLFxuXHRcdFx0XHRuYW1lOiB1c2VyLm5hbWUsXG5cdFx0XHR9LFxuXHRcdFx0Li4uUm9ja2V0Q2hhdC5nZXREZWZhdWx0U3Vic2NyaXB0aW9uUHJlZih1c2VyKSxcblx0XHRcdC4uLmV4dHJhRGF0YSxcblx0XHR9O1xuXG5cdFx0Y29uc3QgcmVzdWx0ID0gdGhpcy5pbnNlcnQoc3Vic2NyaXB0aW9uKTtcblxuXHRcdFJvY2tldENoYXQubW9kZWxzLlJvb21zLmluY1VzZXJzQ291bnRCeUlkKHJvb20uX2lkKTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXG5cdC8vIFJFTU9WRVxuXHRyZW1vdmVCeVVzZXJJZCh1c2VySWQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdCd1Ll9pZCc6IHVzZXJJZCxcblx0XHR9O1xuXG5cdFx0Y29uc3Qgcm9vbUlkcyA9IHRoaXMuZmluZEJ5VXNlcklkKHVzZXJJZCkubWFwKChzKSA9PiBzLnJpZCk7XG5cblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLnJlbW92ZShxdWVyeSk7XG5cblx0XHRpZiAoTWF0Y2gudGVzdChyZXN1bHQsIE51bWJlcikgJiYgcmVzdWx0ID4gMCkge1xuXHRcdFx0Um9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuaW5jVXNlcnNDb3VudEJ5SWRzKHJvb21JZHMsIC0xKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0cmVtb3ZlQnlSb29tSWQocm9vbUlkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRyaWQ6IHJvb21JZCxcblx0XHR9O1xuXG5cdFx0Y29uc3QgcmVzdWx0ID0gdGhpcy5yZW1vdmUocXVlcnkpO1xuXG5cdFx0aWYgKE1hdGNoLnRlc3QocmVzdWx0LCBOdW1iZXIpICYmIHJlc3VsdCA+IDApIHtcblx0XHRcdFJvY2tldENoYXQubW9kZWxzLlJvb21zLmluY1VzZXJzQ291bnRCeUlkKHJvb21JZCwgLSByZXN1bHQpO1xuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRyZW1vdmVCeVJvb21JZEFuZFVzZXJJZChyb29tSWQsIHVzZXJJZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHQndS5faWQnOiB1c2VySWQsXG5cdFx0fTtcblxuXHRcdGNvbnN0IHJlc3VsdCA9IHRoaXMucmVtb3ZlKHF1ZXJ5KTtcblxuXHRcdGlmIChNYXRjaC50ZXN0KHJlc3VsdCwgTnVtYmVyKSAmJiByZXN1bHQgPiAwKSB7XG5cdFx0XHRSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5pbmNVc2Vyc0NvdW50QnlJZChyb29tSWQsIC0gcmVzdWx0KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG59XG5cblJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMgPSBuZXcgTW9kZWxTdWJzY3JpcHRpb25zKCdzdWJzY3JpcHRpb24nLCB0cnVlKTtcbiIsIi8qIGdsb2JhbHMgSW5zdGFuY2VTdGF0dXMgKi9cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5Sb2NrZXRDaGF0Lm1vZGVscy5VcGxvYWRzID0gbmV3IGNsYXNzIGV4dGVuZHMgUm9ja2V0Q2hhdC5tb2RlbHMuX0Jhc2Uge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigndXBsb2FkcycpO1xuXG5cdFx0dGhpcy5tb2RlbC5iZWZvcmUuaW5zZXJ0KCh1c2VySWQsIGRvYykgPT4ge1xuXHRcdFx0ZG9jLmluc3RhbmNlSWQgPSBJbnN0YW5jZVN0YXR1cy5pZCgpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IHJpZDogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgdXBsb2FkZWRBdDogMSB9KTtcblx0fVxuXG5cdGZpbmROb3RIaWRkZW5GaWxlc09mUm9vbShyb29tSWQsIHNlYXJjaFRleHQsIGxpbWl0KSB7XG5cdFx0Y29uc3QgZmlsZVF1ZXJ5ID0ge1xuXHRcdFx0cmlkOiByb29tSWQsXG5cdFx0XHRjb21wbGV0ZTogdHJ1ZSxcblx0XHRcdHVwbG9hZGluZzogZmFsc2UsXG5cdFx0XHRfaGlkZGVuOiB7XG5cdFx0XHRcdCRuZTogdHJ1ZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdGlmIChzZWFyY2hUZXh0KSB7XG5cdFx0XHRmaWxlUXVlcnkubmFtZSA9IHsgJHJlZ2V4OiBuZXcgUmVnRXhwKFJlZ0V4cC5lc2NhcGUoc2VhcmNoVGV4dCksICdpJykgfTtcblx0XHR9XG5cblx0XHRjb25zdCBmaWxlT3B0aW9ucyA9IHtcblx0XHRcdGxpbWl0LFxuXHRcdFx0c29ydDoge1xuXHRcdFx0XHR1cGxvYWRlZEF0OiAtMSxcblx0XHRcdH0sXG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0X2lkOiAxLFxuXHRcdFx0XHR1c2VySWQ6IDEsXG5cdFx0XHRcdHJpZDogMSxcblx0XHRcdFx0bmFtZTogMSxcblx0XHRcdFx0ZGVzY3JpcHRpb246IDEsXG5cdFx0XHRcdHR5cGU6IDEsXG5cdFx0XHRcdHVybDogMSxcblx0XHRcdFx0dXBsb2FkZWRBdDogMSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQoZmlsZVF1ZXJ5LCBmaWxlT3B0aW9ucyk7XG5cdH1cblxuXHRpbnNlcnRGaWxlSW5pdCh1c2VySWQsIHN0b3JlLCBmaWxlLCBleHRyYSkge1xuXHRcdGNvbnN0IGZpbGVEYXRhID0ge1xuXHRcdFx0dXNlcklkLFxuXHRcdFx0c3RvcmUsXG5cdFx0XHRjb21wbGV0ZTogZmFsc2UsXG5cdFx0XHR1cGxvYWRpbmc6IHRydWUsXG5cdFx0XHRwcm9ncmVzczogMCxcblx0XHRcdGV4dGVuc2lvbjogcy5zdHJSaWdodEJhY2soZmlsZS5uYW1lLCAnLicpLFxuXHRcdFx0dXBsb2FkZWRBdDogbmV3IERhdGUoKSxcblx0XHR9O1xuXG5cdFx0Xy5leHRlbmQoZmlsZURhdGEsIGZpbGUsIGV4dHJhKTtcblxuXHRcdGlmICh0aGlzLm1vZGVsLmRpcmVjdCAmJiB0aGlzLm1vZGVsLmRpcmVjdC5pbnNlcnQgIT0gbnVsbCkge1xuXHRcdFx0ZmlsZSA9IHRoaXMubW9kZWwuZGlyZWN0Lmluc2VydChmaWxlRGF0YSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZpbGUgPSB0aGlzLmluc2VydChmaWxlRGF0YSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpbGU7XG5cdH1cblxuXHR1cGRhdGVGaWxlQ29tcGxldGUoZmlsZUlkLCB1c2VySWQsIGZpbGUpIHtcblx0XHRsZXQgcmVzdWx0O1xuXHRcdGlmICghZmlsZUlkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgZmlsdGVyID0ge1xuXHRcdFx0X2lkOiBmaWxlSWQsXG5cdFx0XHR1c2VySWQsXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0Y29tcGxldGU6IHRydWUsXG5cdFx0XHRcdHVwbG9hZGluZzogZmFsc2UsXG5cdFx0XHRcdHByb2dyZXNzOiAxLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0dXBkYXRlLiRzZXQgPSBfLmV4dGVuZChmaWxlLCB1cGRhdGUuJHNldCk7XG5cblx0XHRpZiAodGhpcy5tb2RlbC5kaXJlY3QgJiYgdGhpcy5tb2RlbC5kaXJlY3QudXBkYXRlICE9IG51bGwpIHtcblx0XHRcdHJlc3VsdCA9IHRoaXMubW9kZWwuZGlyZWN0LnVwZGF0ZShmaWx0ZXIsIHVwZGF0ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlc3VsdCA9IHRoaXMudXBkYXRlKGZpbHRlciwgdXBkYXRlKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0ZGVsZXRlRmlsZShmaWxlSWQpIHtcblx0XHRpZiAodGhpcy5tb2RlbC5kaXJlY3QgJiYgdGhpcy5tb2RlbC5kaXJlY3QucmVtb3ZlICE9IG51bGwpIHtcblx0XHRcdHJldHVybiB0aGlzLm1vZGVsLmRpcmVjdC5yZW1vdmUoeyBfaWQ6IGZpbGVJZCB9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMucmVtb3ZlKHsgX2lkOiBmaWxlSWQgfSk7XG5cdFx0fVxuXHR9XG59O1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5cbmNsYXNzIE1vZGVsVXNlcnMgZXh0ZW5kcyBSb2NrZXRDaGF0Lm1vZGVscy5fQmFzZSB7XG5cdGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcblx0XHRzdXBlciguLi5hcmdzKTtcblxuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyByb2xlczogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgbmFtZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgbGFzdExvZ2luOiAxIH0pO1xuXHRcdHRoaXMudHJ5RW5zdXJlSW5kZXgoeyBzdGF0dXM6IDEgfSk7XG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IGFjdGl2ZTogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgc3RhdHVzQ29ubmVjdGlvbjogMSB9LCB7IHNwYXJzZTogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgdHlwZTogMSB9KTtcblx0fVxuXG5cdGZpbmRPbmVCeUltcG9ydElkKF9pZCwgb3B0aW9ucykge1xuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUoeyBpbXBvcnRJZHM6IF9pZCB9LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRPbmVCeVVzZXJuYW1lKHVzZXJuYW1lLCBvcHRpb25zKSB7XG5cdFx0aWYgKHR5cGVvZiB1c2VybmFtZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHVzZXJuYW1lID0gbmV3IFJlZ0V4cChgXiR7IHVzZXJuYW1lIH0kYCwgJ2knKTtcblx0XHR9XG5cblx0XHRjb25zdCBxdWVyeSA9IHsgdXNlcm5hbWUgfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZE9uZUJ5RW1haWxBZGRyZXNzKGVtYWlsQWRkcmVzcywgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyAnZW1haWxzLmFkZHJlc3MnOiBuZXcgUmVnRXhwKGBeJHsgcy5lc2NhcGVSZWdFeHAoZW1haWxBZGRyZXNzKSB9JGAsICdpJykgfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZE9uZUFkbWluKGFkbWluLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IGFkbWluIH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRPbmVCeUlkQW5kTG9naW5Ub2tlbihfaWQsIHRva2VuLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQsXG5cdFx0XHQnc2VydmljZXMucmVzdW1lLmxvZ2luVG9rZW5zLmhhc2hlZFRva2VuJyA6IEFjY291bnRzLl9oYXNoTG9naW5Ub2tlbih0b2tlbiksXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZE9uZUJ5SWQodXNlcklkLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IF9pZDogdXNlcklkIH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdC8vIEZJTkRcblx0ZmluZEJ5SWQodXNlcklkKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7IF9pZDogdXNlcklkIH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5KTtcblx0fVxuXG5cdGZpbmRCeUlkcyh1c2Vycywgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQ6IHsgJGluOiB1c2VycyB9IH07XG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVXNlcnNOb3RPZmZsaW5lKG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHVzZXJuYW1lOiB7XG5cdFx0XHRcdCRleGlzdHM6IDEsXG5cdFx0XHR9LFxuXHRcdFx0c3RhdHVzOiB7XG5cdFx0XHRcdCRpbjogWydvbmxpbmUnLCAnYXdheScsICdidXN5J10sXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRCeVJvb21JZChyaWQsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBkYXRhID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kQnlSb29tSWQocmlkKS5mZXRjaCgpLm1hcCgoaXRlbSkgPT4gaXRlbS51Ll9pZCk7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQ6IHtcblx0XHRcdFx0JGluOiBkYXRhLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlVc2VybmFtZSh1c2VybmFtZSwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyB1c2VybmFtZSB9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQWN0aXZlQnlVc2VybmFtZU9yTmFtZVJlZ2V4V2l0aEV4Y2VwdGlvbnMoc2VhcmNoVGVybSwgZXhjZXB0aW9ucywgb3B0aW9ucykge1xuXHRcdGlmIChleGNlcHRpb25zID09IG51bGwpIHsgZXhjZXB0aW9ucyA9IFtdOyB9XG5cdFx0aWYgKG9wdGlvbnMgPT0gbnVsbCkgeyBvcHRpb25zID0ge307IH1cblx0XHRpZiAoIV8uaXNBcnJheShleGNlcHRpb25zKSkge1xuXHRcdFx0ZXhjZXB0aW9ucyA9IFtleGNlcHRpb25zXTtcblx0XHR9XG5cblx0XHRjb25zdCB0ZXJtUmVnZXggPSBuZXcgUmVnRXhwKHMuZXNjYXBlUmVnRXhwKHNlYXJjaFRlcm0pLCAnaScpO1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0JG9yOiBbe1xuXHRcdFx0XHR1c2VybmFtZTogdGVybVJlZ2V4LFxuXHRcdFx0fSwge1xuXHRcdFx0XHRuYW1lOiB0ZXJtUmVnZXgsXG5cdFx0XHR9XSxcblx0XHRcdGFjdGl2ZTogdHJ1ZSxcblx0XHRcdHR5cGU6IHtcblx0XHRcdFx0JGluOiBbJ3VzZXInLCAnYm90J10sXG5cdFx0XHR9LFxuXHRcdFx0JGFuZDogW3tcblx0XHRcdFx0dXNlcm5hbWU6IHtcblx0XHRcdFx0XHQkZXhpc3RzOiB0cnVlLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSwge1xuXHRcdFx0XHR1c2VybmFtZToge1xuXHRcdFx0XHRcdCRuaW46IGV4Y2VwdGlvbnMsXG5cdFx0XHRcdH0sXG5cdFx0XHR9XSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlBY3RpdmVVc2Vyc0V4Y2VwdChzZWFyY2hUZXJtLCBleGNlcHRpb25zLCBvcHRpb25zKSB7XG5cdFx0aWYgKGV4Y2VwdGlvbnMgPT0gbnVsbCkgeyBleGNlcHRpb25zID0gW107IH1cblx0XHRpZiAob3B0aW9ucyA9PSBudWxsKSB7IG9wdGlvbnMgPSB7fTsgfVxuXHRcdGlmICghXy5pc0FycmF5KGV4Y2VwdGlvbnMpKSB7XG5cdFx0XHRleGNlcHRpb25zID0gW2V4Y2VwdGlvbnNdO1xuXHRcdH1cblxuXHRcdGNvbnN0IHRlcm1SZWdleCA9IG5ldyBSZWdFeHAocy5lc2NhcGVSZWdFeHAoc2VhcmNoVGVybSksICdpJyk7XG5cblx0XHRjb25zdCBvclN0bXQgPSBfLnJlZHVjZShSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfU2VhcmNoRmllbGRzJykudHJpbSgpLnNwbGl0KCcsJyksIGZ1bmN0aW9uKGFjYywgZWwpIHtcblx0XHRcdGFjYy5wdXNoKHsgW2VsLnRyaW0oKV06IHRlcm1SZWdleCB9KTtcblx0XHRcdHJldHVybiBhY2M7XG5cdFx0fSwgW10pO1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0JGFuZDogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0YWN0aXZlOiB0cnVlLFxuXHRcdFx0XHRcdCRvcjogb3JTdG10LFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0dXNlcm5hbWU6IHsgJGV4aXN0czogdHJ1ZSwgJG5pbjogZXhjZXB0aW9ucyB9LFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHR9O1xuXG5cdFx0Ly8gZG8gbm90IHVzZSBjYWNoZVxuXHRcdHJldHVybiB0aGlzLl9kYi5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRVc2Vyc0J5TmFtZU9yVXNlcm5hbWUobmFtZU9yVXNlcm5hbWUsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHVzZXJuYW1lOiB7XG5cdFx0XHRcdCRleGlzdHM6IDEsXG5cdFx0XHR9LFxuXG5cdFx0XHQkb3I6IFtcblx0XHRcdFx0eyBuYW1lOiBuYW1lT3JVc2VybmFtZSB9LFxuXHRcdFx0XHR7IHVzZXJuYW1lOiBuYW1lT3JVc2VybmFtZSB9LFxuXHRcdFx0XSxcblxuXHRcdFx0dHlwZToge1xuXHRcdFx0XHQkaW46IFsndXNlciddLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kQnlVc2VybmFtZU5hbWVPckVtYWlsQWRkcmVzcyh1c2VybmFtZU5hbWVPckVtYWlsQWRkcmVzcywgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0JG9yOiBbXG5cdFx0XHRcdHsgbmFtZTogdXNlcm5hbWVOYW1lT3JFbWFpbEFkZHJlc3MgfSxcblx0XHRcdFx0eyB1c2VybmFtZTogdXNlcm5hbWVOYW1lT3JFbWFpbEFkZHJlc3MgfSxcblx0XHRcdFx0eyAnZW1haWxzLmFkZHJlc3MnOiB1c2VybmFtZU5hbWVPckVtYWlsQWRkcmVzcyB9LFxuXHRcdFx0XSxcblx0XHRcdHR5cGU6IHtcblx0XHRcdFx0JGluOiBbJ3VzZXInLCAnYm90J10sXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRMREFQVXNlcnMob3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBsZGFwOiB0cnVlIH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRDcm93ZFVzZXJzKG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHsgY3Jvd2Q6IHRydWUgfTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0Z2V0TGFzdExvZ2luKG9wdGlvbnMpIHtcblx0XHRpZiAob3B0aW9ucyA9PSBudWxsKSB7IG9wdGlvbnMgPSB7fTsgfVxuXHRcdGNvbnN0IHF1ZXJ5ID0geyBsYXN0TG9naW46IHsgJGV4aXN0czogMSB9IH07XG5cdFx0b3B0aW9ucy5zb3J0ID0geyBsYXN0TG9naW46IC0xIH07XG5cdFx0b3B0aW9ucy5saW1pdCA9IDE7XG5cdFx0Y29uc3QgW3VzZXJdID0gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKS5mZXRjaCgpO1xuXHRcdHJldHVybiB1c2VyICYmIHVzZXIubGFzdExvZ2luO1xuXHR9XG5cblx0ZmluZFVzZXJzQnlVc2VybmFtZXModXNlcm5hbWVzLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR1c2VybmFtZToge1xuXHRcdFx0XHQkaW46IHVzZXJuYW1lcyxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0ZmluZFVzZXJzQnlJZHMoaWRzLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQ6IHtcblx0XHRcdFx0JGluOiBpZHMsXG5cdFx0XHR9LFxuXHRcdH07XG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVXNlcnNXaXRoVXNlcm5hbWVCeUlkcyhpZHMsIG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9pZDoge1xuXHRcdFx0XHQkaW46IGlkcyxcblx0XHRcdH0sXG5cdFx0XHR1c2VybmFtZToge1xuXHRcdFx0XHQkZXhpc3RzOiAxLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMuZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kVXNlcnNXaXRoVXNlcm5hbWVCeUlkc05vdE9mZmxpbmUoaWRzLCBvcHRpb25zKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQ6IHtcblx0XHRcdFx0JGluOiBpZHMsXG5cdFx0XHR9LFxuXHRcdFx0dXNlcm5hbWU6IHtcblx0XHRcdFx0JGV4aXN0czogMSxcblx0XHRcdH0sXG5cdFx0XHRzdGF0dXM6IHtcblx0XHRcdFx0JGluOiBbJ29ubGluZScsICdhd2F5JywgJ2J1c3knXSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0Z2V0T2xkZXN0KGZpZWxkcyA9IHsgX2lkOiAxIH0pIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9pZDoge1xuXHRcdFx0XHQkbmU6ICdyb2NrZXQuY2F0Jyxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdGNvbnN0IG9wdGlvbnMgPSB7XG5cdFx0XHRmaWVsZHMsXG5cdFx0XHRzb3J0OiB7XG5cdFx0XHRcdGNyZWF0ZWRBdDogMSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0Ly8gVVBEQVRFXG5cdGFkZEltcG9ydElkcyhfaWQsIGltcG9ydElkcykge1xuXHRcdGltcG9ydElkcyA9IFtdLmNvbmNhdChpbXBvcnRJZHMpO1xuXG5cdFx0Y29uc3QgcXVlcnkgPSB7IF9pZCB9O1xuXG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JGFkZFRvU2V0OiB7XG5cdFx0XHRcdGltcG9ydElkczoge1xuXHRcdFx0XHRcdCRlYWNoOiBpbXBvcnRJZHMsXG5cdFx0XHRcdH0sXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUocXVlcnksIHVwZGF0ZSk7XG5cdH1cblxuXHR1cGRhdGVMYXN0TG9naW5CeUlkKF9pZCkge1xuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0bGFzdExvZ2luOiBuZXcgRGF0ZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRTZXJ2aWNlSWQoX2lkLCBzZXJ2aWNlTmFtZSwgc2VydmljZUlkKSB7XG5cdFx0Y29uc3QgdXBkYXRlID1cblx0XHR7ICRzZXQ6IHt9IH07XG5cblx0XHRjb25zdCBzZXJ2aWNlSWRLZXkgPSBgc2VydmljZXMuJHsgc2VydmljZU5hbWUgfS5pZGA7XG5cdFx0dXBkYXRlLiRzZXRbc2VydmljZUlkS2V5XSA9IHNlcnZpY2VJZDtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRVc2VybmFtZShfaWQsIHVzZXJuYW1lKSB7XG5cdFx0Y29uc3QgdXBkYXRlID1cblx0XHR7ICRzZXQ6IHsgdXNlcm5hbWUgfSB9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKF9pZCwgdXBkYXRlKTtcblx0fVxuXG5cdHNldEVtYWlsKF9pZCwgZW1haWwpIHtcblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGVtYWlsczogW3tcblx0XHRcdFx0XHRhZGRyZXNzOiBlbWFpbCxcblx0XHRcdFx0XHR2ZXJpZmllZDogZmFsc2UsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdF0sXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoX2lkLCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0RW1haWxWZXJpZmllZChfaWQsIGVtYWlsKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQsXG5cdFx0XHRlbWFpbHM6IHtcblx0XHRcdFx0JGVsZW1NYXRjaDoge1xuXHRcdFx0XHRcdGFkZHJlc3M6IGVtYWlsLFxuXHRcdFx0XHRcdHZlcmlmaWVkOiBmYWxzZSxcblx0XHRcdFx0fSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J2VtYWlscy4kLnZlcmlmaWVkJzogdHJ1ZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlKTtcblx0fVxuXG5cdHNldE5hbWUoX2lkLCBuYW1lKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRuYW1lLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKF9pZCwgdXBkYXRlKTtcblx0fVxuXG5cdHNldEN1c3RvbUZpZWxkcyhfaWQsIGZpZWxkcykge1xuXHRcdGNvbnN0IHZhbHVlcyA9IHt9O1xuXHRcdE9iamVjdC5rZXlzKGZpZWxkcykuZm9yRWFjaCgoa2V5KSA9PiB7XG5cdFx0XHR2YWx1ZXNbYGN1c3RvbUZpZWxkcy4keyBrZXkgfWBdID0gZmllbGRzW2tleV07XG5cdFx0fSk7XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7ICRzZXQ6IHZhbHVlcyB9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKF9pZCwgdXBkYXRlKTtcblx0fVxuXG5cdHNldEF2YXRhck9yaWdpbihfaWQsIG9yaWdpbikge1xuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0YXZhdGFyT3JpZ2luOiBvcmlnaW4sXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoX2lkLCB1cGRhdGUpO1xuXHR9XG5cblx0dW5zZXRBdmF0YXJPcmlnaW4oX2lkKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHVuc2V0OiB7XG5cdFx0XHRcdGF2YXRhck9yaWdpbjogMSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRVc2VyQWN0aXZlKF9pZCwgYWN0aXZlKSB7XG5cdFx0aWYgKGFjdGl2ZSA9PSBudWxsKSB7IGFjdGl2ZSA9IHRydWU7IH1cblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGFjdGl2ZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRBbGxVc2Vyc0FjdGl2ZShhY3RpdmUpIHtcblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdGFjdGl2ZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZSh7fSwgdXBkYXRlLCB7IG11bHRpOiB0cnVlIH0pO1xuXHR9XG5cblx0dW5zZXRMb2dpblRva2VucyhfaWQpIHtcblx0XHRjb25zdCB1cGRhdGUgPSB7XG5cdFx0XHQkc2V0OiB7XG5cdFx0XHRcdCdzZXJ2aWNlcy5yZXN1bWUubG9naW5Ub2tlbnMnIDogW10sXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoX2lkLCB1cGRhdGUpO1xuXHR9XG5cblx0dW5zZXRSZXF1aXJlUGFzc3dvcmRDaGFuZ2UoX2lkKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHVuc2V0OiB7XG5cdFx0XHRcdHJlcXVpcmVQYXNzd29yZENoYW5nZSA6IHRydWUsXG5cdFx0XHRcdHJlcXVpcmVQYXNzd29yZENoYW5nZVJlYXNvbiA6IHRydWUsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoX2lkLCB1cGRhdGUpO1xuXHR9XG5cblx0cmVzZXRQYXNzd29yZEFuZFNldFJlcXVpcmVQYXNzd29yZENoYW5nZShfaWQsIHJlcXVpcmVQYXNzd29yZENoYW5nZSwgcmVxdWlyZVBhc3N3b3JkQ2hhbmdlUmVhc29uKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHVuc2V0OiB7XG5cdFx0XHRcdCdzZXJ2aWNlcy5wYXNzd29yZCc6IDEsXG5cdFx0XHR9LFxuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRyZXF1aXJlUGFzc3dvcmRDaGFuZ2UsXG5cdFx0XHRcdHJlcXVpcmVQYXNzd29yZENoYW5nZVJlYXNvbixcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRMYW5ndWFnZShfaWQsIGxhbmd1YWdlKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRsYW5ndWFnZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRQcm9maWxlKF9pZCwgcHJvZmlsZSkge1xuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0J3NldHRpbmdzLnByb2ZpbGUnOiBwcm9maWxlLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKF9pZCwgdXBkYXRlKTtcblx0fVxuXG5cdGNsZWFyU2V0dGluZ3MoX2lkKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRzZXR0aW5nczoge30sXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoX2lkLCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0UHJlZmVyZW5jZXMoX2lkLCBwcmVmZXJlbmNlcykge1xuXHRcdGNvbnN0IHNldHRpbmdzID0gT2JqZWN0LmFzc2lnbihcblx0XHRcdHt9LFxuXHRcdFx0Li4uT2JqZWN0LmtleXMocHJlZmVyZW5jZXMpLm1hcCgoa2V5KSA9PiAoeyBbYHNldHRpbmdzLnByZWZlcmVuY2VzLiR7IGtleSB9YF06IHByZWZlcmVuY2VzW2tleV0gfSkpXG5cdFx0KTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHNldHRpbmdzLFxuXHRcdH07XG5cdFx0aWYgKHBhcnNlSW50KHByZWZlcmVuY2VzLmNsb2NrTW9kZSkgPT09IDApIHtcblx0XHRcdGRlbGV0ZSB1cGRhdGUuJHNldFsnc2V0dGluZ3MucHJlZmVyZW5jZXMuY2xvY2tNb2RlJ107XG5cdFx0XHR1cGRhdGUuJHVuc2V0ID0geyAnc2V0dGluZ3MucHJlZmVyZW5jZXMuY2xvY2tNb2RlJzogMSB9O1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRzZXRVdGNPZmZzZXQoX2lkLCB1dGNPZmZzZXQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdF9pZCxcblx0XHRcdHV0Y09mZnNldDoge1xuXHRcdFx0XHQkbmU6IHV0Y09mZnNldCxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdGNvbnN0IHVwZGF0ZSA9IHtcblx0XHRcdCRzZXQ6IHtcblx0XHRcdFx0dXRjT2Zmc2V0LFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUpO1xuXHR9XG5cblx0c2F2ZVVzZXJCeUlkKF9pZCwgZGF0YSkge1xuXHRcdGNvbnN0IHNldERhdGEgPSB7fTtcblx0XHRjb25zdCB1bnNldERhdGEgPSB7fTtcblxuXHRcdGlmIChkYXRhLm5hbWUgIT0gbnVsbCkge1xuXHRcdFx0aWYgKCFfLmlzRW1wdHkocy50cmltKGRhdGEubmFtZSkpKSB7XG5cdFx0XHRcdHNldERhdGEubmFtZSA9IHMudHJpbShkYXRhLm5hbWUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dW5zZXREYXRhLm5hbWUgPSAxO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChkYXRhLmVtYWlsICE9IG51bGwpIHtcblx0XHRcdGlmICghXy5pc0VtcHR5KHMudHJpbShkYXRhLmVtYWlsKSkpIHtcblx0XHRcdFx0c2V0RGF0YS5lbWFpbHMgPSBbeyBhZGRyZXNzOiBzLnRyaW0oZGF0YS5lbWFpbCkgfV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR1bnNldERhdGEuZW1haWxzID0gMTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZGF0YS5waG9uZSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoIV8uaXNFbXB0eShzLnRyaW0oZGF0YS5waG9uZSkpKSB7XG5cdFx0XHRcdHNldERhdGEucGhvbmUgPSBbeyBwaG9uZU51bWJlcjogcy50cmltKGRhdGEucGhvbmUpIH1dO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dW5zZXREYXRhLnBob25lID0gMTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCB1cGRhdGUgPSB7fTtcblxuXHRcdGlmICghXy5pc0VtcHR5KHNldERhdGEpKSB7XG5cdFx0XHR1cGRhdGUuJHNldCA9IHNldERhdGE7XG5cdFx0fVxuXG5cdFx0aWYgKCFfLmlzRW1wdHkodW5zZXREYXRhKSkge1xuXHRcdFx0dXBkYXRlLiR1bnNldCA9IHVuc2V0RGF0YTtcblx0XHR9XG5cblx0XHRpZiAoXy5pc0VtcHR5KHVwZGF0ZSkpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZSh7IF9pZCB9LCB1cGRhdGUpO1xuXHR9XG5cblx0c2V0UmVhc29uKF9pZCwgcmVhc29uKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRyZWFzb24sXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy51cGRhdGUoX2lkLCB1cGRhdGUpO1xuXHR9XG5cblx0dW5zZXRSZWFzb24oX2lkKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHVuc2V0OiB7XG5cdFx0XHRcdHJlYXNvbjogdHJ1ZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShfaWQsIHVwZGF0ZSk7XG5cdH1cblxuXHRhZGRCYW5uZXJCeUlkKF9pZCwgYmFubmVyKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRbYGJhbm5lcnMuJHsgYmFubmVyLmlkIH1gXTogYmFubmVyLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHsgX2lkIH0sIHVwZGF0ZSk7XG5cdH1cblxuXHRyZW1vdmVCYW5uZXJCeUlkKF9pZCwgYmFubmVyKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHVuc2V0OiB7XG5cdFx0XHRcdFtgYmFubmVycy4keyBiYW5uZXIuaWQgfWBdOiB0cnVlLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRoaXMudXBkYXRlKHsgX2lkIH0sIHVwZGF0ZSk7XG5cdH1cblxuXHQvLyBJTlNFUlRcblx0Y3JlYXRlKGRhdGEpIHtcblx0XHRjb25zdCB1c2VyID0ge1xuXHRcdFx0Y3JlYXRlZEF0OiBuZXcgRGF0ZSxcblx0XHRcdGF2YXRhck9yaWdpbjogJ25vbmUnLFxuXHRcdH07XG5cblx0XHRfLmV4dGVuZCh1c2VyLCBkYXRhKTtcblxuXHRcdHJldHVybiB0aGlzLmluc2VydCh1c2VyKTtcblx0fVxuXG5cblx0Ly8gUkVNT1ZFXG5cdHJlbW92ZUJ5SWQoX2lkKSB7XG5cdFx0cmV0dXJuIHRoaXMucmVtb3ZlKF9pZCk7XG5cdH1cblxuXHQvKlxuRmluZCB1c2VycyB0byBzZW5kIGEgbWVzc2FnZSBieSBlbWFpbCBpZjpcbi0gaGUgaXMgbm90IG9ubGluZVxuLSBoYXMgYSB2ZXJpZmllZCBlbWFpbFxuLSBoYXMgbm90IGRpc2FibGVkIGVtYWlsIG5vdGlmaWNhdGlvbnNcbi0gYGFjdGl2ZWAgaXMgZXF1YWwgdG8gdHJ1ZSAoZmFsc2UgbWVhbnMgdGhleSB3ZXJlIGRlYWN0aXZhdGVkIGFuZCBjYW4ndCBsb2dpbilcbiovXG5cdGdldFVzZXJzVG9TZW5kT2ZmbGluZUVtYWlsKHVzZXJzSWRzKSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHRfaWQ6IHtcblx0XHRcdFx0JGluOiB1c2Vyc0lkcyxcblx0XHRcdH0sXG5cdFx0XHRhY3RpdmU6IHRydWUsXG5cdFx0XHRzdGF0dXM6ICdvZmZsaW5lJyxcblx0XHRcdHN0YXR1c0Nvbm5lY3Rpb246IHtcblx0XHRcdFx0JG5lOiAnb25saW5lJyxcblx0XHRcdH0sXG5cdFx0XHQnZW1haWxzLnZlcmlmaWVkJzogdHJ1ZSxcblx0XHR9O1xuXG5cdFx0Y29uc3Qgb3B0aW9ucyA9IHtcblx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRuYW1lOiAxLFxuXHRcdFx0XHR1c2VybmFtZTogMSxcblx0XHRcdFx0ZW1haWxzOiAxLFxuXHRcdFx0XHQnc2V0dGluZ3MucHJlZmVyZW5jZXMuZW1haWxOb3RpZmljYXRpb25Nb2RlJzogMSxcblx0XHRcdFx0bGFuZ3VhZ2U6IDEsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxufVxuXG5Sb2NrZXRDaGF0Lm1vZGVscy5Vc2VycyA9IG5ldyBNb2RlbFVzZXJzKE1ldGVvci51c2VycywgdHJ1ZSk7XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuUm9ja2V0Q2hhdC5tb2RlbHMuRXhwb3J0T3BlcmF0aW9ucyA9IG5ldyBjbGFzcyBNb2RlbEV4cG9ydE9wZXJhdGlvbnMgZXh0ZW5kcyBSb2NrZXRDaGF0Lm1vZGVscy5fQmFzZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCdleHBvcnRfb3BlcmF0aW9ucycpO1xuXG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IHVzZXJJZDogMSB9KTtcblx0XHR0aGlzLnRyeUVuc3VyZUluZGV4KHsgc3RhdHVzOiAxIH0pO1xuXHR9XG5cblx0Ly8gRklORFxuXHRmaW5kQnlJZChpZCkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0geyBfaWQ6IGlkIH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5KTtcblx0fVxuXG5cdGZpbmRMYXN0T3BlcmF0aW9uQnlVc2VyKHVzZXJJZCwgZnVsbEV4cG9ydCA9IGZhbHNlLCBvcHRpb25zID0ge30pIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHVzZXJJZCxcblx0XHRcdGZ1bGxFeHBvcnQsXG5cdFx0fTtcblxuXHRcdG9wdGlvbnMuc29ydCA9IHsgY3JlYXRlZEF0IDogLTEgfTtcblx0XHRyZXR1cm4gdGhpcy5maW5kT25lKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRQZW5kaW5nQnlVc2VyKHVzZXJJZCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0dXNlcklkLFxuXHRcdFx0c3RhdHVzOiB7XG5cdFx0XHRcdCRuaW46IFsnY29tcGxldGVkJ10sXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRyZXR1cm4gdGhpcy5maW5kKHF1ZXJ5LCBvcHRpb25zKTtcblx0fVxuXG5cdGZpbmRBbGxQZW5kaW5nKG9wdGlvbnMpIHtcblx0XHRjb25zdCBxdWVyeSA9IHtcblx0XHRcdHN0YXR1czogeyAkbmluOiBbJ2NvbXBsZXRlZCddIH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0Ly8gVVBEQVRFXG5cdHVwZGF0ZU9wZXJhdGlvbihkYXRhKSB7XG5cdFx0Y29uc3QgdXBkYXRlID0ge1xuXHRcdFx0JHNldDoge1xuXHRcdFx0XHRyb29tTGlzdDogZGF0YS5yb29tTGlzdCxcblx0XHRcdFx0c3RhdHVzOiBkYXRhLnN0YXR1cyxcblx0XHRcdFx0ZmlsZUxpc3Q6IGRhdGEuZmlsZUxpc3QsXG5cdFx0XHRcdGdlbmVyYXRlZEZpbGU6IGRhdGEuZ2VuZXJhdGVkRmlsZSxcblx0XHRcdH0sXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShkYXRhLl9pZCwgdXBkYXRlKTtcblx0fVxuXG5cblx0Ly8gSU5TRVJUXG5cdGNyZWF0ZShkYXRhKSB7XG5cdFx0Y29uc3QgZXhwb3J0T3BlcmF0aW9uID0ge1xuXHRcdFx0Y3JlYXRlZEF0OiBuZXcgRGF0ZSxcblx0XHR9O1xuXG5cdFx0Xy5leHRlbmQoZXhwb3J0T3BlcmF0aW9uLCBkYXRhKTtcblxuXHRcdHJldHVybiB0aGlzLmluc2VydChleHBvcnRPcGVyYXRpb24pO1xuXHR9XG5cblxuXHQvLyBSRU1PVkVcblx0cmVtb3ZlQnlJZChfaWQpIHtcblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUoX2lkKTtcblx0fVxufTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5Sb2NrZXRDaGF0Lm1vZGVscy5Vc2VyRGF0YUZpbGVzID0gbmV3IGNsYXNzIE1vZGVsVXNlckRhdGFGaWxlcyBleHRlbmRzIFJvY2tldENoYXQubW9kZWxzLl9CYXNlIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoJ3VzZXJfZGF0YV9maWxlcycpO1xuXG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IHVzZXJJZDogMSB9KTtcblx0fVxuXG5cdC8vIEZJTkRcblx0ZmluZEJ5SWQoaWQpIHtcblx0XHRjb25zdCBxdWVyeSA9IHsgX2lkOiBpZCB9O1xuXHRcdHJldHVybiB0aGlzLmZpbmQocXVlcnkpO1xuXHR9XG5cblx0ZmluZExhc3RGaWxlQnlVc2VyKHVzZXJJZCwgb3B0aW9ucyA9IHt9KSB7XG5cdFx0Y29uc3QgcXVlcnkgPSB7XG5cdFx0XHR1c2VySWQsXG5cdFx0fTtcblxuXHRcdG9wdGlvbnMuc29ydCA9IHsgX3VwZGF0ZWRBdCA6IC0xIH07XG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZShxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHQvLyBJTlNFUlRcblx0Y3JlYXRlKGRhdGEpIHtcblx0XHRjb25zdCB1c2VyRGF0YUZpbGUgPSB7XG5cdFx0XHRjcmVhdGVkQXQ6IG5ldyBEYXRlLFxuXHRcdH07XG5cblx0XHRfLmV4dGVuZCh1c2VyRGF0YUZpbGUsIGRhdGEpO1xuXG5cdFx0cmV0dXJuIHRoaXMuaW5zZXJ0KHVzZXJEYXRhRmlsZSk7XG5cdH1cblxuXHQvLyBSRU1PVkVcblx0cmVtb3ZlQnlJZChfaWQpIHtcblx0XHRyZXR1cm4gdGhpcy5yZW1vdmUoX2lkKTtcblx0fVxufTtcbiIsIi8qIGdsb2JhbHMgTW9uZ29JbnRlcm5hbHMgKi9cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5jb25zdCBiYXNlTmFtZSA9ICdyb2NrZXRjaGF0Xyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuXG5jb25zdCB0cmFzaCA9IG5ldyBNb25nby5Db2xsZWN0aW9uKGAkeyBiYXNlTmFtZSB9X3RyYXNoYCk7XG50cnkge1xuXHR0cmFzaC5fZW5zdXJlSW5kZXgoeyBjb2xsZWN0aW9uOiAxIH0pO1xuXHR0cmFzaC5fZW5zdXJlSW5kZXgoeyBfZGVsZXRlZEF0OiAxIH0sIHsgZXhwaXJlQWZ0ZXJTZWNvbmRzOiA2MCAqIDYwICogMjQgKiAzMCB9KTtcbn0gY2F0Y2ggKGUpIHtcblx0Y29uc29sZS5sb2coZSk7XG59XG5cbmNvbnN0IGlzT3Bsb2dBdmFpbGFibGUgPSBNb25nb0ludGVybmFscy5kZWZhdWx0UmVtb3RlQ29sbGVjdGlvbkRyaXZlcigpLm1vbmdvLl9vcGxvZ0hhbmRsZSAmJiAhIU1vbmdvSW50ZXJuYWxzLmRlZmF1bHRSZW1vdGVDb2xsZWN0aW9uRHJpdmVyKCkubW9uZ28uX29wbG9nSGFuZGxlLm9uT3Bsb2dFbnRyeTtcbmxldCBpc09wbG9nRW5hYmxlZCA9IGlzT3Bsb2dBdmFpbGFibGU7XG5Sb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRm9yY2VfRGlzYWJsZV9PcExvZ19Gb3JfQ2FjaGUnLCAoa2V5LCB2YWx1ZSkgPT4ge1xuXHRpc09wbG9nRW5hYmxlZCA9IGlzT3Bsb2dBdmFpbGFibGUgJiYgdmFsdWUgPT09IGZhbHNlO1xufSk7XG5cbmNsYXNzIE1vZGVsc0Jhc2VEYiBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cdGNvbnN0cnVjdG9yKG1vZGVsLCBiYXNlTW9kZWwpIHtcblx0XHRzdXBlcigpO1xuXG5cdFx0aWYgKE1hdGNoLnRlc3QobW9kZWwsIFN0cmluZykpIHtcblx0XHRcdHRoaXMubmFtZSA9IG1vZGVsO1xuXHRcdFx0dGhpcy5jb2xsZWN0aW9uTmFtZSA9IHRoaXMuYmFzZU5hbWUgKyB0aGlzLm5hbWU7XG5cdFx0XHR0aGlzLm1vZGVsID0gbmV3IE1vbmdvLkNvbGxlY3Rpb24odGhpcy5jb2xsZWN0aW9uTmFtZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMubmFtZSA9IG1vZGVsLl9uYW1lO1xuXHRcdFx0dGhpcy5jb2xsZWN0aW9uTmFtZSA9IHRoaXMubmFtZTtcblx0XHRcdHRoaXMubW9kZWwgPSBtb2RlbDtcblx0XHR9XG5cblx0XHR0aGlzLmJhc2VNb2RlbCA9IGJhc2VNb2RlbDtcblxuXHRcdHRoaXMud3JhcE1vZGVsKCk7XG5cblx0XHRsZXQgYWxyZWFkeUxpc3RlbmluZ1RvT3Bsb2cgPSBmYWxzZTtcblx0XHQvLyBXaGVuIHNvbWVvbmUgc3RhcnQgbGlzdGVuaW5nIGZvciBjaGFuZ2VzIHdlIHN0YXJ0IG9wbG9nIGlmIGF2YWlsYWJsZVxuXHRcdHRoaXMub24oJ25ld0xpc3RlbmVyJywgKGV2ZW50LyogLCBsaXN0ZW5lciovKSA9PiB7XG5cdFx0XHRpZiAoZXZlbnQgPT09ICdjaGFuZ2UnICYmIGFscmVhZHlMaXN0ZW5pbmdUb09wbG9nID09PSBmYWxzZSkge1xuXHRcdFx0XHRhbHJlYWR5TGlzdGVuaW5nVG9PcGxvZyA9IHRydWU7XG5cdFx0XHRcdGlmIChpc09wbG9nRW5hYmxlZCkge1xuXHRcdFx0XHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0XHRcdFx0Y29sbGVjdGlvbjogdGhpcy5jb2xsZWN0aW9uTmFtZSxcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0TW9uZ29JbnRlcm5hbHMuZGVmYXVsdFJlbW90ZUNvbGxlY3Rpb25Ecml2ZXIoKS5tb25nby5fb3Bsb2dIYW5kbGUub25PcGxvZ0VudHJ5KHF1ZXJ5LCB0aGlzLnByb2Nlc3NPcGxvZ1JlY29yZC5iaW5kKHRoaXMpKTtcblx0XHRcdFx0XHRNb25nb0ludGVybmFscy5kZWZhdWx0UmVtb3RlQ29sbGVjdGlvbkRyaXZlcigpLm1vbmdvLl9vcGxvZ0hhbmRsZS5fZGVmaW5lVG9vRmFyQmVoaW5kKE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy50cnlFbnN1cmVJbmRleCh7IF91cGRhdGVkQXQ6IDEgfSk7XG5cdH1cblxuXHRnZXQgYmFzZU5hbWUoKSB7XG5cdFx0cmV0dXJuIGJhc2VOYW1lO1xuXHR9XG5cblx0c2V0VXBkYXRlZEF0KHJlY29yZCA9IHt9KSB7XG5cblx0XHQvLyBUT0RPOiBDaGVjayBpZiB0aGlzIGNhbiBiZSBkZWxldGVkLCBSb2RyaWdvIGRvZXMgbm90IHJlbWVtZWJyIFdIWSBoZSBhZGRlZCBpdC4gU28gaGUgcmVtb3ZlZCBpdCB0byBmaXggaXNzdWUgIzU1NDFcblx0XHQvLyBzZXRVcGRhdGVkQXQocmVjb3JkID0ge30sIGNoZWNrUXVlcnkgPSBmYWxzZSwgcXVlcnkpIHtcblx0XHQvLyBpZiAoY2hlY2tRdWVyeSA9PT0gdHJ1ZSkge1xuXHRcdC8vIFx0aWYgKCFxdWVyeSB8fCBPYmplY3Qua2V5cyhxdWVyeSkubGVuZ3RoID09PSAwKSB7XG5cdFx0Ly8gXHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ01vZGVscy5fQmFzZTogRW1wdHkgcXVlcnknKTtcblx0XHQvLyBcdH1cblx0XHQvLyB9XG5cblx0XHRpZiAoLyhefCwpXFwkLy50ZXN0KE9iamVjdC5rZXlzKHJlY29yZCkuam9pbignLCcpKSkge1xuXHRcdFx0cmVjb3JkLiRzZXQgPSByZWNvcmQuJHNldCB8fCB7fTtcblx0XHRcdHJlY29yZC4kc2V0Ll91cGRhdGVkQXQgPSBuZXcgRGF0ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVjb3JkLl91cGRhdGVkQXQgPSBuZXcgRGF0ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVjb3JkO1xuXHR9XG5cblx0d3JhcE1vZGVsKCkge1xuXHRcdHRoaXMub3JpZ2luYWxzID0ge1xuXHRcdFx0aW5zZXJ0OiB0aGlzLm1vZGVsLmluc2VydC5iaW5kKHRoaXMubW9kZWwpLFxuXHRcdFx0dXBkYXRlOiB0aGlzLm1vZGVsLnVwZGF0ZS5iaW5kKHRoaXMubW9kZWwpLFxuXHRcdFx0cmVtb3ZlOiB0aGlzLm1vZGVsLnJlbW92ZS5iaW5kKHRoaXMubW9kZWwpLFxuXHRcdH07XG5cdFx0Y29uc3Qgc2VsZiA9IHRoaXM7XG5cblx0XHR0aGlzLm1vZGVsLmluc2VydCA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcblx0XHRcdHJldHVybiBzZWxmLmluc2VydCguLi5hcmdzKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5tb2RlbC51cGRhdGUgPSBmdW5jdGlvbiguLi5hcmdzKSB7XG5cdFx0XHRyZXR1cm4gc2VsZi51cGRhdGUoLi4uYXJncyk7XG5cdFx0fTtcblxuXHRcdHRoaXMubW9kZWwucmVtb3ZlID0gZnVuY3Rpb24oLi4uYXJncykge1xuXHRcdFx0cmV0dXJuIHNlbGYucmVtb3ZlKC4uLmFyZ3MpO1xuXHRcdH07XG5cdH1cblxuXHRfZG9Ob3RNaXhJbmNsdXNpb25BbmRFeGNsdXNpb25GaWVsZHMob3B0aW9ucykge1xuXHRcdGlmIChvcHRpb25zICYmIG9wdGlvbnMuZmllbGRzKSB7XG5cdFx0XHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucy5maWVsZHMpO1xuXHRcdFx0Y29uc3QgcmVtb3ZlS2V5cyA9IGtleXMuZmlsdGVyKChrZXkpID0+IG9wdGlvbnMuZmllbGRzW2tleV0gPT09IDApO1xuXHRcdFx0aWYgKGtleXMubGVuZ3RoID4gcmVtb3ZlS2V5cy5sZW5ndGgpIHtcblx0XHRcdFx0cmVtb3ZlS2V5cy5mb3JFYWNoKChrZXkpID0+IGRlbGV0ZSBvcHRpb25zLmZpZWxkc1trZXldKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRmaW5kKC4uLmFyZ3MpIHtcblx0XHR0aGlzLl9kb05vdE1peEluY2x1c2lvbkFuZEV4Y2x1c2lvbkZpZWxkcyhhcmdzWzFdKTtcblx0XHRyZXR1cm4gdGhpcy5tb2RlbC5maW5kKC4uLmFyZ3MpO1xuXHR9XG5cblx0ZmluZE9uZSguLi5hcmdzKSB7XG5cdFx0dGhpcy5fZG9Ob3RNaXhJbmNsdXNpb25BbmRFeGNsdXNpb25GaWVsZHMoYXJnc1sxXSk7XG5cdFx0cmV0dXJuIHRoaXMubW9kZWwuZmluZE9uZSguLi5hcmdzKTtcblx0fVxuXG5cdGZpbmRPbmVCeUlkKF9pZCwgb3B0aW9ucykge1xuXHRcdHJldHVybiB0aGlzLmZpbmRPbmUoeyBfaWQgfSwgb3B0aW9ucyk7XG5cdH1cblxuXHRmaW5kT25lQnlJZHMoaWRzLCBvcHRpb25zKSB7XG5cdFx0cmV0dXJuIHRoaXMuZmluZE9uZSh7IF9pZDogeyAkaW46IGlkcyB9IH0sIG9wdGlvbnMpO1xuXHR9XG5cblx0dXBkYXRlSGFzUG9zaXRpb25hbE9wZXJhdG9yKHVwZGF0ZSkge1xuXHRcdHJldHVybiBPYmplY3Qua2V5cyh1cGRhdGUpLnNvbWUoKGtleSkgPT4ga2V5LmluY2x1ZGVzKCcuJCcpIHx8IChNYXRjaC50ZXN0KHVwZGF0ZVtrZXldLCBPYmplY3QpICYmIHRoaXMudXBkYXRlSGFzUG9zaXRpb25hbE9wZXJhdG9yKHVwZGF0ZVtrZXldKSkpO1xuXHR9XG5cblx0cHJvY2Vzc09wbG9nUmVjb3JkKGFjdGlvbikge1xuXHRcdGlmIChpc09wbG9nRW5hYmxlZCA9PT0gZmFsc2UpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoYWN0aW9uLm9wLm9wID09PSAnaScpIHtcblx0XHRcdHRoaXMuZW1pdCgnY2hhbmdlJywge1xuXHRcdFx0XHRhY3Rpb246ICdpbnNlcnQnLFxuXHRcdFx0XHRjbGllbnRBY3Rpb246ICdpbnNlcnRlZCcsXG5cdFx0XHRcdGlkOiBhY3Rpb24ub3Auby5faWQsXG5cdFx0XHRcdGRhdGE6IGFjdGlvbi5vcC5vLFxuXHRcdFx0XHRvcGxvZzogdHJ1ZSxcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmIChhY3Rpb24ub3Aub3AgPT09ICd1Jykge1xuXHRcdFx0aWYgKCFhY3Rpb24ub3Auby4kc2V0ICYmICFhY3Rpb24ub3Auby4kdW5zZXQpIHtcblx0XHRcdFx0dGhpcy5lbWl0KCdjaGFuZ2UnLCB7XG5cdFx0XHRcdFx0YWN0aW9uOiAndXBkYXRlJyxcblx0XHRcdFx0XHRjbGllbnRBY3Rpb246ICd1cGRhdGVkJyxcblx0XHRcdFx0XHRpZDogYWN0aW9uLmlkLFxuXHRcdFx0XHRcdGRhdGE6IGFjdGlvbi5vcC5vLFxuXHRcdFx0XHRcdG9wbG9nOiB0cnVlLFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBkaWZmID0ge307XG5cdFx0XHRpZiAoYWN0aW9uLm9wLm8uJHNldCkge1xuXHRcdFx0XHRmb3IgKGNvbnN0IGtleSBpbiBhY3Rpb24ub3Auby4kc2V0KSB7XG5cdFx0XHRcdFx0aWYgKGFjdGlvbi5vcC5vLiRzZXQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0XHRcdFx0ZGlmZltrZXldID0gYWN0aW9uLm9wLm8uJHNldFtrZXldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYWN0aW9uLm9wLm8uJHVuc2V0KSB7XG5cdFx0XHRcdGZvciAoY29uc3Qga2V5IGluIGFjdGlvbi5vcC5vLiR1bnNldCkge1xuXHRcdFx0XHRcdGlmIChhY3Rpb24ub3Auby4kdW5zZXQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0XHRcdFx0ZGlmZltrZXldID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmVtaXQoJ2NoYW5nZScsIHtcblx0XHRcdFx0YWN0aW9uOiAndXBkYXRlJyxcblx0XHRcdFx0Y2xpZW50QWN0aW9uOiAndXBkYXRlZCcsXG5cdFx0XHRcdGlkOiBhY3Rpb24uaWQsXG5cdFx0XHRcdGRpZmYsXG5cdFx0XHRcdG9wbG9nOiB0cnVlLFxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGFjdGlvbi5vcC5vcCA9PT0gJ2QnKSB7XG5cdFx0XHR0aGlzLmVtaXQoJ2NoYW5nZScsIHtcblx0XHRcdFx0YWN0aW9uOiAncmVtb3ZlJyxcblx0XHRcdFx0Y2xpZW50QWN0aW9uOiAncmVtb3ZlZCcsXG5cdFx0XHRcdGlkOiBhY3Rpb24uaWQsXG5cdFx0XHRcdG9wbG9nOiB0cnVlLFxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHR9XG5cblx0aW5zZXJ0KHJlY29yZCwgLi4uYXJncykge1xuXHRcdHRoaXMuc2V0VXBkYXRlZEF0KHJlY29yZCk7XG5cblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLm9yaWdpbmFscy5pbnNlcnQocmVjb3JkLCAuLi5hcmdzKTtcblxuXHRcdHJlY29yZC5faWQgPSByZXN1bHQ7XG5cblx0XHRpZiAoIWlzT3Bsb2dFbmFibGVkICYmIHRoaXMubGlzdGVuZXJDb3VudCgnY2hhbmdlJykgPiAwKSB7XG5cdFx0XHR0aGlzLmVtaXQoJ2NoYW5nZScsIHtcblx0XHRcdFx0YWN0aW9uOiAnaW5zZXJ0Jyxcblx0XHRcdFx0Y2xpZW50QWN0aW9uOiAnaW5zZXJ0ZWQnLFxuXHRcdFx0XHRpZDogcmVzdWx0LFxuXHRcdFx0XHRkYXRhOiBfLmV4dGVuZCh7fSwgcmVjb3JkKSxcblx0XHRcdFx0b3Bsb2c6IGZhbHNlLFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHVwZGF0ZShxdWVyeSwgdXBkYXRlLCBvcHRpb25zID0ge30pIHtcblx0XHR0aGlzLnNldFVwZGF0ZWRBdCh1cGRhdGUsIHRydWUsIHF1ZXJ5KTtcblxuXHRcdGxldCBpZHMgPSBbXTtcblx0XHRpZiAoIWlzT3Bsb2dFbmFibGVkICYmIHRoaXMubGlzdGVuZXJDb3VudCgnY2hhbmdlJykgPiAwKSB7XG5cdFx0XHRjb25zdCBmaW5kT3B0aW9ucyA9IHsgZmllbGRzOiB7IF9pZDogMSB9IH07XG5cdFx0XHRsZXQgcmVjb3JkcyA9IG9wdGlvbnMubXVsdGkgPyB0aGlzLmZpbmQocXVlcnksIGZpbmRPcHRpb25zKS5mZXRjaCgpIDogdGhpcy5maW5kT25lKHF1ZXJ5LCBmaW5kT3B0aW9ucykgfHwgW107XG5cdFx0XHRpZiAoIUFycmF5LmlzQXJyYXkocmVjb3JkcykpIHtcblx0XHRcdFx0cmVjb3JkcyA9IFtyZWNvcmRzXTtcblx0XHRcdH1cblxuXHRcdFx0aWRzID0gcmVjb3Jkcy5tYXAoKGl0ZW0pID0+IGl0ZW0uX2lkKTtcblx0XHRcdGlmIChvcHRpb25zLnVwc2VydCAhPT0gdHJ1ZSAmJiB0aGlzLnVwZGF0ZUhhc1Bvc2l0aW9uYWxPcGVyYXRvcih1cGRhdGUpID09PSBmYWxzZSkge1xuXHRcdFx0XHRxdWVyeSA9IHtcblx0XHRcdFx0XHRfaWQ6IHtcblx0XHRcdFx0XHRcdCRpbjogaWRzLFxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gVE9ETzogQ0FDSEU6IENhbiB3ZSB1c2UgZmluZEFuZE1vZGlmeSBoZXJlIHdoZW4gb3Bsb2cgaXMgZGlzYWJsZWQ/XG5cdFx0Y29uc3QgcmVzdWx0ID0gdGhpcy5vcmlnaW5hbHMudXBkYXRlKHF1ZXJ5LCB1cGRhdGUsIG9wdGlvbnMpO1xuXG5cdFx0aWYgKCFpc09wbG9nRW5hYmxlZCAmJiB0aGlzLmxpc3RlbmVyQ291bnQoJ2NoYW5nZScpID4gMCkge1xuXHRcdFx0aWYgKG9wdGlvbnMudXBzZXJ0ID09PSB0cnVlICYmIHJlc3VsdC5pbnNlcnRlZElkKSB7XG5cdFx0XHRcdHRoaXMuZW1pdCgnY2hhbmdlJywge1xuXHRcdFx0XHRcdGFjdGlvbjogJ2luc2VydCcsXG5cdFx0XHRcdFx0Y2xpZW50QWN0aW9uOiAnaW5zZXJ0ZWQnLFxuXHRcdFx0XHRcdGlkOiByZXN1bHQuaW5zZXJ0ZWRJZCxcblx0XHRcdFx0XHRvcGxvZzogZmFsc2UsXG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoY29uc3QgaWQgb2YgaWRzKSB7XG5cdFx0XHRcdHRoaXMuZW1pdCgnY2hhbmdlJywge1xuXHRcdFx0XHRcdGFjdGlvbjogJ3VwZGF0ZScsXG5cdFx0XHRcdFx0Y2xpZW50QWN0aW9uOiAndXBkYXRlZCcsXG5cdFx0XHRcdFx0aWQsXG5cdFx0XHRcdFx0b3Bsb2c6IGZhbHNlLFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9XG5cblx0dXBzZXJ0KHF1ZXJ5LCB1cGRhdGUsIG9wdGlvbnMgPSB7fSkge1xuXHRcdG9wdGlvbnMudXBzZXJ0ID0gdHJ1ZTtcblx0XHRvcHRpb25zLl9yZXR1cm5PYmplY3QgPSB0cnVlO1xuXHRcdHJldHVybiB0aGlzLnVwZGF0ZShxdWVyeSwgdXBkYXRlLCBvcHRpb25zKTtcblx0fVxuXG5cdHJlbW92ZShxdWVyeSkge1xuXHRcdGNvbnN0IHJlY29yZHMgPSB0aGlzLm1vZGVsLmZpbmQocXVlcnkpLmZldGNoKCk7XG5cblx0XHRjb25zdCBpZHMgPSBbXTtcblx0XHRmb3IgKGNvbnN0IHJlY29yZCBvZiByZWNvcmRzKSB7XG5cdFx0XHRpZHMucHVzaChyZWNvcmQuX2lkKTtcblxuXHRcdFx0cmVjb3JkLl9kZWxldGVkQXQgPSBuZXcgRGF0ZTtcblx0XHRcdHJlY29yZC5fX2NvbGxlY3Rpb25fXyA9IHRoaXMubmFtZTtcblxuXHRcdFx0dHJhc2gudXBzZXJ0KHsgX2lkOiByZWNvcmQuX2lkIH0sIF8ub21pdChyZWNvcmQsICdfaWQnKSk7XG5cdFx0fVxuXG5cdFx0cXVlcnkgPSB7IF9pZDogeyAkaW46IGlkcyB9IH07XG5cblx0XHRjb25zdCByZXN1bHQgPSB0aGlzLm9yaWdpbmFscy5yZW1vdmUocXVlcnkpO1xuXG5cdFx0aWYgKCFpc09wbG9nRW5hYmxlZCAmJiB0aGlzLmxpc3RlbmVyQ291bnQoJ2NoYW5nZScpID4gMCkge1xuXHRcdFx0Zm9yIChjb25zdCByZWNvcmQgb2YgcmVjb3Jkcykge1xuXHRcdFx0XHR0aGlzLmVtaXQoJ2NoYW5nZScsIHtcblx0XHRcdFx0XHRhY3Rpb246ICdyZW1vdmUnLFxuXHRcdFx0XHRcdGNsaWVudEFjdGlvbjogJ3JlbW92ZWQnLFxuXHRcdFx0XHRcdGlkOiByZWNvcmQuX2lkLFxuXHRcdFx0XHRcdGRhdGE6IF8uZXh0ZW5kKHt9LCByZWNvcmQpLFxuXHRcdFx0XHRcdG9wbG9nOiBmYWxzZSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdGluc2VydE9yVXBzZXJ0KC4uLmFyZ3MpIHtcblx0XHRpZiAoYXJnc1swXSAmJiBhcmdzWzBdLl9pZCkge1xuXHRcdFx0Y29uc3QgeyBfaWQgfSA9IGFyZ3NbMF07XG5cdFx0XHRkZWxldGUgYXJnc1swXS5faWQ7XG5cdFx0XHRhcmdzLnVuc2hpZnQoe1xuXHRcdFx0XHRfaWQsXG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy51cHNlcnQoLi4uYXJncyk7XG5cdFx0XHRyZXR1cm4gX2lkO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5pbnNlcnQoLi4uYXJncyk7XG5cdFx0fVxuXHR9XG5cblx0YWxsb3coLi4uYXJncykge1xuXHRcdHJldHVybiB0aGlzLm1vZGVsLmFsbG93KC4uLmFyZ3MpO1xuXHR9XG5cblx0ZGVueSguLi5hcmdzKSB7XG5cdFx0cmV0dXJuIHRoaXMubW9kZWwuZGVueSguLi5hcmdzKTtcblx0fVxuXG5cdGVuc3VyZUluZGV4KC4uLmFyZ3MpIHtcblx0XHRyZXR1cm4gdGhpcy5tb2RlbC5fZW5zdXJlSW5kZXgoLi4uYXJncyk7XG5cdH1cblxuXHRkcm9wSW5kZXgoLi4uYXJncykge1xuXHRcdHJldHVybiB0aGlzLm1vZGVsLl9kcm9wSW5kZXgoLi4uYXJncyk7XG5cdH1cblxuXHR0cnlFbnN1cmVJbmRleCguLi5hcmdzKSB7XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiB0aGlzLmVuc3VyZUluZGV4KC4uLmFyZ3MpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNyZWF0aW5nIGluZGV4OicsIHRoaXMubmFtZSwgJy0+JywgLi4uYXJncywgZSk7XG5cdFx0fVxuXHR9XG5cblx0dHJ5RHJvcEluZGV4KC4uLmFyZ3MpIHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZHJvcEluZGV4KC4uLmFyZ3MpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRyb3BwaW5nIGluZGV4OicsIHRoaXMubmFtZSwgJy0+JywgLi4uYXJncywgZSk7XG5cdFx0fVxuXHR9XG5cblx0dHJhc2hGaW5kKHF1ZXJ5LCBvcHRpb25zKSB7XG5cdFx0cXVlcnkuX19jb2xsZWN0aW9uX18gPSB0aGlzLm5hbWU7XG5cblx0XHRyZXR1cm4gdHJhc2guZmluZChxdWVyeSwgb3B0aW9ucyk7XG5cdH1cblxuXHR0cmFzaEZpbmRPbmVCeUlkKF9pZCwgb3B0aW9ucykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0ge1xuXHRcdFx0X2lkLFxuXHRcdFx0X19jb2xsZWN0aW9uX186IHRoaXMubmFtZSxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRyYXNoLmZpbmRPbmUocXVlcnksIG9wdGlvbnMpO1xuXHR9XG5cblx0dHJhc2hGaW5kRGVsZXRlZEFmdGVyKGRlbGV0ZWRBdCwgcXVlcnkgPSB7fSwgb3B0aW9ucykge1xuXHRcdHF1ZXJ5Ll9fY29sbGVjdGlvbl9fID0gdGhpcy5uYW1lO1xuXHRcdHF1ZXJ5Ll9kZWxldGVkQXQgPSB7XG5cdFx0XHQkZ3Q6IGRlbGV0ZWRBdCxcblx0XHR9O1xuXG5cdFx0cmV0dXJuIHRyYXNoLmZpbmQocXVlcnksIG9wdGlvbnMpO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1vZGVsc0Jhc2VEYjtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5jb25zdCBBY2Nlc3NUb2tlblNlcnZpY2VzID0ge307XG5cblJvY2tldENoYXQucmVnaXN0ZXJBY2Nlc3NUb2tlblNlcnZpY2UgPSBmdW5jdGlvbihzZXJ2aWNlTmFtZSwgaGFuZGxlQWNjZXNzVG9rZW5SZXF1ZXN0KSB7XG5cdEFjY2Vzc1Rva2VuU2VydmljZXNbc2VydmljZU5hbWVdID0ge1xuXHRcdHNlcnZpY2VOYW1lLFxuXHRcdGhhbmRsZUFjY2Vzc1Rva2VuUmVxdWVzdCxcblx0fTtcbn07XG5cbi8vIExpc3RlbiB0byBjYWxscyB0byBgbG9naW5gIHdpdGggYW4gb2F1dGggb3B0aW9uIHNldC4gVGhpcyBpcyB3aGVyZVxuLy8gdXNlcnMgYWN0dWFsbHkgZ2V0IGxvZ2dlZCBpbiB0byBtZXRlb3IgdmlhIG9hdXRoLlxuQWNjb3VudHMucmVnaXN0ZXJMb2dpbkhhbmRsZXIoZnVuY3Rpb24ob3B0aW9ucykge1xuXHRpZiAoIW9wdGlvbnMuYWNjZXNzVG9rZW4pIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkOyAvLyBkb24ndCBoYW5kbGVcblx0fVxuXG5cdGNoZWNrKG9wdGlvbnMsIE1hdGNoLk9iamVjdEluY2x1ZGluZyh7XG5cdFx0c2VydmljZU5hbWU6IFN0cmluZyxcblx0fSkpO1xuXG5cdGNvbnN0IHNlcnZpY2UgPSBBY2Nlc3NUb2tlblNlcnZpY2VzW29wdGlvbnMuc2VydmljZU5hbWVdO1xuXG5cdC8vIFNraXAgZXZlcnl0aGluZyBpZiB0aGVyZSdzIG5vIHNlcnZpY2Ugc2V0IGJ5IHRoZSBvYXV0aCBtaWRkbGV3YXJlXG5cdGlmICghc2VydmljZSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBBY2Nlc3NUb2tlbiBzZXJ2aWNlICR7IG9wdGlvbnMuc2VydmljZU5hbWUgfWApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHdlJ3JlIGNvbmZpZ3VyZWRcblx0aWYgKCFTZXJ2aWNlQ29uZmlndXJhdGlvbi5jb25maWd1cmF0aW9ucy5maW5kT25lKHsgc2VydmljZTogc2VydmljZS5zZXJ2aWNlTmFtZSB9KSkge1xuXHRcdHRocm93IG5ldyBTZXJ2aWNlQ29uZmlndXJhdGlvbi5Db25maWdFcnJvcigpO1xuXHR9XG5cblx0aWYgKCFfLmNvbnRhaW5zKEFjY291bnRzLm9hdXRoLnNlcnZpY2VOYW1lcygpLCBzZXJ2aWNlLnNlcnZpY2VOYW1lKSkge1xuXHRcdC8vIHNlcnZpY2VOYW1lIHdhcyBub3QgZm91bmQgaW4gdGhlIHJlZ2lzdGVyZWQgc2VydmljZXMgbGlzdC5cblx0XHQvLyBUaGlzIGNvdWxkIGhhcHBlbiBiZWNhdXNlIHRoZSBzZXJ2aWNlIG5ldmVyIHJlZ2lzdGVyZWQgaXRzZWxmIG9yXG5cdFx0Ly8gdW5yZWdpc3RlclNlcnZpY2Ugd2FzIGNhbGxlZCBvbiBpdC5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogJ29hdXRoJyxcblx0XHRcdGVycm9yOiBuZXcgTWV0ZW9yLkVycm9yKFxuXHRcdFx0XHRBY2NvdW50cy5Mb2dpbkNhbmNlbGxlZEVycm9yLm51bWVyaWNFcnJvcixcblx0XHRcdFx0YE5vIHJlZ2lzdGVyZWQgb2F1dGggc2VydmljZSBmb3VuZCBmb3I6ICR7IHNlcnZpY2Uuc2VydmljZU5hbWUgfWBcblx0XHRcdCksXG5cdFx0fTtcblx0fVxuXG5cdGNvbnN0IG9hdXRoUmVzdWx0ID0gc2VydmljZS5oYW5kbGVBY2Nlc3NUb2tlblJlcXVlc3Qob3B0aW9ucyk7XG5cblx0cmV0dXJuIEFjY291bnRzLnVwZGF0ZU9yQ3JlYXRlVXNlckZyb21FeHRlcm5hbFNlcnZpY2Uoc2VydmljZS5zZXJ2aWNlTmFtZSwgb2F1dGhSZXN1bHQuc2VydmljZURhdGEsIG9hdXRoUmVzdWx0Lm9wdGlvbnMpO1xufSk7XG5cblxuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgeyBPQXV0aCB9IGZyb20gJ21ldGVvci9vYXV0aCc7XG5jb25zdCBjcnlwdG8gPSBOcG0ucmVxdWlyZSgnY3J5cHRvJyk7XG5jb25zdCB3aGl0ZWxpc3RlZCA9IFtcblx0J2lkJyxcblx0J2VtYWlsJyxcblx0J25hbWUnLFxuXHQnZmlyc3RfbmFtZScsXG5cdCdsYXN0X25hbWUnLFxuXHQnbGluaycsXG5cdCdnZW5kZXInLFxuXHQnbG9jYWxlJyxcblx0J2FnZV9yYW5nZSddO1xuXG5jb25zdCBGQl9BUElfVkVSU0lPTiA9ICd2Mi45JztcbmNvbnN0IEZCX1VSTCA9ICdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbSc7XG5cbmNvbnN0IGdldElkZW50aXR5ID0gZnVuY3Rpb24oYWNjZXNzVG9rZW4sIGZpZWxkcywgc2VjcmV0KSB7XG5cdGNvbnN0IGhtYWMgPSBjcnlwdG8uY3JlYXRlSG1hYygnc2hhMjU2JywgT0F1dGgub3BlblNlY3JldChzZWNyZXQpKTtcblx0aG1hYy51cGRhdGUoYWNjZXNzVG9rZW4pO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuIEhUVFAuZ2V0KGAkeyBGQl9VUkwgfS8keyBGQl9BUElfVkVSU0lPTiB9L21lYCwge1xuXHRcdFx0cGFyYW1zOiB7XG5cdFx0XHRcdGFjY2Vzc190b2tlbjogYWNjZXNzVG9rZW4sXG5cdFx0XHRcdGFwcHNlY3JldF9wcm9vZjogaG1hYy5kaWdlc3QoJ2hleCcpLFxuXHRcdFx0XHRmaWVsZHM6IGZpZWxkcy5qb2luKCcsJyksXG5cdFx0XHR9LFxuXHRcdH0pLmRhdGE7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHRocm93IF8uZXh0ZW5kKG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIGlkZW50aXR5IGZyb20gRmFjZWJvb2suICR7IGVyci5tZXNzYWdlIH1gKSxcblx0XHRcdHsgcmVzcG9uc2U6IGVyci5yZXNwb25zZSB9KTtcblx0fVxufTtcblxuUm9ja2V0Q2hhdC5yZWdpc3RlckFjY2Vzc1Rva2VuU2VydmljZSgnZmFjZWJvb2snLCBmdW5jdGlvbihvcHRpb25zKSB7XG5cdGNoZWNrKG9wdGlvbnMsIE1hdGNoLk9iamVjdEluY2x1ZGluZyh7XG5cdFx0YWNjZXNzVG9rZW46IFN0cmluZyxcblx0XHRzZWNyZXQ6IFN0cmluZyxcblx0XHRleHBpcmVzSW46IE1hdGNoLkludGVnZXIsXG5cdFx0aWRlbnRpdHk6IE1hdGNoLk1heWJlKE9iamVjdCksXG5cdH0pKTtcblxuXHRjb25zdCBpZGVudGl0eSA9IG9wdGlvbnMuaWRlbnRpdHkgfHwgZ2V0SWRlbnRpdHkob3B0aW9ucy5hY2Nlc3NUb2tlbiwgd2hpdGVsaXN0ZWQsIG9wdGlvbnMuc2VjcmV0KTtcblxuXHRjb25zdCBzZXJ2aWNlRGF0YSA9IHtcblx0XHRhY2Nlc3NUb2tlbjogb3B0aW9ucy5hY2Nlc3NUb2tlbixcblx0XHRleHBpcmVzQXQ6ICgrbmV3IERhdGUpICsgKDEwMDAgKiBwYXJzZUludChvcHRpb25zLmV4cGlyZXNJbiwgMTApKSxcblx0fTtcblxuXHRjb25zdCBmaWVsZHMgPSBfLnBpY2soaWRlbnRpdHksIHdoaXRlbGlzdGVkKTtcblx0Xy5leHRlbmQoc2VydmljZURhdGEsIGZpZWxkcyk7XG5cblx0cmV0dXJuIHtcblx0XHRzZXJ2aWNlRGF0YSxcblx0XHRvcHRpb25zOiB7XG5cdFx0XHRwcm9maWxlOiB7XG5cdFx0XHRcdG5hbWU6IGlkZW50aXR5Lm5hbWUsXG5cdFx0XHR9LFxuXHRcdH0sXG5cdH07XG59KTtcblxuIiwiaW1wb3J0IFR3aXQgZnJvbSAndHdpdCc7XG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuY29uc3Qgd2hpdGVsaXN0ZWRGaWVsZHMgPSBbXG5cdCdpZCcsXG5cdCduYW1lJyxcblx0J2Rlc2NyaXB0aW9uJyxcblx0J3Byb2ZpbGVfaW1hZ2VfdXJsJyxcblx0J3Byb2ZpbGVfaW1hZ2VfdXJsX2h0dHBzJyxcblx0J2xhbmcnLFxuXHQnZW1haWwnLFxuXTtcblxuY29uc3QgZ2V0SWRlbnRpdHkgPSBmdW5jdGlvbihhY2Nlc3NUb2tlbiwgYXBwSWQsIGFwcFNlY3JldCwgYWNjZXNzVG9rZW5TZWNyZXQpIHtcblx0Y29uc3QgVHdpdHRlciA9IG5ldyBUd2l0KHtcblx0XHRjb25zdW1lcl9rZXk6IGFwcElkLFxuXHRcdGNvbnN1bWVyX3NlY3JldDogYXBwU2VjcmV0LFxuXHRcdGFjY2Vzc190b2tlbjogYWNjZXNzVG9rZW4sXG5cdFx0YWNjZXNzX3Rva2VuX3NlY3JldDogYWNjZXNzVG9rZW5TZWNyZXQsXG5cdH0pO1xuXHRjb25zdCBzeW5jVHdpdHRlciA9IE1ldGVvci53cmFwQXN5bmMoVHdpdHRlci5nZXQsIFR3aXR0ZXIpO1xuXHR0cnkge1xuXHRcdHJldHVybiBzeW5jVHdpdHRlcignYWNjb3VudC92ZXJpZnlfY3JlZGVudGlhbHMuanNvbj9pbmNsdWRlX2VtYWlsPXRydWUnKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0dGhyb3cgXy5leHRlbmQobmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggaWRlbnRpdHkgZnJvbSBUd3dpdGVyLiAkeyBlcnIubWVzc2FnZSB9YCksXG5cdFx0XHR7IHJlc3BvbnNlOiBlcnIucmVzcG9uc2UgfSk7XG5cdH1cbn07XG5cblJvY2tldENoYXQucmVnaXN0ZXJBY2Nlc3NUb2tlblNlcnZpY2UoJ3R3aXR0ZXInLCBmdW5jdGlvbihvcHRpb25zKSB7XG5cdGNoZWNrKG9wdGlvbnMsIE1hdGNoLk9iamVjdEluY2x1ZGluZyh7XG5cdFx0YWNjZXNzVG9rZW46IFN0cmluZyxcblx0XHRhcHBTZWNyZXQ6IFN0cmluZyxcblx0XHRhcHBJZDogU3RyaW5nLFxuXHRcdGFjY2Vzc1Rva2VuU2VjcmV0OiBTdHJpbmcsXG5cdFx0ZXhwaXJlc0luOiBNYXRjaC5JbnRlZ2VyLFxuXHRcdGlkZW50aXR5OiBNYXRjaC5NYXliZShPYmplY3QpLFxuXHR9KSk7XG5cblx0Y29uc3QgaWRlbnRpdHkgPSBvcHRpb25zLmlkZW50aXR5IHx8IGdldElkZW50aXR5KG9wdGlvbnMuYWNjZXNzVG9rZW4sIG9wdGlvbnMuYXBwSWQsIG9wdGlvbnMuYXBwU2VjcmV0LCBvcHRpb25zLmFjY2Vzc1Rva2VuU2VjcmV0KTtcblxuXHRjb25zdCBzZXJ2aWNlRGF0YSA9IHtcblx0XHRhY2Nlc3NUb2tlbjogb3B0aW9ucy5hY2Nlc3NUb2tlbixcblx0XHRleHBpcmVzQXQ6ICgrbmV3IERhdGUpICsgKDEwMDAgKiBwYXJzZUludChvcHRpb25zLmV4cGlyZXNJbiwgMTApKSxcblx0fTtcblxuXHRjb25zdCBmaWVsZHMgPSBfLnBpY2soaWRlbnRpdHksIHdoaXRlbGlzdGVkRmllbGRzKTtcblx0Xy5leHRlbmQoc2VydmljZURhdGEsIGZpZWxkcyk7XG5cblx0cmV0dXJuIHtcblx0XHRzZXJ2aWNlRGF0YSxcblx0XHRvcHRpb25zOiB7XG5cdFx0XHRwcm9maWxlOiB7XG5cdFx0XHRcdG5hbWU6IGlkZW50aXR5Lm5hbWUsXG5cdFx0XHR9LFxuXHRcdH0sXG5cdH07XG59KTtcbiIsIi8qIGdsb2JhbHMgR29vZ2xlICovXG5pbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuZnVuY3Rpb24gZ2V0SWRlbnRpdHkoYWNjZXNzVG9rZW4pIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSFRUUC5nZXQoXG5cdFx0XHQnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL3VzZXJpbmZvJyxcblx0XHRcdHsgcGFyYW1zOiB7IGFjY2Vzc190b2tlbjogYWNjZXNzVG9rZW4gfSB9KS5kYXRhO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHR0aHJvdyBfLmV4dGVuZChuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBpZGVudGl0eSBmcm9tIEdvb2dsZS4gJHsgZXJyLm1lc3NhZ2UgfWApLCB7IHJlc3BvbnNlOiBlcnIucmVzcG9uc2UgfSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gZ2V0U2NvcGVzKGFjY2Vzc1Rva2VuKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIEhUVFAuZ2V0KFxuXHRcdFx0J2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS90b2tlbmluZm8nLFxuXHRcdFx0eyBwYXJhbXM6IHsgYWNjZXNzX3Rva2VuOiBhY2Nlc3NUb2tlbiB9IH0pLmRhdGEuc2NvcGUuc3BsaXQoJyAnKTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0dGhyb3cgXy5leHRlbmQobmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggdG9rZW5pbmZvIGZyb20gR29vZ2xlLiAkeyBlcnIubWVzc2FnZSB9YCksIHsgcmVzcG9uc2U6IGVyci5yZXNwb25zZSB9KTtcblx0fVxufVxuXG5cblJvY2tldENoYXQucmVnaXN0ZXJBY2Nlc3NUb2tlblNlcnZpY2UoJ2dvb2dsZScsIGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0Y2hlY2sob3B0aW9ucywgTWF0Y2guT2JqZWN0SW5jbHVkaW5nKHtcblx0XHRhY2Nlc3NUb2tlbjogU3RyaW5nLFxuXHRcdGlkVG9rZW46IFN0cmluZyxcblx0XHRleHBpcmVzSW46IE1hdGNoLkludGVnZXIsXG5cdFx0c2NvcGU6IE1hdGNoLk1heWJlKFN0cmluZyksXG5cdFx0aWRlbnRpdHk6IE1hdGNoLk1heWJlKE9iamVjdCksXG5cdH0pKTtcblxuXHRjb25zdCBpZGVudGl0eSA9IG9wdGlvbnMuaWRlbnRpdHkgfHwgZ2V0SWRlbnRpdHkob3B0aW9ucy5hY2Nlc3NUb2tlbik7XG5cblx0Y29uc3Qgc2VydmljZURhdGEgPSB7XG5cdFx0YWNjZXNzVG9rZW46IG9wdGlvbnMuYWNjZXNzVG9rZW4sXG5cdFx0aWRUb2tlbjogb3B0aW9ucy5pZFRva2VuLFxuXHRcdGV4cGlyZXNBdDogKCtuZXcgRGF0ZSkgKyAoMTAwMCAqIHBhcnNlSW50KG9wdGlvbnMuZXhwaXJlc0luLCAxMCkpLFxuXHRcdHNjb3BlOiBvcHRpb25zLnNjb3BlcyB8fCBnZXRTY29wZXMob3B0aW9ucy5hY2Nlc3NUb2tlbiksXG5cdH07XG5cblx0Y29uc3QgZmllbGRzID0gXy5waWNrKGlkZW50aXR5LCBHb29nbGUud2hpdGVsaXN0ZWRGaWVsZHMpO1xuXHRfLmV4dGVuZChzZXJ2aWNlRGF0YSwgZmllbGRzKTtcblxuXHQvLyBvbmx5IHNldCB0aGUgdG9rZW4gaW4gc2VydmljZURhdGEgaWYgaXQncyB0aGVyZS4gdGhpcyBlbnN1cmVzXG5cdC8vIHRoYXQgd2UgZG9uJ3QgbG9zZSBvbGQgb25lcyAoc2luY2Ugd2Ugb25seSBnZXQgdGhpcyBvbiB0aGUgZmlyc3Rcblx0Ly8gbG9nIGluIGF0dGVtcHQpXG5cdGlmIChvcHRpb25zLnJlZnJlc2hUb2tlbikge1xuXHRcdHNlcnZpY2VEYXRhLnJlZnJlc2hUb2tlbiA9IG9wdGlvbnMucmVmcmVzaFRva2VuO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRzZXJ2aWNlRGF0YSxcblx0XHRvcHRpb25zOiB7XG5cdFx0XHRwcm9maWxlOiB7XG5cdFx0XHRcdG5hbWU6IGlkZW50aXR5Lm5hbWUsXG5cdFx0XHR9LFxuXHRcdH0sXG5cdH07XG59KTtcbiIsIi8qIGdsb2JhbHMgT0F1dGggKi9cbmltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5PQXV0aC5fcmVkaXJlY3RVcmkgPSBfLndyYXAoT0F1dGguX3JlZGlyZWN0VXJpLCBmdW5jdGlvbihmdW5jLCBzZXJ2aWNlTmFtZSwgLi4uYXJncykge1xuXHRjb25zdCBwcm94eSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19PQXV0aF9Qcm94eV9zZXJ2aWNlcycpLnJlcGxhY2UoL1xccy9nLCAnJykuc3BsaXQoJywnKTtcblx0aWYgKHByb3h5LmluY2x1ZGVzKHNlcnZpY2VOYW1lKSkge1xuXHRcdHJldHVybiBgJHsgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX09BdXRoX1Byb3h5X2hvc3QnKSB9L29hdXRoX3JlZGlyZWN0YDtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gZnVuYyhzZXJ2aWNlTmFtZSwgLi4uYXJncyk7XG5cdH1cblxufSk7XG4iLCJpbXBvcnQgeyBTdGF0c0QgfSBmcm9tICdub2RlLWRvZ3N0YXRzZCc7XG5cblJvY2tldENoYXQuc3RhdHNUcmFja2VyID0gbmV3IChjbGFzcyBTdGF0c1RyYWNrZXIge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHR0aGlzLlN0YXRzRCA9IFN0YXRzRDtcblx0XHR0aGlzLmRvZ3N0YXRzZCA9IG5ldyB0aGlzLlN0YXRzRCgpO1xuXHR9XG5cblx0dHJhY2sodHlwZSwgc3RhdHMsIC4uLmFyZ3MpIHtcblx0XHR0aGlzLmRvZ3N0YXRzZFt0eXBlXShgUm9ja2V0Q2hhdC4keyBzdGF0cyB9YCwgLi4uYXJncyk7XG5cdH1cblxuXHRub3coKSB7XG5cdFx0Y29uc3QgaHJ0aW1lID0gcHJvY2Vzcy5ocnRpbWUoKTtcblx0XHRyZXR1cm4gKGhydGltZVswXSAqIDEwMDAwMDAgKyBocnRpbWVbMV0gLyAxMDAwKTtcblx0fVxuXG5cdHRpbWluZyhzdGF0cywgdGltZSwgdGFncykge1xuXHRcdHRoaXMudHJhY2soJ3RpbWluZycsIHN0YXRzLCB0aW1lLCB0YWdzKTtcblx0fVxuXG5cdGluY3JlbWVudChzdGF0cywgdGltZSwgdGFncykge1xuXHRcdHRoaXMudHJhY2soJ2luY3JlbWVudCcsIHN0YXRzLCB0aW1lLCB0YWdzKTtcblx0fVxuXG5cdGRlY3JlbWVudChzdGF0cywgdGltZSwgdGFncykge1xuXHRcdHRoaXMudHJhY2soJ2RlY3JlbWVudCcsIHN0YXRzLCB0aW1lLCB0YWdzKTtcblx0fVxuXG5cdGhpc3RvZ3JhbShzdGF0cywgdGltZSwgdGFncykge1xuXHRcdHRoaXMudHJhY2soJ2hpc3RvZ3JhbScsIHN0YXRzLCB0aW1lLCB0YWdzKTtcblx0fVxuXG5cdGdhdWdlKHN0YXRzLCB0aW1lLCB0YWdzKSB7XG5cdFx0dGhpcy50cmFjaygnZ2F1Z2UnLCBzdGF0cywgdGltZSwgdGFncyk7XG5cdH1cblxuXHR1bmlxdWUoc3RhdHMsIHRpbWUsIHRhZ3MpIHtcblx0XHR0aGlzLnRyYWNrKCd1bmlxdWUnLCBzdGF0cywgdGltZSwgdGFncyk7XG5cdH1cblxuXHRzZXQoc3RhdHMsIHRpbWUsIHRhZ3MpIHtcblx0XHR0aGlzLnRyYWNrKCdzZXQnLCBzdGF0cywgdGltZSwgdGFncyk7XG5cdH1cbn0pO1xuIiwiLyogZ2xvYmFscyBXZWJBcHBJbnRlcm5hbHMqL1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmZ1bmN0aW9uIHRlc3RXZWJBcHBJbnRlcm5hbHMoZm4pIHtcblx0dHlwZW9mIFdlYkFwcEludGVybmFscyAhPT0gJ3VuZGVmaW5lZCcgJiYgZm4oV2ViQXBwSW50ZXJuYWxzKTtcbn1cblJvY2tldENoYXQuc2V0dGluZ3Mub25sb2FkKCdDRE5fUFJFRklYJywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRjb25zdCB1c2VGb3JBbGwgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQ0ROX1BSRUZJWF9BTEwnKTtcblx0aWYgKF8uaXNTdHJpbmcodmFsdWUpICYmIHZhbHVlLnRyaW0oKSAmJiB1c2VGb3JBbGwpIHtcblx0XHRyZXR1cm4gdGVzdFdlYkFwcEludGVybmFscygoV2ViQXBwSW50ZXJuYWxzKSA9PiBXZWJBcHBJbnRlcm5hbHMuc2V0QnVuZGxlZEpzQ3NzUHJlZml4KHZhbHVlKSk7XG5cdH1cbn0pO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLm9ubG9hZCgnQ0ROX0pTQ1NTX1BSRUZJWCcsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0Y29uc3QgdXNlRm9yQWxsID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0NETl9QUkVGSVhfQUxMJyk7XG5cdGlmIChfLmlzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS50cmltKCkgJiYgIXVzZUZvckFsbCkge1xuXHRcdHJldHVybiB0ZXN0V2ViQXBwSW50ZXJuYWxzKChXZWJBcHBJbnRlcm5hbHMpID0+IFdlYkFwcEludGVybmFscy5zZXRCdW5kbGVkSnNDc3NQcmVmaXgodmFsdWUpKTtcblx0fVxufSk7XG5cbk1ldGVvci5zdGFydHVwKGZ1bmN0aW9uKCkge1xuXHRjb25zdCBjZG5WYWx1ZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdDRE5fUFJFRklYJyk7XG5cdGNvbnN0IHVzZUZvckFsbCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdDRE5fUFJFRklYX0FMTCcpO1xuXHRjb25zdCBjZG5Kc0NzcyA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdDRE5fSlNDU1NfUFJFRklYJyk7XG5cdGlmIChfLmlzU3RyaW5nKGNkblZhbHVlKSAmJiBjZG5WYWx1ZS50cmltKCkpIHtcblx0XHRpZiAodXNlRm9yQWxsKSB7XG5cdFx0XHRyZXR1cm4gdGVzdFdlYkFwcEludGVybmFscygoV2ViQXBwSW50ZXJuYWxzKSA9PiBXZWJBcHBJbnRlcm5hbHMuc2V0QnVuZGxlZEpzQ3NzUHJlZml4KGNkblZhbHVlKSk7XG5cdFx0fSBlbHNlIGlmIChfLmlzU3RyaW5nKGNkbkpzQ3NzKSAmJiBjZG5Kc0Nzcy50cmltKCkpIHtcblx0XHRcdHJldHVybiB0ZXN0V2ViQXBwSW50ZXJuYWxzKChXZWJBcHBJbnRlcm5hbHMpID0+IFdlYkFwcEludGVybmFscy5zZXRCdW5kbGVkSnNDc3NQcmVmaXgoY2RuSnNDc3MpKTtcblx0XHR9XG5cdH1cbn0pO1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgeyBJTUFQSW50ZXJjZXB0ZXIsIFBPUDNIZWxwZXIgfSBmcm9tICcuLi9saWIvaW50ZXJjZXB0RGlyZWN0UmVwbHlFbWFpbHMuanMnO1xuXG5jb25zdCBzdGFydEVtYWlsSW50ZXJjZXB0ZXIgPSBfLmRlYm91bmNlKE1ldGVvci5iaW5kRW52aXJvbm1lbnQoZnVuY3Rpb24oKSB7XG5cdGNvbnNvbGUubG9nKCdTdGFydGluZyBFbWFpbCBJbnRlcmNlcHRlci4uLicpO1xuXG5cdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X0VuYWJsZScpICYmIFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfUHJvdG9jb2wnKSAmJiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X0hvc3QnKSAmJiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X1BvcnQnKSAmJiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRGlyZWN0X1JlcGx5X1VzZXJuYW1lJykgJiYgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9QYXNzd29yZCcpKSB7XG5cdFx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdEaXJlY3RfUmVwbHlfUHJvdG9jb2wnKSA9PT0gJ0lNQVAnKSB7XG5cdFx0XHQvLyBzdG9wIGFscmVhZHkgcnVubmluZyBJTUFQIGluc3RhbmNlXG5cdFx0XHRpZiAoUm9ja2V0Q2hhdC5JTUFQICYmIFJvY2tldENoYXQuSU1BUC5pc0FjdGl2ZSgpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdEaXNjb25uZWN0aW5nIGFscmVhZHkgcnVubmluZyBJTUFQIGluc3RhbmNlLi4uJyk7XG5cdFx0XHRcdFJvY2tldENoYXQuSU1BUC5zdG9wKE1ldGVvci5iaW5kRW52aXJvbm1lbnQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ1N0YXJ0aW5nIG5ldyBJTUFQIGluc3RhbmNlLi4uLi4uJyk7XG5cdFx0XHRcdFx0Um9ja2V0Q2hhdC5JTUFQID0gbmV3IElNQVBJbnRlcmNlcHRlcigpO1xuXHRcdFx0XHRcdFJvY2tldENoYXQuSU1BUC5zdGFydCgpO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9KSk7XG5cdFx0XHR9IGVsc2UgaWYgKFJvY2tldENoYXQuUE9QMyAmJiBSb2NrZXRDaGF0LlBPUDNIZWxwZXIgJiYgUm9ja2V0Q2hhdC5QT1AzSGVscGVyLmlzQWN0aXZlKCkpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ0Rpc2Nvbm5lY3RpbmcgYWxyZWFkeSBydW5uaW5nIFBPUCBpbnN0YW5jZS4uLicpO1xuXHRcdFx0XHRSb2NrZXRDaGF0LlBPUDNIZWxwZXIuc3RvcChNZXRlb3IuYmluZEVudmlyb25tZW50KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdTdGFydGluZyBuZXcgSU1BUCBpbnN0YW5jZS4uLi4uLicpO1xuXHRcdFx0XHRcdFJvY2tldENoYXQuSU1BUCA9IG5ldyBJTUFQSW50ZXJjZXB0ZXIoKTtcblx0XHRcdFx0XHRSb2NrZXRDaGF0LklNQVAuc3RhcnQoKTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ1N0YXJ0aW5nIG5ldyBJTUFQIGluc3RhbmNlLi4uLi4uJyk7XG5cdFx0XHRcdFJvY2tldENoYXQuSU1BUCA9IG5ldyBJTUFQSW50ZXJjZXB0ZXIoKTtcblx0XHRcdFx0Um9ja2V0Q2hhdC5JTUFQLnN0YXJ0KCk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0RpcmVjdF9SZXBseV9Qcm90b2NvbCcpID09PSAnUE9QJykge1xuXHRcdFx0Ly8gc3RvcCBhbHJlYWR5IHJ1bm5pbmcgUE9QIGluc3RhbmNlXG5cdFx0XHRpZiAoUm9ja2V0Q2hhdC5QT1AzICYmIFJvY2tldENoYXQuUE9QM0hlbHBlciAmJiBSb2NrZXRDaGF0LlBPUDNIZWxwZXIuaXNBY3RpdmUoKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnRGlzY29ubmVjdGluZyBhbHJlYWR5IHJ1bm5pbmcgUE9QIGluc3RhbmNlLi4uJyk7XG5cdFx0XHRcdFJvY2tldENoYXQuUE9QM0hlbHBlci5zdG9wKE1ldGVvci5iaW5kRW52aXJvbm1lbnQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ1N0YXJ0aW5nIG5ldyBQT1AgaW5zdGFuY2UuLi4uLi4nKTtcblx0XHRcdFx0XHRSb2NrZXRDaGF0LlBPUDNIZWxwZXIgPSBuZXcgUE9QM0hlbHBlcigpO1xuXHRcdFx0XHRcdFJvY2tldENoYXQuUE9QM0hlbHBlci5zdGFydCgpO1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9KSk7XG5cdFx0XHR9IGVsc2UgaWYgKFJvY2tldENoYXQuSU1BUCAmJiBSb2NrZXRDaGF0LklNQVAuaXNBY3RpdmUoKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnRGlzY29ubmVjdGluZyBhbHJlYWR5IHJ1bm5pbmcgSU1BUCBpbnN0YW5jZS4uLicpO1xuXHRcdFx0XHRSb2NrZXRDaGF0LklNQVAuc3RvcChNZXRlb3IuYmluZEVudmlyb25tZW50KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdTdGFydGluZyBuZXcgUE9QIGluc3RhbmNlLi4uLi4uJyk7XG5cdFx0XHRcdFx0Um9ja2V0Q2hhdC5QT1AzSGVscGVyID0gbmV3IFBPUDNIZWxwZXIoKTtcblx0XHRcdFx0XHRSb2NrZXRDaGF0LlBPUDNIZWxwZXIuc3RhcnQoKTtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJ1N0YXJ0aW5nIG5ldyBQT1AgaW5zdGFuY2UuLi4uLi4nKTtcblx0XHRcdFx0Um9ja2V0Q2hhdC5QT1AzSGVscGVyID0gbmV3IFBPUDNIZWxwZXIoKTtcblx0XHRcdFx0Um9ja2V0Q2hhdC5QT1AzSGVscGVyLnN0YXJ0KCk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmIChSb2NrZXRDaGF0LklNQVAgJiYgUm9ja2V0Q2hhdC5JTUFQLmlzQWN0aXZlKCkpIHtcblx0XHQvLyBzdG9wIElNQVAgaW5zdGFuY2Vcblx0XHRSb2NrZXRDaGF0LklNQVAuc3RvcCgpO1xuXHR9IGVsc2UgaWYgKFJvY2tldENoYXQuUE9QMyAmJiBSb2NrZXRDaGF0LlBPUDNIZWxwZXIuaXNBY3RpdmUoKSkge1xuXHRcdC8vIHN0b3AgUE9QMyBpbnN0YW5jZVxuXHRcdFJvY2tldENoYXQuUE9QM0hlbHBlci5zdG9wKCk7XG5cdH1cbn0pLCAxMDAwKTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5vbmxvYWQoL15EaXJlY3RfUmVwbHlfLisvLCBzdGFydEVtYWlsSW50ZXJjZXB0ZXIpO1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmNvbnN0IGJ1aWxkTWFpbFVSTCA9IF8uZGVib3VuY2UoZnVuY3Rpb24oKSB7XG5cdGNvbnNvbGUubG9nKCdVcGRhdGluZyBwcm9jZXNzLmVudi5NQUlMX1VSTCcpO1xuXG5cdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU01UUF9Ib3N0JykpIHtcblx0XHRwcm9jZXNzLmVudi5NQUlMX1VSTCA9IGAkeyBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU01UUF9Qcm90b2NvbCcpIH06Ly9gO1xuXG5cdFx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdTTVRQX1VzZXJuYW1lJykgJiYgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1NNVFBfUGFzc3dvcmQnKSkge1xuXHRcdFx0cHJvY2Vzcy5lbnYuTUFJTF9VUkwgKz0gYCR7IGVuY29kZVVSSUNvbXBvbmVudChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU01UUF9Vc2VybmFtZScpKSB9OiR7IGVuY29kZVVSSUNvbXBvbmVudChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU01UUF9QYXNzd29yZCcpKSB9QGA7XG5cdFx0fVxuXG5cdFx0cHJvY2Vzcy5lbnYuTUFJTF9VUkwgKz0gZW5jb2RlVVJJQ29tcG9uZW50KFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdTTVRQX0hvc3QnKSk7XG5cblx0XHRpZiAoUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1NNVFBfUG9ydCcpKSB7XG5cdFx0XHRwcm9jZXNzLmVudi5NQUlMX1VSTCArPSBgOiR7IHBhcnNlSW50KFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdTTVRQX1BvcnQnKSkgfWA7XG5cdFx0fVxuXG5cdFx0cHJvY2Vzcy5lbnYuTUFJTF9VUkwgKz0gYD9wb29sPSR7IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdTTVRQX1Bvb2wnKSB9YDtcblxuXHRcdGlmIChSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnU01UUF9Qcm90b2NvbCcpID09PSAnc210cCcgJiYgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1NNVFBfSWdub3JlVExTJykpIHtcblx0XHRcdHByb2Nlc3MuZW52Lk1BSUxfVVJMICs9ICcmc2VjdXJlPWZhbHNlJmlnbm9yZVRMUz10cnVlJztcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJvY2Vzcy5lbnYuTUFJTF9VUkw7XG5cdH1cbn0sIDUwMCk7XG5cblJvY2tldENoYXQuc2V0dGluZ3Mub25sb2FkKCdTTVRQX0hvc3QnLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdGlmIChfLmlzU3RyaW5nKHZhbHVlKSkge1xuXHRcdHJldHVybiBidWlsZE1haWxVUkwoKTtcblx0fVxufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3Mub25sb2FkKCdTTVRQX1BvcnQnLCBmdW5jdGlvbigpIHtcblx0cmV0dXJuIGJ1aWxkTWFpbFVSTCgpO1xufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3Mub25sb2FkKCdTTVRQX1VzZXJuYW1lJywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRpZiAoXy5pc1N0cmluZyh2YWx1ZSkpIHtcblx0XHRyZXR1cm4gYnVpbGRNYWlsVVJMKCk7XG5cdH1cbn0pO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLm9ubG9hZCgnU01UUF9QYXNzd29yZCcsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcblx0aWYgKF8uaXNTdHJpbmcodmFsdWUpKSB7XG5cdFx0cmV0dXJuIGJ1aWxkTWFpbFVSTCgpO1xuXHR9XG59KTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5vbmxvYWQoJ1NNVFBfUHJvdG9jb2wnLCBmdW5jdGlvbigpIHtcblx0cmV0dXJuIGJ1aWxkTWFpbFVSTCgpO1xufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3Mub25sb2FkKCdTTVRQX1Bvb2wnLCBmdW5jdGlvbigpIHtcblx0cmV0dXJuIGJ1aWxkTWFpbFVSTCgpO1xufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3Mub25sb2FkKCdTTVRQX0lnbm9yZVRMUycsIGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gYnVpbGRNYWlsVVJMKCk7XG59KTtcblxuTWV0ZW9yLnN0YXJ0dXAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiBidWlsZE1haWxVUkwoKTtcbn0pO1xuIiwiLyogZ2xvYmFscyBDdXN0b21PQXV0aCAqL1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoJ3JvY2tldGNoYXQ6bGliJywge1xuXHRtZXRob2RzOiB7XG5cdFx0b2F1dGhfdXBkYXRlZDoge1xuXHRcdFx0dHlwZTogJ2luZm8nLFxuXHRcdH0sXG5cdH0sXG59KTtcblxuZnVuY3Rpb24gX09BdXRoU2VydmljZXNVcGRhdGUoKSB7XG5cdGNvbnN0IHNlcnZpY2VzID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoL14oQWNjb3VudHNfT0F1dGhffEFjY291bnRzX09BdXRoX0N1c3RvbS0pW2EtejAtOV9dKyQvaSk7XG5cdHNlcnZpY2VzLmZvckVhY2goKHNlcnZpY2UpID0+IHtcblx0XHRsb2dnZXIub2F1dGhfdXBkYXRlZChzZXJ2aWNlLmtleSk7XG5cdFx0bGV0IHNlcnZpY2VOYW1lID0gc2VydmljZS5rZXkucmVwbGFjZSgnQWNjb3VudHNfT0F1dGhfJywgJycpO1xuXHRcdGlmIChzZXJ2aWNlTmFtZSA9PT0gJ01ldGVvcicpIHtcblx0XHRcdHNlcnZpY2VOYW1lID0gJ21ldGVvci1kZXZlbG9wZXInO1xuXHRcdH1cblx0XHRpZiAoL0FjY291bnRzX09BdXRoX0N1c3RvbS0vLnRlc3Qoc2VydmljZS5rZXkpKSB7XG5cdFx0XHRzZXJ2aWNlTmFtZSA9IHNlcnZpY2Uua2V5LnJlcGxhY2UoJ0FjY291bnRzX09BdXRoX0N1c3RvbS0nLCAnJyk7XG5cdFx0fVxuXHRcdGlmIChzZXJ2aWNlLnZhbHVlID09PSB0cnVlKSB7XG5cdFx0XHRjb25zdCBkYXRhID0ge1xuXHRcdFx0XHRjbGllbnRJZDogUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH1faWRgKSxcblx0XHRcdFx0c2VjcmV0OiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgJHsgc2VydmljZS5rZXkgfV9zZWNyZXRgKSxcblx0XHRcdH07XG5cdFx0XHRpZiAoL0FjY291bnRzX09BdXRoX0N1c3RvbS0vLnRlc3Qoc2VydmljZS5rZXkpKSB7XG5cdFx0XHRcdGRhdGEuY3VzdG9tID0gdHJ1ZTtcblx0XHRcdFx0ZGF0YS5jbGllbnRJZCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KGAkeyBzZXJ2aWNlLmtleSB9LWlkYCk7XG5cdFx0XHRcdGRhdGEuc2VjcmV0ID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH0tc2VjcmV0YCk7XG5cdFx0XHRcdGRhdGEuc2VydmVyVVJMID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH0tdXJsYCk7XG5cdFx0XHRcdGRhdGEudG9rZW5QYXRoID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH0tdG9rZW5fcGF0aGApO1xuXHRcdFx0XHRkYXRhLmlkZW50aXR5UGF0aCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KGAkeyBzZXJ2aWNlLmtleSB9LWlkZW50aXR5X3BhdGhgKTtcblx0XHRcdFx0ZGF0YS5hdXRob3JpemVQYXRoID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH0tYXV0aG9yaXplX3BhdGhgKTtcblx0XHRcdFx0ZGF0YS5zY29wZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KGAkeyBzZXJ2aWNlLmtleSB9LXNjb3BlYCk7XG5cdFx0XHRcdGRhdGEuYnV0dG9uTGFiZWxUZXh0ID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH0tYnV0dG9uX2xhYmVsX3RleHRgKTtcblx0XHRcdFx0ZGF0YS5idXR0b25MYWJlbENvbG9yID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH0tYnV0dG9uX2xhYmVsX2NvbG9yYCk7XG5cdFx0XHRcdGRhdGEubG9naW5TdHlsZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KGAkeyBzZXJ2aWNlLmtleSB9LWxvZ2luX3N0eWxlYCk7XG5cdFx0XHRcdGRhdGEuYnV0dG9uQ29sb3IgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgJHsgc2VydmljZS5rZXkgfS1idXR0b25fY29sb3JgKTtcblx0XHRcdFx0ZGF0YS50b2tlblNlbnRWaWEgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldChgJHsgc2VydmljZS5rZXkgfS10b2tlbl9zZW50X3ZpYWApO1xuXHRcdFx0XHRkYXRhLmlkZW50aXR5VG9rZW5TZW50VmlhID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH0taWRlbnRpdHlfdG9rZW5fc2VudF92aWFgKTtcblx0XHRcdFx0ZGF0YS51c2VybmFtZUZpZWxkID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH0tdXNlcm5hbWVfZmllbGRgKTtcblx0XHRcdFx0ZGF0YS5tZXJnZVVzZXJzID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoYCR7IHNlcnZpY2Uua2V5IH0tbWVyZ2VfdXNlcnNgKTtcblx0XHRcdFx0bmV3IEN1c3RvbU9BdXRoKHNlcnZpY2VOYW1lLnRvTG93ZXJDYXNlKCksIHtcblx0XHRcdFx0XHRzZXJ2ZXJVUkw6IGRhdGEuc2VydmVyVVJMLFxuXHRcdFx0XHRcdHRva2VuUGF0aDogZGF0YS50b2tlblBhdGgsXG5cdFx0XHRcdFx0aWRlbnRpdHlQYXRoOiBkYXRhLmlkZW50aXR5UGF0aCxcblx0XHRcdFx0XHRhdXRob3JpemVQYXRoOiBkYXRhLmF1dGhvcml6ZVBhdGgsXG5cdFx0XHRcdFx0c2NvcGU6IGRhdGEuc2NvcGUsXG5cdFx0XHRcdFx0bG9naW5TdHlsZTogZGF0YS5sb2dpblN0eWxlLFxuXHRcdFx0XHRcdHRva2VuU2VudFZpYTogZGF0YS50b2tlblNlbnRWaWEsXG5cdFx0XHRcdFx0aWRlbnRpdHlUb2tlblNlbnRWaWE6IGRhdGEuaWRlbnRpdHlUb2tlblNlbnRWaWEsXG5cdFx0XHRcdFx0dXNlcm5hbWVGaWVsZDogZGF0YS51c2VybmFtZUZpZWxkLFxuXHRcdFx0XHRcdG1lcmdlVXNlcnM6IGRhdGEubWVyZ2VVc2Vycyxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2VydmljZU5hbWUgPT09ICdGYWNlYm9vaycpIHtcblx0XHRcdFx0ZGF0YS5hcHBJZCA9IGRhdGEuY2xpZW50SWQ7XG5cdFx0XHRcdGRlbGV0ZSBkYXRhLmNsaWVudElkO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNlcnZpY2VOYW1lID09PSAnVHdpdHRlcicpIHtcblx0XHRcdFx0ZGF0YS5jb25zdW1lcktleSA9IGRhdGEuY2xpZW50SWQ7XG5cdFx0XHRcdGRlbGV0ZSBkYXRhLmNsaWVudElkO1xuXHRcdFx0fVxuXHRcdFx0U2VydmljZUNvbmZpZ3VyYXRpb24uY29uZmlndXJhdGlvbnMudXBzZXJ0KHtcblx0XHRcdFx0c2VydmljZTogc2VydmljZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdH0sIHtcblx0XHRcdFx0JHNldDogZGF0YSxcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRTZXJ2aWNlQ29uZmlndXJhdGlvbi5jb25maWd1cmF0aW9ucy5yZW1vdmUoe1xuXHRcdFx0XHRzZXJ2aWNlOiBzZXJ2aWNlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9KTtcbn1cblxuY29uc3QgT0F1dGhTZXJ2aWNlc1VwZGF0ZSA9IF8uZGVib3VuY2UoTWV0ZW9yLmJpbmRFbnZpcm9ubWVudChfT0F1dGhTZXJ2aWNlc1VwZGF0ZSksIDIwMDApO1xuXG5mdW5jdGlvbiBPQXV0aFNlcnZpY2VzUmVtb3ZlKF9pZCkge1xuXHRjb25zdCBzZXJ2aWNlTmFtZSA9IF9pZC5yZXBsYWNlKCdBY2NvdW50c19PQXV0aF9DdXN0b20tJywgJycpO1xuXHRyZXR1cm4gU2VydmljZUNvbmZpZ3VyYXRpb24uY29uZmlndXJhdGlvbnMucmVtb3ZlKHtcblx0XHRzZXJ2aWNlOiBzZXJ2aWNlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHR9KTtcbn1cblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoL15BY2NvdW50c19PQXV0aF8uKy8sIGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gT0F1dGhTZXJ2aWNlc1VwZGF0ZSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcbn0pO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmdldCgvXkFjY291bnRzX09BdXRoX0N1c3RvbS1bYS16MC05X10rLywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRpZiAoIXZhbHVlKSB7XG5cdFx0cmV0dXJuIE9BdXRoU2VydmljZXNSZW1vdmUoa2V5KTsvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5ldy1jYXBcblx0fVxufSk7XG4iLCJpbXBvcnQgJy4vZW1haWwnO1xuXG4vLyBJbnNlcnQgc2VydmVyIHVuaXF1ZSBpZCBpZiBpdCBkb2Vzbid0IGV4aXN0XG5Sb2NrZXRDaGF0LnNldHRpbmdzLmFkZCgndW5pcXVlSUQnLCBwcm9jZXNzLmVudi5ERVBMT1lNRU5UX0lEIHx8IFJhbmRvbS5pZCgpLCB7XG5cdHB1YmxpYzogdHJ1ZSxcblx0aGlkZGVuOiB0cnVlLFxufSk7XG5cbi8vIFdoZW4geW91IGRlZmluZSBhIHNldHRpbmcgYW5kIHdhbnQgdG8gYWRkIGEgZGVzY3JpcHRpb24sIHlvdSBkb24ndCBuZWVkIHRvIGF1dG9tYXRpY2FsbHkgZGVmaW5lIHRoZSBpMThuRGVzY3JpcHRpb25cbi8vIGlmIHlvdSBhZGQgYSBub2RlIHRvIHRoZSBpMThuLmpzb24gd2l0aCB0aGUgc2FtZSBzZXR0aW5nIG5hbWUgYnV0IHdpdGggYF9EZXNjcmlwdGlvbmAgaXQgd2lsbCBhdXRvbWF0aWNhbGx5IHdvcmsuXG5cblJvY2tldENoYXQuc2V0dGluZ3MuYWRkR3JvdXAoJ0FjY291bnRzJywgZnVuY3Rpb24oKSB7XG5cdHRoaXMuYWRkKCdBY2NvdW50c19BbGxvd0Fub255bW91c1JlYWQnLCBmYWxzZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfQWxsb3dBbm9ueW1vdXNXcml0ZScsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRlbmFibGVRdWVyeToge1xuXHRcdFx0X2lkOiAnQWNjb3VudHNfQWxsb3dBbm9ueW1vdXNSZWFkJyxcblx0XHRcdHZhbHVlOiB0cnVlLFxuXHRcdH0sXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfQWxsb3dEZWxldGVPd25BY2NvdW50JywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRfaWQ6ICdBY2NvdW50c19BbGxvd1VzZXJQcm9maWxlQ2hhbmdlJyxcblx0XHRcdHZhbHVlOiB0cnVlLFxuXHRcdH0sXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfQWxsb3dVc2VyUHJvZmlsZUNoYW5nZScsIHRydWUsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ0FjY291bnRzX0FsbG93VXNlckF2YXRhckNoYW5nZScsIHRydWUsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ0FjY291bnRzX0FsbG93UmVhbE5hbWVDaGFuZ2UnLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdBY2NvdW50c19BbGxvd1VzZXJuYW1lQ2hhbmdlJywgdHJ1ZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfQWxsb3dFbWFpbENoYW5nZScsIHRydWUsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ0FjY291bnRzX0FsbG93UGFzc3dvcmRDaGFuZ2UnLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdBY2NvdW50c19DdXN0b21GaWVsZHNUb1Nob3dJblVzZXJJbmZvJywgJycsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfTG9naW5FeHBpcmF0aW9uJywgOTAsIHtcblx0XHR0eXBlOiAnaW50Jyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfU2hvd0Zvcm1Mb2dpbicsIHRydWUsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ0FjY291bnRzX0VtYWlsT3JVc2VybmFtZVBsYWNlaG9sZGVyJywgJycsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdFx0aTE4bkxhYmVsOiAnUGxhY2Vob2xkZXJfZm9yX2VtYWlsX29yX3VzZXJuYW1lX2xvZ2luX2ZpZWxkJyxcblx0fSk7XG5cdHRoaXMuYWRkKCdBY2NvdW50c19QYXNzd29yZFBsYWNlaG9sZGVyJywgJycsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdFx0aTE4bkxhYmVsOiAnUGxhY2Vob2xkZXJfZm9yX3Bhc3N3b3JkX2xvZ2luX2ZpZWxkJyxcblx0fSk7XG5cblx0dGhpcy5hZGQoJ0FjY291bnRzX0NvbmZpcm1QYXNzd29yZFBsYWNlaG9sZGVyJywgJycsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdFx0aTE4bkxhYmVsOiAnUGxhY2Vob2xkZXJfZm9yX3Bhc3N3b3JkX2xvZ2luX2ZpZWxkJyxcblx0fSk7XG5cdHRoaXMuYWRkKCdBY2NvdW50c19Gb3JnZXRVc2VyU2Vzc2lvbk9uV2luZG93Q2xvc2UnLCBmYWxzZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWNjb3VudHNfU2VhcmNoRmllbGRzJywgJ3VzZXJuYW1lLCBuYW1lJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdBY2NvdW50c19EaXJlY3RvcnlfRGVmYXVsdFZpZXcnLCAnY2hhbm5lbHMnLCB7XG5cdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0dmFsdWVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGtleTogJ2NoYW5uZWxzJyxcblx0XHRcdFx0aTE4bkxhYmVsOiAnQ2hhbm5lbHMnLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0a2V5OiAndXNlcnMnLFxuXHRcdFx0XHRpMThuTGFiZWw6ICdVc2VycycsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5zZWN0aW9uKCdSZWdpc3RyYXRpb24nLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdFVzZXJuYW1lUHJlZml4U3VnZ2VzdGlvbicsICd1c2VyJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX1JlcXVpcmVOYW1lRm9yU2lnblVwJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19SZXF1aXJlUGFzc3dvcmRDb25maXJtYXRpb24nLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0VtYWlsVmVyaWZpY2F0aW9uJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ1NNVFBfSG9zdCcsXG5cdFx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdFx0JGV4aXN0czogMSxcblx0XHRcdFx0XHQkbmU6ICcnLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfTWFudWFsbHlBcHByb3ZlTmV3VXNlcnMnLCBmYWxzZSwge1xuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19BbGxvd2VkRG9tYWluc0xpc3QnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0Jsb2NrZWREb21haW5zTGlzdCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfQmxvY2tlZFVzZXJuYW1lTGlzdCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfVXNlRGVmYXVsdEJsb2NrZWREb21haW5zTGlzdCcsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfVXNlRE5TRG9tYWluQ2hlY2snLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19SZWdpc3RyYXRpb25Gb3JtJywgJ1B1YmxpYycsIHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0dmFsdWVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdQdWJsaWMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0FjY291bnRzX1JlZ2lzdHJhdGlvbkZvcm1fUHVibGljJyxcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJ0Rpc2FibGVkJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdBY2NvdW50c19SZWdpc3RyYXRpb25Gb3JtX0Rpc2FibGVkJyxcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJ1NlY3JldCBVUkwnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0FjY291bnRzX1JlZ2lzdHJhdGlvbkZvcm1fU2VjcmV0X1VSTCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19SZWdpc3RyYXRpb25Gb3JtX1NlY3JldFVSTCcsIFJhbmRvbS5pZCgpLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfUmVnaXN0cmF0aW9uRm9ybV9MaW5rUmVwbGFjZW1lbnRUZXh0JywgJ05ldyB1c2VyIHJlZ2lzdHJhdGlvbiBpcyBjdXJyZW50bHkgZGlzYWJsZWQnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfUmVnaXN0cmF0aW9uX0F1dGhlbnRpY2F0aW9uU2VydmljZXNfRW5hYmxlZCcsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfUmVnaXN0cmF0aW9uX0F1dGhlbnRpY2F0aW9uU2VydmljZXNfRGVmYXVsdF9Sb2xlcycsICd1c2VyJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbmFibGVRdWVyeToge1xuXHRcdFx0XHRfaWQ6ICdBY2NvdW50c19SZWdpc3RyYXRpb25fQXV0aGVudGljYXRpb25TZXJ2aWNlc19FbmFibGVkJyxcblx0XHRcdFx0dmFsdWU6IHRydWUsXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19QYXNzd29yZFJlc2V0JywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19DdXN0b21GaWVsZHMnLCAnJywge1xuXHRcdFx0dHlwZTogJ2NvZGUnLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnQ3VzdG9tX0ZpZWxkcycsXG5cdFx0fSk7XG5cdH0pO1xuXG5cdHRoaXMuc2VjdGlvbignQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzJywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19lbmFibGVBdXRvQXdheScsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0VuYWJsZV9BdXRvX0F3YXknLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfaWRsZVRpbWVMaW1pdCcsIDMwMCwge1xuXHRcdFx0dHlwZTogJ2ludCcsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdJZGxlX1RpbWVfTGltaXQnLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfZGVza3RvcE5vdGlmaWNhdGlvbkR1cmF0aW9uJywgMCwge1xuXHRcdFx0dHlwZTogJ2ludCcsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdOb3RpZmljYXRpb25fRHVyYXRpb24nLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfYXVkaW9Ob3RpZmljYXRpb25zJywgJ21lbnRpb25zJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2FsbCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQWxsX21lc3NhZ2VzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ21lbnRpb25zJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdNZW50aW9ucycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdub3RoaW5nJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdOb3RoaW5nJyxcblx0XHRcdFx0fSxcblx0XHRcdF0sXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19kZXNrdG9wTm90aWZpY2F0aW9ucycsICdtZW50aW9ucycsIHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0dmFsdWVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdhbGwnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0FsbF9tZXNzYWdlcycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdtZW50aW9ucycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnTWVudGlvbnMnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbm90aGluZycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnTm90aGluZycsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfbW9iaWxlTm90aWZpY2F0aW9ucycsICdtZW50aW9ucycsIHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0dmFsdWVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXkgOiAnYWxsJyxcblx0XHRcdFx0XHRpMThuTGFiZWwgOiAnQWxsX21lc3NhZ2VzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleSA6ICdtZW50aW9ucycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsIDogJ01lbnRpb25zJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleSA6ICdub3RoaW5nJyxcblx0XHRcdFx0XHRpMThuTGFiZWwgOiAnTm90aGluZycsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfdW5yZWFkQWxlcnQnLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdVbnJlYWRfVHJheV9JY29uX0FsZXJ0Jyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX3VzZUVtb2ppcycsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ1VzZV9FbW9qaXMnLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfY29udmVydEFzY2lpRW1vamknLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdDb252ZXJ0X0FzY2lpX0Vtb2ppcycsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19hdXRvSW1hZ2VMb2FkJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnQXV0b19Mb2FkX0ltYWdlcycsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19zYXZlTW9iaWxlQmFuZHdpZHRoJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnU2F2ZV9Nb2JpbGVfQmFuZHdpZHRoJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX2NvbGxhcHNlTWVkaWFCeURlZmF1bHQnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnQ29sbGFwc2VfRW1iZWRkZWRfTWVkaWFfQnlfRGVmYXVsdCcsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19oaWRlVXNlcm5hbWVzJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0hpZGVfdXNlcm5hbWVzJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX2hpZGVSb2xlcycsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdIaWRlX3JvbGVzJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX2hpZGVGbGV4VGFiJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0hpZGVfZmxleHRhYicsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19oaWRlQXZhdGFycycsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdIaWRlX0F2YXRhcnMnLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfc2lkZWJhckdyb3VwQnlUeXBlJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnR3JvdXBfYnlfVHlwZScsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19zaWRlYmFyVmlld01vZGUnLCAnbWVkaXVtJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2V4dGVuZGVkJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdFeHRlbmRlZCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdtZWRpdW0nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ01lZGl1bScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdjb25kZW5zZWQnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvbmRlbnNlZCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnU2lkZWJhcl9saXN0X21vZGUnLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfc2lkZWJhckhpZGVBdmF0YXInLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnSGlkZV9BdmF0YXJzJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX3NpZGViYXJTaG93VW5yZWFkJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ1VucmVhZF9vbl90b3AnLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfc2lkZWJhclNob3dGYXZvcml0ZXMnLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdHcm91cF9mYXZvcml0ZXMnLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfc2VuZE9uRW50ZXInLCAnbm9ybWFsJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ25vcm1hbCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnRW50ZXJfTm9ybWFsJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2FsdGVybmF0aXZlJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdFbnRlcl9BbHRlcm5hdGl2ZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdkZXNrdG9wJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdPbmx5X09uX0Rlc2t0b3AnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0VudGVyX0JlaGF2aW91cicsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19tZXNzYWdlVmlld01vZGUnLCAwLCB7XG5cdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdHZhbHVlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAwLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ05vcm1hbCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6IDEsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ296eScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6IDIsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ29tcGFjdCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnTWVzc2FnZUJveF92aWV3X21vZGUnLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19EZWZhdWx0X1VzZXJfUHJlZmVyZW5jZXNfZW1haWxOb3RpZmljYXRpb25Nb2RlJywgJ21lbnRpb25zJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ25vdGhpbmcnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0VtYWlsX05vdGlmaWNhdGlvbl9Nb2RlX0Rpc2FibGVkJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ21lbnRpb25zJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdFbWFpbF9Ob3RpZmljYXRpb25fTW9kZV9BbGwnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0VtYWlsX05vdGlmaWNhdGlvbl9Nb2RlJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX3Jvb21Db3VudGVyU2lkZWJhcicsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdTaG93X3Jvb21fY291bnRlcl9vbl9zaWRlYmFyJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRGVmYXVsdF9Vc2VyX1ByZWZlcmVuY2VzX25ld1Jvb21Ob3RpZmljYXRpb24nLCAnZG9vcicsIHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0dmFsdWVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdub25lJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdOb25lJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2Rvb3InLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0RlZmF1bHQnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ05ld19Sb29tX05vdGlmaWNhdGlvbicsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19uZXdNZXNzYWdlTm90aWZpY2F0aW9uJywgJ2NoaW1lJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ25vbmUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ05vbmUnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnY2hpbWUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0RlZmF1bHQnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ05ld19NZXNzYWdlX05vdGlmaWNhdGlvbicsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19tdXRlRm9jdXNlZENvbnZlcnNhdGlvbnMnLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdNdXRlX0ZvY3VzZWRfQ29udmVyc2F0aW9ucycsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0RlZmF1bHRfVXNlcl9QcmVmZXJlbmNlc19ub3RpZmljYXRpb25zU291bmRWb2x1bWUnLCAxMDAsIHtcblx0XHRcdHR5cGU6ICdpbnQnLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnTm90aWZpY2F0aW9uc19Tb3VuZF9Wb2x1bWUnLFxuXHRcdH0pO1xuXHR9KTtcblxuXHR0aGlzLnNlY3Rpb24oJ0F2YXRhcicsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19BdmF0YXJSZXNpemUnLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0F2YXRhclNpemUnLCAyMDAsIHtcblx0XHRcdHR5cGU6ICdpbnQnLFxuXHRcdFx0ZW5hYmxlUXVlcnk6IHtcblx0XHRcdFx0X2lkOiAnQWNjb3VudHNfQXZhdGFyUmVzaXplJyxcblx0XHRcdFx0dmFsdWU6IHRydWUsXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19BdmF0YXJDYWNoZVRpbWUnLCAzNjAwLCB7XG5cdFx0XHR0eXBlOiAnaW50Jyxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ0FjY291bnRzX0F2YXRhckNhY2hlVGltZV9kZXNjcmlwdGlvbicsXG5cdFx0fSk7XG5cblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfQXZhdGFyQmxvY2tVbmF1dGhlbnRpY2F0ZWRBY2Nlc3MnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdBY2NvdW50c19TZXREZWZhdWx0QXZhdGFyJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdH0pO1xuXHR9KTtcblxuXHR0aGlzLnNlY3Rpb24oJ1Bhc3N3b3JkX1BvbGljeScsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19QYXNzd29yZF9Qb2xpY3lfRW5hYmxlZCcsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0fSk7XG5cblx0XHRjb25zdCBlbmFibGVRdWVyeSA9IHtcblx0XHRcdF9pZDogJ0FjY291bnRzX1Bhc3N3b3JkX1BvbGljeV9FbmFibGVkJyxcblx0XHRcdHZhbHVlOiB0cnVlLFxuXHRcdH07XG5cblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfUGFzc3dvcmRfUG9saWN5X01pbkxlbmd0aCcsIDcsIHtcblx0XHRcdHR5cGU6ICdpbnQnLFxuXHRcdFx0ZW5hYmxlUXVlcnksXG5cdFx0fSk7XG5cblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfUGFzc3dvcmRfUG9saWN5X01heExlbmd0aCcsIC0xLCB7XG5cdFx0XHR0eXBlOiAnaW50Jyxcblx0XHRcdGVuYWJsZVF1ZXJ5LFxuXHRcdH0pO1xuXG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX1Bhc3N3b3JkX1BvbGljeV9Gb3JiaWRSZXBlYXRpbmdDaGFyYWN0ZXJzJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0ZW5hYmxlUXVlcnksXG5cdFx0fSk7XG5cblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfUGFzc3dvcmRfUG9saWN5X0ZvcmJpZFJlcGVhdGluZ0NoYXJhY3RlcnNDb3VudCcsIDMsIHtcblx0XHRcdHR5cGU6ICdpbnQnLFxuXHRcdFx0ZW5hYmxlUXVlcnksXG5cdFx0fSk7XG5cblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfUGFzc3dvcmRfUG9saWN5X0F0TGVhc3RPbmVMb3dlcmNhc2UnLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRlbmFibGVRdWVyeSxcblx0XHR9KTtcblxuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19QYXNzd29yZF9Qb2xpY3lfQXRMZWFzdE9uZVVwcGVyY2FzZScsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdGVuYWJsZVF1ZXJ5LFxuXHRcdH0pO1xuXG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX1Bhc3N3b3JkX1BvbGljeV9BdExlYXN0T25lTnVtYmVyJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0ZW5hYmxlUXVlcnksXG5cdFx0fSk7XG5cblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfUGFzc3dvcmRfUG9saWN5X0F0TGVhc3RPbmVTcGVjaWFsQ2hhcmFjdGVyJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0ZW5hYmxlUXVlcnksXG5cdFx0fSk7XG5cdH0pO1xufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3MuYWRkR3JvdXAoJ09BdXRoJywgZnVuY3Rpb24oKSB7XG5cdHRoaXMuc2VjdGlvbignRmFjZWJvb2snLCBmdW5jdGlvbigpIHtcblx0XHRjb25zdCBlbmFibGVRdWVyeSA9IHtcblx0XHRcdF9pZDogJ0FjY291bnRzX09BdXRoX0ZhY2Vib29rJyxcblx0XHRcdHZhbHVlOiB0cnVlLFxuXHRcdH07XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX0ZhY2Vib29rJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfRmFjZWJvb2tfaWQnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbmFibGVRdWVyeSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfRmFjZWJvb2tfc2VjcmV0JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0ZW5hYmxlUXVlcnksXG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9GYWNlYm9va19jYWxsYmFja191cmwnLCAnX29hdXRoL2ZhY2Vib29rJywge1xuXHRcdFx0dHlwZTogJ3JlbGF0aXZlVXJsJyxcblx0XHRcdHJlYWRvbmx5OiB0cnVlLFxuXHRcdFx0Zm9yY2U6IHRydWUsXG5cdFx0XHRlbmFibGVRdWVyeSxcblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuc2VjdGlvbignR29vZ2xlJywgZnVuY3Rpb24oKSB7XG5cdFx0Y29uc3QgZW5hYmxlUXVlcnkgPSB7XG5cdFx0XHRfaWQ6ICdBY2NvdW50c19PQXV0aF9Hb29nbGUnLFxuXHRcdFx0dmFsdWU6IHRydWUsXG5cdFx0fTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfR29vZ2xlJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfR29vZ2xlX2lkJywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0ZW5hYmxlUXVlcnksXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX0dvb2dsZV9zZWNyZXQnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbmFibGVRdWVyeSxcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX0dvb2dsZV9jYWxsYmFja191cmwnLCAnX29hdXRoL2dvb2dsZScsIHtcblx0XHRcdHR5cGU6ICdyZWxhdGl2ZVVybCcsXG5cdFx0XHRyZWFkb25seTogdHJ1ZSxcblx0XHRcdGZvcmNlOiB0cnVlLFxuXHRcdFx0ZW5hYmxlUXVlcnksXG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ0dpdEh1YicsIGZ1bmN0aW9uKCkge1xuXHRcdGNvbnN0IGVuYWJsZVF1ZXJ5ID0ge1xuXHRcdFx0X2lkOiAnQWNjb3VudHNfT0F1dGhfR2l0aHViJyxcblx0XHRcdHZhbHVlOiB0cnVlLFxuXHRcdH07XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX0dpdGh1YicsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX0dpdGh1Yl9pZCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGVuYWJsZVF1ZXJ5LFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9HaXRodWJfc2VjcmV0JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0ZW5hYmxlUXVlcnksXG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9HaXRodWJfY2FsbGJhY2tfdXJsJywgJ19vYXV0aC9naXRodWInLCB7XG5cdFx0XHR0eXBlOiAncmVsYXRpdmVVcmwnLFxuXHRcdFx0cmVhZG9ubHk6IHRydWUsXG5cdFx0XHRmb3JjZTogdHJ1ZSxcblx0XHRcdGVuYWJsZVF1ZXJ5LFxuXHRcdH0pO1xuXHR9KTtcblx0dGhpcy5zZWN0aW9uKCdMaW5rZWRpbicsIGZ1bmN0aW9uKCkge1xuXHRcdGNvbnN0IGVuYWJsZVF1ZXJ5ID0ge1xuXHRcdFx0X2lkOiAnQWNjb3VudHNfT0F1dGhfTGlua2VkaW4nLFxuXHRcdFx0dmFsdWU6IHRydWUsXG5cdFx0fTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfTGlua2VkaW4nLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9MaW5rZWRpbl9pZCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGVuYWJsZVF1ZXJ5LFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9MaW5rZWRpbl9zZWNyZXQnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbmFibGVRdWVyeSxcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0FjY291bnRzX09BdXRoX0xpbmtlZGluX2NhbGxiYWNrX3VybCcsICdfb2F1dGgvbGlua2VkaW4nLCB7XG5cdFx0XHR0eXBlOiAncmVsYXRpdmVVcmwnLFxuXHRcdFx0cmVhZG9ubHk6IHRydWUsXG5cdFx0XHRmb3JjZTogdHJ1ZSxcblx0XHRcdGVuYWJsZVF1ZXJ5LFxuXHRcdH0pO1xuXHR9KTtcblx0dGhpcy5zZWN0aW9uKCdNZXRlb3InLCBmdW5jdGlvbigpIHtcblx0XHRjb25zdCBlbmFibGVRdWVyeSA9IHtcblx0XHRcdF9pZDogJ0FjY291bnRzX09BdXRoX01ldGVvcicsXG5cdFx0XHR2YWx1ZTogdHJ1ZSxcblx0XHR9O1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9NZXRlb3InLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9NZXRlb3JfaWQnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbmFibGVRdWVyeSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfTWV0ZW9yX3NlY3JldCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGVuYWJsZVF1ZXJ5LFxuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfTWV0ZW9yX2NhbGxiYWNrX3VybCcsICdfb2F1dGgvbWV0ZW9yJywge1xuXHRcdFx0dHlwZTogJ3JlbGF0aXZlVXJsJyxcblx0XHRcdHJlYWRvbmx5OiB0cnVlLFxuXHRcdFx0Zm9yY2U6IHRydWUsXG5cdFx0XHRlbmFibGVRdWVyeSxcblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuc2VjdGlvbignVHdpdHRlcicsIGZ1bmN0aW9uKCkge1xuXHRcdGNvbnN0IGVuYWJsZVF1ZXJ5ID0ge1xuXHRcdFx0X2lkOiAnQWNjb3VudHNfT0F1dGhfVHdpdHRlcicsXG5cdFx0XHR2YWx1ZTogdHJ1ZSxcblx0XHR9O1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9Ud2l0dGVyJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfVHdpdHRlcl9pZCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGVuYWJsZVF1ZXJ5LFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9Ud2l0dGVyX3NlY3JldCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGVuYWJsZVF1ZXJ5LFxuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfVHdpdHRlcl9jYWxsYmFja191cmwnLCAnX29hdXRoL3R3aXR0ZXInLCB7XG5cdFx0XHR0eXBlOiAncmVsYXRpdmVVcmwnLFxuXHRcdFx0cmVhZG9ubHk6IHRydWUsXG5cdFx0XHRmb3JjZTogdHJ1ZSxcblx0XHRcdGVuYWJsZVF1ZXJ5LFxuXHRcdH0pO1xuXHR9KTtcblx0cmV0dXJuIHRoaXMuc2VjdGlvbignUHJveHknLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfT0F1dGhfUHJveHlfaG9zdCcsICdodHRwczovL29hdXRoLXByb3h5LnJvY2tldC5jaGF0Jywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdBY2NvdW50c19PQXV0aF9Qcm94eV9zZXJ2aWNlcycsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0fSk7XG59KTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5hZGRHcm91cCgnR2VuZXJhbCcsIGZ1bmN0aW9uKCkge1xuXHR0aGlzLmFkZCgnU2hvd19TZXR1cF9XaXphcmQnLCAncGVuZGluZycsIHtcblx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdFx0dmFsdWVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGtleTogJ3BlbmRpbmcnLFxuXHRcdFx0XHRpMThuTGFiZWw6ICdQZW5kaW5nJyxcblx0XHRcdH0sIHtcblx0XHRcdFx0a2V5OiAnaW5fcHJvZ3Jlc3MnLFxuXHRcdFx0XHRpMThuTGFiZWw6ICdJbl9wcm9ncmVzcycsXG5cdFx0XHR9LCB7XG5cdFx0XHRcdGtleTogJ2NvbXBsZXRlZCcsXG5cdFx0XHRcdGkxOG5MYWJlbDogJ0NvbXBsZXRlZCcsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0pO1xuXHR0aGlzLmFkZCgnU2l0ZV9VcmwnLCB0eXBlb2YgX19tZXRlb3JfcnVudGltZV9jb25maWdfXyAhPT0gJ3VuZGVmaW5lZCcgJiYgX19tZXRlb3JfcnVudGltZV9jb25maWdfXyAhPT0gbnVsbCA/IF9fbWV0ZW9yX3J1bnRpbWVfY29uZmlnX18uUk9PVF9VUkwgOiBudWxsLCB7XG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0aTE4bkRlc2NyaXB0aW9uOiAnU2l0ZV9VcmxfRGVzY3JpcHRpb24nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdTaXRlX05hbWUnLCAnUm9ja2V0LkNoYXQnLCB7XG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0cHVibGljOiB0cnVlLFxuXHRcdHdpemFyZDoge1xuXHRcdFx0c3RlcDogMyxcblx0XHRcdG9yZGVyOiAwLFxuXHRcdH0sXG5cdH0pO1xuXHR0aGlzLmFkZCgnRG9jdW1lbnRfRG9tYWluJywgJycsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXHR0aGlzLmFkZCgnTGFuZ3VhZ2UnLCAnJywge1xuXHRcdHR5cGU6ICdsYW5ndWFnZScsXG5cdFx0cHVibGljOiB0cnVlLFxuXHRcdHdpemFyZDoge1xuXHRcdFx0c3RlcDogMyxcblx0XHRcdG9yZGVyOiAxLFxuXHRcdH0sXG5cdH0pO1xuXHR0aGlzLmFkZCgnQWxsb3dfSW52YWxpZF9TZWxmU2lnbmVkX0NlcnRzJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdH0pO1xuXHR0aGlzLmFkZCgnRmF2b3JpdGVfUm9vbXMnLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdGaXJzdF9DaGFubmVsX0FmdGVyX0xvZ2luJywgJycsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXHR0aGlzLmFkZCgnVW5yZWFkX0NvdW50JywgJ3VzZXJfYW5kX2dyb3VwX21lbnRpb25zX29ubHknLCB7XG5cdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0dmFsdWVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGtleTogJ2FsbF9tZXNzYWdlcycsXG5cdFx0XHRcdGkxOG5MYWJlbDogJ0FsbF9tZXNzYWdlcycsXG5cdFx0XHR9LCB7XG5cdFx0XHRcdGtleTogJ3VzZXJfbWVudGlvbnNfb25seScsXG5cdFx0XHRcdGkxOG5MYWJlbDogJ1VzZXJfbWVudGlvbnNfb25seScsXG5cdFx0XHR9LCB7XG5cdFx0XHRcdGtleTogJ2dyb3VwX21lbnRpb25zX29ubHknLFxuXHRcdFx0XHRpMThuTGFiZWw6ICdHcm91cF9tZW50aW9uc19vbmx5Jyxcblx0XHRcdH0sIHtcblx0XHRcdFx0a2V5OiAndXNlcl9hbmRfZ3JvdXBfbWVudGlvbnNfb25seScsXG5cdFx0XHRcdGkxOG5MYWJlbDogJ1VzZXJfYW5kX2dyb3VwX21lbnRpb25zX29ubHknLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdVbnJlYWRfQ291bnRfRE0nLCAnYWxsX21lc3NhZ2VzJywge1xuXHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdHZhbHVlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRrZXk6ICdhbGxfbWVzc2FnZXMnLFxuXHRcdFx0XHRpMThuTGFiZWw6ICdBbGxfbWVzc2FnZXMnLFxuXHRcdFx0fSwge1xuXHRcdFx0XHRrZXk6ICdtZW50aW9uc19vbmx5Jyxcblx0XHRcdFx0aTE4bkxhYmVsOiAnTWVudGlvbnNfb25seScsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ0NETl9QUkVGSVgnLCAnJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdDRE5fUFJFRklYX0FMTCcsIHRydWUsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ0NETl9KU0NTU19QUkVGSVgnLCAnJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRlbmFibGVRdWVyeToge1xuXHRcdFx0X2lkOiAnQ0ROX1BSRUZJWF9BTEwnLFxuXHRcdFx0dmFsdWU6IGZhbHNlLFxuXHRcdH0sXG5cdH0pO1xuXHR0aGlzLmFkZCgnRm9yY2VfU1NMJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ0dvb2dsZVRhZ01hbmFnZXJfaWQnLCAnJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdCdWdzbmFnX2FwaV9rZXknLCAnJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdHB1YmxpYzogZmFsc2UsXG5cdH0pO1xuXHR0aGlzLmFkZCgnRm9yY2VfRGlzYWJsZV9PcExvZ19Gb3JfQ2FjaGUnLCBmYWxzZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRwdWJsaWM6IGZhbHNlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ1Jlc3RhcnQnLCAncmVzdGFydF9zZXJ2ZXInLCB7XG5cdFx0dHlwZTogJ2FjdGlvbicsXG5cdFx0YWN0aW9uVGV4dDogJ1Jlc3RhcnRfdGhlX3NlcnZlcicsXG5cdH0pO1xuXHR0aGlzLmFkZCgnU3RvcmVfTGFzdF9NZXNzYWdlJywgdHJ1ZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdFx0aTE4bkRlc2NyaXB0aW9uOiAnU3RvcmVfTGFzdF9NZXNzYWdlX1NlbnRfcGVyX1Jvb20nLFxuXHR9KTtcblx0dGhpcy5zZWN0aW9uKCdVVEY4JywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ1VURjhfTmFtZXNfVmFsaWRhdGlvbicsICdbMC05YS16QS1aLV8uXSsnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ1VURjhfTmFtZXNfVmFsaWRhdGlvbl9EZXNjcmlwdGlvbicsXG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdVVEY4X05hbWVzX1NsdWdpZnknLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ1JlcG9ydGluZycsIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmFkZCgnU3RhdGlzdGljc19yZXBvcnRpbmcnLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ05vdGlmaWNhdGlvbnMnLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnTm90aWZpY2F0aW9uc19NYXhfUm9vbV9NZW1iZXJzJywgMTAwLCB7XG5cdFx0XHR0eXBlOiAnaW50Jyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ05vdGlmaWNhdGlvbnNfTWF4X1Jvb21fTWVtYmVyc19EZXNjcmlwdGlvbicsXG5cdFx0fSk7XG5cblx0XHR0aGlzLmFkZCgnTm90aWZpY2F0aW9uc19BbHdheXNfTm90aWZ5X01vYmlsZScsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0XHRpMThuRGVzY3JpcHRpb246ICdOb3RpZmljYXRpb25zX0Fsd2F5c19Ob3RpZnlfTW9iaWxlX0Rlc2NyaXB0aW9uJyxcblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuc2VjdGlvbignUkVTVCBBUEknLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0FQSV9Vc2VyX0xpbWl0JywgNTAwLCB7XG5cdFx0XHR0eXBlOiAnaW50Jyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ0FQSV9Vc2VyX0xpbWl0Jyxcblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuc2VjdGlvbignSWZyYW1lX0ludGVncmF0aW9uJywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ0lmcmFtZV9JbnRlZ3JhdGlvbl9zZW5kX2VuYWJsZScsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0lmcmFtZV9JbnRlZ3JhdGlvbl9zZW5kX3RhcmdldF9vcmlnaW4nLCAnKicsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdFx0ZW5hYmxlUXVlcnk6IHtcblx0XHRcdFx0X2lkOiAnSWZyYW1lX0ludGVncmF0aW9uX3NlbmRfZW5hYmxlJyxcblx0XHRcdFx0dmFsdWU6IHRydWUsXG5cdFx0XHR9LFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdJZnJhbWVfSW50ZWdyYXRpb25fcmVjZWl2ZV9lbmFibGUnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzLmFkZCgnSWZyYW1lX0ludGVncmF0aW9uX3JlY2VpdmVfb3JpZ2luJywgJyonLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ0lmcmFtZV9JbnRlZ3JhdGlvbl9yZWNlaXZlX2VuYWJsZScsXG5cdFx0XHRcdHZhbHVlOiB0cnVlLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuc2VjdGlvbignVHJhbnNsYXRpb25zJywgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdDdXN0b21fVHJhbnNsYXRpb25zJywgJycsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0fSk7XG5cdHJldHVybiB0aGlzLnNlY3Rpb24oJ1N0cmVhbV9DYXN0JywgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdTdHJlYW1fQ2FzdF9BZGRyZXNzJywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdH0pO1xuXHR9KTtcbn0pO1xuXG5Sb2NrZXRDaGF0LnNldHRpbmdzLmFkZEdyb3VwKCdNZXNzYWdlJywgZnVuY3Rpb24oKSB7XG5cdHRoaXMuc2VjdGlvbignTWVzc2FnZV9BdHRhY2htZW50cycsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdNZXNzYWdlX0F0dGFjaG1lbnRzX0dyb3VwQXR0YWNoJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ01lc3NhZ2VfQXR0YWNobWVudHNfR3JvdXBBdHRhY2hEZXNjcmlwdGlvbicsXG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ01lc3NhZ2VfQXVkaW8nLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnTWVzc2FnZV9BdWRpb1JlY29yZGVyRW5hYmxlZCcsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ01lc3NhZ2VfQXVkaW9SZWNvcmRlckVuYWJsZWREZXNjcmlwdGlvbicsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ01lc3NhZ2VfQXVkaW9fYml0UmF0ZScsIDMyLCB7XG5cdFx0XHR0eXBlOiAnaW50Jyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX0FsbG93RWRpdGluZycsIHRydWUsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfQWxsb3dFZGl0aW5nX0Jsb2NrRWRpdEluTWludXRlcycsIDAsIHtcblx0XHR0eXBlOiAnaW50Jyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdFx0aTE4bkRlc2NyaXB0aW9uOiAnTWVzc2FnZV9BbGxvd0VkaXRpbmdfQmxvY2tFZGl0SW5NaW51dGVzRGVzY3JpcHRpb24nLFxuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfQWxsb3dEZWxldGluZycsIHRydWUsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfQWxsb3dEZWxldGluZ19CbG9ja0RlbGV0ZUluTWludXRlcycsIDAsIHtcblx0XHR0eXBlOiAnaW50Jyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdFx0aTE4bkRlc2NyaXB0aW9uOiAnTWVzc2FnZV9BbGxvd0RlbGV0aW5nX0Jsb2NrRGVsZXRlSW5NaW51dGVzJyxcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX0FsbG93VW5yZWNvZ25pemVkU2xhc2hDb21tYW5kJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfQWxsb3dEaXJlY3RNZXNzYWdlc1RvWW91cnNlbGYnLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX0Fsd2F5c1NlYXJjaFJlZ0V4cCcsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfU2hvd0VkaXRlZFN0YXR1cycsIHRydWUsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfU2hvd0RlbGV0ZWRTdGF0dXMnLCBmYWxzZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9BbGxvd0JhZFdvcmRzRmlsdGVyJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfQmFkV29yZHNGaWx0ZXJMaXN0JywgJycsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9LZWVwSGlzdG9yeScsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX01heEFsbCcsIDAsIHtcblx0XHR0eXBlOiAnaW50Jyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9NYXhBbGxvd2VkU2l6ZScsIDUwMDAsIHtcblx0XHR0eXBlOiAnaW50Jyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9TaG93Rm9ybWF0dGluZ1RpcHMnLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX1NldE5hbWVUb0FsaWFzRW5hYmxlZCcsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogZmFsc2UsXG5cdFx0aTE4bkRlc2NyaXB0aW9uOiAnTWVzc2FnZV9TZXROYW1lVG9BbGlhc0VuYWJsZWRfRGVzY3JpcHRpb24nLFxuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfR3JvdXBpbmdQZXJpb2QnLCAzMDAsIHtcblx0XHR0eXBlOiAnaW50Jyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdFx0aTE4bkRlc2NyaXB0aW9uOiAnTWVzc2FnZV9Hcm91cGluZ1BlcmlvZERlc2NyaXB0aW9uJyxcblx0fSk7XG5cdHRoaXMuYWRkKCdBUElfRW1iZWQnLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdBUElfRW1iZWRfVXNlckFnZW50JywgJ01vemlsbGEvNS4wIChYMTE7IExpbnV4IHg4Nl82NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzQxLjAuMjIyNy4wIFNhZmFyaS81MzcuMzYnLCB7XG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ0FQSV9FbWJlZENhY2hlRXhwaXJhdGlvbkRheXMnLCAzMCwge1xuXHRcdHR5cGU6ICdpbnQnLFxuXHRcdHB1YmxpYzogZmFsc2UsXG5cdH0pO1xuXHR0aGlzLmFkZCgnQVBJX0VtYmVkX2NsZWFyX2NhY2hlX25vdycsICdPRW1iZWRDYWNoZUNsZWFudXAnLCB7XG5cdFx0dHlwZTogJ2FjdGlvbicsXG5cdFx0YWN0aW9uVGV4dDogJ2NsZWFyJyxcblx0XHRpMThuTGFiZWw6ICdjbGVhcl9jYWNoZV9ub3cnLFxuXHR9KTtcblx0dGhpcy5hZGQoJ0FQSV9FbWJlZERpc2FibGVkRm9yJywgJycsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdFx0aTE4bkRlc2NyaXB0aW9uOiAnQVBJX0VtYmVkRGlzYWJsZWRGb3JfRGVzY3JpcHRpb24nLFxuXHR9KTtcblx0dGhpcy5hZGQoJ0FQSV9FbWJlZElnbm9yZWRIb3N0cycsICdsb2NhbGhvc3QsIDEyNy4wLjAuMSwgMTAuMC4wLjAvOCwgMTcyLjE2LjAuMC8xMiwgMTkyLjE2OC4wLjAvMTYnLCB7XG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0aTE4bkRlc2NyaXB0aW9uOiAnQVBJX0VtYmVkSWdub3JlZEhvc3RzX0Rlc2NyaXB0aW9uJyxcblx0fSk7XG5cdHRoaXMuYWRkKCdBUElfRW1iZWRTYWZlUG9ydHMnLCAnODAsIDQ0MycsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX1RpbWVGb3JtYXQnLCAnTFQnLCB7XG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0cHVibGljOiB0cnVlLFxuXHRcdGkxOG5EZXNjcmlwdGlvbjogJ01lc3NhZ2VfVGltZUZvcm1hdF9EZXNjcmlwdGlvbicsXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9EYXRlRm9ybWF0JywgJ0xMJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRpMThuRGVzY3JpcHRpb246ICdNZXNzYWdlX0RhdGVGb3JtYXRfRGVzY3JpcHRpb24nLFxuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfVGltZUFuZERhdGVGb3JtYXQnLCAnTExMJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRpMThuRGVzY3JpcHRpb246ICdNZXNzYWdlX1RpbWVBbmREYXRlRm9ybWF0X0Rlc2NyaXB0aW9uJyxcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX1F1b3RlQ2hhaW5MaW1pdCcsIDIsIHtcblx0XHR0eXBlOiAnaW50Jyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9IaWRlVHlwZV91aicsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXNzYWdlX0hpZGVUeXBlX3VsJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHR9KTtcblx0dGhpcy5hZGQoJ01lc3NhZ2VfSGlkZVR5cGVfcnUnLCBmYWxzZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWVzc2FnZV9IaWRlVHlwZV9hdScsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cblx0dGhpcy5hZGQoJ01lc3NhZ2VfSGlkZVR5cGVfbXV0ZV91bm11dGUnLCBmYWxzZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdH0pO1xuXG5cdHRoaXMuYWRkKCdNZXNzYWdlX0VyYXN1cmVUeXBlJywgJ0RlbGV0ZScsIHtcblx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRwdWJsaWM6IHRydWUsXG5cdFx0dmFsdWVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGtleTogJ0tlZXAnLFxuXHRcdFx0XHRpMThuTGFiZWw6ICdNZXNzYWdlX0VyYXN1cmVUeXBlX0tlZXAnLFxuXHRcdFx0fSwge1xuXHRcdFx0XHRrZXk6ICdEZWxldGUnLFxuXHRcdFx0XHRpMThuTGFiZWw6ICdNZXNzYWdlX0VyYXN1cmVUeXBlX0RlbGV0ZScsXG5cdFx0XHR9LCB7XG5cdFx0XHRcdGtleTogJ1VubGluaycsXG5cdFx0XHRcdGkxOG5MYWJlbDogJ01lc3NhZ2VfRXJhc3VyZVR5cGVfVW5saW5rJyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSk7XG59KTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5hZGRHcm91cCgnTWV0YScsIGZ1bmN0aW9uKCkge1xuXHR0aGlzLmFkZCgnTWV0YV9sYW5ndWFnZScsICcnLCB7XG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWV0YV9mYl9hcHBfaWQnLCAnJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHR9KTtcblx0dGhpcy5hZGQoJ01ldGFfcm9ib3RzJywgJ0lOREVYLEZPTExPVycsIHtcblx0XHR0eXBlOiAnc3RyaW5nJyxcblx0fSk7XG5cdHRoaXMuYWRkKCdNZXRhX2dvb2dsZS1zaXRlLXZlcmlmaWNhdGlvbicsICcnLCB7XG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdH0pO1xuXHR0aGlzLmFkZCgnTWV0YV9tc3ZhbGlkYXRlMDEnLCAnJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHR9KTtcblx0cmV0dXJuIHRoaXMuYWRkKCdNZXRhX2N1c3RvbScsICcnLCB7XG5cdFx0dHlwZTogJ2NvZGUnLFxuXHRcdGNvZGU6ICd0ZXh0L2h0bWwnLFxuXHRcdG11bHRpbGluZTogdHJ1ZSxcblx0fSk7XG59KTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5hZGRHcm91cCgnUHVzaCcsIGZ1bmN0aW9uKCkge1xuXHR0aGlzLmFkZCgnUHVzaF9lbmFibGUnLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRhbGVydDogJ1B1c2hfU2V0dGluZ19SZXF1aXJlc19SZXN0YXJ0X0FsZXJ0Jyxcblx0fSk7XG5cdHRoaXMuYWRkKCdQdXNoX2RlYnVnJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHRcdGFsZXJ0OiAnUHVzaF9TZXR0aW5nX1JlcXVpcmVzX1Jlc3RhcnRfQWxlcnQnLFxuXHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRfaWQ6ICdQdXNoX2VuYWJsZScsXG5cdFx0XHR2YWx1ZTogdHJ1ZSxcblx0XHR9LFxuXHR9KTtcblx0dGhpcy5hZGQoJ1B1c2hfZW5hYmxlX2dhdGV3YXknLCB0cnVlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdGFsZXJ0OiAnUHVzaF9TZXR0aW5nX1JlcXVpcmVzX1Jlc3RhcnRfQWxlcnQnLFxuXHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRfaWQ6ICdQdXNoX2VuYWJsZScsXG5cdFx0XHR2YWx1ZTogdHJ1ZSxcblx0XHR9LFxuXHR9KTtcblx0dGhpcy5hZGQoJ1B1c2hfZ2F0ZXdheScsICdodHRwczovL2dhdGV3YXkucm9ja2V0LmNoYXQnLCB7XG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0YWxlcnQ6ICdQdXNoX1NldHRpbmdfUmVxdWlyZXNfUmVzdGFydF9BbGVydCcsXG5cdFx0ZW5hYmxlUXVlcnk6IFtcblx0XHRcdHtcblx0XHRcdFx0X2lkOiAnUHVzaF9lbmFibGUnLFxuXHRcdFx0XHR2YWx1ZTogdHJ1ZSxcblx0XHRcdH0sIHtcblx0XHRcdFx0X2lkOiAnUHVzaF9lbmFibGVfZ2F0ZXdheScsXG5cdFx0XHRcdHZhbHVlOiB0cnVlLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9KTtcblx0dGhpcy5hZGQoJ1B1c2hfcHJvZHVjdGlvbicsIHRydWUsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0cHVibGljOiB0cnVlLFxuXHRcdGFsZXJ0OiAnUHVzaF9TZXR0aW5nX1JlcXVpcmVzX1Jlc3RhcnRfQWxlcnQnLFxuXHRcdGVuYWJsZVF1ZXJ5OiBbXG5cdFx0XHR7XG5cdFx0XHRcdF9pZDogJ1B1c2hfZW5hYmxlJyxcblx0XHRcdFx0dmFsdWU6IHRydWUsXG5cdFx0XHR9LCB7XG5cdFx0XHRcdF9pZDogJ1B1c2hfZW5hYmxlX2dhdGV3YXknLFxuXHRcdFx0XHR2YWx1ZTogZmFsc2UsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0pO1xuXHR0aGlzLmFkZCgnUHVzaF90ZXN0X3B1c2gnLCAncHVzaF90ZXN0Jywge1xuXHRcdHR5cGU6ICdhY3Rpb24nLFxuXHRcdGFjdGlvblRleHQ6ICdTZW5kX2FfdGVzdF9wdXNoX3RvX215X3VzZXInLFxuXHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRfaWQ6ICdQdXNoX2VuYWJsZScsXG5cdFx0XHR2YWx1ZTogdHJ1ZSxcblx0XHR9LFxuXHR9KTtcblx0dGhpcy5zZWN0aW9uKCdDZXJ0aWZpY2F0ZXNfYW5kX0tleXMnLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnUHVzaF9hcG5fcGFzc3BocmFzZScsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnUHVzaF9hcG5fa2V5JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdQdXNoX2Fwbl9jZXJ0JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdQdXNoX2Fwbl9kZXZfcGFzc3BocmFzZScsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnUHVzaF9hcG5fZGV2X2tleScsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdG11bHRpbGluZTogdHJ1ZSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnUHVzaF9hcG5fZGV2X2NlcnQnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWUsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ1B1c2hfZ2NtX2FwaV9rZXknLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdQdXNoX2djbV9wcm9qZWN0X251bWJlcicsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0fSk7XG5cdHJldHVybiB0aGlzLnNlY3Rpb24oJ1ByaXZhY3knLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnUHVzaF9zaG93X3VzZXJuYW1lX3Jvb20nLCB0cnVlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0fSk7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCdQdXNoX3Nob3dfbWVzc2FnZScsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0fSk7XG59KTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5hZGRHcm91cCgnTGF5b3V0JywgZnVuY3Rpb24oKSB7XG5cdHRoaXMuc2VjdGlvbignQ29udGVudCcsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdMYXlvdXRfSG9tZV9UaXRsZScsICdIb21lJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0xheW91dF9Ib21lX0JvZHknLCAnPHA+V2VsY29tZSB0byBSb2NrZXQuQ2hhdCE8L3A+XFxuPHA+VGhlIFJvY2tldC5DaGF0IGRlc2t0b3BzIGFwcHMgZm9yIFdpbmRvd3MsIG1hY09TIGFuZCBMaW51eCBhcmUgYXZhaWxhYmxlIHRvIGRvd25sb2FkIDxhIHRpdGxlPVwiUm9ja2V0LkNoYXQgZGVza3RvcCBhcHBzXCIgaHJlZj1cImh0dHBzOiAvL3JvY2tldC5jaGF0L2Rvd25sb2FkXCIgdGFyZ2V0PVwiX2JsYW5rXCIgcmVsPVwibm9vcGVuZXJcIj5oZXJlPC9hPi48L3A+PHA+VGhlIG5hdGl2ZSBtb2JpbGUgYXBwLCBSb2NrZXQuQ2hhdCssXFxuICBmb3IgQW5kcm9pZCBhbmQgaU9TIGlzIGF2YWlsYWJsZSBmcm9tIDxhIHRpdGxlPVwiUm9ja2V0LkNoYXQrIG9uIEdvb2dsZSBQbGF5XCIgaHJlZj1cImh0dHBzOiAvL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9hcHBzL2RldGFpbHM/aWQ9Y2hhdC5yb2NrZXQuYW5kcm9pZFwiIHRhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyXCI+R29vZ2xlIFBsYXk8L2E+IGFuZCB0aGUgPGEgdGl0bGU9XCJSb2NrZXQuQ2hhdCsgb24gdGhlIEFwcCBTdG9yZVwiIGhyZWY9XCJodHRwczogLy9pdHVuZXMuYXBwbGUuY29tL2FwcC9yb2NrZXQtY2hhdC9pZDExNDg3NDEyNTJcIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiPkFwcCBTdG9yZTwvYT4uPC9wPlxcbjxwPkZvciBmdXJ0aGVyIGhlbHAsIHBsZWFzZSBjb25zdWx0IHRoZSA8YSB0aXRsZT1cIlJvY2tldC5DaGF0IERvY3VtZW50YXRpb25cIiBocmVmPVwiaHR0cHM6IC8vcm9ja2V0LmNoYXQvZG9jcy9cIiB0YXJnZXQ9XCJfYmxhbmtcIiByZWw9XCJub29wZW5lclwiPmRvY3VtZW50YXRpb248L2E+LjwvcD5cXG48cD5JZiB5b3VcXCdyZSBhbiBhZG1pbiwgZmVlbCBmcmVlIHRvIGNoYW5nZSB0aGlzIGNvbnRlbnQgdmlhIDxzdHJvbmc+QWRtaW5pc3RyYXRpb248L3N0cm9uZz4gLT4gPHN0cm9uZz5MYXlvdXQ8L3N0cm9uZz4gLT4gPHN0cm9uZz5Ib21lIEJvZHk8L3N0cm9uZz4uIE9yIGNsaWNraW5nIDxhIHRpdGxlPVwiSG9tZSBCb2R5IExheW91dFwiIGhyZWY9XCIvYWRtaW4vTGF5b3V0XCI+aGVyZTwvYT4uPC9wPicsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdGNvZGU6ICd0ZXh0L2h0bWwnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdMYXlvdXRfVGVybXNfb2ZfU2VydmljZScsICdUZXJtcyBvZiBTZXJ2aWNlIDxicj4gR28gdG8gQVBQIFNFVFRJTkdTIC0+IExheW91dCB0byBjdXN0b21pemUgdGhpcyBwYWdlLicsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdGNvZGU6ICd0ZXh0L2h0bWwnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdMYXlvdXRfTG9naW5fVGVybXMnLCAnQnkgcHJvY2VlZGluZyB5b3UgYXJlIGFncmVlaW5nIHRvIG91ciA8YSBocmVmPVwidGVybXMtb2Ytc2VydmljZVwiPlRlcm1zIG9mIFNlcnZpY2U8L2E+IGFuZCA8YSBocmVmPVwicHJpdmFjeS1wb2xpY3lcIj5Qcml2YWN5IFBvbGljeTwvYT4uJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWUsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0xheW91dF9Qcml2YWN5X1BvbGljeScsICdQcml2YWN5IFBvbGljeSA8YnI+IEdvIHRvIEFQUCBTRVRUSU5HUyAtPiBMYXlvdXQgdG8gY3VzdG9taXplIHRoaXMgcGFnZS4nLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRjb2RlOiAndGV4dC9odG1sJyxcblx0XHRcdG11bHRpbGluZTogdHJ1ZSxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0xheW91dF9TaWRlbmF2X0Zvb3RlcicsICc8YSBocmVmPVwiL2hvbWVcIj48aW1nIHNyYz1cImFzc2V0cy9sb2dvXCIvPjwvYT4nLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRjb2RlOiAndGV4dC9odG1sJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ0xheW91dF9TaWRlbmF2X0Zvb3Rlcl9kZXNjcmlwdGlvbicsXG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ0N1c3RvbV9TY3JpcHRzJywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ0N1c3RvbV9TY3JpcHRfTG9nZ2VkX091dCcsICcvL0FkZCB5b3VyIHNjcmlwdCcsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdG11bHRpbGluZTogdHJ1ZSxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0N1c3RvbV9TY3JpcHRfTG9nZ2VkX0luJywgJy8vQWRkIHlvdXIgc2NyaXB0Jywge1xuXHRcdFx0dHlwZTogJ2NvZGUnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdH0pO1xuXHR9KTtcblx0cmV0dXJuIHRoaXMuc2VjdGlvbignVXNlcl9JbnRlcmZhY2UnLCBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmFkZCgnVUlfRGlzcGxheVJvbGVzJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdVSV9Hcm91cF9DaGFubmVsc19CeV9UeXBlJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0cHVibGljOiBmYWxzZSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnVUlfVXNlX05hbWVfQXZhdGFyJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnVUlfVXNlX1JlYWxfTmFtZScsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ1VJX0NsaWNrX0RpcmVjdF9NZXNzYWdlJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnVUlfVW5yZWFkX0NvdW50ZXJfU3R5bGUnLCAnRGlmZmVyZW50X1N0eWxlX0Zvcl9Vc2VyX01lbnRpb25zJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ1NhbWVfU3R5bGVfRm9yX01lbnRpb25zJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdTYW1lX1N0eWxlX0Zvcl9NZW50aW9ucycsXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICdEaWZmZXJlbnRfU3R5bGVfRm9yX1VzZXJfTWVudGlvbnMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0RpZmZlcmVudF9TdHlsZV9Gb3JfVXNlcl9NZW50aW9ucycsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdFx0cHVibGljOiB0cnVlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdVSV9BbGxvd19yb29tX25hbWVzX3dpdGhfc3BlY2lhbF9jaGFycycsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRwdWJsaWM6IHRydWUsXG5cdFx0fSk7XG5cdH0pO1xufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3MuYWRkR3JvdXAoJ0xvZ3MnLCBmdW5jdGlvbigpIHtcblx0dGhpcy5hZGQoJ0xvZ19MZXZlbCcsICcwJywge1xuXHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdHZhbHVlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRrZXk6ICcwJyxcblx0XHRcdFx0aTE4bkxhYmVsOiAnMF9FcnJvcnNfT25seScsXG5cdFx0XHR9LCB7XG5cdFx0XHRcdGtleTogJzEnLFxuXHRcdFx0XHRpMThuTGFiZWw6ICcxX0Vycm9yc19hbmRfSW5mb3JtYXRpb24nLFxuXHRcdFx0fSwge1xuXHRcdFx0XHRrZXk6ICcyJyxcblx0XHRcdFx0aTE4bkxhYmVsOiAnMl9FcnJvc19JbmZvcm1hdGlvbl9hbmRfRGVidWcnLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdMb2dfUGFja2FnZScsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdMb2dfRmlsZScsIGZhbHNlLCB7XG5cdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdHB1YmxpYzogdHJ1ZSxcblx0fSk7XG5cdHRoaXMuYWRkKCdMb2dfVmlld19MaW1pdCcsIDEwMDAsIHtcblx0XHR0eXBlOiAnaW50Jyxcblx0fSk7XG5cblx0dGhpcy5hZGQoJ0xvZ19UcmFjZV9NZXRob2RzJywgZmFsc2UsIHtcblx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdH0pO1xuXG5cdHRoaXMuYWRkKCdMb2dfVHJhY2VfTWV0aG9kc19GaWx0ZXInLCAnJywge1xuXHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRfaWQ6ICdMb2dfVHJhY2VfTWV0aG9kcycsXG5cdFx0XHR2YWx1ZTogdHJ1ZSxcblx0XHR9LFxuXHR9KTtcblxuXHR0aGlzLmFkZCgnTG9nX1RyYWNlX1N1YnNjcmlwdGlvbnMnLCBmYWxzZSwge1xuXHRcdHR5cGU6ICdib29sZWFuJyxcblx0fSk7XG5cblx0dGhpcy5hZGQoJ0xvZ19UcmFjZV9TdWJzY3JpcHRpb25zX0ZpbHRlcicsICcnLCB7XG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0ZW5hYmxlUXVlcnk6IHtcblx0XHRcdF9pZDogJ0xvZ19UcmFjZV9TdWJzY3JpcHRpb25zJyxcblx0XHRcdHZhbHVlOiB0cnVlLFxuXHRcdH0sXG5cdH0pO1xuXG5cdHRoaXMuc2VjdGlvbignUHJvbWV0aGV1cycsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdQcm9tZXRoZXVzX0VuYWJsZWQnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0aTE4bkxhYmVsOiAnRW5hYmxlZCcsXG5cdFx0fSk7XG5cdFx0Ly8gU2VlIHRoZSBkZWZhdWx0IHBvcnQgYWxsb2NhdGlvbiBhdCBodHRwczovL2dpdGh1Yi5jb20vcHJvbWV0aGV1cy9wcm9tZXRoZXVzL3dpa2kvRGVmYXVsdC1wb3J0LWFsbG9jYXRpb25zXG5cdFx0dGhpcy5hZGQoJ1Byb21ldGhldXNfUG9ydCcsIDk0NTgsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0aTE4bkxhYmVsOiAnUG9ydCcsXG5cdFx0fSk7XG5cdH0pO1xufSk7XG5cblJvY2tldENoYXQuc2V0dGluZ3MuYWRkR3JvdXAoJ1NldHVwX1dpemFyZCcsIGZ1bmN0aW9uKCkge1xuXHR0aGlzLnNlY3Rpb24oJ09yZ2FuaXphdGlvbl9JbmZvJywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ09yZ2FuaXphdGlvbl9UeXBlJywgJycsIHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0dmFsdWVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdub25wcm9maXQnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ05vbnByb2ZpdCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdlbnRlcnByaXNlJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdFbnRlcnByaXNlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2dvdmVybm1lbnQnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0dvdmVybm1lbnQnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnY29tbXVuaXR5Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb21tdW5pdHknLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHRcdHdpemFyZDoge1xuXHRcdFx0XHRzdGVwOiAyLFxuXHRcdFx0XHRvcmRlcjogMCxcblx0XHRcdH0sXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ09yZ2FuaXphdGlvbl9OYW1lJywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0d2l6YXJkOiB7XG5cdFx0XHRcdHN0ZXA6IDIsXG5cdFx0XHRcdG9yZGVyOiAxLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnSW5kdXN0cnknLCAnJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2Fkdm9jYWN5Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdBZHZvY2FjeScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdibG9ja2NoYWluJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdCbG9ja2NoYWluJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2hlbHBDZW50ZXInLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0hlbHBfQ2VudGVyJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ21hbnVmYWN0dXJpbmcnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ01hbnVmYWN0dXJpbmcnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnZWR1Y2F0aW9uJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdFZHVjYXRpb24nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnaW5zdXJhbmNlJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdJbnN1cmFuY2UnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbG9naXN0aWNzJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdMb2dpc3RpY3MnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnY29uc3VsdGluZycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ29uc3VsdGluZycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdlbnRlcnRhaW5tZW50Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdFbnRlcnRhaW5tZW50Jyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3B1YmxpY1JlbGF0aW9ucycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnUHVibGljX1JlbGF0aW9ucycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdyZWxpZ2lvdXMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ1JlbGlnaW91cycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdnYW1pbmcnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0dhbWluZycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdzb2NpYWxOZXR3b3JrJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdTb2NpYWxfTmV0d29yaycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdyZWFsRXN0YXRlJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdSZWFsX0VzdGF0ZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICd0b3VyaXNtJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdUb3VyaXNtJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3RlbGVjb20nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ1RlbGVjb20nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnY29uc3VtZXJHb29kcycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ29uc3VtZXJfR29vZHMnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnZmluYW5jaWFsU2VydmljZXMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0ZpbmFuY2lhbF9TZXJ2aWNlcycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdoZWFsdGhjYXJlUGhhcm1hY2V1dGljYWwnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0hlYWx0aGNhcmVfYW5kX1BoYXJtYWNldXRpY2FsJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2luZHVzdHJ5Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdJbmR1c3RyeScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdtZWRpYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnTWVkaWEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAncmV0YWlsJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdSZXRhaWwnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAndGVjaG5vbG9neVNlcnZpY2VzJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdUZWNobm9sb2d5X1NlcnZpY2VzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3RlY2hub2xvZ3lQcm92aWRlcicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnVGVjaG5vbG9neV9Qcm92aWRlcicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdvdGhlcicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnT3RoZXInLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHRcdHdpemFyZDoge1xuXHRcdFx0XHRzdGVwOiAyLFxuXHRcdFx0XHRvcmRlcjogMixcblx0XHRcdH0sXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ1NpemUnLCAnJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJzAnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJzEtMTAgcGVvcGxlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJzEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJzExLTUwIHBlb3BsZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICcyJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICc1MS0xMDAgcGVvcGxlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJzMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJzEwMS0yNTAgcGVvcGxlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJzQnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJzI1MS01MDAgcGVvcGxlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJzUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJzUwMS0xMDAwIHBlb3BsZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICc2Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICcxMDAxLTQwMDAgcGVvcGxlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJzcnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJzQwMDAgb3IgbW9yZSBwZW9wbGUnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XSxcblx0XHRcdHdpemFyZDoge1xuXHRcdFx0XHRzdGVwOiAyLFxuXHRcdFx0XHRvcmRlcjogMyxcblx0XHRcdH0sXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0NvdW50cnknLCAnJywge1xuXHRcdFx0dHlwZTogJ3NlbGVjdCcsXG5cdFx0XHR2YWx1ZXM6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3dvcmxkd2lkZScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnV29ybGR3aWRlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2FmZ2hhbmlzdGFuJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0FmZ2hhbmlzdGFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2FsYmFuaWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQWxiYW5pYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdhbGdlcmlhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0FsZ2VyaWEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnYW1lcmljYW5TYW1vYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9BbWVyaWNhbl9TYW1vYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdhbmRvcnJhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0FuZG9ycmEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnYW5nb2xhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0FuZ29sYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdhbmd1aWxsYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Bbmd1aWxsYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdhbnRhcmN0aWNhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0FudGFyY3RpY2EnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnYW50aWd1YUFuZEJhcmJ1ZGEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQW50aWd1YV9hbmRfQmFyYnVkYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdhcmdlbnRpbmEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQXJnZW50aW5hJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2FybWVuaWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQXJtZW5pYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdhcnViYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9BcnViYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdhdXN0cmFsaWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQXVzdHJhbGlhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2F1c3RyaWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQXVzdHJpYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdhemVyYmFpamFuJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0F6ZXJiYWlqYW4nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnYmFoYW1hcycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9CYWhhbWFzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2JhaHJhaW4nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQmFocmFpbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdiYW5nbGFkZXNoJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0JhbmdsYWRlc2gnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnYmFyYmFkb3MnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQmFyYmFkb3MnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnYmVsYXJ1cycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9CZWxhcnVzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2JlbGdpdW0nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQmVsZ2l1bScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdiZWxpemUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQmVsaXplJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2JlbmluJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0JlbmluJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2Jlcm11ZGEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQmVybXVkYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdiaHV0YW4nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQmh1dGFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2JvbGl2aWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQm9saXZpYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdib3NuaWFBbmRIZXJ6ZWdvdmluYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Cb3NuaWFfYW5kX0hlcnplZ292aW5hJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2JvdHN3YW5hJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0JvdHN3YW5hJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2JvdXZldElzbGFuZCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Cb3V2ZXRfSXNsYW5kJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2JyYXppbCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9CcmF6aWwnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnYnJpdGlzaEluZGlhbk9jZWFuVGVycml0b3J5Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0JyaXRpc2hfSW5kaWFuX09jZWFuX1RlcnJpdG9yeScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdicnVuZWlEYXJ1c3NhbGFtJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0JydW5laV9EYXJ1c3NhbGFtJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2J1bGdhcmlhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0J1bGdhcmlhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2J1cmtpbmFGYXNvJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0J1cmtpbmFfRmFzbycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdidXJ1bmRpJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0J1cnVuZGknLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnY2FtYm9kaWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQ2FtYm9kaWEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnY2FtZXJvb24nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQ2FtZXJvb24nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnY2FuYWRhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0NhbmFkYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdjYXBlVmVyZGUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQ2FwZV9WZXJkZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdjYXltYW5Jc2xhbmRzJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0NheW1hbl9Jc2xhbmRzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2NlbnRyYWxBZnJpY2FuUmVwdWJsaWMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQ2VudHJhbF9BZnJpY2FuX1JlcHVibGljJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2NoYWQnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQ2hhZCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdjaGlsZScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9DaGlsZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdjaGluYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9DaGluYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdjaHJpc3RtYXNJc2xhbmQnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQ2hyaXN0bWFzX0lzbGFuZCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdjb2Nvc0tlZWxpbmdJc2xhbmRzJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0NvY29zX0tlZWxpbmdfSXNsYW5kcycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdjb2xvbWJpYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Db2xvbWJpYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdjb21vcm9zJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0NvbW9yb3MnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnY29uZ28nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQ29uZ28nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnY29uZ29UaGVEZW1vY3JhdGljUmVwdWJsaWNPZlRoZScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Db25nb19UaGVfRGVtb2NyYXRpY19SZXB1YmxpY19vZl9UaGUnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnY29va0lzbGFuZHMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfQ29va19Jc2xhbmRzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2Nvc3RhUmljYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Db3N0YV9SaWNhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2NvdGVEaXZvaXJlJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0NvdGVfRGl2b2lyZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdjcm9hdGlhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0Nyb2F0aWEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnY3ViYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9DdWJhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2N5cHJ1cycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9DeXBydXMnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnY3plY2hSZXB1YmxpYycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9DemVjaF9SZXB1YmxpYycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdkZW5tYXJrJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0Rlbm1hcmsnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnZGppYm91dGknLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfRGppYm91dGknLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnZG9taW5pY2EnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfRG9taW5pY2EnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnZG9taW5pY2FuUmVwdWJsaWMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfRG9taW5pY2FuX1JlcHVibGljJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2VjdWFkb3InLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfRWN1YWRvcicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdlZ3lwdCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9FZ3lwdCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdlbFNhbHZhZG9yJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0VsX1NhbHZhZG9yJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2VxdWF0b3JpYWxHdWluZWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfRXF1YXRvcmlhbF9HdWluZWEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnZXJpdHJlYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Fcml0cmVhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2VzdG9uaWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfRXN0b25pYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdldGhpb3BpYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9FdGhpb3BpYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdmYWxrbGFuZElzbGFuZHNNYWx2aW5hcycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9GYWxrbGFuZF9Jc2xhbmRzX01hbHZpbmFzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2Zhcm9lSXNsYW5kcycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9GYXJvZV9Jc2xhbmRzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2ZpamknLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfRmlqaScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdmaW5sYW5kJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0ZpbmxhbmQnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnZnJhbmNlJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0ZyYW5jZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdmcmVuY2hHdWlhbmEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfRnJlbmNoX0d1aWFuYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdmcmVuY2hQb2x5bmVzaWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfRnJlbmNoX1BvbHluZXNpYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdmcmVuY2hTb3V0aGVyblRlcnJpdG9yaWVzJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0ZyZW5jaF9Tb3V0aGVybl9UZXJyaXRvcmllcycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdnYWJvbicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9HYWJvbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdnYW1iaWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfR2FtYmlhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2dlb3JnaWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfR2VvcmdpYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdnZXJtYW55Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0dlcm1hbnknLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnZ2hhbmEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfR2hhbmEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnZ2licmFsdGFyJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0dpYnJhbHRhcicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdncmVlY2UnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfR3JlZWNlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2dyZWVubGFuZCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9HcmVlbmxhbmQnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnZ3JlbmFkYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9HcmVuYWRhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2d1YWRlbG91cGUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfR3VhZGVsb3VwZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdndWFtJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0d1YW0nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnZ3VhdGVtYWxhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0d1YXRlbWFsYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdndWluZWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfR3VpbmVhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2d1aW5lYUJpc3NhdScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9HdWluZWFfYmlzc2F1Jyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2d1eWFuYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9HdXlhbmEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnaGFpdGknLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfSGFpdGknLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnaGVhcmRJc2xhbmRBbmRNY2RvbmFsZElzbGFuZHMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfSGVhcmRfSXNsYW5kX2FuZF9NY2RvbmFsZF9Jc2xhbmRzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2hvbHlTZWVWYXRpY2FuQ2l0eVN0YXRlJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0hvbHlfU2VlX1ZhdGljYW5fQ2l0eV9TdGF0ZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdob25kdXJhcycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Ib25kdXJhcycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdob25nS29uZycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Ib25nX0tvbmcnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnaHVuZ2FyeScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9IdW5nYXJ5Jyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2ljZWxhbmQnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfSWNlbGFuZCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdpbmRpYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9JbmRpYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdpbmRvbmVzaWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfSW5kb25lc2lhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2lyYW5Jc2xhbWljUmVwdWJsaWNPZicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9JcmFuX0lzbGFtaWNfUmVwdWJsaWNfb2YnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnaXJhcScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9JcmFxJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2lyZWxhbmQnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfSXJlbGFuZCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdpc3JhZWwnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfSXNyYWVsJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2l0YWx5Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0l0YWx5Jyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2phbWFpY2EnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfSmFtYWljYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdqYXBhbicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9KYXBhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdqb3JkYW4nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfSm9yZGFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2themFraHN0YW4nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfS2F6YWtoc3RhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdrZW55YScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9LZW55YScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdraXJpYmF0aScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9LaXJpYmF0aScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdrb3JlYURlbW9jcmF0aWNQZW9wbGVzUmVwdWJsaWNPZicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Lb3JlYV9EZW1vY3JhdGljX1Blb3BsZXNfUmVwdWJsaWNfb2YnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAna29yZWFSZXB1YmxpY09mJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0tvcmVhX1JlcHVibGljX29mJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2t1d2FpdCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9LdXdhaXQnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAna3lyZ3l6c3RhbicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9LeXJneXpzdGFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2xhb1Blb3BsZXNEZW1vY3JhdGljUmVwdWJsaWMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTGFvX1Blb3BsZXNfRGVtb2NyYXRpY19SZXB1YmxpYycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdsYXR2aWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTGF0dmlhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2xlYmFub24nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTGViYW5vbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdsZXNvdGhvJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0xlc290aG8nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbGliZXJpYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9MaWJlcmlhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2xpYnlhbkFyYWJKYW1haGlyaXlhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X0xpYnlhbl9BcmFiX0phbWFoaXJpeWEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbGllY2h0ZW5zdGVpbicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9MaWVjaHRlbnN0ZWluJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ2xpdGh1YW5pYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9MaXRodWFuaWEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbHV4ZW1ib3VyZycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9MdXhlbWJvdXJnJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ21hY2FvJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X01hY2FvJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ21hY2Vkb25pYVRoZUZvcm1lcll1Z29zbGF2UmVwdWJsaWNPZicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9NYWNlZG9uaWFfVGhlX0Zvcm1lcl9ZdWdvc2xhdl9SZXB1YmxpY19vZicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdtYWRhZ2FzY2FyJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X01hZGFnYXNjYXInLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbWFsYXdpJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X01hbGF3aScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdtYWxheXNpYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9NYWxheXNpYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdtYWxkaXZlcycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9NYWxkaXZlcycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdtYWxpJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X01hbGknLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbWFsdGEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTWFsdGEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbWFyc2hhbGxJc2xhbmRzJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X01hcnNoYWxsX0lzbGFuZHMnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbWFydGluaXF1ZScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9NYXJ0aW5pcXVlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ21hdXJpdGFuaWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTWF1cml0YW5pYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdtYXVyaXRpdXMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTWF1cml0aXVzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ21heW90dGUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTWF5b3R0ZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdtZXhpY28nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTWV4aWNvJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ21pY3JvbmVzaWFGZWRlcmF0ZWRTdGF0ZXNPZicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9NaWNyb25lc2lhX0ZlZGVyYXRlZF9TdGF0ZXNfb2YnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbW9sZG92YVJlcHVibGljT2YnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTW9sZG92YV9SZXB1YmxpY19vZicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdtb25hY28nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTW9uYWNvJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ21vbmdvbGlhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X01vbmdvbGlhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ21vbnRzZXJyYXQnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTW9udHNlcnJhdCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdtb3JvY2NvJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X01vcm9jY28nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbW96YW1iaXF1ZScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Nb3phbWJpcXVlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ215YW5tYXInLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTXlhbm1hcicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICduYW1pYmlhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X05hbWliaWEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbmF1cnUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTmF1cnUnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbmVwYWwnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTmVwYWwnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbmV0aGVybGFuZHMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTmV0aGVybGFuZHMnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbmV0aGVybGFuZHNBbnRpbGxlcycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9OZXRoZXJsYW5kc19BbnRpbGxlcycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICduZXdDYWxlZG9uaWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTmV3X0NhbGVkb25pYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICduZXdaZWFsYW5kJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X05ld19aZWFsYW5kJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ25pY2FyYWd1YScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9OaWNhcmFndWEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbmlnZXInLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTmlnZXInLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnbmlnZXJpYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9OaWdlcmlhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ25pdWUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTml1ZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdub3Jmb2xrSXNsYW5kJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X05vcmZvbGtfSXNsYW5kJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ25vcnRoZXJuTWFyaWFuYUlzbGFuZHMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfTm9ydGhlcm5fTWFyaWFuYV9Jc2xhbmRzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ25vcndheScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Ob3J3YXknLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnb21hbicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9PbWFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3Bha2lzdGFuJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1Bha2lzdGFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3BhbGF1Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1BhbGF1Jyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3BhbGVzdGluaWFuVGVycml0b3J5T2NjdXBpZWQnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfUGFsZXN0aW5pYW5fVGVycml0b3J5X09jY3VwaWVkJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3BhbmFtYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9QYW5hbWEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAncGFwdWFOZXdHdWluZWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfUGFwdWFfTmV3X0d1aW5lYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdwYXJhZ3VheScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9QYXJhZ3VheScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdwZXJ1Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1BlcnUnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAncGhpbGlwcGluZXMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfUGhpbGlwcGluZXMnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAncGl0Y2Fpcm4nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfUGl0Y2Fpcm4nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAncG9sYW5kJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1BvbGFuZCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdwb3J0dWdhbCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Qb3J0dWdhbCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdwdWVydG9SaWNvJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1B1ZXJ0b19SaWNvJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3FhdGFyJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1FhdGFyJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3JldW5pb24nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfUmV1bmlvbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdyb21hbmlhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1JvbWFuaWEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAncnVzc2lhbkZlZGVyYXRpb24nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfUnVzc2lhbl9GZWRlcmF0aW9uJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3J3YW5kYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Sd2FuZGEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnc2FpbnRIZWxlbmEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfU2FpbnRfSGVsZW5hJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3NhaW50S2l0dHNBbmROZXZpcycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9TYWludF9LaXR0c19hbmRfTmV2aXMnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnc2FpbnRMdWNpYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9TYWludF9MdWNpYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdzYWludFBpZXJyZUFuZE1pcXVlbG9uJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1NhaW50X1BpZXJyZV9hbmRfTWlxdWVsb24nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnc2FpbnRWaW5jZW50QW5kVGhlR3JlbmFkaW5lcycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9TYWludF9WaW5jZW50X2FuZF9UaGVfR3JlbmFkaW5lcycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdzYW1vYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9TYW1vYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdzYW5NYXJpbm8nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfU2FuX01hcmlubycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdzYW9Ub21lQW5kUHJpbmNpcGUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfU2FvX1RvbWVfYW5kX1ByaW5jaXBlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3NhdWRpQXJhYmlhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1NhdWRpX0FyYWJpYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdzZW5lZ2FsJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1NlbmVnYWwnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnc2VyYmlhQW5kTW9udGVuZWdybycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9TZXJiaWFfYW5kX01vbnRlbmVncm8nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnc2V5Y2hlbGxlcycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9TZXljaGVsbGVzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3NpZXJyYUxlb25lJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1NpZXJyYV9MZW9uZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdzaW5nYXBvcmUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfU2luZ2Fwb3JlJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3Nsb3Zha2lhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1Nsb3Zha2lhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3Nsb3ZlbmlhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1Nsb3ZlbmlhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3NvbG9tb25Jc2xhbmRzJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1NvbG9tb25fSXNsYW5kcycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdzb21hbGlhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1NvbWFsaWEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnc291dGhBZnJpY2EnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfU291dGhfQWZyaWNhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3NvdXRoR2VvcmdpYUFuZFRoZVNvdXRoU2FuZHdpY2hJc2xhbmRzJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1NvdXRoX0dlb3JnaWFfYW5kX1RoZV9Tb3V0aF9TYW5kd2ljaF9Jc2xhbmRzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3NwYWluJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1NwYWluJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3NyaUxhbmthJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1NyaV9MYW5rYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdzdWRhbicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9TdWRhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdzdXJpbmFtZScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9TdXJpbmFtZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdzdmFsYmFyZEFuZEphbk1heWVuJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1N2YWxiYXJkX2FuZF9KYW5fTWF5ZW4nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnc3dhemlsYW5kJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1N3YXppbGFuZCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdzd2VkZW4nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfU3dlZGVuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3N3aXR6ZXJsYW5kJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1N3aXR6ZXJsYW5kJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3N5cmlhbkFyYWJSZXB1YmxpYycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9TeXJpYW5fQXJhYl9SZXB1YmxpYycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICd0YWl3YW5Qcm92aW5jZU9mQ2hpbmEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfVGFpd2FuX1Byb3ZpbmNlX29mX0NoaW5hJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3RhamlraXN0YW4nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfVGFqaWtpc3RhbicsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICd0YW56YW5pYVVuaXRlZFJlcHVibGljT2YnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfVGFuemFuaWFfVW5pdGVkX1JlcHVibGljX29mJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3RoYWlsYW5kJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1RoYWlsYW5kJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3RpbW9yTGVzdGUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfVGltb3JfbGVzdGUnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAndG9nbycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Ub2dvJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3Rva2VsYXUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfVG9rZWxhdScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICd0b25nYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Ub25nYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICd0cmluaWRhZEFuZFRvYmFnbycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9UcmluaWRhZF9hbmRfVG9iYWdvJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3R1bmlzaWEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfVHVuaXNpYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICd0dXJrZXknLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfVHVya2V5Jyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3R1cmttZW5pc3RhbicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9UdXJrbWVuaXN0YW4nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAndHVya3NBbmRDYWljb3NJc2xhbmRzJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1R1cmtzX2FuZF9DYWljb3NfSXNsYW5kcycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICd0dXZhbHUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfVHV2YWx1Jyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3VnYW5kYScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9VZ2FuZGEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAndWtyYWluZScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Va3JhaW5lJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3VuaXRlZEFyYWJFbWlyYXRlcycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Vbml0ZWRfQXJhYl9FbWlyYXRlcycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICd1bml0ZWRLaW5nZG9tJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1VuaXRlZF9LaW5nZG9tJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3VuaXRlZFN0YXRlcycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9Vbml0ZWRfU3RhdGVzJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3VuaXRlZFN0YXRlc01pbm9yT3V0bHlpbmdJc2xhbmRzJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1VuaXRlZF9TdGF0ZXNfTWlub3JfT3V0bHlpbmdfSXNsYW5kcycsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICd1cnVndWF5Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1VydWd1YXknLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAndXpiZWtpc3RhbicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9VemJla2lzdGFuJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3ZhbnVhdHUnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfVmFudWF0dScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICd2ZW5lenVlbGEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfVmVuZXp1ZWxhJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3ZpZXROYW0nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfVmlldF9OYW0nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAndmlyZ2luSXNsYW5kc0JyaXRpc2gnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfVmlyZ2luX0lzbGFuZHNfQnJpdGlzaCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICd2aXJnaW5Jc2xhbmRzVVMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfVmlyZ2luX0lzbGFuZHNfVVMnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnd2FsbGlzQW5kRnV0dW5hJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1dhbGxpc19hbmRfRnV0dW5hJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3dlc3Rlcm5TYWhhcmEnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfV2VzdGVybl9TYWhhcmEnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAneWVtZW4nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ0NvdW50cnlfWWVtZW4nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnemFtYmlhJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdDb3VudHJ5X1phbWJpYScsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICd6aW1iYWJ3ZScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnQ291bnRyeV9aaW1iYWJ3ZScsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdFx0d2l6YXJkOiB7XG5cdFx0XHRcdHN0ZXA6IDIsXG5cdFx0XHRcdG9yZGVyOiA0LFxuXHRcdFx0fSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnV2Vic2l0ZScsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdHdpemFyZDoge1xuXHRcdFx0XHRzdGVwOiAyLFxuXHRcdFx0XHRvcmRlcjogNSxcblx0XHRcdH0sXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ1NlcnZlcl9UeXBlJywgJycsIHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0dmFsdWVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdwcml2YXRlVGVhbScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnUHJpdmF0ZV9UZWFtJyxcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGtleTogJ3B1YmxpY0NvbW11bml0eScsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnUHVibGljX0NvbW11bml0eScsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdFx0d2l6YXJkOiB7XG5cdFx0XHRcdHN0ZXA6IDMsXG5cdFx0XHRcdG9yZGVyOiAyLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWxsb3dfTWFya2V0aW5nX0VtYWlscycsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHR9KTtcblx0fSk7XG59KTtcblxuUm9ja2V0Q2hhdC5zZXR0aW5ncy5pbml0KCk7XG4iLCJSb2NrZXRDaGF0LnNldHRpbmdzLmFkZEdyb3VwKCdFbWFpbCcsIGZ1bmN0aW9uKCkge1xuXHR0aGlzLnNlY3Rpb24oJ1N0eWxlJywgZnVuY3Rpb24oKSB7XG5cblx0XHR0aGlzLmFkZCgnZW1haWxfc3R5bGUnLCBgaHRtbCwgYm9keSwgLmJvZHkgeyBmb250LWZhbWlseTogLWFwcGxlLXN5c3RlbSxCbGlua01hY1N5c3RlbUZvbnQsJ1NlZ29lIFVJJyxSb2JvdG8sT3h5Z2VuLFVidW50dSxDYW50YXJlbGwsJ0hlbHZldGljYSBOZXVlJywnQXBwbGUgQ29sb3IgRW1vamknLCdTZWdvZSBVSSBFbW9qaScsJ1NlZ29lIFVJIFN5bWJvbCcsJ01laXJ5byBVSScsQXJpYWwsc2Fucy1zZXJpZjsgfVxuXG5cdGJvZHksIC5ib2R5IHtcblx0XHR3aWR0aDogMTAwJTtcblx0XHRoZWlnaHQ6IDEwMCU7XG5cdH1cblxuXHRhIHtcblx0XHRjb2xvcjogIzFENzRGNTtcblx0XHRmb250LXdlaWdodDogYm9sZDtcblx0XHR0ZXh0LWRlY29yYXRpb246IG5vbmU7XG5cdFx0bGluZS1oZWlnaHQ6IDEuODtcblx0XHRwYWRkaW5nLWxlZnQ6IDJweDtcblx0XHRwYWRkaW5nLXJpZ2h0OiAycHg7XG5cdH1cblx0cCB7XG5cdFx0bWFyZ2luOiAxcmVtIDA7XG5cdH1cblx0LmJ0biB7XG5cdFx0dGV4dC1kZWNvcmF0aW9uOiBub25lO1xuXHRcdGNvbG9yOiAjRkZGO1xuXHRcdGJhY2tncm91bmQtY29sb3I6ICMxRDc0RjU7XG5cdFx0cGFkZGluZzogMTJweCAxOHB4O1xuXHRcdGZvbnQtd2VpZ2h0OiA1MDA7XG5cdFx0Zm9udC1zaXplOiAxNHB4O1xuXHRcdG1hcmdpbi10b3A6IDhweDtcblx0XHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0XHRib3JkZXItcmFkaXVzOiAycHg7XG5cdH1cblxuXHRvbCwgdWwsIGRpdiB7XG5cdFx0bGlzdC1zdHlsZS1wb3NpdGlvbjogaW5zaWRlO1xuXHRcdHBhZGRpbmc6IDE2cHggMCA7XG5cdH1cblx0bGkge1xuXHRcdHBhZGRpbmc6IDhweCAwO1xuXHRcdGZvbnQtd2VpZ2h0OiA2MDA7XG5cdH1cblx0LndyYXAge1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdGNsZWFyOiBib3RoO1xuXHR9XG5cblx0aDEsaDIsaDMsaDQsaDUsaDYge1xuXHRcdGxpbmUtaGVpZ2h0OiAxLjE7IG1hcmdpbjowIDAgMTZweCAwOyBjb2xvcjogIzAwMDtcblx0fVxuXG5cdGgxIHsgZm9udC13ZWlnaHQ6IDEwMDsgZm9udC1zaXplOiA0NHB4O31cblx0aDIgeyBmb250LXdlaWdodDogNjAwOyBmb250LXNpemU6IDMwcHg7IGNvbG9yOiAjMkYzNDNEO31cblx0aDMgeyBmb250LXdlaWdodDogMTAwOyBmb250LXNpemU6IDI3cHg7fVxuXHRoNCB7IGZvbnQtd2VpZ2h0OiA1MDA7IGZvbnQtc2l6ZTogMTRweDsgY29sb3I6ICMyRjM0M0Q7fVxuXHRoNSB7IGZvbnQtd2VpZ2h0OiA1MDA7IGZvbnQtc2l6ZTogMTNweDsgbGluZS1oZWlnaHQ6IDEuNjsgY29sb3I6ICMyRjM0M0R9XG5cdGg2IHsgZm9udC13ZWlnaHQ6IDUwMDsgZm9udC1zaXplOiAxMHB4OyBjb2xvcjogIzZjNzI3QTsgbGluZS1oZWlnaHQ6IDEuNzt9XG5cblx0LmNvbnRhaW5lciB7XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0bWF4LXdpZHRoOiA2NDBweDtcblx0XHRtYXJnaW46IDAgYXV0bzsgLyogbWFrZXMgaXQgY2VudGVyZWQgKi9cblx0XHRjbGVhcjogYm90aDtcblx0XHRib3JkZXItcmFkaXVzOiAycHg7XG5cdH1cblxuXHQuY29udGVudCB7XG5cdFx0cGFkZGluZzogMzZweDtcblx0fVxuXG5cdC5oZWFkZXItY29udGVudCB7XG5cdFx0cGFkZGluZy10b3A6IDM2cHg7XG5cdFx0cGFkZGluZy1ib3R0b206IDM2cHg7XG5cdFx0cGFkZGluZy1sZWZ0OiAzNnB4O1xuXHRcdHBhZGRpbmctcmlnaHQ6IDM2cHg7XG5cdFx0bWF4LXdpZHRoOiA2NDBweDtcblx0XHRtYXJnaW46IDAgYXV0bztcblx0XHRkaXNwbGF5OiBibG9jaztcblx0fVxuXG5cdC5sZWFkIHtcblx0XHRtYXJnaW4tYm90dG9tOiAzMnB4O1xuXHRcdGNvbG9yOiAjMmYzNDNkO1xuXHRcdGxpbmUtaGVpZ2h0OiAyMnB4O1xuXHRcdGZvbnQtc2l6ZTogMTRweDtcblx0fVxuXG5cdC5hZHZpY2Uge1xuXHRcdGhlaWdodDogMjBweDtcblx0XHRjb2xvcjogIzlFQTJBODtcblx0XHRmb250LXNpemU6IDEycHg7XG5cdFx0Zm9udC13ZWlnaHQ6IG5vcm1hbDtcblx0XHRtYXJnaW4tYm90dG9tOiAwO1xuXHR9XG5cdC5zb2NpYWwge1xuXHRcdGZvbnQtc2l6ZTogMTJweFxuXHR9XG5cdFx0XHRgLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRjb2RlOiAnY3NzJyxcblx0XHRcdG11bHRpbGluZTogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ2VtYWlsX3N0eWxlX2xhYmVsJyxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ2VtYWlsX3N0eWxlX2Rlc2NyaXB0aW9uJyxcblx0XHR9KTtcblx0fSk7XG5cblx0dGhpcy5zZWN0aW9uKCdTdWJqZWN0JywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ09mZmxpbmVfRE1fRW1haWwnLCAnW1tTaXRlX05hbWVdXSBZb3UgaGF2ZSBiZWVuIGRpcmVjdCBtZXNzYWdlZCBieSBbVXNlcl0nLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRjb2RlOiAndGV4dCcsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdPZmZsaW5lX0RNX0VtYWlsJyxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ09mZmxpbmVfRW1haWxfU3ViamVjdF9EZXNjcmlwdGlvbicsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ09mZmxpbmVfTWVudGlvbl9FbWFpbCcsICdbW1NpdGVfTmFtZV1dIFlvdSBoYXZlIGJlZW4gbWVudGlvbmVkIGJ5IFtVc2VyXSBpbiAjW1Jvb21dJywge1xuXHRcdFx0dHlwZTogJ2NvZGUnLFxuXHRcdFx0Y29kZTogJ3RleHQnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnT2ZmbGluZV9NZW50aW9uX0VtYWlsJyxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ09mZmxpbmVfRW1haWxfU3ViamVjdF9EZXNjcmlwdGlvbicsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ09mZmxpbmVfTWVudGlvbl9BbGxfRW1haWwnLCAnW1VzZXJdIGhhcyBwb3N0ZWQgYSBtZXNzYWdlIGluICNbUm9vbV0nLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRjb2RlOiAndGV4dCcsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdPZmZsaW5lX01lbnRpb25fQWxsX0VtYWlsJyxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ09mZmxpbmVfRW1haWxfU3ViamVjdF9EZXNjcmlwdGlvbicsXG5cdFx0fSk7XG5cdH0pO1xuXHR0aGlzLnNlY3Rpb24oJ0hlYWRlcl9hbmRfRm9vdGVyJywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ0VtYWlsX0hlYWRlcicsICc8IURPQ1RZUEUgaHRtbCBQVUJMSUMgXCItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTlwiIFwiaHR0cDovL3d3dy53My5vcmcvVFIveGh0bWwxL0RURC94aHRtbDEtdHJhbnNpdGlvbmFsLmR0ZFwiPjxodG1sIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPjxoZWFkPjwhLS0gSWYgeW91IGRlbGV0ZSB0aGlzIHRhZywgdGhlIHNreSB3aWxsIGZhbGwgb24geW91ciBoZWFkIC0tPjxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGhcIiAvPjxtZXRhIGh0dHAtZXF1aXY9XCJDb250ZW50LVR5cGVcIiBjb250ZW50PVwidGV4dC9odG1sOyBjaGFyc2V0PVVURi04XCIgLz48dGl0bGU+Um9ja2V0LkNoYXQgQ2xvdWQ8L3RpdGxlPjwvaGVhZD48Ym9keSBiZ2NvbG9yPVwiI0Y3RjhGQVwiPjx0YWJsZSBjbGFzcz1cImJvZHlcIiBiZ2NvbG9yPVwiI0Y3RjhGQVwiIHdpZHRoPVwiMTAwJVwiPjx0cj48dGQ+PCEtLSBIRUFERVIgLS0+PHRhYmxlIGNsYXNzPVwid3JhcFwiIGJnY29sb3I9XCIjRjdGOEZBXCI+PHRyPjx0ZCBjbGFzcz1cImhlYWRlciBjb250YWluZXJcIj48ZGl2IGNsYXNzPVwiaGVhZGVyLWNvbnRlbnRcIj48dGFibGUgYmdjb2xvcj1cIiNGN0Y4RkFcIiB3aWR0aD1cIjEwMCVcIj48dHI+PHRkPjxpbWcgc3JjPVwiW1NpdGVfVXJsX1NsYXNoXWFzc2V0cy9sb2dvLnBuZ1wiIGFsdD1cIlJvY2tldC5jaGF0XCIgd2lkdGg9XCIxNTBweFwiIC8+PC90ZD48L3RyPjwvdGFibGU+PC9kaXY+PC90ZD48L3RyPjwvdGFibGU+PCEtLSAvSEVBREVSIC0tPjwvdGQ+PC90cj48dHI+PHRkPjwhLS0gQk9EWSAtLT48dGFibGUgY2xhc3M9XCJ3cmFwXCI+PHRyPjx0ZCBjbGFzcz1cImNvbnRhaW5lclwiIGJnY29sb3I9XCIjRkZGRkZGXCI+PGRpdiBjbGFzcz1cImNvbnRlbnRcIj48dGFibGU+PHRyPjx0ZD4nLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRjb2RlOiAndGV4dC9odG1sJyxcblx0XHRcdG11bHRpbGluZTogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0hlYWRlcicsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0VtYWlsX0Zvb3RlcicsICc8L3RkPjwvdHI+PC90YWJsZT48L2Rpdj48L3RkPjwvdHI+PC90YWJsZT48IS0tIC9CT0RZIC0tPjwvdGQ+PC90cj48dHIgc3R5bGU9XCJtYXJnaW46IDA7IHBhZGRpbmc6IDA7XCI+PHRkIHN0eWxlPVwibWFyZ2luOiAwOyBwYWRkaW5nOiAwO1wiPjwhLS0gRk9PVEVSIC0tPjx0YWJsZSBjbGFzcz1cIndyYXBcIj48dHI+PHRkIGNsYXNzPVwiY29udGFpbmVyXCI+PCEtLSBjb250ZW50IC0tPjxkaXYgY2xhc3M9XCJjb250ZW50XCI+PHRhYmxlIHdpZHRoPVwiMTAwJVwiPjx0cj48dGQgYWxpZ249XCJjZW50ZXJcIiBjbGFzcz1cInNvY2lhbFwiPjxhIGhyZWY9XCJodHRwczovL3JvY2tldC5jaGF0L2Jsb2dcIj5CbG9nPC9hPiB8IDxhIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20vUm9ja2V0Q2hhdFwiPkdpdGh1YjwvYT4gfCA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL1JvY2tldENoYXRBcHBcIj5GYWNlYm9vazwvYT4gfCA8YSBocmVmPVwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9yb2NrZXQuY2hhdFwiPkluc3RhZ3JhbTwvYT48L3RkPjwvdHI+PHRyPjx0ZCBhbGlnbj1cImNlbnRlclwiPjxoNj7CqSBSb2NrZXQuQ2hhdCBUZWNobm9sb2dpZXMgQ29ycC48L2g2PjxoNj5NYWRlIHdpdGgg4p2k77iPIGluIPCfh6fwn4e3IPCfh6jwn4emIPCfh6nwn4eqIPCfh67wn4ezIPCfh6zwn4enIPCfh7rwn4e4IDwvaDY+PC90ZD48L3RyPjwvdGFibGU+PC9kaXY+PCEtLSAvY29udGVudCAtLT48L3RkPjwvdHI+PC90YWJsZT48IS0tIC9GT09URVIgLS0+PC90ZD48L3RyPjwvdGFibGU+PC9ib2R5PjwvaHRtbD4nLCB7XG5cdFx0XHR0eXBlOiAnY29kZScsXG5cdFx0XHRjb2RlOiAndGV4dC9odG1sJyxcblx0XHRcdG11bHRpbGluZTogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0Zvb3RlcicsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0VtYWlsX0Zvb3Rlcl9EaXJlY3RfUmVwbHknLCAnPHAgY2xhc3M9XCJhZHZpY2VcIj57RGlyZWN0X1JlcGx5X0FkdmljZX08L3A+Jywge1xuXHRcdFx0dHlwZTogJ2NvZGUnLFxuXHRcdFx0Y29kZTogJ3RleHQvaHRtbCcsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdGb290ZXJfRGlyZWN0X1JlcGx5Jyxcblx0XHR9KTtcblx0fSk7XG5cdHRoaXMuc2VjdGlvbignRGlyZWN0X1JlcGx5JywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ0RpcmVjdF9SZXBseV9FbmFibGUnLCBmYWxzZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnRGlyZWN0X1JlcGx5X0VuYWJsZScsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0RpcmVjdF9SZXBseV9EZWJ1ZycsIGZhbHNlLCB7XG5cdFx0XHR0eXBlOiAnYm9vbGVhbicsXG5cdFx0XHRlbnY6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdEaXJlY3RfUmVwbHlfRGVidWcnLFxuXHRcdFx0aTE4bkRlc2NyaXB0aW9uOiAnRGlyZWN0X1JlcGx5X0RlYnVnX0Rlc2NyaXB0aW9uJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnRGlyZWN0X1JlcGx5X1Byb3RvY29sJywgJ0lNQVAnLCB7XG5cdFx0XHR0eXBlOiAnc2VsZWN0Jyxcblx0XHRcdHZhbHVlczogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0a2V5OiAnSU1BUCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnSU1BUCcsXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICdQT1AnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ1BPUCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnUHJvdG9jb2wnLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdEaXJlY3RfUmVwbHlfSG9zdCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGVudjogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0hvc3QnLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdEaXJlY3RfUmVwbHlfUG9ydCcsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGVudjogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ1BvcnQnLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdEaXJlY3RfUmVwbHlfSWdub3JlVExTJywgZmFsc2UsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdGVudjogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0lnbm9yZVRMUycsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0RpcmVjdF9SZXBseV9GcmVxdWVuY3knLCA1LCB7XG5cdFx0XHR0eXBlOiAnaW50Jyxcblx0XHRcdGVudjogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0RpcmVjdF9SZXBseV9GcmVxdWVuY3knLFxuXHRcdFx0ZW5hYmxlUXVlcnk6IHtcblx0XHRcdFx0X2lkOiAnRGlyZWN0X1JlcGx5X1Byb3RvY29sJyxcblx0XHRcdFx0dmFsdWU6ICdQT1AnLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnRGlyZWN0X1JlcGx5X0RlbGV0ZScsIHRydWUsIHtcblx0XHRcdHR5cGU6ICdib29sZWFuJyxcblx0XHRcdGVudjogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ0RpcmVjdF9SZXBseV9EZWxldGUnLFxuXHRcdFx0ZW5hYmxlUXVlcnk6IHtcblx0XHRcdFx0X2lkOiAnRGlyZWN0X1JlcGx5X1Byb3RvY29sJyxcblx0XHRcdFx0dmFsdWU6ICdJTUFQJyxcblx0XHRcdH0sXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0RpcmVjdF9SZXBseV9TZXBhcmF0b3InLCAnKycsIHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0dmFsdWVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICchJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICchJyxcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJyMnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJyMnLFxuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnJCcsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnJCcsXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICclJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICclJyxcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJyYnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJyYnLFxuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnXFwnJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdcXCcnLFxuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnKicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnKicsXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICcrJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICcrJyxcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJy0nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJy0nLFxuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnLycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnLycsXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICc9Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICc9Jyxcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJz8nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJz8nLFxuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnXicsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnXicsXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICdfJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdfJyxcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJ2AnLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ2AnLFxuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAneycsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAneycsXG5cdFx0XHRcdH0sIHtcblx0XHRcdFx0XHRrZXk6ICd8Jyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICd8Jyxcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJ30nLFxuXHRcdFx0XHRcdGkxOG5MYWJlbDogJ30nLFxuXHRcdFx0XHR9LCB7XG5cdFx0XHRcdFx0a2V5OiAnficsXG5cdFx0XHRcdFx0aTE4bkxhYmVsOiAnficsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnRGlyZWN0X1JlcGx5X1NlcGFyYXRvcicsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0RpcmVjdF9SZXBseV9Vc2VybmFtZScsICcnLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGVudjogdHJ1ZSxcblx0XHRcdGkxOG5MYWJlbDogJ1VzZXJuYW1lJyxcblx0XHRcdHBsYWNlaG9sZGVyOiAnZW1haWxAZG9tYWluJyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnRGlyZWN0X1JlcGx5X1JlcGx5VG8nLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbnY6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdSZXBseVRvJyxcblx0XHRcdHBsYWNlaG9sZGVyOiAnZW1haWxAZG9tYWluJyxcblx0XHR9KTtcblx0XHRyZXR1cm4gdGhpcy5hZGQoJ0RpcmVjdF9SZXBseV9QYXNzd29yZCcsICcnLCB7XG5cdFx0XHR0eXBlOiAncGFzc3dvcmQnLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnUGFzc3dvcmQnLFxuXHRcdH0pO1xuXHR9KTtcblx0dGhpcy5zZWN0aW9uKCdTTVRQJywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ1NNVFBfUHJvdG9jb2wnLCAnc210cCcsIHtcblx0XHRcdHR5cGU6ICdzZWxlY3QnLFxuXHRcdFx0dmFsdWVzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRrZXk6ICdzbXRwJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdzbXRwJyxcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGtleTogJ3NtdHBzJyxcblx0XHRcdFx0XHRpMThuTGFiZWw6ICdzbXRwcycsXG5cdFx0XHRcdH0sXG5cdFx0XHRdLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnUHJvdG9jb2wnLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdTTVRQX0hvc3QnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbnY6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdIb3N0Jyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnU01UUF9Qb3J0JywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnUG9ydCcsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ1NNVFBfSWdub3JlVExTJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnSWdub3JlVExTJyxcblx0XHRcdGVuYWJsZVF1ZXJ5OiB7XG5cdFx0XHRcdF9pZDogJ1NNVFBfUHJvdG9jb2wnLFxuXHRcdFx0XHR2YWx1ZTogJ3NtdHAnLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnU01UUF9Qb29sJywgdHJ1ZSwge1xuXHRcdFx0dHlwZTogJ2Jvb2xlYW4nLFxuXHRcdFx0ZW52OiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnUG9vbCcsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ1NNVFBfVXNlcm5hbWUnLCAnJywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRlbnY6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdVc2VybmFtZScsXG5cdFx0XHRhdXRvY29tcGxldGU6IGZhbHNlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdTTVRQX1Bhc3N3b3JkJywgJycsIHtcblx0XHRcdHR5cGU6ICdwYXNzd29yZCcsXG5cdFx0XHRlbnY6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdQYXNzd29yZCcsXG5cdFx0XHRhdXRvY29tcGxldGU6IGZhbHNlLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdGcm9tX0VtYWlsJywgJycsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0cGxhY2Vob2xkZXI6ICdlbWFpbEBkb21haW4nLFxuXHRcdH0pO1xuXHRcdHJldHVybiB0aGlzLmFkZCgnU01UUF9UZXN0X0J1dHRvbicsICdzZW5kU01UUFRlc3RFbWFpbCcsIHtcblx0XHRcdHR5cGU6ICdhY3Rpb24nLFxuXHRcdFx0YWN0aW9uVGV4dDogJ1NlbmRfYV90ZXN0X21haWxfdG9fbXlfdXNlcicsXG5cdFx0fSk7XG5cdH0pO1xuXG5cdHRoaXMuc2VjdGlvbignUmVnaXN0cmF0aW9uJywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ0FjY291bnRzX0Vucm9sbG1lbnRfRW1haWxfU3ViamVjdCcsICd7V2VsY29tZV90byBTaXRlX25hbWV9Jywge1xuXHRcdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0XHRpMThuTGFiZWw6ICdTdWJqZWN0Jyxcblx0XHR9KTtcblx0XHR0aGlzLmFkZCgnQWNjb3VudHNfRW5yb2xsbWVudF9FbWFpbCcsICc8aDI+e1dlbGNvbWVfdG8gU2l0ZV9OYW1lfTwvaDI+PHA+e1Zpc2l0X1NpdGVfVXJsX2FuZF90cnlfdGhlX2Jlc3Rfb3Blbl9zb3VyY2VfY2hhdF9zb2x1dGlvbl9hdmFpbGFibGVfdG9kYXl9PC9wPjxhIGNsYXNzPVwiYnRuXCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIltTaXRlX1VSTF1cIj57TG9naW59PC9hPicsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdGNvZGU6ICd0ZXh0L2h0bWwnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnQm9keScsXG5cdFx0fSk7XG5cdH0pO1xuXG5cdHRoaXMuc2VjdGlvbignUmVnaXN0cmF0aW9uX3ZpYV9BZG1pbicsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19Vc2VyQWRkZWRFbWFpbF9TdWJqZWN0JywgJ3tXZWxjb21lX3RvIFNpdGVfTmFtZX0nLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGkxOG5MYWJlbDogJ1N1YmplY3QnLFxuXHRcdH0pO1xuXHRcdHRoaXMuYWRkKCdBY2NvdW50c19Vc2VyQWRkZWRFbWFpbF9FbWFpbCcsICc8aDI+e1dlbGNvbWVfdG8gU2l0ZV9OYW1lfTwvaDI+PHA+e1Zpc2l0X1NpdGVfVXJsX2FuZF90cnlfdGhlX2Jlc3Rfb3Blbl9zb3VyY2VfY2hhdF9zb2x1dGlvbl9hdmFpbGFibGVfdG9kYXl9PC9wPjxhIGNsYXNzPVwiYnRuXCIgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIltTaXRlX1VSTF1cIj57TG9naW59PC9hPicsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdGNvZGU6ICd0ZXh0L2h0bWwnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnQm9keScsXG5cdFx0XHRpMThuRGVzY3JpcHRpb246ICdBY2NvdW50c19Vc2VyQWRkZWRFbWFpbF9EZXNjcmlwdGlvbicsXG5cdFx0fSk7XG5cdH0pO1xuXG5cdHRoaXMuc2VjdGlvbignVmVyaWZpY2F0aW9uJywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ1ZlcmlmaWNhdGlvbl9FbWFpbF9TdWJqZWN0JywgJ3tWZXJpZmljYXRpb25fRW1haWxfU3ViamVjdH0nLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGkxOG5MYWJlbDogJ1N1YmplY3QnLFxuXHRcdH0pO1xuXG5cdFx0dGhpcy5hZGQoJ1ZlcmlmaWNhdGlvbl9FbWFpbCcsICc8aDI+e0hpX3VzZXJuYW1lfTwvaDI+PHA+e1ZlcmlmaWNhdGlvbl9lbWFpbF9ib2R5fTwvcD48YSBjbGFzcz1cImJ0blwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJbVmVyaWZpY2F0aW9uX1VybF1cIj57VmVyaWZ5X3lvdXJfZW1haWx9PC9hPicsIHtcblx0XHRcdHR5cGU6ICdjb2RlJyxcblx0XHRcdGNvZGU6ICd0ZXh0L2h0bWwnLFxuXHRcdFx0bXVsdGlsaW5lOiB0cnVlLFxuXHRcdFx0aTE4bkxhYmVsOiAnQm9keScsXG5cdFx0XHRpMThuRGVzY3JpcHRpb246ICdWZXJpZmljYXRpb25fRGVzY3JpcHRpb24nLFxuXHRcdH0pO1xuXHR9KTtcblxuXG5cdHRoaXMuc2VjdGlvbignSW52aXRhdGlvbicsIGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuYWRkKCdJbnZpdGF0aW9uX1N1YmplY3QnLCAne0ludml0YXRpb25fU3ViamVjdF9EZWZhdWx0fScsIHtcblx0XHRcdHR5cGU6ICdzdHJpbmcnLFxuXHRcdFx0aTE4bkxhYmVsOiAnU3ViamVjdCcsXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGQoJ0ludml0YXRpb25fRW1haWwnLCAnPGgyPntXZWxjb21lX3RvIFNpdGVfTmFtZX08L2gyPjxwPntWaXNpdF9TaXRlX1VybF9hbmRfdHJ5X3RoZV9iZXN0X29wZW5fc291cmNlX2NoYXRfc29sdXRpb25fYXZhaWxhYmxlX3RvZGF5fTwvcD48YSBjbGFzcz1cImJ0blwiIGhyZWY9XCJbU2l0ZV9VUkxdXCI+e0pvaW5fQ2hhdH08L2E+Jywge1xuXHRcdFx0dHlwZTogJ2NvZGUnLFxuXHRcdFx0Y29kZTogJ3RleHQvaHRtbCcsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdCb2R5Jyxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ0ludml0YXRpb25fRW1haWxfRGVzY3JpcHRpb24nLFxuXHRcdH0pO1xuXHR9KTtcblxuXHR0aGlzLnNlY3Rpb24oJ0ZvcmdvdF9wYXNzd29yZF9zZWN0aW9uJywgZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5hZGQoJ0ZvcmdvdF9QYXNzd29yZF9FbWFpbF9TdWJqZWN0JywgJ3tGb3Jnb3RfUGFzc3dvcmRfRW1haWxfU3ViamVjdH0nLCB7XG5cdFx0XHR0eXBlOiAnc3RyaW5nJyxcblx0XHRcdGkxOG5MYWJlbDogJ1N1YmplY3QnLFxuXHRcdH0pO1xuXG5cdFx0dGhpcy5hZGQoJ0ZvcmdvdF9QYXNzd29yZF9FbWFpbCcsICc8aDI+e0ZvcmdvdF9wYXNzd29yZH08L2gyPjxwPntMZXRzX2dldF95b3VfbmV3X29uZX08L3A+PGEgY2xhc3M9XCJidG5cIiBocmVmPVwiW0ZvcmdvdF9QYXNzd29yZF9VcmxdXCI+e1Jlc2V0fTwvYT48cCBjbGFzcz1cImFkdmljZVwiPntJZl95b3VfZGlkbnRfYXNrX2Zvcl9yZXNldF9pZ25vcmVfdGhpc19lbWFpbH08L3A+Jywge1xuXHRcdFx0dHlwZTogJ2NvZGUnLFxuXHRcdFx0Y29kZTogJ3RleHQvaHRtbCcsXG5cdFx0XHRtdWx0aWxpbmU6IHRydWUsXG5cdFx0XHRpMThuTGFiZWw6ICdCb2R5Jyxcblx0XHRcdGkxOG5EZXNjcmlwdGlvbjogJ0ZvcmdvdF9QYXNzd29yZF9EZXNjcmlwdGlvbicsXG5cdFx0fSk7XG5cdH0pO1xufSk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cdCdwdWJsaWMtc2V0dGluZ3MvZ2V0Jyh1cGRhdGVkQXQpIHtcblx0XHR0aGlzLnVuYmxvY2soKTtcblx0XHRjb25zdCByZWNvcmRzID0gUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MuZmluZE5vdEhpZGRlblB1YmxpYygpLmZldGNoKCk7XG5cblx0XHRpZiAodXBkYXRlZEF0IGluc3RhbmNlb2YgRGF0ZSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dXBkYXRlOiByZWNvcmRzLmZpbHRlcihmdW5jdGlvbihyZWNvcmQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVjb3JkLl91cGRhdGVkQXQgPiB1cGRhdGVkQXQ7XG5cdFx0XHRcdH0pLFxuXHRcdFx0XHRyZW1vdmU6IFJvY2tldENoYXQubW9kZWxzLlNldHRpbmdzLnRyYXNoRmluZERlbGV0ZWRBZnRlcih1cGRhdGVkQXQsIHtcblx0XHRcdFx0XHRoaWRkZW46IHtcblx0XHRcdFx0XHRcdCRuZTogdHJ1ZSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHB1YmxpYzogdHJ1ZSxcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRcdFx0X2lkOiAxLFxuXHRcdFx0XHRcdFx0X2RlbGV0ZWRBdDogMSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9KS5mZXRjaCgpLFxuXHRcdFx0fTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlY29yZHM7XG5cdH0sXG5cdCdwcml2YXRlLXNldHRpbmdzL2dldCcodXBkYXRlZEF0KSB7XG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cdFx0dGhpcy51bmJsb2NrKCk7XG5cdFx0aWYgKCFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAndmlldy1wcml2aWxlZ2VkLXNldHRpbmcnKSkge1xuXHRcdFx0cmV0dXJuIFtdO1xuXHRcdH1cblx0XHRjb25zdCByZWNvcmRzID0gUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MuZmluZE5vdEhpZGRlbigpLmZldGNoKCk7XG5cdFx0aWYgKHVwZGF0ZWRBdCBpbnN0YW5jZW9mIERhdGUpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHVwZGF0ZTogcmVjb3Jkcy5maWx0ZXIoZnVuY3Rpb24ocmVjb3JkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlY29yZC5fdXBkYXRlZEF0ID4gdXBkYXRlZEF0O1xuXHRcdFx0XHR9KSxcblx0XHRcdFx0cmVtb3ZlOiBSb2NrZXRDaGF0Lm1vZGVscy5TZXR0aW5ncy50cmFzaEZpbmREZWxldGVkQWZ0ZXIodXBkYXRlZEF0LCB7XG5cdFx0XHRcdFx0aGlkZGVuOiB7XG5cdFx0XHRcdFx0XHQkbmU6IHRydWUsXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0fSwge1xuXHRcdFx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHRcdFx0X2lkOiAxLFxuXHRcdFx0XHRcdFx0X2RlbGV0ZWRBdDogMSxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9KS5mZXRjaCgpLFxuXHRcdFx0fTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlY29yZHM7XG5cdH0sXG59KTtcblxuUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3Mub24oJ2NoYW5nZScsICh7IGNsaWVudEFjdGlvbiwgaWQsIGRhdGEgfSkgPT4ge1xuXHRzd2l0Y2ggKGNsaWVudEFjdGlvbikge1xuXHRcdGNhc2UgJ3VwZGF0ZWQnOlxuXHRcdGNhc2UgJ2luc2VydGVkJzpcblx0XHRcdGNvbnN0IHNldHRpbmcgPSBkYXRhIHx8IFJvY2tldENoYXQubW9kZWxzLlNldHRpbmdzLmZpbmRPbmVCeUlkKGlkKTtcblx0XHRcdGNvbnN0IHZhbHVlID0ge1xuXHRcdFx0XHRfaWQ6IHNldHRpbmcuX2lkLFxuXHRcdFx0XHR2YWx1ZTogc2V0dGluZy52YWx1ZSxcblx0XHRcdFx0ZWRpdG9yOiBzZXR0aW5nLmVkaXRvcixcblx0XHRcdFx0cHJvcGVydGllczogc2V0dGluZy5wcm9wZXJ0aWVzLFxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKHNldHRpbmcucHVibGljID09PSB0cnVlKSB7XG5cdFx0XHRcdFJvY2tldENoYXQuTm90aWZpY2F0aW9ucy5ub3RpZnlBbGxJblRoaXNJbnN0YW5jZSgncHVibGljLXNldHRpbmdzLWNoYW5nZWQnLCBjbGllbnRBY3Rpb24sIHZhbHVlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFJvY2tldENoYXQuTm90aWZpY2F0aW9ucy5ub3RpZnlMb2dnZWRJblRoaXNJbnN0YW5jZSgncHJpdmF0ZS1zZXR0aW5ncy1jaGFuZ2VkJywgY2xpZW50QWN0aW9uLCBzZXR0aW5nKTtcblx0XHRcdH1cblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSAncmVtb3ZlZCc6XG5cdFx0XHRSb2NrZXRDaGF0Lk5vdGlmaWNhdGlvbnMubm90aWZ5TG9nZ2VkSW5UaGlzSW5zdGFuY2UoJ3ByaXZhdGUtc2V0dGluZ3MtY2hhbmdlZCcsIGNsaWVudEFjdGlvbiwgeyBfaWQ6IGlkIH0pO1xuXHRcdFx0Um9ja2V0Q2hhdC5Ob3RpZmljYXRpb25zLm5vdGlmeUFsbEluVGhpc0luc3RhbmNlKCdwdWJsaWMtc2V0dGluZ3MtY2hhbmdlZCcsIGNsaWVudEFjdGlvbiwgeyBfaWQ6IGlkIH0pO1xuXHRcdFx0YnJlYWs7XG5cdH1cbn0pO1xuXG5Sb2NrZXRDaGF0Lk5vdGlmaWNhdGlvbnMuc3RyZWFtQWxsLmFsbG93UmVhZCgncHJpdmF0ZS1zZXR0aW5ncy1jaGFuZ2VkJywgZnVuY3Rpb24oKSB7XG5cdGlmICh0aGlzLnVzZXJJZCA9PSBudWxsKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24odGhpcy51c2VySWQsICd2aWV3LXByaXZpbGVnZWQtc2V0dGluZycpO1xufSk7XG4iLCIvKiBlc2xpbnQgbm8tbXVsdGktc3BhY2VzOiAwICovXG4vKiBlc2xpbnQgY29tbWEtc3BhY2luZzogMCAqL1xuaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG5cdGFkZE9BdXRoU2VydmljZShuYW1lKSB7XG5cblx0XHRjaGVjayhuYW1lLCBTdHJpbmcpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2FkZE9BdXRoU2VydmljZScgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKFJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICdhZGQtb2F1dGgtc2VydmljZScpICE9PSB0cnVlKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCAnQWRkaW5nIE9BdXRoIFNlcnZpY2VzIGlzIG5vdCBhbGxvd2VkJywgeyBtZXRob2Q6ICdhZGRPQXV0aFNlcnZpY2UnLCBhY3Rpb246ICdBZGRpbmdfT0F1dGhfU2VydmljZXMnIH0pO1xuXHRcdH1cblxuXHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15hLXowLTlfXS9nLCAnJyk7XG5cdFx0bmFtZSA9IHMuY2FwaXRhbGl6ZShuYW1lKTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfWAgICAgICAgICAgICAgICAgICAgICAgICAsIGZhbHNlICAgICAgICAgICAgICwgeyB0eXBlOiAnYm9vbGVhbicsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdBY2NvdW50c19PQXV0aF9DdXN0b21fRW5hYmxlJywgcGVyc2lzdGVudDogdHJ1ZSB9KTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS11cmxgICAgICAgICAgICAgICAgICAgICAsICcnICAgICAgICAgICAgICAgICwgeyB0eXBlOiAnc3RyaW5nJyAsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdVUkwnLCBwZXJzaXN0ZW50OiB0cnVlIH0pO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MuYWRkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LXRva2VuX3BhdGhgICAgICAgICAgICAgICwgJy9vYXV0aC90b2tlbicgICAgLCB7IHR5cGU6ICdzdHJpbmcnICwgZ3JvdXA6ICdPQXV0aCcsIHNlY3Rpb246IGBDdXN0b20gT0F1dGg6ICR7IG5hbWUgfWAsIGkxOG5MYWJlbDogJ0FjY291bnRzX09BdXRoX0N1c3RvbV9Ub2tlbl9QYXRoJywgcGVyc2lzdGVudDogdHJ1ZSB9KTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS10b2tlbl9zZW50X3ZpYWAgICAgICAgICAsICdwYXlsb2FkJyAgICAgICAgICwgeyB0eXBlOiAnc2VsZWN0JyAsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdBY2NvdW50c19PQXV0aF9DdXN0b21fVG9rZW5fU2VudF9WaWEnLCBwZXJzaXN0ZW50OiB0cnVlLCB2YWx1ZXM6IFt7IGtleTogJ2hlYWRlcicsIGkxOG5MYWJlbDogJ0hlYWRlcicgfSwgeyBrZXk6ICdwYXlsb2FkJywgaTE4bkxhYmVsOiAnUGF5bG9hZCcgfV0gfSk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5hZGQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0taWRlbnRpdHlfdG9rZW5fc2VudF92aWFgLCAnZGVmYXVsdCcgICAgICAgICAsIHsgdHlwZTogJ3NlbGVjdCcgLCBncm91cDogJ09BdXRoJywgc2VjdGlvbjogYEN1c3RvbSBPQXV0aDogJHsgbmFtZSB9YCwgaTE4bkxhYmVsOiAnQWNjb3VudHNfT0F1dGhfQ3VzdG9tX0lkZW50aXR5X1Rva2VuX1NlbnRfVmlhJywgcGVyc2lzdGVudDogdHJ1ZSwgdmFsdWVzOiBbeyBrZXk6ICdkZWZhdWx0JywgaTE4bkxhYmVsOiAnU2FtZV9Bc19Ub2tlbl9TZW50X1ZpYScgfSwgeyBrZXk6ICdoZWFkZXInLCBpMThuTGFiZWw6ICdIZWFkZXInIH0sIHsga2V5OiAncGF5bG9hZCcsIGkxOG5MYWJlbDogJ1BheWxvYWQnIH1dIH0pO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MuYWRkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LWlkZW50aXR5X3BhdGhgICAgICAgICAgICwgJy9tZScgICAgICAgICAgICAgLCB7IHR5cGU6ICdzdHJpbmcnICwgZ3JvdXA6ICdPQXV0aCcsIHNlY3Rpb246IGBDdXN0b20gT0F1dGg6ICR7IG5hbWUgfWAsIGkxOG5MYWJlbDogJ0FjY291bnRzX09BdXRoX0N1c3RvbV9JZGVudGl0eV9QYXRoJywgcGVyc2lzdGVudDogdHJ1ZSB9KTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS1hdXRob3JpemVfcGF0aGAgICAgICAgICAsICcvb2F1dGgvYXV0aG9yaXplJywgeyB0eXBlOiAnc3RyaW5nJyAsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdBY2NvdW50c19PQXV0aF9DdXN0b21fQXV0aG9yaXplX1BhdGgnLCBwZXJzaXN0ZW50OiB0cnVlIH0pO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MuYWRkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LXNjb3BlYCAgICAgICAgICAgICAgICAgICwgJ29wZW5pZCcgICAgICAgICAgLCB7IHR5cGU6ICdzdHJpbmcnICwgZ3JvdXA6ICdPQXV0aCcsIHNlY3Rpb246IGBDdXN0b20gT0F1dGg6ICR7IG5hbWUgfWAsIGkxOG5MYWJlbDogJ0FjY291bnRzX09BdXRoX0N1c3RvbV9TY29wZScsIHBlcnNpc3RlbnQ6IHRydWUgfSk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5hZGQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0taWRgICAgICAgICAgICAgICAgICAgICAgLCAnJyAgICAgICAgICAgICAgICAsIHsgdHlwZTogJ3N0cmluZycgLCBncm91cDogJ09BdXRoJywgc2VjdGlvbjogYEN1c3RvbSBPQXV0aDogJHsgbmFtZSB9YCwgaTE4bkxhYmVsOiAnQWNjb3VudHNfT0F1dGhfQ3VzdG9tX2lkJywgcGVyc2lzdGVudDogdHJ1ZSB9KTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS1zZWNyZXRgICAgICAgICAgICAgICAgICAsICcnICAgICAgICAgICAgICAgICwgeyB0eXBlOiAnc3RyaW5nJyAsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdBY2NvdW50c19PQXV0aF9DdXN0b21fU2VjcmV0JywgcGVyc2lzdGVudDogdHJ1ZSB9KTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS1sb2dpbl9zdHlsZWAgICAgICAgICAgICAsICdwb3B1cCcgICAgICAgICAgICwgeyB0eXBlOiAnc2VsZWN0JyAsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdBY2NvdW50c19PQXV0aF9DdXN0b21fTG9naW5fU3R5bGUnLCBwZXJzaXN0ZW50OiB0cnVlLCB2YWx1ZXM6IFt7IGtleTogJ3JlZGlyZWN0JywgaTE4bkxhYmVsOiAnUmVkaXJlY3QnIH0sIHsga2V5OiAncG9wdXAnLCBpMThuTGFiZWw6ICdQb3B1cCcgfSwgeyBrZXk6ICcnLCBpMThuTGFiZWw6ICdEZWZhdWx0JyB9XSB9KTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLmFkZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS1idXR0b25fbGFiZWxfdGV4dGAgICAgICAsICcnICAgICAgICAgICAgICAgICwgeyB0eXBlOiAnc3RyaW5nJyAsIGdyb3VwOiAnT0F1dGgnLCBzZWN0aW9uOiBgQ3VzdG9tIE9BdXRoOiAkeyBuYW1lIH1gLCBpMThuTGFiZWw6ICdBY2NvdW50c19PQXV0aF9DdXN0b21fQnV0dG9uX0xhYmVsX1RleHQnLCBwZXJzaXN0ZW50OiB0cnVlIH0pO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MuYWRkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LWJ1dHRvbl9sYWJlbF9jb2xvcmAgICAgICwgJyNGRkZGRkYnICAgICAgICAgLCB7IHR5cGU6ICdzdHJpbmcnICwgZ3JvdXA6ICdPQXV0aCcsIHNlY3Rpb246IGBDdXN0b20gT0F1dGg6ICR7IG5hbWUgfWAsIGkxOG5MYWJlbDogJ0FjY291bnRzX09BdXRoX0N1c3RvbV9CdXR0b25fTGFiZWxfQ29sb3InLCBwZXJzaXN0ZW50OiB0cnVlIH0pO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MuYWRkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LWJ1dHRvbl9jb2xvcmAgICAgICAgICAgICwgJyMxMzY3OUEnICAgICAgICAgLCB7IHR5cGU6ICdzdHJpbmcnICwgZ3JvdXA6ICdPQXV0aCcsIHNlY3Rpb246IGBDdXN0b20gT0F1dGg6ICR7IG5hbWUgfWAsIGkxOG5MYWJlbDogJ0FjY291bnRzX09BdXRoX0N1c3RvbV9CdXR0b25fQ29sb3InLCBwZXJzaXN0ZW50OiB0cnVlIH0pO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MuYWRkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LXVzZXJuYW1lX2ZpZWxkYCAgICAgICAgICwgJycgICAgICAgICAgICAgICAgLCB7IHR5cGU6ICdzdHJpbmcnICwgZ3JvdXA6ICdPQXV0aCcsIHNlY3Rpb246IGBDdXN0b20gT0F1dGg6ICR7IG5hbWUgfWAsIGkxOG5MYWJlbDogJ0FjY291bnRzX09BdXRoX0N1c3RvbV9Vc2VybmFtZV9GaWVsZCcsIHBlcnNpc3RlbnQ6IHRydWUgfSk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5hZGQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tbWVyZ2VfdXNlcnNgICAgICAgICAgICAgLCBmYWxzZSAgICAgICAgICAgICAsIHsgdHlwZTogJ2Jvb2xlYW4nLCBncm91cDogJ09BdXRoJywgc2VjdGlvbjogYEN1c3RvbSBPQXV0aDogJHsgbmFtZSB9YCwgaTE4bkxhYmVsOiAnQWNjb3VudHNfT0F1dGhfQ3VzdG9tX01lcmdlX1VzZXJzJywgcGVyc2lzdGVudDogdHJ1ZSB9KTtcblx0fSB9KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0cmVmcmVzaE9BdXRoU2VydmljZSgpIHtcblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAncmVmcmVzaE9BdXRoU2VydmljZScgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKFJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICdhZGQtb2F1dGgtc2VydmljZScpICE9PSB0cnVlKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCAnUmVmcmVzaCBPQXV0aCBTZXJ2aWNlcyBpcyBub3QgYWxsb3dlZCcsIHsgbWV0aG9kOiAncmVmcmVzaE9BdXRoU2VydmljZScsIGFjdGlvbjogJ1JlZnJlc2hpbmdfT0F1dGhfU2VydmljZXMnIH0pO1xuXHRcdH1cblxuXHRcdFNlcnZpY2VDb25maWd1cmF0aW9uLmNvbmZpZ3VyYXRpb25zLnJlbW92ZSh7fSk7XG5cblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TZXR0aW5ncy51cGRhdGUoeyBfaWQ6IC9eQWNjb3VudHNfT0F1dGhfLisvIH0sIHsgJHNldDogeyBfdXBkYXRlZEF0OiBuZXcgRGF0ZSB9IH0sIHsgbXVsdGk6IHRydWUgfSk7XG5cdH0sXG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0YWRkVXNlclRvUm9vbShkYXRhKSB7XG5cdFx0cmV0dXJuIE1ldGVvci5jYWxsKCdhZGRVc2Vyc1RvUm9vbScsIHtcblx0XHRcdHJpZDogZGF0YS5yaWQsXG5cdFx0XHR1c2VyczogW2RhdGEudXNlcm5hbWVdLFxuXHRcdH0pO1xuXHR9LFxufSk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cdGFkZFVzZXJzVG9Sb29tKGRhdGEgPSB7fSkge1xuXHRcdC8vIFZhbGlkYXRlIHVzZXIgYW5kIHJvb21cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHtcblx0XHRcdFx0bWV0aG9kOiAnYWRkVXNlcnNUb1Jvb20nLFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCFNYXRjaC50ZXN0KGRhdGEucmlkLCBTdHJpbmcpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXJvb20nLCAnSW52YWxpZCByb29tJywge1xuXHRcdFx0XHRtZXRob2Q6ICdhZGRVc2Vyc1RvUm9vbScsXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBHZXQgdXNlciBhbmQgcm9vbSBkZXRhaWxzXG5cdFx0Y29uc3Qgcm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkKGRhdGEucmlkKTtcblx0XHRjb25zdCB1c2VySWQgPSBNZXRlb3IudXNlcklkKCk7XG5cdFx0Y29uc3Qgc3Vic2NyaXB0aW9uID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kT25lQnlSb29tSWRBbmRVc2VySWQoZGF0YS5yaWQsIHVzZXJJZCwgeyBmaWVsZHM6IHsgX2lkOiAxIH0gfSk7XG5cdFx0Y29uc3QgdXNlckluUm9vbSA9IHN1YnNjcmlwdGlvbiAhPSBudWxsO1xuXG5cdFx0Ly8gQ2FuJ3QgYWRkIHRvIGRpcmVjdCByb29tIGV2ZXJcblx0XHRpZiAocm9vbS50ID09PSAnZCcpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWNhbnQtaW52aXRlLWZvci1kaXJlY3Qtcm9vbScsICdDYW5cXCd0IGludml0ZSB1c2VyIHRvIGRpcmVjdCByb29tcycsIHtcblx0XHRcdFx0bWV0aG9kOiAnYWRkVXNlcnNUb1Jvb20nLFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FuIGFkZCB0byBhbnkgcm9vbSB5b3UncmUgaW4sIHdpdGggcGVybWlzc2lvbiwgb3RoZXJ3aXNlIG5lZWQgc3BlY2lmaWMgcm9vbSB0eXBlIHBlcm1pc3Npb25cblx0XHRsZXQgY2FuQWRkVXNlciA9IGZhbHNlO1xuXHRcdGlmICh1c2VySW5Sb29tICYmIFJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbih1c2VySWQsICdhZGQtdXNlci10by1qb2luZWQtcm9vbScsIHJvb20uX2lkKSkge1xuXHRcdFx0Y2FuQWRkVXNlciA9IHRydWU7XG5cdFx0fSBlbHNlIGlmIChyb29tLnQgPT09ICdjJyAmJiBSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24odXNlcklkLCAnYWRkLXVzZXItdG8tYW55LWMtcm9vbScpKSB7XG5cdFx0XHRjYW5BZGRVc2VyID0gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKHJvb20udCA9PT0gJ3AnICYmIFJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbih1c2VySWQsICdhZGQtdXNlci10by1hbnktcC1yb29tJykpIHtcblx0XHRcdGNhbkFkZFVzZXIgPSB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIEFkZGluZyB3YXNuJ3QgYWxsb3dlZFxuXHRcdGlmICghY2FuQWRkVXNlcikge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7XG5cdFx0XHRcdG1ldGhvZDogJ2FkZFVzZXJzVG9Sb29tJyxcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8vIE1pc3NpbmcgdGhlIHVzZXJzIHRvIGJlIGFkZGVkXG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KGRhdGEudXNlcnMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLWFyZ3VtZW50cycsICdJbnZhbGlkIGFyZ3VtZW50cycsIHtcblx0XHRcdFx0bWV0aG9kOiAnYWRkVXNlcnNUb1Jvb20nLFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly8gVmFsaWRhdGUgZWFjaCB1c2VyLCB0aGVuIGFkZCB0byByb29tXG5cdFx0Y29uc3QgdXNlciA9IE1ldGVvci51c2VyKCk7XG5cdFx0ZGF0YS51c2Vycy5mb3JFYWNoKCh1c2VybmFtZSkgPT4ge1xuXHRcdFx0Y29uc3QgbmV3VXNlciA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeVVzZXJuYW1lKHVzZXJuYW1lKTtcblx0XHRcdGlmICghbmV3VXNlcikge1xuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXJuYW1lJywgJ0ludmFsaWQgdXNlcm5hbWUnLCB7XG5cdFx0XHRcdFx0bWV0aG9kOiAnYWRkVXNlcnNUb1Jvb20nLFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdFJvY2tldENoYXQuYWRkVXNlclRvUm9vbShkYXRhLnJpZCwgbmV3VXNlciwgdXNlcik7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRhcmNoaXZlUm9vbShyaWQpIHtcblxuXHRcdGNoZWNrKHJpZCwgU3RyaW5nKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdhcmNoaXZlUm9vbScgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgcm9vbSA9IFJvY2tldENoYXQubW9kZWxzLlJvb21zLmZpbmRPbmVCeUlkKHJpZCk7XG5cblx0XHRpZiAoIXJvb20pIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtcm9vbScsICdJbnZhbGlkIHJvb20nLCB7IG1ldGhvZDogJ2FyY2hpdmVSb29tJyB9KTtcblx0XHR9XG5cblx0XHRpZiAoIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICdhcmNoaXZlLXJvb20nLCByb29tLl9pZCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW5vdC1hdXRob3JpemVkJywgJ05vdCBhdXRob3JpemVkJywgeyBtZXRob2Q6ICdhcmNoaXZlUm9vbScgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKHJvb20udCA9PT0gJ2QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1kaXJlY3QtbWVzc2FnZS1yb29tJywgJ0RpcmVjdCBNZXNzYWdlcyBjYW4gbm90IGJlIGFyY2hpdmVkJywgeyBtZXRob2Q6ICdhcmNoaXZlUm9vbScgfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFJvY2tldENoYXQuYXJjaGl2ZVJvb20ocmlkKTtcblx0fSxcbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRibG9ja1VzZXIoeyByaWQsIGJsb2NrZWQgfSkge1xuXG5cdFx0Y2hlY2socmlkLCBTdHJpbmcpO1xuXHRcdGNoZWNrKGJsb2NrZWQsIFN0cmluZyk7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnYmxvY2tVc2VyJyB9KTtcblx0XHR9XG5cblx0XHRjb25zdCBzdWJzY3JpcHRpb24gPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRPbmVCeVJvb21JZEFuZFVzZXJJZChyaWQsIE1ldGVvci51c2VySWQoKSk7XG5cdFx0Y29uc3Qgc3Vic2NyaXB0aW9uMiA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZE9uZUJ5Um9vbUlkQW5kVXNlcklkKHJpZCwgYmxvY2tlZCk7XG5cblx0XHRpZiAoIXN1YnNjcmlwdGlvbiB8fCAhc3Vic2NyaXB0aW9uMikge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1yb29tJywgJ0ludmFsaWQgcm9vbScsIHsgbWV0aG9kOiAnYmxvY2tVc2VyJyB9KTtcblx0XHR9XG5cblx0XHRSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLnNldEJsb2NrZWRCeVJvb21JZChyaWQsIGJsb2NrZWQsIE1ldGVvci51c2VySWQoKSk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRjaGVja1JlZ2lzdHJhdGlvblNlY3JldFVSTChoYXNoKSB7XG5cblx0XHRjaGVjayhoYXNoLCBTdHJpbmcpO1xuXG5cdFx0cmV0dXJuIGhhc2ggPT09IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19SZWdpc3RyYXRpb25Gb3JtX1NlY3JldFVSTCcpO1xuXHR9LFxufSk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cdGNoZWNrVXNlcm5hbWVBdmFpbGFiaWxpdHkodXNlcm5hbWUpIHtcblx0XHRjaGVjayh1c2VybmFtZSwgU3RyaW5nKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdzZXRVc2VybmFtZScgfSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdXNlciA9IE1ldGVvci51c2VyKCk7XG5cblx0XHRpZiAodXNlci51c2VybmFtZSAmJiAhUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0FsbG93VXNlcm5hbWVDaGFuZ2UnKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ3NldFVzZXJuYW1lJyB9KTtcblx0XHR9XG5cblx0XHRpZiAodXNlci51c2VybmFtZSA9PT0gdXNlcm5hbWUpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5jaGVja1VzZXJuYW1lQXZhaWxhYmlsaXR5KHVzZXJuYW1lKTtcblx0fSxcbn0pO1xuXG5Sb2NrZXRDaGF0LlJhdGVMaW1pdGVyLmxpbWl0TWV0aG9kKCdjaGVja1VzZXJuYW1lQXZhaWxhYmlsaXR5JywgMSwgMTAwMCwge1xuXHR1c2VySWQoKSB7IHJldHVybiB0cnVlOyB9LFxufSk7XG4iLCIvKiBnbG9iYWxzIEZpbGVVcGxvYWQgKi9cblxuTWV0ZW9yLm1ldGhvZHMoe1xuXHRjbGVhblJvb21IaXN0b3J5KHsgcm9vbUlkLCBsYXRlc3QsIG9sZGVzdCwgaW5jbHVzaXZlID0gdHJ1ZSwgbGltaXQsIGV4Y2x1ZGVQaW5uZWQgPSBmYWxzZSwgZmlsZXNPbmx5ID0gZmFsc2UsIGZyb21Vc2VycyA9IFtdIH0pIHtcblx0XHRjaGVjayhyb29tSWQsIFN0cmluZyk7XG5cdFx0Y2hlY2sobGF0ZXN0LCBEYXRlKTtcblx0XHRjaGVjayhvbGRlc3QsIERhdGUpO1xuXHRcdGNoZWNrKGluY2x1c2l2ZSwgQm9vbGVhbik7XG5cdFx0Y2hlY2sobGltaXQsIE1hdGNoLk1heWJlKE51bWJlcikpO1xuXHRcdGNoZWNrKGV4Y2x1ZGVQaW5uZWQsIE1hdGNoLk1heWJlKEJvb2xlYW4pKTtcblx0XHRjaGVjayhmaWxlc09ubHksIE1hdGNoLk1heWJlKEJvb2xlYW4pKTtcblx0XHRjaGVjayhmcm9tVXNlcnMsIE1hdGNoLk1heWJlKFtTdHJpbmddKSk7XG5cblx0XHRjb25zdCB1c2VySWQgPSBNZXRlb3IudXNlcklkKCk7XG5cblx0XHRpZiAoIXVzZXJJZCkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnY2xlYW5Sb29tSGlzdG9yeScgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKCFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24odXNlcklkLCAnY2xlYW4tY2hhbm5lbC1oaXN0b3J5Jywgcm9vbUlkKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ2NsZWFuUm9vbUhpc3RvcnknIH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBSb2NrZXRDaGF0LmNsZWFuUm9vbUhpc3RvcnkoeyByaWQ6IHJvb21JZCwgbGF0ZXN0LCBvbGRlc3QsIGluY2x1c2l2ZSwgbGltaXQsIGV4Y2x1ZGVQaW5uZWQsIGZpbGVzT25seSwgZnJvbVVzZXJzIH0pO1xuXHR9LFxufSk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cdGNyZWF0ZUNoYW5uZWwobmFtZSwgbWVtYmVycywgcmVhZE9ubHkgPSBmYWxzZSwgY3VzdG9tRmllbGRzID0ge30sIGV4dHJhRGF0YSA9IHt9KSB7XG5cdFx0Y2hlY2sobmFtZSwgU3RyaW5nKTtcblx0XHRjaGVjayhtZW1iZXJzLCBNYXRjaC5PcHRpb25hbChbU3RyaW5nXSkpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2NyZWF0ZUNoYW5uZWwnIH0pO1xuXHRcdH1cblxuXHRcdGlmICghUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKE1ldGVvci51c2VySWQoKSwgJ2NyZWF0ZS1jJykpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW5vdC1hbGxvd2VkJywgJ05vdCBhbGxvd2VkJywgeyBtZXRob2Q6ICdjcmVhdGVDaGFubmVsJyB9KTtcblx0XHR9XG5cdFx0cmV0dXJuIFJvY2tldENoYXQuY3JlYXRlUm9vbSgnYycsIG5hbWUsIE1ldGVvci51c2VyKCkgJiYgTWV0ZW9yLnVzZXIoKS51c2VybmFtZSwgbWVtYmVycywgcmVhZE9ubHksIHsgY3VzdG9tRmllbGRzLCAuLi5leHRyYURhdGEgfSk7XG5cdH0sXG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0Y3JlYXRlVG9rZW4odXNlcklkKSB7XG5cdFx0aWYgKE1ldGVvci51c2VySWQoKSAhPT0gdXNlcklkICYmICFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAndXNlci1nZW5lcmF0ZS1hY2Nlc3MtdG9rZW4nKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWF1dGhvcml6ZWQnLCAnTm90IGF1dGhvcml6ZWQnLCB7IG1ldGhvZDogJ2NyZWF0ZVRva2VuJyB9KTtcblx0XHR9XG5cdFx0Y29uc3QgdG9rZW4gPSBBY2NvdW50cy5fZ2VuZXJhdGVTdGFtcGVkTG9naW5Ub2tlbigpO1xuXHRcdEFjY291bnRzLl9pbnNlcnRMb2dpblRva2VuKHVzZXJJZCwgdG9rZW4pO1xuXHRcdHJldHVybiB7XG5cdFx0XHR1c2VySWQsXG5cdFx0XHRhdXRoVG9rZW46IHRva2VuLnRva2VuLFxuXHRcdH07XG5cdH0sXG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0Y3JlYXRlUHJpdmF0ZUdyb3VwKG5hbWUsIG1lbWJlcnMsIHJlYWRPbmx5ID0gZmFsc2UsIGN1c3RvbUZpZWxkcyA9IHt9LCBleHRyYURhdGEgPSB7fSkge1xuXHRcdGNoZWNrKG5hbWUsIFN0cmluZyk7XG5cdFx0Y2hlY2sobWVtYmVycywgTWF0Y2guT3B0aW9uYWwoW1N0cmluZ10pKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdjcmVhdGVQcml2YXRlR3JvdXAnIH0pO1xuXHRcdH1cblxuXHRcdGlmICghUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKE1ldGVvci51c2VySWQoKSwgJ2NyZWF0ZS1wJykpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW5vdC1hbGxvd2VkJywgJ05vdCBhbGxvd2VkJywgeyBtZXRob2Q6ICdjcmVhdGVQcml2YXRlR3JvdXAnIH0pO1xuXHRcdH1cblxuXHRcdC8vIHZhbGlkYXRlIGV4dHJhIGRhdGEgc2NoZW1hXG5cdFx0Y2hlY2soZXh0cmFEYXRhLCBNYXRjaC5PYmplY3RJbmNsdWRpbmcoe1xuXHRcdFx0dG9rZW5wYXNzOiBNYXRjaC5NYXliZSh7XG5cdFx0XHRcdHJlcXVpcmU6IFN0cmluZyxcblx0XHRcdFx0dG9rZW5zOiBbe1xuXHRcdFx0XHRcdHRva2VuOiBTdHJpbmcsXG5cdFx0XHRcdFx0YmFsYW5jZTogU3RyaW5nLFxuXHRcdFx0XHR9XSxcblx0XHRcdH0pLFxuXHRcdH0pKTtcblxuXHRcdHJldHVybiBSb2NrZXRDaGF0LmNyZWF0ZVJvb20oJ3AnLCBuYW1lLCBNZXRlb3IudXNlcigpICYmIE1ldGVvci51c2VyKCkudXNlcm5hbWUsIG1lbWJlcnMsIHJlYWRPbmx5LCB7IGN1c3RvbUZpZWxkcywgLi4uZXh0cmFEYXRhIH0pO1xuXHR9LFxufSk7XG4iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbk1ldGVvci5tZXRob2RzKHtcblx0ZGVsZXRlTWVzc2FnZShtZXNzYWdlKSB7XG5cdFx0Y2hlY2sobWVzc2FnZSwgTWF0Y2guT2JqZWN0SW5jbHVkaW5nKHtcblx0XHRcdF9pZDogU3RyaW5nLFxuXHRcdH0pKTtcblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHtcblx0XHRcdFx0bWV0aG9kOiAnZGVsZXRlTWVzc2FnZScsXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Y29uc3Qgb3JpZ2luYWxNZXNzYWdlID0gUm9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuZmluZE9uZUJ5SWQobWVzc2FnZS5faWQsIHtcblx0XHRcdGZpZWxkczoge1xuXHRcdFx0XHR1OiAxLFxuXHRcdFx0XHRyaWQ6IDEsXG5cdFx0XHRcdGZpbGU6IDEsXG5cdFx0XHRcdHRzOiAxLFxuXHRcdFx0fSxcblx0XHR9KTtcblx0XHRpZiAob3JpZ2luYWxNZXNzYWdlID09IG51bGwpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFjdGlvbi1ub3QtYWxsb3dlZCcsICdOb3QgYWxsb3dlZCcsIHtcblx0XHRcdFx0bWV0aG9kOiAnZGVsZXRlTWVzc2FnZScsXG5cdFx0XHRcdGFjdGlvbjogJ0RlbGV0ZV9tZXNzYWdlJyxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRjb25zdCBmb3JjZURlbGV0ZSA9IFJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICdmb3JjZS1kZWxldGUtbWVzc2FnZScsIG9yaWdpbmFsTWVzc2FnZS5yaWQpO1xuXHRcdGNvbnN0IGhhc1Blcm1pc3Npb24gPSBSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAnZGVsZXRlLW1lc3NhZ2UnLCBvcmlnaW5hbE1lc3NhZ2UucmlkKTtcblx0XHRjb25zdCBkZWxldGVBbGxvd2VkID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ01lc3NhZ2VfQWxsb3dEZWxldGluZycpO1xuXHRcdGNvbnN0IGRlbGV0ZU93biA9IG9yaWdpbmFsTWVzc2FnZSAmJiBvcmlnaW5hbE1lc3NhZ2UudSAmJiBvcmlnaW5hbE1lc3NhZ2UudS5faWQgPT09IE1ldGVvci51c2VySWQoKTtcblx0XHRpZiAoIShoYXNQZXJtaXNzaW9uIHx8IChkZWxldGVBbGxvd2VkICYmIGRlbGV0ZU93bikpICYmICEoZm9yY2VEZWxldGUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7XG5cdFx0XHRcdG1ldGhvZDogJ2RlbGV0ZU1lc3NhZ2UnLFxuXHRcdFx0XHRhY3Rpb246ICdEZWxldGVfbWVzc2FnZScsXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Y29uc3QgYmxvY2tEZWxldGVJbk1pbnV0ZXMgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTWVzc2FnZV9BbGxvd0RlbGV0aW5nX0Jsb2NrRGVsZXRlSW5NaW51dGVzJyk7XG5cdFx0aWYgKGJsb2NrRGVsZXRlSW5NaW51dGVzICE9IG51bGwgJiYgYmxvY2tEZWxldGVJbk1pbnV0ZXMgIT09IDAgJiYgIWZvcmNlRGVsZXRlKSB7XG5cdFx0XHRpZiAob3JpZ2luYWxNZXNzYWdlLnRzID09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0Y29uc3QgbXNnVHMgPSBtb21lbnQob3JpZ2luYWxNZXNzYWdlLnRzKTtcblx0XHRcdGlmIChtc2dUcyA9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGN1cnJlbnRUc0RpZmYgPSBtb21lbnQoKS5kaWZmKG1zZ1RzLCAnbWludXRlcycpO1xuXHRcdFx0aWYgKGN1cnJlbnRUc0RpZmYgPiBibG9ja0RlbGV0ZUluTWludXRlcykge1xuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1tZXNzYWdlLWRlbGV0aW5nLWJsb2NrZWQnLCAnTWVzc2FnZSBkZWxldGluZyBpcyBibG9ja2VkJywge1xuXHRcdFx0XHRcdG1ldGhvZDogJ2RlbGV0ZU1lc3NhZ2UnLFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIFJvY2tldENoYXQuZGVsZXRlTWVzc2FnZShvcmlnaW5hbE1lc3NhZ2UsIE1ldGVvci51c2VyKCkpO1xuXHR9LFxufSk7XG4iLCJpbXBvcnQgcyBmcm9tICd1bmRlcnNjb3JlLnN0cmluZyc7XG5cbk1ldGVvci5tZXRob2RzKHtcblx0ZGVsZXRlVXNlck93bkFjY291bnQocGFzc3dvcmQpIHtcblxuXHRcdGNoZWNrKHBhc3N3b3JkLCBTdHJpbmcpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2RlbGV0ZVVzZXJPd25BY2NvdW50JyB9KTtcblx0XHR9XG5cblx0XHRpZiAoIVJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdBY2NvdW50c19BbGxvd0RlbGV0ZU93bkFjY291bnQnKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ2RlbGV0ZVVzZXJPd25BY2NvdW50JyB9KTtcblx0XHR9XG5cblx0XHRjb25zdCB1c2VySWQgPSBNZXRlb3IudXNlcklkKCk7XG5cdFx0Y29uc3QgdXNlciA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeUlkKHVzZXJJZCk7XG5cblx0XHRpZiAoIXVzZXIpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2RlbGV0ZVVzZXJPd25BY2NvdW50JyB9KTtcblx0XHR9XG5cblx0XHRpZiAodXNlci5zZXJ2aWNlcyAmJiB1c2VyLnNlcnZpY2VzLnBhc3N3b3JkICYmIHMudHJpbSh1c2VyLnNlcnZpY2VzLnBhc3N3b3JkLmJjcnlwdCkpIHtcblx0XHRcdGNvbnN0IHJlc3VsdCA9IEFjY291bnRzLl9jaGVja1Bhc3N3b3JkKHVzZXIsIHsgZGlnZXN0OiBwYXNzd29yZCwgYWxnb3JpdGhtOiAnc2hhLTI1NicgfSk7XG5cdFx0XHRpZiAocmVzdWx0LmVycm9yKSB7XG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtcGFzc3dvcmQnLCAnSW52YWxpZCBwYXNzd29yZCcsIHsgbWV0aG9kOiAnZGVsZXRlVXNlck93bkFjY291bnQnIH0pO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodXNlci51c2VybmFtZSAhPT0gcy50cmltKHBhc3N3b3JkKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VybmFtZScsICdJbnZhbGlkIHVzZXJuYW1lJywgeyBtZXRob2Q6ICdkZWxldGVVc2VyT3duQWNjb3VudCcgfSk7XG5cdFx0fVxuXG5cdFx0TWV0ZW9yLmRlZmVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0Um9ja2V0Q2hhdC5kZWxldGVVc2VyKHVzZXJJZCk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRleGVjdXRlU2xhc2hDb21tYW5kUHJldmlldyhjb21tYW5kLCBwcmV2aWV3KSB7XG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7XG5cdFx0XHRcdG1ldGhvZDogJ2dldFNsYXNoQ29tbWFuZFByZXZpZXcnLFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCFjb21tYW5kIHx8ICFjb21tYW5kLmNtZCB8fCAhUm9ja2V0Q2hhdC5zbGFzaENvbW1hbmRzLmNvbW1hbmRzW2NvbW1hbmQuY21kXSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1jb21tYW5kJywgJ0ludmFsaWQgQ29tbWFuZCBQcm92aWRlZCcsIHtcblx0XHRcdFx0bWV0aG9kOiAnZXhlY3V0ZVNsYXNoQ29tbWFuZFByZXZpZXcnLFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdGhlQ21kID0gUm9ja2V0Q2hhdC5zbGFzaENvbW1hbmRzLmNvbW1hbmRzW2NvbW1hbmQuY21kXTtcblx0XHRpZiAoIXRoZUNtZC5wcm92aWRlc1ByZXZpZXcpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtY29tbWFuZCcsICdDb21tYW5kIERvZXMgTm90IFByb3ZpZGUgUHJldmlld3MnLCB7XG5cdFx0XHRcdG1ldGhvZDogJ2V4ZWN1dGVTbGFzaENvbW1hbmRQcmV2aWV3Jyxcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICghcHJldmlldykge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1jb21tYW5kLXByZXZpZXcnLCAnSW52YWxpZCBQcmV2aWV3IFByb3ZpZGVkJywge1xuXHRcdFx0XHRtZXRob2Q6ICdleGVjdXRlU2xhc2hDb21tYW5kUHJldmlldycsXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zbGFzaENvbW1hbmRzLmV4ZWN1dGVQcmV2aWV3KGNvbW1hbmQuY21kLCBjb21tYW5kLnBhcmFtcywgY29tbWFuZC5tc2csIHByZXZpZXcpO1xuXHR9LFxufSk7XG4iLCJpbXBvcnQgRmlsdGVyIGZyb20gJ2JhZC13b3Jkcyc7XG5cblJvY2tldENoYXQuY2FsbGJhY2tzLmFkZCgnYmVmb3JlU2F2ZU1lc3NhZ2UnLCBmdW5jdGlvbihtZXNzYWdlKSB7XG5cblx0aWYgKFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdNZXNzYWdlX0FsbG93QmFkV29yZHNGaWx0ZXInKSkge1xuXHRcdGNvbnN0IGJhZFdvcmRzTGlzdCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdNZXNzYWdlX0JhZFdvcmRzRmlsdGVyTGlzdCcpO1xuXHRcdGxldCBvcHRpb25zO1xuXG5cdFx0Ly8gQWRkIHdvcmRzIHRvIHRoZSBibGFja2xpc3Rcblx0XHRpZiAoISFiYWRXb3Jkc0xpc3QgJiYgYmFkV29yZHNMaXN0Lmxlbmd0aCkge1xuXHRcdFx0b3B0aW9ucyA9IHtcblx0XHRcdFx0bGlzdDogYmFkV29yZHNMaXN0LnNwbGl0KCcsJyksXG5cdFx0XHR9O1xuXHRcdH1cblx0XHRjb25zdCBmaWx0ZXIgPSBuZXcgRmlsdGVyKG9wdGlvbnMpO1xuXHRcdG1lc3NhZ2UubXNnID0gZmlsdGVyLmNsZWFuKG1lc3NhZ2UubXNnKTtcblx0fVxuXG5cdHJldHVybiBtZXNzYWdlO1xuXG59LCAxLCAnZmlsdGVyQmFkV29yZHMnKTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5Sb2NrZXRDaGF0LmNhbGxiYWNrcy5hZGQoJ2JlZm9yZVNhdmVNZXNzYWdlJywgZnVuY3Rpb24obWVzc2FnZSkge1xuXHQvLyBUZXN0IGlmIHRoZSBtZXNzYWdlIG1lbnRpb25zIGluY2x1ZGUgQGFsbC5cblx0aWYgKG1lc3NhZ2UubWVudGlvbnMgIT0gbnVsbCAmJlxuXHRcdF8ucGx1Y2sobWVzc2FnZS5tZW50aW9ucywgJ19pZCcpLnNvbWUoKGl0ZW0pID0+IGl0ZW0gPT09ICdhbGwnKSkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIHVzZXIgaGFzIHBlcm1pc3Npb25zIHRvIHVzZSBAYWxsIGluIGJvdGggZ2xvYmFsIGFuZCByb29tIHNjb3Blcy5cblx0XHRpZiAoIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihtZXNzYWdlLnUuX2lkLCAnbWVudGlvbi1hbGwnKSAmJiAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKG1lc3NhZ2UudS5faWQsICdtZW50aW9uLWFsbCcsIG1lc3NhZ2UucmlkKSkge1xuXG5cdFx0XHQvLyBHZXQgdGhlIGxhbmd1YWdlIG9mIHRoZSB1c2VyIGZvciB0aGUgZXJyb3Igbm90aWZpY2F0aW9uLlxuXHRcdFx0Y29uc3QgeyBsYW5ndWFnZSB9ID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQobWVzc2FnZS51Ll9pZCk7XG5cdFx0XHRjb25zdCBhY3Rpb24gPSBUQVBpMThuLl9fKCdOb3RpZnlfYWxsX2luX3RoaXNfcm9vbScsIHt9LCBsYW5ndWFnZSk7XG5cblx0XHRcdC8vIEFkZCBhIG5vdGlmaWNhdGlvbiB0byB0aGUgY2hhdCwgaW5mb3JtaW5nIHRoZSB1c2VyIHRoYXQgdGhpc1xuXHRcdFx0Ly8gYWN0aW9uIGlzIG5vdCBhbGxvd2VkLlxuXHRcdFx0Um9ja2V0Q2hhdC5Ob3RpZmljYXRpb25zLm5vdGlmeVVzZXIobWVzc2FnZS51Ll9pZCwgJ21lc3NhZ2UnLCB7XG5cdFx0XHRcdF9pZDogUmFuZG9tLmlkKCksXG5cdFx0XHRcdHJpZDogbWVzc2FnZS5yaWQsXG5cdFx0XHRcdHRzOiBuZXcgRGF0ZSxcblx0XHRcdFx0bXNnOiBUQVBpMThuLl9fKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCB7IGFjdGlvbiB9LCBsYW5ndWFnZSksXG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQWxzbyB0aHJvdyB0byBzdG9wIHByb3BhZ2F0aW9uIG9mICdzZW5kTWVzc2FnZScuXG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCAnTm90aWZ5IGFsbCBpbiB0aGlzIHJvb20gbm90IGFsbG93ZWQnLCB7XG5cdFx0XHRcdG1ldGhvZDogJ2ZpbHRlckFUQWxsVGFnJyxcblx0XHRcdFx0YWN0aW9uOiAnTm90aWZ5X2FsbF9pbl90aGlzX3Jvb20nLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1lc3NhZ2U7XG5cbn0sIDEsICdmaWx0ZXJBVEFsbFRhZycpO1xuIiwiaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5cblJvY2tldENoYXQuY2FsbGJhY2tzLmFkZCgnYmVmb3JlU2F2ZU1lc3NhZ2UnLCBmdW5jdGlvbihtZXNzYWdlKSB7XG5cdC8vIFRlc3QgaWYgdGhlIG1lc3NhZ2UgbWVudGlvbnMgaW5jbHVkZSBAaGVyZS5cblx0aWYgKG1lc3NhZ2UubWVudGlvbnMgIT0gbnVsbCAmJlxuXHRcdF8ucGx1Y2sobWVzc2FnZS5tZW50aW9ucywgJ19pZCcpLnNvbWUoKGl0ZW0pID0+IGl0ZW0gPT09ICdoZXJlJykpIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSB1c2VyIGhhcyBwZXJtaXNzaW9ucyB0byB1c2UgQGhlcmUgaW4gYm90aCBnbG9iYWwgYW5kIHJvb20gc2NvcGVzLlxuXHRcdGlmICghUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKG1lc3NhZ2UudS5faWQsICdtZW50aW9uLWhlcmUnKSAmJiAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKG1lc3NhZ2UudS5faWQsICdtZW50aW9uLWhlcmUnLCBtZXNzYWdlLnJpZCkpIHtcblxuXHRcdFx0Ly8gR2V0IHRoZSBsYW5ndWFnZSBvZiB0aGUgdXNlciBmb3IgdGhlIGVycm9yIG5vdGlmaWNhdGlvbi5cblx0XHRcdGNvbnN0IHsgbGFuZ3VhZ2UgfSA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeUlkKG1lc3NhZ2UudS5faWQpO1xuXHRcdFx0Y29uc3QgYWN0aW9uID0gVEFQaTE4bi5fXygnTm90aWZ5X2FjdGl2ZV9pbl90aGlzX3Jvb20nLCB7fSwgbGFuZ3VhZ2UpO1xuXG5cdFx0XHQvLyBBZGQgYSBub3RpZmljYXRpb24gdG8gdGhlIGNoYXQsIGluZm9ybWluZyB0aGUgdXNlciB0aGF0IHRoaXNcblx0XHRcdC8vIGFjdGlvbiBpcyBub3QgYWxsb3dlZC5cblx0XHRcdFJvY2tldENoYXQuTm90aWZpY2F0aW9ucy5ub3RpZnlVc2VyKG1lc3NhZ2UudS5faWQsICdtZXNzYWdlJywge1xuXHRcdFx0XHRfaWQ6IFJhbmRvbS5pZCgpLFxuXHRcdFx0XHRyaWQ6IG1lc3NhZ2UucmlkLFxuXHRcdFx0XHR0czogbmV3IERhdGUsXG5cdFx0XHRcdG1zZzogVEFQaTE4bi5fXygnZXJyb3ItYWN0aW9uLW5vdC1hbGxvd2VkJywgeyBhY3Rpb24gfSwgbGFuZ3VhZ2UpLFxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEFsc28gdGhyb3cgdG8gc3RvcCBwcm9wYWdhdGlvbiBvZiAnc2VuZE1lc3NhZ2UnLlxuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYWN0aW9uLW5vdC1hbGxvd2VkJywgJ05vdGlmeSBoZXJlIGluIHRoaXMgcm9vbSBub3QgYWxsb3dlZCcsIHtcblx0XHRcdFx0bWV0aG9kOiAnZmlsdGVyQVRIZXJlVGFnJyxcblx0XHRcdFx0YWN0aW9uOiAnTm90aWZ5X2FjdGl2ZV9pbl90aGlzX3Jvb20nLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1lc3NhZ2U7XG5cbn0sIDEsICdmaWx0ZXJBVEhlcmVUYWcnKTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG5cdGdldENoYW5uZWxIaXN0b3J5KHsgcmlkLCBsYXRlc3QsIG9sZGVzdCwgaW5jbHVzaXZlLCBjb3VudCA9IDIwLCB1bnJlYWRzIH0pIHtcblx0XHRjaGVjayhyaWQsIFN0cmluZyk7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnZ2V0Q2hhbm5lbEhpc3RvcnknIH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IGZyb21Vc2VySWQgPSBNZXRlb3IudXNlcklkKCk7XG5cdFx0Y29uc3Qgcm9vbSA9IE1ldGVvci5jYWxsKCdjYW5BY2Nlc3NSb29tJywgcmlkLCBmcm9tVXNlcklkKTtcblx0XHRpZiAoIXJvb20pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhleSBjYW4gYWNjZXNzIHRoZSByb29tXG5cdFx0aWYgKHJvb20udCA9PT0gJ2MnICYmICFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oZnJvbVVzZXJJZCwgJ3ByZXZpZXctYy1yb29tJykgJiYgIVJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZE9uZUJ5Um9vbUlkQW5kVXNlcklkKHJpZCwgZnJvbVVzZXJJZCwgeyBmaWVsZHM6IHsgX2lkOiAxIH0gfSkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgbGF0ZXN0IGlzIGFsd2F5cyBkZWZpbmVkLlxuXHRcdGlmIChfLmlzVW5kZWZpbmVkKGxhdGVzdCkpIHtcblx0XHRcdGxhdGVzdCA9IG5ldyBEYXRlKCk7XG5cdFx0fVxuXG5cdFx0Ly8gVmVyaWZ5IG9sZGVzdCBpcyBhIGRhdGUgaWYgaXQgZXhpc3RzXG5cdFx0aWYgKCFfLmlzVW5kZWZpbmVkKG9sZGVzdCkgJiYgIV8uaXNEYXRlKG9sZGVzdCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtZGF0ZScsICdJbnZhbGlkIGRhdGUnLCB7IG1ldGhvZDogJ2dldENoYW5uZWxIaXN0b3J5JyB9KTtcblx0XHR9XG5cblx0XHRjb25zdCBvcHRpb25zID0ge1xuXHRcdFx0c29ydDoge1xuXHRcdFx0XHR0czogLTEsXG5cdFx0XHR9LFxuXHRcdFx0bGltaXQ6IGNvdW50LFxuXHRcdH07XG5cblx0XHRpZiAoIVJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdNZXNzYWdlX1Nob3dFZGl0ZWRTdGF0dXMnKSkge1xuXHRcdFx0b3B0aW9ucy5maWVsZHMgPSB7IGVkaXRlZEF0OiAwIH07XG5cdFx0fVxuXG5cdFx0bGV0IHJlY29yZHMgPSBbXTtcblx0XHRpZiAoXy5pc1VuZGVmaW5lZChvbGRlc3QpICYmIGluY2x1c2l2ZSkge1xuXHRcdFx0cmVjb3JkcyA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRWaXNpYmxlQnlSb29tSWRCZWZvcmVUaW1lc3RhbXBJbmNsdXNpdmUocmlkLCBsYXRlc3QsIG9wdGlvbnMpLmZldGNoKCk7XG5cdFx0fSBlbHNlIGlmIChfLmlzVW5kZWZpbmVkKG9sZGVzdCkgJiYgIWluY2x1c2l2ZSkge1xuXHRcdFx0cmVjb3JkcyA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRWaXNpYmxlQnlSb29tSWRCZWZvcmVUaW1lc3RhbXAocmlkLCBsYXRlc3QsIG9wdGlvbnMpLmZldGNoKCk7XG5cdFx0fSBlbHNlIGlmICghXy5pc1VuZGVmaW5lZChvbGRlc3QpICYmIGluY2x1c2l2ZSkge1xuXHRcdFx0cmVjb3JkcyA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRWaXNpYmxlQnlSb29tSWRCZXR3ZWVuVGltZXN0YW1wc0luY2x1c2l2ZShyaWQsIG9sZGVzdCwgbGF0ZXN0LCBvcHRpb25zKS5mZXRjaCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZWNvcmRzID0gUm9ja2V0Q2hhdC5tb2RlbHMuTWVzc2FnZXMuZmluZFZpc2libGVCeVJvb21JZEJldHdlZW5UaW1lc3RhbXBzKHJpZCwgb2xkZXN0LCBsYXRlc3QsIG9wdGlvbnMpLmZldGNoKCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgVUlfVXNlX1JlYWxfTmFtZSA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdVSV9Vc2VfUmVhbF9OYW1lJykgPT09IHRydWU7XG5cblx0XHRjb25zdCBtZXNzYWdlcyA9IF8ubWFwKHJlY29yZHMsIChtZXNzYWdlKSA9PiB7XG5cdFx0XHRtZXNzYWdlLnN0YXJyZWQgPSBfLmZpbmRXaGVyZShtZXNzYWdlLnN0YXJyZWQsIHsgX2lkOiBmcm9tVXNlcklkIH0pO1xuXHRcdFx0aWYgKG1lc3NhZ2UudSAmJiBtZXNzYWdlLnUuX2lkICYmIFVJX1VzZV9SZWFsX05hbWUpIHtcblx0XHRcdFx0Y29uc3QgdXNlciA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeUlkKG1lc3NhZ2UudS5faWQpO1xuXHRcdFx0XHRtZXNzYWdlLnUubmFtZSA9IHVzZXIgJiYgdXNlci5uYW1lO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1lc3NhZ2UubWVudGlvbnMgJiYgbWVzc2FnZS5tZW50aW9ucy5sZW5ndGggJiYgVUlfVXNlX1JlYWxfTmFtZSkge1xuXHRcdFx0XHRtZXNzYWdlLm1lbnRpb25zLmZvckVhY2goKG1lbnRpb24pID0+IHtcblx0XHRcdFx0XHRjb25zdCB1c2VyID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQobWVudGlvbi5faWQpO1xuXHRcdFx0XHRcdG1lbnRpb24ubmFtZSA9IHVzZXIgJiYgdXNlci5uYW1lO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtZXNzYWdlO1xuXHRcdH0pO1xuXG5cdFx0aWYgKHVucmVhZHMpIHtcblx0XHRcdGxldCB1bnJlYWROb3RMb2FkZWQgPSAwO1xuXHRcdFx0bGV0IGZpcnN0VW5yZWFkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIV8uaXNVbmRlZmluZWQob2xkZXN0KSkge1xuXHRcdFx0XHRjb25zdCBmaXJzdE1zZyA9IG1lc3NhZ2VzW21lc3NhZ2VzLmxlbmd0aCAtIDFdO1xuXHRcdFx0XHRpZiAoIV8uaXNVbmRlZmluZWQoZmlyc3RNc2cpICYmIGZpcnN0TXNnLnRzID4gb2xkZXN0KSB7XG5cdFx0XHRcdFx0Y29uc3QgdW5yZWFkTWVzc2FnZXMgPSBSb2NrZXRDaGF0Lm1vZGVscy5NZXNzYWdlcy5maW5kVmlzaWJsZUJ5Um9vbUlkQmV0d2VlblRpbWVzdGFtcHMocmlkLCBvbGRlc3QsIGZpcnN0TXNnLnRzLCB7IGxpbWl0OiAxLCBzb3J0OiB7IHRzOiAxIH0gfSk7XG5cdFx0XHRcdFx0Zmlyc3RVbnJlYWQgPSB1bnJlYWRNZXNzYWdlcy5mZXRjaCgpWzBdO1xuXHRcdFx0XHRcdHVucmVhZE5vdExvYWRlZCA9IHVucmVhZE1lc3NhZ2VzLmNvdW50KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0bWVzc2FnZXM6IG1lc3NhZ2VzIHx8IFtdLFxuXHRcdFx0XHRmaXJzdFVucmVhZCxcblx0XHRcdFx0dW5yZWFkTm90TG9hZGVkLFxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0bWVzc2FnZXM6IG1lc3NhZ2VzIHx8IFtdLFxuXHRcdH07XG5cdH0sXG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0Z2V0RnVsbFVzZXJEYXRhKHsgZmlsdGVyID0gJycsIHVzZXJuYW1lID0gJycsIGxpbWl0ID0gMSB9KSB7XG5cdFx0Y29uc3QgcmVzdWx0ID0gUm9ja2V0Q2hhdC5nZXRGdWxsVXNlckRhdGEoeyB1c2VySWQ6IE1ldGVvci51c2VySWQoKSwgZmlsdGVyOiBmaWx0ZXIgfHwgdXNlcm5hbWUsIGxpbWl0IH0pO1xuXHRcdHJldHVybiByZXN1bHQgJiYgcmVzdWx0LmZldGNoKCk7XG5cdH0sXG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0Z2V0Um9vbUpvaW5Db2RlKHJpZCkge1xuXHRcdGNoZWNrKHJpZCwgU3RyaW5nKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdnZXRKb2luQ29kZScgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKCFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAndmlldy1qb2luLWNvZGUnKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWF1dGhvcml6ZWQnLCAnTm90IGF1dGhvcml6ZWQnLCB7IG1ldGhvZDogJ2dldEpvaW5Db2RlJyB9KTtcblx0XHR9XG5cblx0XHRjb25zdCBbcm9vbV0gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kQnlJZChyaWQpLmZldGNoKCk7XG5cblx0XHRyZXR1cm4gcm9vbSAmJiByb29tLmpvaW5Db2RlO1xuXHR9LFxufSk7XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuXHRnZXRSb29tUm9sZXMocmlkKSB7XG5cdFx0Y2hlY2socmlkLCBTdHJpbmcpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkgJiYgUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0FsbG93QW5vbnltb3VzUmVhZCcpID09PSBmYWxzZSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnZ2V0Um9vbVJvbGVzJyB9KTtcblx0XHR9XG5cblx0XHRjaGVjayhyaWQsIFN0cmluZyk7XG5cblx0XHRjb25zdCBvcHRpb25zID0ge1xuXHRcdFx0c29ydDoge1xuXHRcdFx0XHQndS51c2VybmFtZSc6IDEsXG5cdFx0XHR9LFxuXHRcdFx0ZmllbGRzOiB7XG5cdFx0XHRcdHJpZDogMSxcblx0XHRcdFx0dTogMSxcblx0XHRcdFx0cm9sZXM6IDEsXG5cdFx0XHR9LFxuXHRcdH07XG5cblx0XHRjb25zdCBVSV9Vc2VfUmVhbF9OYW1lID0gUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ1VJX1VzZV9SZWFsX05hbWUnKSA9PT0gdHJ1ZTtcblxuXHRcdGNvbnN0IHJvbGVzID0gUm9ja2V0Q2hhdC5tb2RlbHMuUm9sZXMuZmluZCh7IHNjb3BlOiAnU3Vic2NyaXB0aW9ucycsIGRlc2NyaXB0aW9uOiB7ICRleGlzdHM6IDEsICRuZTogJycgfSB9KS5mZXRjaCgpO1xuXHRcdGNvbnN0IHN1YnNjcmlwdGlvbnMgPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRCeVJvb21JZEFuZFJvbGVzKHJpZCwgXy5wbHVjayhyb2xlcywgJ19pZCcpLCBvcHRpb25zKS5mZXRjaCgpO1xuXG5cdFx0aWYgKCFVSV9Vc2VfUmVhbF9OYW1lKSB7XG5cdFx0XHRyZXR1cm4gc3Vic2NyaXB0aW9ucztcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHN1YnNjcmlwdGlvbnMubWFwKChzdWJzY3JpcHRpb24pID0+IHtcblx0XHRcdFx0Y29uc3QgdXNlciA9IFJvY2tldENoYXQubW9kZWxzLlVzZXJzLmZpbmRPbmVCeUlkKHN1YnNjcmlwdGlvbi51Ll9pZCk7XG5cdFx0XHRcdHN1YnNjcmlwdGlvbi51Lm5hbWUgPSB1c2VyICYmIHVzZXIubmFtZTtcblx0XHRcdFx0cmV0dXJuIHN1YnNjcmlwdGlvbjtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRnZXRTZXJ2ZXJJbmZvKCkge1xuXHRcdHJldHVybiBSb2NrZXRDaGF0LkluZm87XG5cdH0sXG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0Z2V0U2luZ2xlTWVzc2FnZShtc2dJZCkge1xuXHRcdGNoZWNrKG1zZ0lkLCBTdHJpbmcpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2dldFNpbmdsZU1lc3NhZ2UnIH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IG1zZyA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRPbmVCeUlkKG1zZ0lkKTtcblxuXHRcdGlmICghbXNnICYmICFtc2cucmlkKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdE1ldGVvci5jYWxsKCdjYW5BY2Nlc3NSb29tJywgbXNnLnJpZCwgTWV0ZW9yLnVzZXJJZCgpKTtcblxuXHRcdHJldHVybiBtc2c7XG5cdH0sXG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0Z2V0U2xhc2hDb21tYW5kUHJldmlld3MoY29tbWFuZCkge1xuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywge1xuXHRcdFx0XHRtZXRob2Q6ICdnZXRTbGFzaENvbW1hbmRQcmV2aWV3Jyxcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICghY29tbWFuZCB8fCAhY29tbWFuZC5jbWQgfHwgIVJvY2tldENoYXQuc2xhc2hDb21tYW5kcy5jb21tYW5kc1tjb21tYW5kLmNtZF0pIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtY29tbWFuZCcsICdJbnZhbGlkIENvbW1hbmQgUHJvdmlkZWQnLCB7XG5cdFx0XHRcdG1ldGhvZDogJ2V4ZWN1dGVTbGFzaENvbW1hbmRQcmV2aWV3Jyxcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IHRoZUNtZCA9IFJvY2tldENoYXQuc2xhc2hDb21tYW5kcy5jb21tYW5kc1tjb21tYW5kLmNtZF07XG5cdFx0aWYgKCF0aGVDbWQucHJvdmlkZXNQcmV2aWV3KSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLWNvbW1hbmQnLCAnQ29tbWFuZCBEb2VzIE5vdCBQcm92aWRlIFByZXZpZXdzJywge1xuXHRcdFx0XHRtZXRob2Q6ICdleGVjdXRlU2xhc2hDb21tYW5kUHJldmlldycsXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5zbGFzaENvbW1hbmRzLmdldFByZXZpZXdzKGNvbW1hbmQuY21kLCBjb21tYW5kLnBhcmFtcywgY29tbWFuZC5tc2cpO1xuXHR9LFxufSk7XG4iLCJpbXBvcnQgXyBmcm9tICd1bmRlcnNjb3JlJztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuXHRnZXRVc2VyUm9sZXMoKSB7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnZ2V0VXNlclJvbGVzJyB9KTtcblx0XHR9XG5cblx0XHRjb25zdCBvcHRpb25zID0ge1xuXHRcdFx0c29ydDoge1xuXHRcdFx0XHR1c2VybmFtZTogMSxcblx0XHRcdH0sXG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0dXNlcm5hbWU6IDEsXG5cdFx0XHRcdHJvbGVzOiAxLFxuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0Y29uc3Qgcm9sZXMgPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb2xlcy5maW5kKHsgc2NvcGU6ICdVc2VycycsIGRlc2NyaXB0aW9uOiB7ICRleGlzdHM6IDEsICRuZTogJycgfSB9KS5mZXRjaCgpO1xuXHRcdGNvbnN0IHJvbGVJZHMgPSBfLnBsdWNrKHJvbGVzLCAnX2lkJyk7XG5cblx0XHQvLyBTZWN1cml0eSBpc3N1ZTogd2Ugc2hvdWxkIG5vdCBzZW5kIGFsbCB1c2VyJ3Mgcm9sZXMgdG8gYWxsIGNsaWVudHMsIG9ubHkgdGhlICdwdWJsaWMnIHJvbGVzXG5cdFx0Ly8gV2UgbXVzdCByZW1vdmUgYWxsIHJvbGVzIHRoYXQgYXJlIG5vdCBwYXJ0IG9mIHRoZSBxdWVyeSBmcm9tIHRoZSByZXR1cm5lZCB1c2Vyc1xuXHRcdGNvbnN0IHVzZXJzID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZFVzZXJzSW5Sb2xlcyhyb2xlSWRzLCBudWxsLCBvcHRpb25zKS5mZXRjaCgpO1xuXHRcdGZvciAoY29uc3QgdXNlciBvZiB1c2Vycykge1xuXHRcdFx0dXNlci5yb2xlcyA9IF8uaW50ZXJzZWN0aW9uKHVzZXIucm9sZXMsIHJvbGVJZHMpO1xuXHRcdH1cblx0XHRyZXR1cm4gdXNlcnM7XG5cdH0sXG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0aW5zZXJ0T3JVcGRhdGVVc2VyKHVzZXJEYXRhKSB7XG5cblx0XHRjaGVjayh1c2VyRGF0YSwgT2JqZWN0KTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdpbnNlcnRPclVwZGF0ZVVzZXInIH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBSb2NrZXRDaGF0LnNhdmVVc2VyKE1ldGVvci51c2VySWQoKSwgdXNlckRhdGEpO1xuXHR9LFxufSk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cdGpvaW5EZWZhdWx0Q2hhbm5lbHMoc2lsZW5jZWQpIHtcblx0XHRjaGVjayhzaWxlbmNlZCwgTWF0Y2guT3B0aW9uYWwoQm9vbGVhbikpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2pvaW5EZWZhdWx0Q2hhbm5lbHMnIH0pO1xuXHRcdH1cblxuXHRcdHRoaXMudW5ibG9jaygpO1xuXHRcdHJldHVybiBSb2NrZXRDaGF0LmFkZFVzZXJUb0RlZmF1bHRDaGFubmVscyhNZXRlb3IudXNlcigpLCBzaWxlbmNlZCk7XG5cdH0sXG59KTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0am9pblJvb20ocmlkLCBjb2RlKSB7XG5cdFx0Y2hlY2socmlkLCBTdHJpbmcpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ2pvaW5Sb29tJyB9KTtcblx0XHR9XG5cblx0XHRjb25zdCByb29tID0gUm9ja2V0Q2hhdC5tb2RlbHMuUm9vbXMuZmluZE9uZUJ5SWQocmlkKTtcblxuXHRcdGlmICghcm9vbSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC1yb29tJywgJ0ludmFsaWQgcm9vbScsIHsgbWV0aG9kOiAnam9pblJvb20nIH0pO1xuXHRcdH1cblxuXHRcdC8vIFRPRE8gd2Ugc2hvdWxkIGhhdmUgYSAnYmVmb3JlSm9pblJvb20nIGNhbGwgYmFjayBzbyBleHRlcm5hbCBzZXJ2aWNlcyBjYW4gZG8gdGhlaXIgb3duIHZhbGlkYXRpb25zXG5cdFx0Y29uc3QgdXNlciA9IE1ldGVvci51c2VyKCk7XG5cdFx0aWYgKHJvb20udG9rZW5wYXNzICYmIHVzZXIgJiYgdXNlci5zZXJ2aWNlcyAmJiB1c2VyLnNlcnZpY2VzLnRva2VucGFzcykge1xuXHRcdFx0Y29uc3QgYmFsYW5jZXMgPSBSb2NrZXRDaGF0LnVwZGF0ZVVzZXJUb2tlbnBhc3NCYWxhbmNlcyh1c2VyKTtcblxuXHRcdFx0aWYgKCFSb2NrZXRDaGF0LlRva2VucGFzcy52YWxpZGF0ZUFjY2Vzcyhyb29tLnRva2VucGFzcywgYmFsYW5jZXMpKSB7XG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW5vdC1hbGxvd2VkJywgJ1Rva2VuIHJlcXVpcmVkJywgeyBtZXRob2Q6ICdqb2luUm9vbScgfSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICghUm9ja2V0Q2hhdC5hdXRoei5jYW5BY2Nlc3NSb29tKHJvb20sIE1ldGVvci51c2VyKCkpKSB7XG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW5vdC1hbGxvd2VkJywgJ05vdCBhbGxvd2VkJywgeyBtZXRob2Q6ICdqb2luUm9vbScgfSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICgocm9vbS5qb2luQ29kZVJlcXVpcmVkID09PSB0cnVlKSAmJiAoY29kZSAhPT0gcm9vbS5qb2luQ29kZSkgJiYgIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICdqb2luLXdpdGhvdXQtam9pbi1jb2RlJykpIHtcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItY29kZS1pbnZhbGlkJywgJ0ludmFsaWQgUm9vbSBQYXNzd29yZCcsIHsgbWV0aG9kOiAnam9pblJvb20nIH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBSb2NrZXRDaGF0LmFkZFVzZXJUb1Jvb20ocmlkLCB1c2VyKTtcblx0fSxcbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRsZWF2ZVJvb20ocmlkKSB7XG5cblx0XHRjaGVjayhyaWQsIFN0cmluZyk7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnbGVhdmVSb29tJyB9KTtcblx0XHR9XG5cblx0XHR0aGlzLnVuYmxvY2soKTtcblxuXHRcdGNvbnN0IHJvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlJZChyaWQpO1xuXHRcdGNvbnN0IHVzZXIgPSBNZXRlb3IudXNlcigpO1xuXG5cdFx0aWYgKHJvb20udCA9PT0gJ2QnIHx8IChyb29tLnQgPT09ICdjJyAmJiAhUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKHVzZXIuX2lkLCAnbGVhdmUtYycpKSB8fCAocm9vbS50ID09PSAncCcgJiYgIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbih1c2VyLl9pZCwgJ2xlYXZlLXAnKSkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW5vdC1hbGxvd2VkJywgJ05vdCBhbGxvd2VkJywgeyBtZXRob2Q6ICdsZWF2ZVJvb20nIH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IHN1YnNjcmlwdGlvbiA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZE9uZUJ5Um9vbUlkQW5kVXNlcklkKHJpZCwgdXNlci5faWQsIHsgZmllbGRzOiB7IF9pZDogMSB9IH0pO1xuXHRcdGlmICghc3Vic2NyaXB0aW9uKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci11c2VyLW5vdC1pbi1yb29tJywgJ1lvdSBhcmUgbm90IGluIHRoaXMgcm9vbScsIHsgbWV0aG9kOiAnbGVhdmVSb29tJyB9KTtcblx0XHR9XG5cblx0XHQvLyBJZiB1c2VyIGlzIHJvb20gb3duZXIsIGNoZWNrIGlmIHRoZXJlIGFyZSBvdGhlciBvd25lcnMuIElmIHRoZXJlIGlzbid0IGFueW9uZSBlbHNlLCB3YXJuIHVzZXIgdG8gc2V0IGEgbmV3IG93bmVyLlxuXHRcdGlmIChSb2NrZXRDaGF0LmF1dGh6Lmhhc1JvbGUodXNlci5faWQsICdvd25lcicsIHJvb20uX2lkKSkge1xuXHRcdFx0Y29uc3QgbnVtT3duZXJzID0gUm9ja2V0Q2hhdC5hdXRoei5nZXRVc2Vyc0luUm9sZSgnb3duZXInLCByb29tLl9pZCkuY291bnQoKTtcblx0XHRcdGlmIChudW1Pd25lcnMgPT09IDEpIHtcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3IteW91LWFyZS1sYXN0LW93bmVyJywgJ1lvdSBhcmUgdGhlIGxhc3Qgb3duZXIuIFBsZWFzZSBzZXQgbmV3IG93bmVyIGJlZm9yZSBsZWF2aW5nIHRoZSByb29tLicsIHsgbWV0aG9kOiAnbGVhdmVSb29tJyB9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5yZW1vdmVVc2VyRnJvbVJvb20ocmlkLCB1c2VyKTtcblx0fSxcbn0pO1xuIiwiaW1wb3J0IHMgZnJvbSAndW5kZXJzY29yZS5zdHJpbmcnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG5cdHJlbW92ZU9BdXRoU2VydmljZShuYW1lKSB7XG5cblx0XHRjaGVjayhuYW1lLCBTdHJpbmcpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ3JlbW92ZU9BdXRoU2VydmljZScgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKFJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICdhZGQtb2F1dGgtc2VydmljZScpICE9PSB0cnVlKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1ub3QtYWxsb3dlZCcsICdOb3QgYWxsb3dlZCcsIHsgbWV0aG9kOiAncmVtb3ZlT0F1dGhTZXJ2aWNlJyB9KTtcblx0XHR9XG5cblx0XHRuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16MC05X10vZywgJycpO1xuXHRcdG5hbWUgPSBzLmNhcGl0YWxpemUobmFtZSk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9YCk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LXVybGApO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MucmVtb3ZlQnlJZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS10b2tlbl9wYXRoYCk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LWlkZW50aXR5X3BhdGhgKTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnJlbW92ZUJ5SWQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tYXV0aG9yaXplX3BhdGhgKTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnJlbW92ZUJ5SWQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tc2NvcGVgKTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnJlbW92ZUJ5SWQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tdG9rZW5fc2VudF92aWFgKTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnJlbW92ZUJ5SWQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0taWRlbnRpdHlfdG9rZW5fc2VudF92aWFgKTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnJlbW92ZUJ5SWQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0taWRgKTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnJlbW92ZUJ5SWQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tc2VjcmV0YCk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LWJ1dHRvbl9sYWJlbF90ZXh0YCk7XG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy5yZW1vdmVCeUlkKGBBY2NvdW50c19PQXV0aF9DdXN0b20tJHsgbmFtZSB9LWJ1dHRvbl9sYWJlbF9jb2xvcmApO1xuXHRcdFJvY2tldENoYXQuc2V0dGluZ3MucmVtb3ZlQnlJZChgQWNjb3VudHNfT0F1dGhfQ3VzdG9tLSR7IG5hbWUgfS1idXR0b25fY29sb3JgKTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnJlbW92ZUJ5SWQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tbG9naW5fc3R5bGVgKTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnJlbW92ZUJ5SWQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tdXNlcm5hbWVfZmllbGRgKTtcblx0XHRSb2NrZXRDaGF0LnNldHRpbmdzLnJlbW92ZUJ5SWQoYEFjY291bnRzX09BdXRoX0N1c3RvbS0keyBuYW1lIH0tbWVyZ2VfdXNlcnNgKTtcblx0fSxcbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHRyZXN0YXJ0X3NlcnZlcigpIHtcblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAncmVzdGFydF9zZXJ2ZXInIH0pO1xuXHRcdH1cblxuXHRcdGlmIChSb2NrZXRDaGF0LmF1dGh6Lmhhc1JvbGUoTWV0ZW9yLnVzZXJJZCgpLCAnYWRtaW4nKSAhPT0gdHJ1ZSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ3Jlc3RhcnRfc2VydmVyJyB9KTtcblx0XHR9XG5cblx0XHRNZXRlb3Iuc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRNZXRlb3Iuc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdGNvbnNvbGUud2FybignQ2FsbCB0byBwcm9jZXNzLmV4aXQoKSB0aW1lZCBvdXQsIGFib3J0aW5nLicpO1xuXHRcdFx0XHRwcm9jZXNzLmFib3J0KCk7XG5cdFx0XHR9LCAxMDAwKTtcblx0XHRcdHByb2Nlc3MuZXhpdCgxKTtcblx0XHR9LCAxMDAwKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRtZXNzYWdlOiAnVGhlX3NlcnZlcl93aWxsX3Jlc3RhcnRfaW5fc19zZWNvbmRzJyxcblx0XHRcdHBhcmFtczogWzJdLFxuXHRcdH07XG5cdH0sXG59KTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG5cdCdyb2JvdC5tb2RlbENhbGwnKG1vZGVsLCBtZXRob2QsIGFyZ3MpIHtcblx0XHRjaGVjayhtb2RlbCwgU3RyaW5nKTtcblx0XHRjaGVjayhtZXRob2QsIFN0cmluZyk7XG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7XG5cdFx0XHRcdG1ldGhvZDogJ3JvYm90Lm1vZGVsQ2FsbCcsXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKCFSb2NrZXRDaGF0LmF1dGh6Lmhhc1JvbGUoTWV0ZW9yLnVzZXJJZCgpLCAncm9ib3QnKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7XG5cdFx0XHRcdG1ldGhvZDogJ3JvYm90Lm1vZGVsQ2FsbCcsXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Y29uc3QgbSA9IFJvY2tldENoYXQubW9kZWxzW21vZGVsXTtcblxuXHRcdGlmICghbSB8fCAhXy5pc0Z1bmN0aW9uKG1bbWV0aG9kXSkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtbWV0aG9kJywgJ0ludmFsaWQgbWV0aG9kJywge1xuXHRcdFx0XHRtZXRob2Q6ICdyb2JvdC5tb2RlbENhbGwnLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGNvbnN0IGN1cnNvciA9IFJvY2tldENoYXQubW9kZWxzW21vZGVsXVttZXRob2RdLmFwcGx5KFJvY2tldENoYXQubW9kZWxzW21vZGVsXSwgYXJncyk7XG5cdFx0cmV0dXJuIGN1cnNvciAmJiBjdXJzb3IuZmV0Y2ggPyBjdXJzb3IuZmV0Y2goKSA6IGN1cnNvcjtcblx0fSxcbn0pO1xuIiwiLyogZXNsaW50IG5ldy1jYXA6IDAgKi9cblxuTWV0ZW9yLm1ldGhvZHMoe1xuXHRzYXZlU2V0dGluZyhfaWQsIHZhbHVlLCBlZGl0b3IpIHtcblx0XHRpZiAoTWV0ZW9yLnVzZXJJZCgpID09PSBudWxsKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCAnRWRpdGluZyBzZXR0aW5ncyBpcyBub3QgYWxsb3dlZCcsIHtcblx0XHRcdFx0bWV0aG9kOiAnc2F2ZVNldHRpbmcnLFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCFSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAnZWRpdC1wcml2aWxlZ2VkLXNldHRpbmcnKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItYWN0aW9uLW5vdC1hbGxvd2VkJywgJ0VkaXRpbmcgc2V0dGluZ3MgaXMgbm90IGFsbG93ZWQnLCB7XG5cdFx0XHRcdG1ldGhvZDogJ3NhdmVTZXR0aW5nJyxcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdC8vIFZlcmlmeSB0aGUgX2lkIHBhc3NlZCBpbiBpcyBhIHN0cmluZy5cblx0XHRjaGVjayhfaWQsIFN0cmluZyk7XG5cblx0XHRjb25zdCBzZXR0aW5nID0gUm9ja2V0Q2hhdC5tb2RlbHMuU2V0dGluZ3MuZGIuZmluZE9uZUJ5SWQoX2lkKTtcblxuXHRcdC8vIFZlcmlmeSB0aGUgdmFsdWUgaXMgd2hhdCBpdCBzaG91bGQgYmVcblx0XHRzd2l0Y2ggKHNldHRpbmcudHlwZSkge1xuXHRcdFx0Y2FzZSAncm9vbVBpY2snOlxuXHRcdFx0XHRjaGVjayh2YWx1ZSwgTWF0Y2guT25lT2YoW09iamVjdF0sICcnKSk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAnYm9vbGVhbic6XG5cdFx0XHRcdGNoZWNrKHZhbHVlLCBCb29sZWFuKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdpbnQnOlxuXHRcdFx0XHRjaGVjayh2YWx1ZSwgTnVtYmVyKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRjaGVjayh2YWx1ZSwgU3RyaW5nKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0Um9ja2V0Q2hhdC5zZXR0aW5ncy51cGRhdGVCeUlkKF9pZCwgdmFsdWUsIGVkaXRvcik7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG59KTtcbiIsImltcG9ydCAqIGFzIE1haWxlciBmcm9tICdtZXRlb3Ivcm9ja2V0Y2hhdDptYWlsZXInO1xubGV0IGh0bWwgPSAnJztcbk1ldGVvci5zdGFydHVwKCgpID0+IHtcblx0TWFpbGVyLmdldFRlbXBsYXRlKCdJbnZpdGF0aW9uX0VtYWlsJywgKHZhbHVlKSA9PiB7XG5cdFx0aHRtbCA9IHZhbHVlO1xuXHR9KTtcbn0pO1xuXG5NZXRlb3IubWV0aG9kcyh7XG5cdHNlbmRJbnZpdGF0aW9uRW1haWwoZW1haWxzKSB7XG5cdFx0Y2hlY2soZW1haWxzLCBbU3RyaW5nXSk7XG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7XG5cdFx0XHRcdG1ldGhvZDogJ3NlbmRJbnZpdGF0aW9uRW1haWwnLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGlmICghUm9ja2V0Q2hhdC5hdXRoei5oYXNQZXJtaXNzaW9uKE1ldGVvci51c2VySWQoKSwgJ2J1bGstcmVnaXN0ZXItdXNlcicpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1ub3QtYWxsb3dlZCcsICdOb3QgYWxsb3dlZCcsIHtcblx0XHRcdFx0bWV0aG9kOiAnc2VuZEludml0YXRpb25FbWFpbCcsXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Y29uc3QgdmFsaWRFbWFpbHMgPSBlbWFpbHMuZmlsdGVyKE1haWxlci5jaGVja0FkZHJlc3NGb3JtYXQpO1xuXG5cdFx0Y29uc3Qgc3ViamVjdCA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdJbnZpdGF0aW9uX1N1YmplY3QnKTtcblxuXHRcdHJldHVybiB2YWxpZEVtYWlscy5maWx0ZXIoKGVtYWlsKSA9PiB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRyZXR1cm4gTWFpbGVyLnNlbmQoe1xuXHRcdFx0XHRcdHRvOiBlbWFpbCxcblx0XHRcdFx0XHRmcm9tOiBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnRnJvbV9FbWFpbCcpLFxuXHRcdFx0XHRcdHN1YmplY3QsXG5cdFx0XHRcdFx0aHRtbCxcblx0XHRcdFx0XHRkYXRhOiB7XG5cdFx0XHRcdFx0XHRlbWFpbCxcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHR9KTtcblx0XHRcdH0gY2F0Y2ggKHsgbWVzc2FnZSB9KSB7XG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWVtYWlsLXNlbmQtZmFpbGVkJywgYEVycm9yIHRyeWluZyB0byBzZW5kIGVtYWlsOiAkeyBtZXNzYWdlIH1gLCB7XG5cdFx0XHRcdFx0bWV0aG9kOiAnc2VuZEludml0YXRpb25FbWFpbCcsXG5cdFx0XHRcdFx0bWVzc2FnZSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG59KTtcbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuXHRzZW5kTWVzc2FnZShtZXNzYWdlKSB7XG5cdFx0Y2hlY2sobWVzc2FnZSwgT2JqZWN0KTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywge1xuXHRcdFx0XHRtZXRob2Q6ICdzZW5kTWVzc2FnZScsXG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIW1lc3NhZ2UucmlkKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcXCdyaWRcXCcgcHJvcGVydHkgb24gdGhlIG1lc3NhZ2Ugb2JqZWN0IGlzIG1pc3NpbmcuJyk7XG5cdFx0fVxuXG5cdFx0aWYgKG1lc3NhZ2UudHMpIHtcblx0XHRcdGNvbnN0IHRzRGlmZiA9IE1hdGguYWJzKG1vbWVudChtZXNzYWdlLnRzKS5kaWZmKCkpO1xuXHRcdFx0aWYgKHRzRGlmZiA+IDYwMDAwKSB7XG5cdFx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLW1lc3NhZ2UtdHMtb3V0LW9mLXN5bmMnLCAnTWVzc2FnZSB0aW1lc3RhbXAgaXMgb3V0IG9mIHN5bmMnLCB7XG5cdFx0XHRcdFx0bWV0aG9kOiAnc2VuZE1lc3NhZ2UnLFxuXHRcdFx0XHRcdG1lc3NhZ2VfdHM6IG1lc3NhZ2UudHMsXG5cdFx0XHRcdFx0c2VydmVyX3RzOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2UgaWYgKHRzRGlmZiA+IDEwMDAwKSB7XG5cdFx0XHRcdG1lc3NhZ2UudHMgPSBuZXcgRGF0ZSgpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZXNzYWdlLnRzID0gbmV3IERhdGUoKTtcblx0XHR9XG5cblx0XHRpZiAobWVzc2FnZS5tc2cpIHtcblx0XHRcdGNvbnN0IGFkanVzdGVkTWVzc2FnZSA9IFJvY2tldENoYXQubWVzc2FnZVByb3BlcnRpZXMubWVzc2FnZVdpdGhvdXRFbW9qaVNob3J0bmFtZXMobWVzc2FnZS5tc2cpO1xuXG5cdFx0XHRpZiAoUm9ja2V0Q2hhdC5tZXNzYWdlUHJvcGVydGllcy5sZW5ndGgoYWRqdXN0ZWRNZXNzYWdlKSA+IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdNZXNzYWdlX01heEFsbG93ZWRTaXplJykpIHtcblx0XHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItbWVzc2FnZS1zaXplLWV4Y2VlZGVkJywgJ01lc3NhZ2Ugc2l6ZSBleGNlZWRzIE1lc3NhZ2VfTWF4QWxsb3dlZFNpemUnLCB7XG5cdFx0XHRcdFx0bWV0aG9kOiAnc2VuZE1lc3NhZ2UnLFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjb25zdCB1c2VyID0gUm9ja2V0Q2hhdC5tb2RlbHMuVXNlcnMuZmluZE9uZUJ5SWQoTWV0ZW9yLnVzZXJJZCgpLCB7XG5cdFx0XHRmaWVsZHM6IHtcblx0XHRcdFx0dXNlcm5hbWU6IDEsXG5cdFx0XHRcdG5hbWU6IDEsXG5cdFx0XHR9LFxuXHRcdH0pO1xuXG5cdFx0Y29uc3Qgcm9vbSA9IE1ldGVvci5jYWxsKCdjYW5BY2Nlc3NSb29tJywgbWVzc2FnZS5yaWQsIHVzZXIuX2lkKTtcblx0XHRpZiAoIXJvb20pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRjb25zdCBzdWJzY3JpcHRpb24gPSBSb2NrZXRDaGF0Lm1vZGVscy5TdWJzY3JpcHRpb25zLmZpbmRPbmVCeVJvb21JZEFuZFVzZXJJZChtZXNzYWdlLnJpZCwgTWV0ZW9yLnVzZXJJZCgpKTtcblx0XHRpZiAoc3Vic2NyaXB0aW9uICYmIChzdWJzY3JpcHRpb24uYmxvY2tlZCB8fCBzdWJzY3JpcHRpb24uYmxvY2tlcikpIHtcblx0XHRcdFJvY2tldENoYXQuTm90aWZpY2F0aW9ucy5ub3RpZnlVc2VyKE1ldGVvci51c2VySWQoKSwgJ21lc3NhZ2UnLCB7XG5cdFx0XHRcdF9pZDogUmFuZG9tLmlkKCksXG5cdFx0XHRcdHJpZDogcm9vbS5faWQsXG5cdFx0XHRcdHRzOiBuZXcgRGF0ZSxcblx0XHRcdFx0bXNnOiBUQVBpMThuLl9fKCdyb29tX2lzX2Jsb2NrZWQnLCB7fSwgdXNlci5sYW5ndWFnZSksXG5cdFx0XHR9KTtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ1lvdSBjYW5cXCd0IHNlbmQgbWVzc2FnZXMgYmVjYXVzZSB5b3UgYXJlIGJsb2NrZWQnKTtcblx0XHR9XG5cblx0XHRpZiAoKHJvb20ubXV0ZWQgfHwgW10pLmluY2x1ZGVzKHVzZXIudXNlcm5hbWUpKSB7XG5cdFx0XHRSb2NrZXRDaGF0Lk5vdGlmaWNhdGlvbnMubm90aWZ5VXNlcihNZXRlb3IudXNlcklkKCksICdtZXNzYWdlJywge1xuXHRcdFx0XHRfaWQ6IFJhbmRvbS5pZCgpLFxuXHRcdFx0XHRyaWQ6IHJvb20uX2lkLFxuXHRcdFx0XHR0czogbmV3IERhdGUsXG5cdFx0XHRcdG1zZzogVEFQaTE4bi5fXygnWW91X2hhdmVfYmVlbl9tdXRlZCcsIHt9LCB1c2VyLmxhbmd1YWdlKSxcblx0XHRcdH0pO1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignWW91IGNhblxcJ3Qgc2VuZCBtZXNzYWdlcyBiZWNhdXNlIHlvdSBoYXZlIGJlZW4gbXV0ZWQnKTtcblx0XHR9XG5cblx0XHRpZiAobWVzc2FnZS5hbGlhcyA9PSBudWxsICYmIFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdNZXNzYWdlX1NldE5hbWVUb0FsaWFzRW5hYmxlZCcpKSB7XG5cdFx0XHRtZXNzYWdlLmFsaWFzID0gdXNlci5uYW1lO1xuXHRcdH1cblxuXHRcdGlmIChNZXRlb3Iuc2V0dGluZ3MucHVibGljLnNhbmRzdG9ybSkge1xuXHRcdFx0bWVzc2FnZS5zYW5kc3Rvcm1TZXNzaW9uSWQgPSB0aGlzLmNvbm5lY3Rpb24uc2FuZHN0b3JtU2Vzc2lvbklkKCk7XG5cdFx0fVxuXG5cdFx0Um9ja2V0Q2hhdC5tZXRyaWNzLm1lc3NhZ2VzU2VudC5pbmMoKTsgLy8gVE9ETyBUaGlzIGxpbmUgbmVlZHMgdG8gYmUgbW92ZWQgdG8gaXQncyBwcm9wZXIgcGxhY2UuIFNlZSB0aGUgY29tbWVudHMgb246IGh0dHBzOi8vZ2l0aHViLmNvbS9Sb2NrZXRDaGF0L1JvY2tldC5DaGF0L3B1bGwvNTczNlxuXHRcdHJldHVybiBSb2NrZXRDaGF0LnNlbmRNZXNzYWdlKHVzZXIsIG1lc3NhZ2UsIHJvb20pO1xuXHR9LFxufSk7XG4vLyBMaW1pdCBhIHVzZXIsIHdobyBkb2VzIG5vdCBoYXZlIHRoZSBcImJvdFwiIHJvbGUsIHRvIHNlbmRpbmcgNSBtc2dzL3NlY29uZFxuUm9ja2V0Q2hhdC5SYXRlTGltaXRlci5saW1pdE1ldGhvZCgnc2VuZE1lc3NhZ2UnLCA1LCAxMDAwLCB7XG5cdHVzZXJJZCh1c2VySWQpIHtcblx0XHRyZXR1cm4gIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbih1c2VySWQsICdzZW5kLW1hbnktbWVzc2FnZXMnKTtcblx0fSxcbn0pO1xuIiwiaW1wb3J0ICogYXMgTWFpbGVyIGZyb20gJ21ldGVvci9yb2NrZXRjaGF0Om1haWxlcic7XG5cbk1ldGVvci5tZXRob2RzKHtcblx0c2VuZFNNVFBUZXN0RW1haWwoKSB7XG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7XG5cdFx0XHRcdG1ldGhvZDogJ3NlbmRTTVRQVGVzdEVtYWlsJyxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRjb25zdCB1c2VyID0gTWV0ZW9yLnVzZXIoKTtcblx0XHRpZiAoIXVzZXIuZW1haWxzICYmICF1c2VyLmVtYWlsc1swXSAmJiB1c2VyLmVtYWlsc1swXS5hZGRyZXNzKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLWVtYWlsJywgJ0ludmFsaWQgZW1haWwnLCB7XG5cdFx0XHRcdG1ldGhvZDogJ3NlbmRTTVRQVGVzdEVtYWlsJyxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHR0cnkge1xuXHRcdFx0TWFpbGVyLnNlbmQoe1xuXHRcdFx0XHR0bzogdXNlci5lbWFpbHNbMF0uYWRkcmVzcyxcblx0XHRcdFx0ZnJvbTogUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0Zyb21fRW1haWwnKSxcblx0XHRcdFx0c3ViamVjdDogJ1NNVFAgVGVzdCBFbWFpbCcsXG5cdFx0XHRcdGh0bWw6ICc8cD5Zb3UgaGF2ZSBzdWNjZXNzZnVsbHkgc2VudCBhbiBlbWFpbDwvcD4nLFxuXHRcdFx0fSk7XG5cdFx0fSBjYXRjaCAoeyBtZXNzYWdlIH0pIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWVtYWlsLXNlbmQtZmFpbGVkJywgYEVycm9yIHRyeWluZyB0byBzZW5kIGVtYWlsOiAkeyBtZXNzYWdlIH1gLCB7XG5cdFx0XHRcdG1ldGhvZDogJ3NlbmRTTVRQVGVzdEVtYWlsJyxcblx0XHRcdFx0bWVzc2FnZSxcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRyZXR1cm4ge1xuXHRcdFx0bWVzc2FnZTogJ1lvdXJfbWFpbF93YXNfc2VudF90b19zJyxcblx0XHRcdHBhcmFtczogW3VzZXIuZW1haWxzWzBdLmFkZHJlc3NdLFxuXHRcdH07XG5cdH0sXG59KTtcblxuRERQUmF0ZUxpbWl0ZXIuYWRkUnVsZSh7XG5cdHR5cGU6ICdtZXRob2QnLFxuXHRuYW1lOiAnc2VuZFNNVFBUZXN0RW1haWwnLFxuXHR1c2VySWQoKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG59LCAxLCAxMDAwKTtcbiIsIk1ldGVvci5tZXRob2RzKHtcblx0c2V0QWRtaW5TdGF0dXModXNlcklkLCBhZG1pbikge1xuXG5cdFx0Y2hlY2sodXNlcklkLCBTdHJpbmcpO1xuXHRcdGNoZWNrKGFkbWluLCBNYXRjaC5PcHRpb25hbChCb29sZWFuKSk7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnc2V0QWRtaW5TdGF0dXMnIH0pO1xuXHRcdH1cblxuXHRcdGlmIChSb2NrZXRDaGF0LmF1dGh6Lmhhc1Blcm1pc3Npb24oTWV0ZW9yLnVzZXJJZCgpLCAnYXNzaWduLWFkbWluLXJvbGUnKSAhPT0gdHJ1ZSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ3NldEFkbWluU3RhdHVzJyB9KTtcblx0XHR9XG5cblx0XHRjb25zdCB1c2VyID0gTWV0ZW9yLnVzZXJzLmZpbmRPbmUoeyBfaWQ6IHVzZXJJZCB9LCB7IGZpZWxkczogeyB1c2VybmFtZTogMSB9IH0pO1xuXG5cdFx0aWYgKGFkbWluKSB7XG5cdFx0XHRyZXR1cm4gTWV0ZW9yLmNhbGwoJ2F1dGhvcml6YXRpb246YWRkVXNlclRvUm9sZScsICdhZG1pbicsIHVzZXIudXNlcm5hbWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gTWV0ZW9yLmNhbGwoJ2F1dGhvcml6YXRpb246cmVtb3ZlVXNlckZyb21Sb2xlJywgJ2FkbWluJywgdXNlci51c2VybmFtZSk7XG5cdFx0fVxuXHR9LFxufSk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cdHNldFJlYWxOYW1lKG5hbWUpIHtcblxuXHRcdGNoZWNrKG5hbWUsIFN0cmluZyk7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnc2V0UmVhbE5hbWUnIH0pO1xuXHRcdH1cblxuXHRcdGlmICghUm9ja2V0Q2hhdC5zZXR0aW5ncy5nZXQoJ0FjY291bnRzX0FsbG93UmVhbE5hbWVDaGFuZ2UnKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWFsbG93ZWQnLCAnTm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ3NldFJlYWxOYW1lJyB9KTtcblx0XHR9XG5cblx0XHRpZiAoIVJvY2tldENoYXQuc2V0UmVhbE5hbWUoTWV0ZW9yLnVzZXJJZCgpLCBuYW1lKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItY291bGQtbm90LWNoYW5nZS1uYW1lJywgJ0NvdWxkIG5vdCBjaGFuZ2UgbmFtZScsIHsgbWV0aG9kOiAnc2V0UmVhbE5hbWUnIH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBuYW1lO1xuXHR9LFxufSk7XG5cblJvY2tldENoYXQuUmF0ZUxpbWl0ZXIubGltaXRNZXRob2QoJ3NldFJlYWxOYW1lJywgMSwgMTAwMCwge1xuXHR1c2VySWQ6ICgpID0+IHRydWUsXG59KTtcbiIsImltcG9ydCBfIGZyb20gJ3VuZGVyc2NvcmUnO1xuXG5NZXRlb3IubWV0aG9kcyh7XG5cdHNldFVzZXJuYW1lKHVzZXJuYW1lLCBwYXJhbSA9IHt9KSB7XG5cdFx0Y29uc3QgeyBqb2luRGVmYXVsdENoYW5uZWxzU2lsZW5jZWQgfSA9IHBhcmFtO1xuXHRcdGNoZWNrKHVzZXJuYW1lLCBTdHJpbmcpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ3NldFVzZXJuYW1lJyB9KTtcblx0XHR9XG5cblx0XHRjb25zdCB1c2VyID0gTWV0ZW9yLnVzZXIoKTtcblxuXHRcdGlmICh1c2VyLnVzZXJuYW1lICYmICFSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfQWxsb3dVc2VybmFtZUNoYW5nZScpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1ub3QtYWxsb3dlZCcsICdOb3QgYWxsb3dlZCcsIHsgbWV0aG9kOiAnc2V0VXNlcm5hbWUnIH0pO1xuXHRcdH1cblxuXHRcdGlmICh1c2VyLnVzZXJuYW1lID09PSB1c2VybmFtZSB8fCAodXNlci51c2VybmFtZSAmJiB1c2VyLnVzZXJuYW1lLnRvTG93ZXJDYXNlKCkgPT09IHVzZXJuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG5cdFx0XHRyZXR1cm4gdXNlcm5hbWU7XG5cdFx0fVxuXG5cdFx0bGV0IG5hbWVWYWxpZGF0aW9uO1xuXHRcdHRyeSB7XG5cdFx0XHRuYW1lVmFsaWRhdGlvbiA9IG5ldyBSZWdFeHAoYF4keyBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnVVRGOF9OYW1lc19WYWxpZGF0aW9uJykgfSRgKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0bmFtZVZhbGlkYXRpb24gPSBuZXcgUmVnRXhwKCdeWzAtOWEtekEtWi1fLl0rJCcpO1xuXHRcdH1cblxuXHRcdGlmICghbmFtZVZhbGlkYXRpb24udGVzdCh1c2VybmFtZSkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ3VzZXJuYW1lLWludmFsaWQnLCBgJHsgXy5lc2NhcGUodXNlcm5hbWUpIH0gaXMgbm90IGEgdmFsaWQgdXNlcm5hbWUsIHVzZSBvbmx5IGxldHRlcnMsIG51bWJlcnMsIGRvdHMsIGh5cGhlbnMgYW5kIHVuZGVyc2NvcmVzYCk7XG5cdFx0fVxuXG5cdFx0aWYgKCFSb2NrZXRDaGF0LmNoZWNrVXNlcm5hbWVBdmFpbGFiaWxpdHkodXNlcm5hbWUpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1maWVsZC11bmF2YWlsYWJsZScsIGA8c3Ryb25nPiR7IF8uZXNjYXBlKHVzZXJuYW1lKSB9PC9zdHJvbmc+IGlzIGFscmVhZHkgaW4gdXNlIDooYCwgeyBtZXRob2Q6ICdzZXRVc2VybmFtZScsIGZpZWxkOiB1c2VybmFtZSB9KTtcblx0XHR9XG5cblx0XHRpZiAoIVJvY2tldENoYXQuc2V0VXNlcm5hbWUodXNlci5faWQsIHVzZXJuYW1lKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItY291bGQtbm90LWNoYW5nZS11c2VybmFtZScsICdDb3VsZCBub3QgY2hhbmdlIHVzZXJuYW1lJywgeyBtZXRob2Q6ICdzZXRVc2VybmFtZScgfSk7XG5cdFx0fVxuXG5cdFx0aWYgKCF1c2VyLnVzZXJuYW1lKSB7XG5cdFx0XHRNZXRlb3IucnVuQXNVc2VyKHVzZXIuX2lkLCAoKSA9PiBNZXRlb3IuY2FsbCgnam9pbkRlZmF1bHRDaGFubmVscycsIGpvaW5EZWZhdWx0Q2hhbm5lbHNTaWxlbmNlZCkpO1xuXHRcdFx0TWV0ZW9yLmRlZmVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gUm9ja2V0Q2hhdC5jYWxsYmFja3MucnVuKCdhZnRlckNyZWF0ZVVzZXInLCBSb2NrZXRDaGF0Lm1vZGVscy5Vc2Vycy5maW5kT25lQnlJZCh1c2VyLl9pZCkpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVzZXJuYW1lO1xuXHR9LFxufSk7XG5cblJvY2tldENoYXQuUmF0ZUxpbWl0ZXIubGltaXRNZXRob2QoJ3NldFVzZXJuYW1lJywgMSwgMTAwMCwge1xuXHR1c2VySWQoKSB7IHJldHVybiB0cnVlOyB9LFxufSk7XG4iLCJNZXRlb3IubWV0aG9kcyh7XG5cdHNldEVtYWlsKGVtYWlsKSB7XG5cblx0XHRjaGVjayAoZW1haWwsIFN0cmluZyk7XG5cblx0XHRpZiAoIU1ldGVvci51c2VySWQoKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3ItaW52YWxpZC11c2VyJywgJ0ludmFsaWQgdXNlcicsIHsgbWV0aG9kOiAnc2V0RW1haWwnIH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IHVzZXIgPSBNZXRlb3IudXNlcigpO1xuXG5cdFx0aWYgKCFSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnQWNjb3VudHNfQWxsb3dFbWFpbENoYW5nZScpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1hY3Rpb24tbm90LWFsbG93ZWQnLCAnQ2hhbmdpbmcgZW1haWwgaXMgbm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ3NldEVtYWlsJywgYWN0aW9uOiAnQ2hhbmdpbmdfZW1haWwnIH0pO1xuXHRcdH1cblxuXHRcdGlmICh1c2VyLmVtYWlscyAmJiB1c2VyLmVtYWlsc1swXSAmJiB1c2VyLmVtYWlsc1swXS5hZGRyZXNzID09PSBlbWFpbCkge1xuXHRcdFx0cmV0dXJuIGVtYWlsO1xuXHRcdH1cblxuXHRcdGlmICghUm9ja2V0Q2hhdC5zZXRFbWFpbCh1c2VyLl9pZCwgZW1haWwpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1jb3VsZC1ub3QtY2hhbmdlLWVtYWlsJywgJ0NvdWxkIG5vdCBjaGFuZ2UgZW1haWwnLCB7IG1ldGhvZDogJ3NldEVtYWlsJyB9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZW1haWw7XG5cdH0sXG59KTtcblxuUm9ja2V0Q2hhdC5SYXRlTGltaXRlci5saW1pdE1ldGhvZCgnc2V0RW1haWwnLCAxLCAxMDAwLCB7XG5cdHVzZXJJZCgvKiB1c2VySWQqLykgeyByZXR1cm4gdHJ1ZTsgfSxcbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHR1bmFyY2hpdmVSb29tKHJpZCkge1xuXG5cdFx0Y2hlY2socmlkLCBTdHJpbmcpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ3VuYXJjaGl2ZVJvb20nIH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IHJvb20gPSBSb2NrZXRDaGF0Lm1vZGVscy5Sb29tcy5maW5kT25lQnlJZChyaWQpO1xuXG5cdFx0aWYgKCFyb29tKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXJvb20nLCAnSW52YWxpZCByb29tJywgeyBtZXRob2Q6ICd1bmFyY2hpdmVSb29tJyB9KTtcblx0XHR9XG5cblx0XHRpZiAoIVJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICd1bmFyY2hpdmUtcm9vbScsIHJvb20uX2lkKSkge1xuXHRcdFx0dGhyb3cgbmV3IE1ldGVvci5FcnJvcignZXJyb3Itbm90LWF1dGhvcml6ZWQnLCAnTm90IGF1dGhvcml6ZWQnLCB7IG1ldGhvZDogJ3VuYXJjaGl2ZVJvb20nIH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBSb2NrZXRDaGF0LnVuYXJjaGl2ZVJvb20ocmlkKTtcblx0fSxcbn0pO1xuIiwiTWV0ZW9yLm1ldGhvZHMoe1xuXHR1bmJsb2NrVXNlcih7IHJpZCwgYmxvY2tlZCB9KSB7XG5cblx0XHRjaGVjayhyaWQsIFN0cmluZyk7XG5cdFx0Y2hlY2soYmxvY2tlZCwgU3RyaW5nKTtcblxuXHRcdGlmICghTWV0ZW9yLnVzZXJJZCgpKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXVzZXInLCAnSW52YWxpZCB1c2VyJywgeyBtZXRob2Q6ICdibG9ja1VzZXInIH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IHN1YnNjcmlwdGlvbiA9IFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMuZmluZE9uZUJ5Um9vbUlkQW5kVXNlcklkKHJpZCwgTWV0ZW9yLnVzZXJJZCgpKTtcblx0XHRjb25zdCBzdWJzY3JpcHRpb24yID0gUm9ja2V0Q2hhdC5tb2RlbHMuU3Vic2NyaXB0aW9ucy5maW5kT25lQnlSb29tSWRBbmRVc2VySWQocmlkLCBibG9ja2VkKTtcblxuXHRcdGlmICghc3Vic2NyaXB0aW9uIHx8ICFzdWJzY3JpcHRpb24yKSB7XG5cdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1pbnZhbGlkLXJvb20nLCAnSW52YWxpZCByb29tJywgeyBtZXRob2Q6ICdibG9ja1VzZXInIH0pO1xuXHRcdH1cblxuXHRcdFJvY2tldENoYXQubW9kZWxzLlN1YnNjcmlwdGlvbnMudW5zZXRCbG9ja2VkQnlSb29tSWQocmlkLCBibG9ja2VkLCBNZXRlb3IudXNlcklkKCkpO1xuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG59KTtcbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuTWV0ZW9yLm1ldGhvZHMoe1xuXHR1cGRhdGVNZXNzYWdlKG1lc3NhZ2UpIHtcblxuXHRcdGNoZWNrKG1lc3NhZ2UsIE1hdGNoLk9iamVjdEluY2x1ZGluZyh7IF9pZDpTdHJpbmcgfSkpO1xuXG5cdFx0aWYgKCFNZXRlb3IudXNlcklkKCkpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWludmFsaWQtdXNlcicsICdJbnZhbGlkIHVzZXInLCB7IG1ldGhvZDogJ3VwZGF0ZU1lc3NhZ2UnIH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IG9yaWdpbmFsTWVzc2FnZSA9IFJvY2tldENoYXQubW9kZWxzLk1lc3NhZ2VzLmZpbmRPbmVCeUlkKG1lc3NhZ2UuX2lkKTtcblxuXHRcdGlmICghb3JpZ2luYWxNZXNzYWdlIHx8ICFvcmlnaW5hbE1lc3NhZ2UuX2lkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgaGFzUGVybWlzc2lvbiA9IFJvY2tldENoYXQuYXV0aHouaGFzUGVybWlzc2lvbihNZXRlb3IudXNlcklkKCksICdlZGl0LW1lc3NhZ2UnLCBtZXNzYWdlLnJpZCk7XG5cdFx0Y29uc3QgZWRpdEFsbG93ZWQgPSBSb2NrZXRDaGF0LnNldHRpbmdzLmdldCgnTWVzc2FnZV9BbGxvd0VkaXRpbmcnKTtcblx0XHRjb25zdCBlZGl0T3duID0gb3JpZ2luYWxNZXNzYWdlLnUgJiYgb3JpZ2luYWxNZXNzYWdlLnUuX2lkID09PSBNZXRlb3IudXNlcklkKCk7XG5cblx0XHRpZiAoIWhhc1Blcm1pc3Npb24gJiYgKCFlZGl0QWxsb3dlZCB8fCAhZWRpdE93bikpIHtcblx0XHRcdHRocm93IG5ldyBNZXRlb3IuRXJyb3IoJ2Vycm9yLWFjdGlvbi1ub3QtYWxsb3dlZCcsICdNZXNzYWdlIGVkaXRpbmcgbm90IGFsbG93ZWQnLCB7IG1ldGhvZDogJ3VwZGF0ZU1lc3NhZ2UnLCBhY3Rpb246ICdNZXNzYWdlX2VkaXRpbmcnIH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IGJsb2NrRWRpdEluTWludXRlcyA9IFJvY2tldENoYXQuc2V0dGluZ3MuZ2V0KCdNZXNzYWdlX0FsbG93RWRpdGluZ19CbG9ja0VkaXRJbk1pbnV0ZXMnKTtcblx0XHRpZiAoTWF0Y2gudGVzdChibG9ja0VkaXRJbk1pbnV0ZXMsIE51bWJlcikgJiYgYmxvY2tFZGl0SW5NaW51dGVzICE9PSAwKSB7XG5cdFx0XHRsZXQgY3VycmVudFRzRGlmZjtcblx0XHRcdGxldCBtc2dUcztcblxuXHRcdFx0aWYgKE1hdGNoLnRlc3Qob3JpZ2luYWxNZXNzYWdlLnRzLCBOdW1iZXIpKSB7XG5cdFx0XHRcdG1zZ1RzID0gbW9tZW50KG9yaWdpbmFsTWVzc2FnZS50cyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAobXNnVHMpIHtcblx0XHRcdFx0Y3VycmVudFRzRGlmZiA9IG1vbWVudCgpLmRpZmYobXNnVHMsICdtaW51dGVzJyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY3VycmVudFRzRGlmZiA+IGJsb2NrRWRpdEluTWludXRlcykge1xuXHRcdFx0XHR0aHJvdyBuZXcgTWV0ZW9yLkVycm9yKCdlcnJvci1tZXNzYWdlLWVkaXRpbmctYmxvY2tlZCcsICdNZXNzYWdlIGVkaXRpbmcgaXMgYmxvY2tlZCcsIHsgbWV0aG9kOiAndXBkYXRlTWVzc2FnZScgfSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSXQgaXMgcG9zc2libGUgdG8gaGF2ZSBhbiBlbXB0eSBhcnJheSBhcyB0aGUgYXR0YWNobWVudHMgcHJvcGVydHksIHNvIGVuc3VyZSBib3RoIHRoaW5ncyBleGlzdFxuXHRcdGlmIChvcmlnaW5hbE1lc3NhZ2UuYXR0YWNobWVudHMgJiYgb3JpZ2luYWxNZXNzYWdlLmF0dGFjaG1lbnRzLmxlbmd0aCA+IDAgJiYgb3JpZ2luYWxNZXNzYWdlLmF0dGFjaG1lbnRzWzBdLmRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdG1lc3NhZ2UuYXR0YWNobWVudHMgPSBvcmlnaW5hbE1lc3NhZ2UuYXR0YWNobWVudHM7XG5cdFx0XHRtZXNzYWdlLmF0dGFjaG1lbnRzWzBdLmRlc2NyaXB0aW9uID0gbWVzc2FnZS5tc2c7XG5cdFx0XHRtZXNzYWdlLm1zZyA9IG9yaWdpbmFsTWVzc2FnZS5tc2c7XG5cdFx0fVxuXG5cdFx0bWVzc2FnZS51ID0gb3JpZ2luYWxNZXNzYWdlLnU7XG5cblx0XHRyZXR1cm4gUm9ja2V0Q2hhdC51cGRhdGVNZXNzYWdlKG1lc3NhZ2UsIE1ldGVvci51c2VyKCksIG9yaWdpbmFsTWVzc2FnZSk7XG5cdH0sXG59KTtcbiIsImltcG9ydCB7XG5cdENvbnZlcnNhdGlvblJvb21UeXBlLFxuXHREaXJlY3RNZXNzYWdlUm9vbVR5cGUsXG5cdEZhdm9yaXRlUm9vbVR5cGUsXG5cdFByaXZhdGVSb29tVHlwZSxcblx0UHVibGljUm9vbVR5cGUsXG5cdFVucmVhZFJvb21UeXBlLFxufSBmcm9tICcuLi9saWIvcm9vbVR5cGVzJztcblxuUm9ja2V0Q2hhdC5yb29tVHlwZXMuYWRkKG5ldyBVbnJlYWRSb29tVHlwZSgpKTtcblJvY2tldENoYXQucm9vbVR5cGVzLmFkZChuZXcgRmF2b3JpdGVSb29tVHlwZSgpKTtcblJvY2tldENoYXQucm9vbVR5cGVzLmFkZChuZXcgQ29udmVyc2F0aW9uUm9vbVR5cGUoKSk7XG5Sb2NrZXRDaGF0LnJvb21UeXBlcy5hZGQobmV3IFB1YmxpY1Jvb21UeXBlKCkpO1xuUm9ja2V0Q2hhdC5yb29tVHlwZXMuYWRkKG5ldyBQcml2YXRlUm9vbVR5cGUoKSk7XG5Sb2NrZXRDaGF0LnJvb21UeXBlcy5hZGQobmV3IERpcmVjdE1lc3NhZ2VSb29tVHlwZSgpKTtcbiIsImltcG9ydCAqIGFzIE1haWxlciBmcm9tICdtZXRlb3Ivcm9ja2V0Y2hhdDptYWlsZXInO1xuXG5NYWlsZXIuc2V0U2V0dGluZ3MoUm9ja2V0Q2hhdC5zZXR0aW5ncyk7XG4iXX0=
