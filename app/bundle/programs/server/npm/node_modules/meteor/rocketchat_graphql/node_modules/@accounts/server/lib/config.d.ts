import { AccountsCommonConfiguration, PasswordLoginUserType, SessionType, UserObjectType, PasswordType, CreateUserType, PasswordSignupFields } from '@accounts/common';
import { EmailTemplateType } from './email-templates';
export declare type PasswordAuthenticator = (user: PasswordLoginUserType, password: PasswordType) => Promise<any>;
export declare type ResumeSessionValidator = (user: UserObjectType, session: SessionType) => Promise<any>;
export declare type TokenExpiration = string;
export interface TokenConfig {
    accessToken?: {
        expiresIn?: TokenExpiration;
    };
    refreshToken?: {
        expiresIn?: TokenExpiration;
    };
}
export declare type EmailType = EmailTemplateType & {
    to: string;
};
export declare type SendMailFunction = (emailConfig: EmailType | object) => Promise<object>;
export declare type UserObjectSanitizerFunction = (userObject: UserObjectType, omitFunction: (userDoc: object) => UserObjectType, pickFunction: (userDoc: object) => UserObjectType) => any;
export declare type PrepareMailFunction = (to: string, token: string, user: UserObjectType, pathFragment: string, emailTemplate: EmailTemplateType, from: string) => object;
export declare type AccountsServerConfiguration = AccountsCommonConfiguration & {
    tokenSecret?: string;
    tokenConfigs?: TokenConfig;
    passwordAuthenticator?: PasswordAuthenticator;
    resumeSessionValidator?: ResumeSessionValidator;
    prepareMail?: PrepareMailFunction;
    sendMail?: SendMailFunction;
    email?: object;
    emailTokensExpiry?: number;
    impersonationAuthorize: (user: UserObjectType, impersonateToUser: UserObjectType) => Promise<any>;
    validateNewUser?: (user: CreateUserType) => Promise<boolean>;
    userObjectSanitizer?: UserObjectSanitizerFunction;
    allowedLoginFields?: string[];
};
declare const _default: {
    tokenSecret: string;
    tokenConfigs: {
        accessToken: {
            expiresIn: string;
        };
        refreshToken: {
            expiresIn: string;
        };
    };
    userObjectSanitizer: (user: UserObjectType) => UserObjectType;
    allowedLoginFields: string[];
    emailTokensExpiry: number;
    siteUrl?: string;
    sendVerificationEmail?: boolean;
    sendEnrollmentEmail?: boolean;
    sendWelcomeEmail?: boolean;
    forbidClientAccountCreation?: boolean;
    restrictCreationByEmailDomain?: string;
    passwordResetTokenExpirationInDays?: number;
    passwordEnrollTokenExpirationInDays?: number;
    passwordSignupFields?: PasswordSignupFields;
    minimumPasswordLength?: number;
    path?: string;
    passwordHashAlgorithm?: "sha" | "sha1" | "sha224" | "sha256" | "sha384" | "sha512" | "md5" | "ripemd160";
};
export default _default;
