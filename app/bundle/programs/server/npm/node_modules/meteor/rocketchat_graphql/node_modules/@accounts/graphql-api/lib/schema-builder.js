"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var login_with_password_1 = require("./resolvers/login-with-password");
var refresh_tokens_1 = require("./resolvers/refresh-tokens");
var impersonate_1 = require("./resolvers/impersonate");
var me_1 = require("./resolvers/me");
var user_1 = require("./resolvers/user");
var mutations_1 = require("./graphql/mutations");
var types_1 = require("./graphql/types");
var queries_1 = require("./graphql/queries");
var logout_1 = require("./resolvers/logout");
var create_user_1 = require("./resolvers/create-user");
var reset_password_1 = require("./resolvers/reset-password");
var send_reset_password_email_1 = require("./resolvers/send-reset-password-email");
var send_verification_email_1 = require("./resolvers/send-verification-email");
var verify_email_1 = require("./resolvers/verify-email");
var merge = require("deepmerge");
exports.createJSAccountsGraphQL = function (Accounts, schemaOptions) {
    if (schemaOptions === void 0) { schemaOptions = {
        rootQueryName: 'Query',
        rootMutationName: 'Mutation',
        extend: true,
        withSchemaDefinition: false,
    }; }
    var schema = "\n  " + types_1.typeDefs + "\n\n  " + (schemaOptions.extend ? 'extend ' : '') + "type " + schemaOptions.rootQueryName + " {\n    " + queries_1.queries + "\n  }\n\n  " + (schemaOptions.extend ? 'extend ' : '') + "type " + schemaOptions.rootMutationName + " {\n    " + mutations_1.mutations + "\n  }\n\n  " + (schemaOptions.withSchemaDefinition ?
        "schema {\n    query: " + schemaOptions.rootMutationName + "\n    mutation: " + schemaOptions.rootQueryName + "\n  }" : '') + "\n  ";
    var resolvers = (_a = {
            User: user_1.User
        },
        _a[schemaOptions.rootMutationName] = {
            loginWithPassword: login_with_password_1.loginWithPassword(Accounts),
            refreshTokens: refresh_tokens_1.refreshTokens(Accounts),
            logout: logout_1.logout(Accounts),
            impersonate: impersonate_1.impersonate(Accounts),
            createUser: create_user_1.createUser(Accounts),
            resetPassword: reset_password_1.resetPassword(Accounts),
            sendResetPasswordEmail: send_reset_password_email_1.sendResetPasswordEmail(Accounts),
            sendVerificationEmail: send_verification_email_1.sendVerificationEmail(Accounts),
            verifyEmail: verify_email_1.verifyEmail(Accounts),
        },
        _a[schemaOptions.rootQueryName] = {
            me: me_1.me(Accounts),
        },
        _a);
    return {
        schema: schema,
        extendWithResolvers: function (resolversObject) { return merge(resolvers, resolversObject); },
    };
    var _a;
};
//# sourceMappingURL=schema-builder.js.map