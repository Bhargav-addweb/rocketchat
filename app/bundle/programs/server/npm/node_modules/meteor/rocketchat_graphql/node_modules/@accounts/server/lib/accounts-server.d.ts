/// <reference types="@types/node" />
import { EventEmitter } from 'events';
import { UserObjectType, CreateUserType, PasswordLoginUserType, LoginReturnType, TokensType, SessionType, ImpersonateReturnType, PasswordType, HookListener } from '@accounts/common';
import { AccountsServerConfiguration, PasswordAuthenticator } from './config';
import { DBInterface } from './db-interface';
export interface TokenRecord {
    token: string;
    address: string;
    when: number;
    reason: string;
}
export declare type RemoveListnerHandle = () => EventEmitter;
export declare const ServerHooks: {
    LoginSuccess: string;
    LoginError: string;
    LogoutSuccess: string;
    LogoutError: string;
    CreateUserSuccess: string;
    CreateUserError: string;
    ResumeSessionSuccess: string;
    ResumeSessionError: string;
    RefreshTokensSuccess: string;
    RefreshTokensError: string;
    ImpersonationSuccess: string;
    ImpersonationError: string;
};
export declare class AccountsServer {
    private _options;
    private db;
    private email;
    private emailTemplates;
    private hooks;
    config(options: AccountsServerConfiguration, db: DBInterface): void;
    options(): AccountsServerConfiguration;
    onLoginSuccess(callback: HookListener): RemoveListnerHandle;
    onLoginError(callback: HookListener): RemoveListnerHandle;
    onLogoutSuccess(callback: HookListener): RemoveListnerHandle;
    onLogoutError(callback: HookListener): RemoveListnerHandle;
    onCreateUserSuccess(callback: HookListener): RemoveListnerHandle;
    onCreateUserError(callback: HookListener): RemoveListnerHandle;
    onResumeSessionSuccess(callback: HookListener): RemoveListnerHandle;
    onResumeSessionError(callback: HookListener): RemoveListnerHandle;
    onRefreshTokensSuccess(callback: HookListener): RemoveListnerHandle;
    onRefreshTokensError(callback: HookListener): RemoveListnerHandle;
    onImpersonationSuccess(callback: HookListener): RemoveListnerHandle;
    onImpersonationError(callback: HookListener): RemoveListnerHandle;
    loginWithPassword(user: PasswordLoginUserType, password: PasswordType, ip: string, userAgent: string): Promise<LoginReturnType>;
    _externalPasswordAuthenticator(authFn: PasswordAuthenticator, user: PasswordLoginUserType, password: PasswordType): Promise<any>;
    loginWithUser(user: UserObjectType, ip?: string, userAgent?: string): Promise<LoginReturnType>;
    createUser(user: CreateUserType): Promise<string>;
    impersonate(accessToken: string, username: string, ip: string, userAgent: string): Promise<ImpersonateReturnType>;
    refreshTokens(accessToken: string, refreshToken: string, ip: string, userAgent: string): Promise<LoginReturnType>;
    createTokens(sessionId: string, isImpersonated?: boolean): TokensType;
    logout(accessToken: string): Promise<void>;
    resumeSession(accessToken: string): Promise<UserObjectType>;
    findSessionByAccessToken(accessToken: string): Promise<SessionType>;
    findUserByEmail(email: string): Promise<UserObjectType>;
    findUserByUsername(username: string): Promise<UserObjectType>;
    findUserById(userId: string): Promise<UserObjectType>;
    addEmail(userId: string, newEmail: string, verified: boolean): Promise<void>;
    removeEmail(userId: string, email: string): Promise<void>;
    verifyEmail(token: string): Promise<void>;
    resetPassword(token: string, newPassword: PasswordType): Promise<void>;
    setPassword(userId: string, newPassword: string): Promise<void>;
    setProfile(userId: string, profile: object): Promise<void>;
    updateProfile(userId: string, profile: object): Promise<object>;
    sendVerificationEmail(address: string): Promise<void>;
    sendResetPasswordEmail(address: string): Promise<void>;
    sendEnrollmentEmail(address: string): Promise<void>;
    private _on(eventName, callback);
    private _isTokenExpired(token, tokenRecord?);
    private _internalUserSanitizer(user);
    private _sanitizeUser(user);
    private _prepareMail(to, token, user, pathFragment, emailTemplate, from);
    private _defaultPrepareEmail(to, token, user, pathFragment, emailTemplate, from);
    private _defaultCreateTokenizedUrl(pathFragment, token);
    private _getFirstUserEmail(user, address);
    private _hashAndBcryptPassword(password);
    private _validateLoginWithField(fieldName, user);
    private _defaultPasswordAuthenticator(user, password);
}
declare const _default: AccountsServer;
export default _default;
